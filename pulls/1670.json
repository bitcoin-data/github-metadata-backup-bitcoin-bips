{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1670",
    "id": 2096169006,
    "node_id": "PR_kwDOAN28mc588QAu",
    "html_url": "https://github.com/bitcoin/bips/pull/1670",
    "diff_url": "https://github.com/bitcoin/bips/pull/1670.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1670.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1670/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/5a1459bb179acc259db41fc6d7965f830f22e147",
    "number": 1670,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "BIP-360: QuBit - Pay to Quantum Resistant Hash",
    "user": {
      "login": "cryptoquick",
      "id": 285690,
      "node_id": "MDQ6VXNlcjI4NTY5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cryptoquick",
      "html_url": "https://github.com/cryptoquick",
      "followers_url": "https://api.github.com/users/cryptoquick/followers",
      "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
      "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
      "repos_url": "https://api.github.com/users/cryptoquick/repos",
      "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This spent several months gathering feedback from the mailing list and from other advisors. This is hopefully polished enough to submit upstream.\r\n\r\nLet me know if you have any questions or feedback, and of course feel free to submit suggestions.\r\n\r\nThank you for your time.",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2024-09-27T16:08:30Z",
    "updated_at": "2025-03-05T19:23:03Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merged": false,
    "merge_commit_sha": "57464e4c899596db2d1ccbd4a46dea5017a3e3ee",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "cryptoquick:p2qrh",
      "ref": "p2qrh",
      "sha": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 800253367,
        "node_id": "R_kgDOL7Lltw",
        "name": "bips",
        "full_name": "cryptoquick/bips",
        "owner": {
          "login": "cryptoquick",
          "id": 285690,
          "node_id": "MDQ6VXNlcjI4NTY5MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cryptoquick",
          "html_url": "https://github.com/cryptoquick",
          "followers_url": "https://api.github.com/users/cryptoquick/followers",
          "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
          "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
          "repos_url": "https://api.github.com/users/cryptoquick/repos",
          "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/cryptoquick/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/cryptoquick/bips",
        "archive_url": "https://api.github.com/repos/cryptoquick/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/cryptoquick/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/cryptoquick/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/cryptoquick/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/cryptoquick/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/cryptoquick/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/cryptoquick/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/cryptoquick/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/cryptoquick/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/cryptoquick/bips/contributors",
        "deployments_url": "https://api.github.com/repos/cryptoquick/bips/deployments",
        "downloads_url": "https://api.github.com/repos/cryptoquick/bips/downloads",
        "events_url": "https://api.github.com/repos/cryptoquick/bips/events",
        "forks_url": "https://api.github.com/repos/cryptoquick/bips/forks",
        "git_commits_url": "https://api.github.com/repos/cryptoquick/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/cryptoquick/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/cryptoquick/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/cryptoquick/bips.git",
        "issue_comment_url": "https://api.github.com/repos/cryptoquick/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/cryptoquick/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/cryptoquick/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/cryptoquick/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/cryptoquick/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/cryptoquick/bips/languages",
        "merges_url": "https://api.github.com/repos/cryptoquick/bips/merges",
        "milestones_url": "https://api.github.com/repos/cryptoquick/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/cryptoquick/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/cryptoquick/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/cryptoquick/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:cryptoquick/bips.git",
        "stargazers_url": "https://api.github.com/repos/cryptoquick/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/cryptoquick/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/cryptoquick/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/cryptoquick/bips/subscription",
        "tags_url": "https://api.github.com/repos/cryptoquick/bips/tags",
        "teams_url": "https://api.github.com/repos/cryptoquick/bips/teams",
        "trees_url": "https://api.github.com/repos/cryptoquick/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/cryptoquick/bips.git",
        "hooks_url": "https://api.github.com/repos/cryptoquick/bips/hooks",
        "svn_url": "https://github.com/cryptoquick/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 4,
        "stargazers_count": 16,
        "watchers_count": 16,
        "size": 15761,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-02-24T17:40:26Z",
        "created_at": "2024-05-14T01:43:35Z",
        "updated_at": "2025-01-23T16:21:34Z",
        "allow_forking": true
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "8e59f7414bef6203809deaad972a3d7a3a0c2f7a",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5513,
        "stargazers_count": 9746,
        "watchers_count": 9746,
        "size": 16140,
        "default_branch": "master",
        "open_issues_count": 34,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-02-27T16:37:46Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2025-03-05T15:33:58Z",
        "allow_forking": true
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
      }
    },
    "author_association": "NONE",
    "draft": false,
    "additions": 646,
    "deletions": 0,
    "changed_files": 3,
    "commits": 42,
    "review_comments": 216,
    "comments": 55
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDFmYTI0ODUwNmUyYmVkZDdlY2Y4ZjA0ZDE3ODRlNjMxNDdmNWMxODE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1fa248506e2bedd7ecf8f04d1784e63147f5c181",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1fa248506e2bedd7ecf8f04d1784e63147f5c181",
      "tree": {
        "sha": "11f8127cae693badeca5371294c3e243ef32f86e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/11f8127cae693badeca5371294c3e243ef32f86e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 11f8127cae693badeca5371294c3e243ef32f86e\nparent a1be309f91f70b855626c823af317d9b1163309e\nauthor Hunter Trujillo <cryptoquick@pm.me> 1727453114 -0600\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1727453114 -0600\n\nQuBit - P2QRH spending rules - Final draft before submitting upstream to bitcoin/bips\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZvbXugAKCRBn2nwXlg36\nzz7XAP44btwYcvPB8NI+9Ep066TcquKQRAUKqwqkA39Yx8QjiQD+KH4qUCmIc9v+\nUc1AMC/TIM2KB7M+MuppEy3Di6zW+gI=\n=PuKN\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a1be309f91f70b855626c823af317d9b1163309e",
          "sha": "a1be309f91f70b855626c823af317d9b1163309e",
          "html_url": "https://github.com/bitcoin/bips/commit/a1be309f91f70b855626c823af317d9b1163309e"
        }
      ],
      "message": "QuBit - P2QRH spending rules - Final draft before submitting upstream to bitcoin/bips",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-09-27T16:05:14Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-09-27T16:05:14Z"
      },
      "sha": "1fa248506e2bedd7ecf8f04d1784e63147f5c181"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDZmNjdhM2Q2ODYwOTIxYmY4Njk0MDRlMTQyMzk1ODFjMTM5ZmY2OWQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6f67a3d6860921bf869404e14239581c139ff69d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6f67a3d6860921bf869404e14239581c139ff69d",
      "tree": {
        "sha": "aeeedde1962af0f58422ec867b9573cbada480d3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/aeeedde1962af0f58422ec867b9573cbada480d3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree aeeedde1962af0f58422ec867b9573cbada480d3\nparent 1fa248506e2bedd7ecf8f04d1784e63147f5c181\nauthor Hunter Trujillo <cryptoquick@pm.me> 1727454221 -0600\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1727454221 -0600\n\nAdd pqNTRUsign to .typos.toml.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZvbcDQAKCRBn2nwXlg36\nz2gpAP9qbYK4i8COGGKDQ8+KYAcZUmi9MkJ2pXJx8vkemaZHjQD9HDA9Pk9oBG9J\n8OiF0LC34jyufp6dEyBJzC+VaebQCgQ=\n=lJgQ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1fa248506e2bedd7ecf8f04d1784e63147f5c181",
          "sha": "1fa248506e2bedd7ecf8f04d1784e63147f5c181",
          "html_url": "https://github.com/bitcoin/bips/commit/1fa248506e2bedd7ecf8f04d1784e63147f5c181"
        }
      ],
      "message": "Add pqNTRUsign to .typos.toml.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-09-27T16:23:41Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-09-27T16:23:41Z"
      },
      "sha": "6f67a3d6860921bf869404e14239581c139ff69d"
    },
    {
      "event": "convert_to_draft",
      "id": 14434743535,
      "node_id": "CTDE_lADOAN28mc6YMAnczwAAAANcYLTv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14434743535",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-27T18:18:58Z"
    },
    {
      "event": "reviewed",
      "id": 2334631534,
      "node_id": "PRR_kwDOAN28mc6LJ6Zu",
      "url": null,
      "actor": null,
      "commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2334631534",
      "submitted_at": "2024-09-27T20:55:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "reviewed",
      "id": 2334635312,
      "node_id": "PRR_kwDOAN28mc6LJ7Uw",
      "url": null,
      "actor": null,
      "commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2334635312",
      "submitted_at": "2024-09-27T20:59:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "reviewed",
      "id": 2334683627,
      "node_id": "PRR_kwDOAN28mc6LKHHr",
      "url": null,
      "actor": null,
      "commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2334683627",
      "submitted_at": "2024-09-27T21:41:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "labeled",
      "id": 14437289209,
      "node_id": "LE_lADOAN28mc6YMAnczwAAAANch4z5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14437289209",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-27T22:04:43Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 2334779205,
      "node_id": "PRR_kwDOAN28mc6LKedF",
      "url": null,
      "actor": null,
      "commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Interesting (the question of resistance to quantum computing may have resurged lately with the publication of https://scottaaronson.blog/?p=8329, see also https://x.com/n1ckler/status/1839215426091249778).",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2334779205",
      "submitted_at": "2024-09-27T22:56:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14441868370,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANczWxS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14441868370",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b6ed2c319b72d76e0d1270aa9d963f7326fc412a",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/b6ed2c319b72d76e0d1270aa9d963f7326fc412a",
      "created_at": "2024-09-28T18:00:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14441871643,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANczXkb",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14441871643",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d6d15ad21c8cc20838b5bf5f5848833b47cbf83f",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/d6d15ad21c8cc20838b5bf5f5848833b47cbf83f",
      "created_at": "2024-09-28T18:01:52Z"
    },
    {
      "event": "reviewed",
      "id": 2335387538,
      "node_id": "PRR_kwDOAN28mc6LMy-S",
      "url": null,
      "actor": null,
      "commit_id": "d6d15ad21c8cc20838b5bf5f5848833b47cbf83f",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "kingcathy23",
        "id": 115429405,
        "node_id": "U_kgDOBuFQHQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/115429405?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kingcathy23",
        "html_url": "https://github.com/kingcathy23",
        "followers_url": "https://api.github.com/users/kingcathy23/followers",
        "following_url": "https://api.github.com/users/kingcathy23/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kingcathy23/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kingcathy23/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kingcathy23/subscriptions",
        "organizations_url": "https://api.github.com/users/kingcathy23/orgs",
        "repos_url": "https://api.github.com/users/kingcathy23/repos",
        "events_url": "https://api.github.com/users/kingcathy23/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kingcathy23/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2335387538",
      "submitted_at": "2024-09-28T18:10:24Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14441888946,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANczbyy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14441888946",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0608cc1036b80bb4a32e87f00ba599750a125859",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/0608cc1036b80bb4a32e87f00ba599750a125859",
      "created_at": "2024-09-28T18:10:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14441891650,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANczcdC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14441891650",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a595bf01255ba1461bbe67eaa22a97aac71abd48",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/a595bf01255ba1461bbe67eaa22a97aac71abd48",
      "created_at": "2024-09-28T18:12:10Z"
    },
    {
      "event": "review_requested",
      "id": 14441984555,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAANczzIr",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14441984555",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-28T18:55:48Z",
      "requested_reviewer": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 14441984579,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAANczzJD",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14441984579",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-28T18:55:49Z",
      "requested_reviewer": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14444058416,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANc7tcw",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14444058416",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eae4707e74805435e3e57d0bb1902d9313955ef3",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/eae4707e74805435e3e57d0bb1902d9313955ef3",
      "created_at": "2024-09-29T07:22:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14454505029,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANdjj5F",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14454505029",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "19d45929a2229b03d26503b6530eeed1524ff31f",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/19d45929a2229b03d26503b6530eeed1524ff31f",
      "created_at": "2024-09-30T11:37:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14454584693,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANdj3V1",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14454584693",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7f4456de30db2528bcfc1dddbbc3c7533169646a",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/7f4456de30db2528bcfc1dddbbc3c7533169646a",
      "created_at": "2024-09-30T11:42:50Z"
    },
    {
      "event": "reviewed",
      "id": 2338756440,
      "node_id": "PRR_kwDOAN28mc6LZpdY",
      "url": null,
      "actor": null,
      "commit_id": "7f4456de30db2528bcfc1dddbbc3c7533169646a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2338756440",
      "submitted_at": "2024-09-30T23:02:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQ4M2MyOWQ1OWI3ODQ0M2UyMGEwNDAzOTVjYTIzNzc3YmZjMzMyZjE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d83c29d59b78443e20a040395ca23777bfc332f1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d83c29d59b78443e20a040395ca23777bfc332f1",
      "tree": {
        "sha": "474b9cd02dfdee6322b2473c3ec493d21640d647",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/474b9cd02dfdee6322b2473c3ec493d21640d647"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 474b9cd02dfdee6322b2473c3ec493d21640d647\nparent 6f67a3d6860921bf869404e14239581c139ff69d\nauthor Hunter Trujillo <cryptoquick@pm.me> 1727546251 -0600\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1727744601 -0600\n\nQuBit - P2QRH\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZvtKWQAKCRBn2nwXlg36\nz9TMAP9FeMMUBGFOULw8dUir73X3RTbrNsLItKS6WnVlkIxK3wEA8ZAIxxsh7G0C\np12I+cGnzAJax9BrfFBM5H7ztSYEhgA=\n=AfXF\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6f67a3d6860921bf869404e14239581c139ff69d",
          "sha": "6f67a3d6860921bf869404e14239581c139ff69d",
          "html_url": "https://github.com/bitcoin/bips/commit/6f67a3d6860921bf869404e14239581c139ff69d"
        }
      ],
      "message": "QuBit - P2QRH",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-10-01T01:03:21Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-09-28T17:57:31Z"
      },
      "sha": "d83c29d59b78443e20a040395ca23777bfc332f1"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14464462151,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANeJi1H",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14464462151",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d83c29d59b78443e20a040395ca23777bfc332f1",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/d83c29d59b78443e20a040395ca23777bfc332f1",
      "created_at": "2024-10-01T01:03:25Z"
    },
    {
      "event": "commented",
      "id": 2386654766,
      "node_id": "IC_kwDOAN28mc6OQXYu",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2386654766",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T18:09:31Z",
      "updated_at": "2024-10-01T18:17:06Z",
      "author_association": "MEMBER",
      "body": "@cryptoquick Can you begin to write up the sections currently marked as TBD, along with a backwards compatibility section (to describe incompatibilities, severity, and suggest mitigations, where applicable/relevant)?  We've begun to reserve a range of BIP numbers for this topic, pending continued progress here.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2386654766",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 14477292662,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAANe6fR2",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14477292662",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T18:09:32Z"
    },
    {
      "event": "subscribed",
      "id": 14477292686,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAANe6fSO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14477292686",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T18:09:33Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGFlMDkzNmFlNmY0NmZhMTIzMDFiNTIzYzliMjZkZDRhZjk3NjlmMzE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ae0936ae6f46fa12301b523c9b26dd4af9769f31",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ae0936ae6f46fa12301b523c9b26dd4af9769f31",
      "tree": {
        "sha": "4bc48f6d2f84da5507e1c899be53bc7defb2bf8f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4bc48f6d2f84da5507e1c899be53bc7defb2bf8f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4bc48f6d2f84da5507e1c899be53bc7defb2bf8f\nparent d83c29d59b78443e20a040395ca23777bfc332f1\nauthor Jameson Lopp <jameson.lopp@gmail.com> 1727879443 -0400\ncommitter GitHub <noreply@github.com> 1727879443 -0400\n\ntypo fix",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJm/VkTCRC1aQ7uu5UhlAAAiaYQAJOcl/gN6ZKMloz3mmWC01qx\nQTiAGzs0MbaTxBz+ypbrf4mfWZxnQ0b5iGGBv4Pq24ithgLa7M5vPfoPlR1x43lO\nCTeHIJ3upxe4ft1a7YUJmjGK2vGxrZ+shzQ453HvMiTbCuneYyk/Xn5QijZbtgIu\nl1EnnPIF7Ozr4XbQg0Huwu9rZ4SRCQzJ9QkC/PJtDoN+cxPNiUvapnR7inMC4h3n\n+OTgvCZl+4TLZGkoeLprZOi+nhAmsZ+JJ902XrDUVGX4QwpI3VIE+kpOhwBan2Py\n9sHEbsmpIDKCxzIezhShqkddfDPKvJPD5iNJvNgXpBa8BgKlmIYRKXNLcaK/FTNj\n3R1hCqUlobXLsejY0lCXB3ZfpWl1tz0/9fzcy+WMt9R4wP9fj5QsiEkQUzdriX9Y\n12tA/Rba2avnG0KCjnopv7OLhw7SJ8Ry0KV4cy+eV3kORU0K43/4fEcK5jWIMelJ\no9ZPJ/+zVumR0LFkI4ARrYBdx1VYSDHLAPvHtcPVkfBhPUMa6OAHnIznL+f1mFPC\n9Ud2D4bxcM9KDbkf3q8G6FdKHkhH5ZXzoZ4WHRtolxD4td8ACP2uIW4szXenVmDc\ndorVf3RJijPsXDHbe84/KvAkXIpsB/vUBIrjeVGjDa0OrOcAhuzfH0sgeHIIbKKz\n2H/B0W0i5NnRGJnpocMT\n=/HPO\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d83c29d59b78443e20a040395ca23777bfc332f1",
          "sha": "d83c29d59b78443e20a040395ca23777bfc332f1",
          "html_url": "https://github.com/bitcoin/bips/commit/d83c29d59b78443e20a040395ca23777bfc332f1"
        }
      ],
      "message": "typo fix",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-10-02T14:30:43Z"
      },
      "author": {
        "name": "Jameson Lopp",
        "email": "jameson.lopp@gmail.com",
        "date": "2024-10-02T14:30:43Z"
      },
      "sha": "ae0936ae6f46fa12301b523c9b26dd4af9769f31"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQ4OWI3YzVjMDgyOGEyMzMwZThjYzI1NTIwMDZkMWNmZDBiN2IwZDI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d89b7c5c0828a2330e8cc2552006d1cfd0b7b0d2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d89b7c5c0828a2330e8cc2552006d1cfd0b7b0d2",
      "tree": {
        "sha": "4bc48f6d2f84da5507e1c899be53bc7defb2bf8f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4bc48f6d2f84da5507e1c899be53bc7defb2bf8f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4bc48f6d2f84da5507e1c899be53bc7defb2bf8f\nparent d83c29d59b78443e20a040395ca23777bfc332f1\nparent ae0936ae6f46fa12301b523c9b26dd4af9769f31\nauthor Hunter Beast <hunter@cryptoquick.com> 1728045574 -0600\ncommitter GitHub <noreply@github.com> 1728045574 -0600\n\nMerge pull request #13 from jlopp/patch-3\n\ntypo fix",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJm/+IGCRC1aQ7uu5UhlAAADL4QAGYta0qcfrZJY1KlxIzW10sb\ns0H9l5Uj/jYQvl4ze4NlKPI8RyAuFZQvxNC3MDoRJB1F7dnPDAGvy2eVLyiVKkPB\n6fMwI5VwwDsAsR73dEsSMj7p6H4AB+CdEwMTG8FtOzD6Zv+Emughu8H3GWqdzt4/\n1E4IftDNQLhBCgetsTbXqQFJCdmZAOmtb8zxS45oDWh70M7eS4Sv2kiT2RELQdXi\nA6tB9Xi02ctmTTz8Tj0O4uz2dRtLoZrFspmcO2bV4svxc8rYGMPKfu2Yp9zb6UT2\nItydCZR6zJPnfTtuEuHm7wb6ltITBOdoGROvciWTbiMezxhLzltHDVAXMUcb4h6s\nLq6EHX4PqdRTOmYqF6++RpS01riD1rE6M/nTpleWBAjl8npd4ZSZOLHfo1aMbgAa\nbtTc9MH2JMWEAk2lDN7olvrS/2X2j83zgJC6kYNVRUJYKEuSx9G7im1j7dOF40+q\nECjvLWhBy1mPo2fEmq7OikKJRKqqbX13KMfu7Abo7s21zeuA133taxZDNqNMuNly\nauiBt/PBazoTNCyVSqQIsRQ6tGqERARh9dfwO3Ql2Ob1vkp/4Z0Xg8ukgw0kisHc\nL9TMyOEB2kvNE666FudmI916UaEsgVhy10fqeRnOLeT50gd8HMsLL1H5WvMaeMKM\no8LdN4LcwFVIvdYefL0P\n=wBbT\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d83c29d59b78443e20a040395ca23777bfc332f1",
          "sha": "d83c29d59b78443e20a040395ca23777bfc332f1",
          "html_url": "https://github.com/bitcoin/bips/commit/d83c29d59b78443e20a040395ca23777bfc332f1"
        },
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ae0936ae6f46fa12301b523c9b26dd4af9769f31",
          "sha": "ae0936ae6f46fa12301b523c9b26dd4af9769f31",
          "html_url": "https://github.com/bitcoin/bips/commit/ae0936ae6f46fa12301b523c9b26dd4af9769f31"
        }
      ],
      "message": "Merge pull request #13 from jlopp/patch-3\n\ntypo fix",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-10-04T12:39:34Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2024-10-04T12:39:34Z"
      },
      "sha": "d89b7c5c0828a2330e8cc2552006d1cfd0b7b0d2"
    },
    {
      "event": "labeled",
      "id": 14564663989,
      "node_id": "LE_lADOAN28mc6YMAnczwAAAANkHyK1",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14564663989",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-09T01:46:46Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "commented",
      "id": 2427012091,
      "node_id": "IC_kwDOAN28mc6QqUP7",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2427012091",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-21T15:27:42Z",
      "updated_at": "2024-10-21T15:27:42Z",
      "author_association": "MEMBER",
      "body": "@cryptoquick ping for an update here. Have you seen https://groups.google.com/g/bitcoindev/c/p8xz08YTvkw / https://github.com/chucrut/bips/blob/master/bip-xxxx.md? It may be interesting to review each other and possibly collaborate.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2427012091",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 14767024678,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAANwLuom",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14767024678",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-21T15:27:45Z"
    },
    {
      "event": "subscribed",
      "id": 14767024706,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAANwLupC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14767024706",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-21T15:27:45Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI0YzMyOWI1NWI5MjA1Zjc4YTY4OTZlZDA2MjcyMjhjYjViYWFmYmQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b4c329b55b9205f78a6896ed0627228cb5baafbd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b4c329b55b9205f78a6896ed0627228cb5baafbd",
      "tree": {
        "sha": "8588a08ad69b39ed81fc9922f6ea871d96db6903",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8588a08ad69b39ed81fc9922f6ea871d96db6903"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8588a08ad69b39ed81fc9922f6ea871d96db6903\nparent d89b7c5c0828a2330e8cc2552006d1cfd0b7b0d2\nauthor Hunter Trujillo <cryptoquick@pm.me> 1729526490 -0600\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1729532372 -0600\n\nQuBit - P2QRH spending rules\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZxaR1AAKCRBn2nwXlg36\nz6WRAQCZZtzs3+2a33hJc3a8EV3RW4y0NRosTqNKoB3TlPRE1QD7B+Ej9FXAZnZl\nZgLmcE+Z1OQNoBzZA40f/L+M27lH9QI=\n=/b0l\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d89b7c5c0828a2330e8cc2552006d1cfd0b7b0d2",
          "sha": "d89b7c5c0828a2330e8cc2552006d1cfd0b7b0d2",
          "html_url": "https://github.com/bitcoin/bips/commit/d89b7c5c0828a2330e8cc2552006d1cfd0b7b0d2"
        }
      ],
      "message": "QuBit - P2QRH spending rules",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-10-21T17:39:32Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-10-21T16:01:30Z"
      },
      "sha": "b4c329b55b9205f78a6896ed0627228cb5baafbd"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14768878416,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANwSzNQ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14768878416",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b4c329b55b9205f78a6896ed0627228cb5baafbd",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/b4c329b55b9205f78a6896ed0627228cb5baafbd",
      "created_at": "2024-10-21T17:39:38Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDUzZDQ5N2UzNzZmNDk5YzIxMGJjZTQ5ODBlMjhkOGY1MDNiOWEyYjk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/53d497e376f499c210bce4980e28d8f503b9a2b9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/53d497e376f499c210bce4980e28d8f503b9a2b9",
      "tree": {
        "sha": "62bce3932801448b062bbeaa49ee5a563de67ca7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/62bce3932801448b062bbeaa49ee5a563de67ca7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b4c329b55b9205f78a6896ed0627228cb5baafbd",
          "sha": "b4c329b55b9205f78a6896ed0627228cb5baafbd",
          "html_url": "https://github.com/bitcoin/bips/commit/b4c329b55b9205f78a6896ed0627228cb5baafbd"
        }
      ],
      "message": "Adds clarity and brevity",
      "committer": {
        "name": "Kyle Crews",
        "email": "kylecrews@Kyles-Mac-Studio.local",
        "date": "2024-11-05T15:12:26Z"
      },
      "author": {
        "name": "Kyle Crews",
        "email": "kylecrews@Kyles-Mac-Studio.local",
        "date": "2024-11-05T15:12:26Z"
      },
      "sha": "53d497e376f499c210bce4980e28d8f503b9a2b9"
    },
    {
      "event": "reviewed",
      "id": 2430740303,
      "node_id": "PRR_kwDOAN28mc6Q4idP",
      "url": null,
      "actor": null,
      "commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "This is a quick first skim. Seems fine so far, I left some comments. The Motivation and Rationale seem a bit long, perhaps some of that could be split out into other sections like Related Work, Backward Compatibility, or just tightened a bit.\r\n\r\nI’m wondering whether introducing four different signature schemes at once may be a bit too ambitious.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2430740303",
      "submitted_at": "2024-11-12T22:09:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDBhMmVkNGEyM2YyMzJhYmRiYjA5ZGI5YzU1ZWRiNWY0ODlmMDIwYmM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0a2ed4a23f232abdbb09db9c55edb5f489f020bc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0a2ed4a23f232abdbb09db9c55edb5f489f020bc",
      "tree": {
        "sha": "40868dcea9cf7b1931315f6f48bb7333f2f14e04",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/40868dcea9cf7b1931315f6f48bb7333f2f14e04"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 40868dcea9cf7b1931315f6f48bb7333f2f14e04\nparent 53d497e376f499c210bce4980e28d8f503b9a2b9\nauthor Hunter Beast <hunter@cryptoquick.com> 1732151732 -0700\ncommitter GitHub <noreply@github.com> 1732151732 -0700\n\nApply suggestions from review\n\nCo-authored-by: Mark \"Murch\" Erhardt <murch@murch.one>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnPom0CRC1aQ7uu5UhlAAAFVIQAKryJaB3tksL2GR0awx/bz+H\nhhKcdSoAWVW2lhmgmKnrjhsmPyah8HULUWSXR4bdoNqfwZEO4g7FHYv+lkpBEU+d\n8YVsyZMyPL/lsIur4+BTgblbunsxCmIBMaGo9tycX9CbsvWJ9FzrHVp6Lq7SOHSc\nmbxCPnSBUDBEOnGlPUKhRQa3vny64ogyxEgcPvQAea7QDIsivpl17bGcdQZwlvLQ\nySCOXJM6Qa6nsdc3SR0uivXGuLeoGly4i4IPk5ddou5I+G7QAgx1VBMrfCwdIp69\np3JsgrhRE5nzNLT6AYa86RgpNfGjQLLRzGOOBl6hpOOxCSNNDaCChf/cRJ9Wtjb0\nWIDm/m/Ttg+uSc2RXNRHIKgUJic7MeHSQtO316W3VeiFLOO+Y1fDrvSvPAOJEQeZ\nHqw8AotMfNyw5D7VXICDVQmXFERsKUhtK7nXTkqVCPAIVMInIeNbZdwkfb4aVyxp\nY16qWavyQyiZrfI7DNm0OnP4q14j0C4vtT3hR2Zml7Udz8Vuh6YXXtyUnnW53ySH\n959uUKDfjHHyLLs825QPG/xBOb/oPgTZeod5thlHLlcmR0d7Ej1ufWyF/o8mav8G\nmPQhaP+jFQTnGh3hdzqLdgJaWc5Yi4xDhmXmLxszx/FXz8REW41ON0eX1h/Knbqo\nD1nVb3ezdqeAfhTcUyt+\n=uACu\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/53d497e376f499c210bce4980e28d8f503b9a2b9",
          "sha": "53d497e376f499c210bce4980e28d8f503b9a2b9",
          "html_url": "https://github.com/bitcoin/bips/commit/53d497e376f499c210bce4980e28d8f503b9a2b9"
        }
      ],
      "message": "Apply suggestions from review\n\nCo-authored-by: Mark \"Murch\" Erhardt <murch@murch.one>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-11-21T01:15:32Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2024-11-21T01:15:32Z"
      },
      "sha": "0a2ed4a23f232abdbb09db9c55edb5f489f020bc"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15374587229,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOUZZVd",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15374587229",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e64d7e8471feba784b2d240a42f6bee1e55a3971",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/e64d7e8471feba784b2d240a42f6bee1e55a3971",
      "created_at": "2024-11-21T01:20:07Z"
    },
    {
      "event": "review_requested",
      "id": 15374591727,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAAOUZabv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15374591727",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T01:20:56Z",
      "requested_reviewer": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2489877214,
      "node_id": "IC_kwDOAN28mc6UaILe",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2489877214",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T01:27:07Z",
      "updated_at": "2024-11-21T01:27:07Z",
      "author_association": "NONE",
      "body": "> I’m wondering whether introducing four different signature schemes at once may be a bit too ambitious.\r\n\r\nSPHINCS and Crystals-DILITHIUM are approved by NIST. Antoine Riard specifically requested the inclusion of SPHINCS on the mailing list, and the alternative proposal implements Crystals-DILITHIUM. FALCON is likely to be approved as as a FIPS standard as well, but it's not yet official. SQIsign is very attractive for its small public key and signature sizes, but it is only just recently under review.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2489877214",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGM5MmE5YjBlNGRiN2U0NmZmMTFjN2ZjOWVmZDMyYzk5MWU2MzUwNzQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c92a9b0e4db7e46ff11c7fc9efd32c991e635074",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c92a9b0e4db7e46ff11c7fc9efd32c991e635074",
      "tree": {
        "sha": "dac782d576ab37de25d9846e30efc07123b65bff",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/dac782d576ab37de25d9846e30efc07123b65bff"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree dac782d576ab37de25d9846e30efc07123b65bff\nparent 0a2ed4a23f232abdbb09db9c55edb5f489f020bc\nauthor Hunter Trujillo <cryptoquick@pm.me> 1732151879 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1732152510 -0700\n\nQuBit - P2QRH spending rules\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZz6MvgAKCRBn2nwXlg36\nz0syAQCl5xmWr8WPJuL8tSGbE0Rvh95AaT3uYyh8DJcTfy2FWgD+ILTVE+Rhgp5U\nMHMDRrLUWhYxZqidQW91RsPTJFezCQ4=\n=iMjP\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0a2ed4a23f232abdbb09db9c55edb5f489f020bc",
          "sha": "0a2ed4a23f232abdbb09db9c55edb5f489f020bc",
          "html_url": "https://github.com/bitcoin/bips/commit/0a2ed4a23f232abdbb09db9c55edb5f489f020bc"
        }
      ],
      "message": "QuBit - P2QRH spending rules",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-11-21T01:28:30Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-11-21T01:17:59Z"
      },
      "sha": "c92a9b0e4db7e46ff11c7fc9efd32c991e635074"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15374637090,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOUZlgi",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15374637090",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c92a9b0e4db7e46ff11c7fc9efd32c991e635074",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/c92a9b0e4db7e46ff11c7fc9efd32c991e635074",
      "created_at": "2024-11-21T01:28:34Z"
    },
    {
      "event": "unlabeled",
      "id": 15407804193,
      "node_id": "UNLE_lADOAN28mc6YMAnczwAAAAOWYG8h",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15407804193",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-23T13:49:11Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGUxYjcwMDdjZDkzMDI3NDA5YWE5OWE0M2NlMmUzNTg1NDc3MTA4OGI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e1b7007cd93027409aa99a43ce2e35854771088b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e1b7007cd93027409aa99a43ce2e35854771088b",
      "tree": {
        "sha": "c8542fca66dd9bba46855c1ec56eda92cf3ac0a7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c8542fca66dd9bba46855c1ec56eda92cf3ac0a7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c8542fca66dd9bba46855c1ec56eda92cf3ac0a7\nparent c92a9b0e4db7e46ff11c7fc9efd32c991e635074\nauthor Hunter Beast <hunter@cryptoquick.com> 1733265398 -0700\ncommitter GitHub <noreply@github.com> 1733265398 -0700\n\nAdd details on attestation structure and parsing. (#14)\n\n* Add details on attestation structure and parsing.\r\n\r\n* bip-p2qrh.mediawiki:  Separating discussion about Grovers algorithm into\r\nits own section.\r\n\r\n* Update phrasing and formatting.\r\n\r\n* Kyle fixes\r\n\r\n* Add Jeff Bride to acknowledgments\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Kyle Crews <92337423+CrewsControlSolutions@users.noreply.github.com>\r\n\r\n* Updates to clarity.\r\n\r\n---------\r\n\r\nCo-authored-by: jbride <jbride2001@yahoo.com>\r\nCo-authored-by: Kyle Crews <92337423+CrewsControlSolutions@users.noreply.github.com>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnT4f2CRC1aQ7uu5UhlAAASkcQAHQ2cGwXIqAagM8ll7r9eQtF\ngtSISu83fVy2ntqlZyPqOWbYeCz2wziZKHtRIVDirG2+mvzMCqMe9+t86BcsdXSj\n9XZKFIXBeuEjph1GzGuvyejb1yrNOhWAoPZ/V/q1wlnYkfuTa2Kiji9rDiabet1J\nWPNoO3DzwVlmo94oiht0Jn9hLt+dXKf5giRPCPm15bbGZWx/IJ2DotmpNDO7HgCF\nwFn6a6IJLzy9ij1ZEBTstL7jDR3EeTDk6SbTR+9ITujc2SEGqdKDx4mAPh1N1Fbi\ns5K2lD6w2V0r1EYAyw29EC+idfR85BhlSO5yueTJ72Pn86lOiGwJNu6VE4GGzwVP\nSylZoaNwYiUzEIo7r4vp73cCzUqLFOdFRq1SdPHe/zDpP0tvH6hQeqZCMBJRnCF1\nmPUahvPyBUnAXH06sTxdPtEupJ/pl6X8PsdmNwOFGZBkzL1iL3x+R0LlCivJhpzl\nAi5yoc9mWueZ7pFX+3pihAk4BbinrJ0ub6sCXAtri/iOXeWx+r+oZoqPncvZXozk\ntapzDBjMRVoLdwXldRQzWsE4cUjMGU7uI4U6M6XyZEWufjAenrtAvgFHvSp0eLLG\nl//syhU+kV7nbsAlM7gqQEDgh+iM+/mAAVvP6NDvWmpeexPyU9TZTo588oW5e8bm\nNZJpfS5SAepzrc9/yKgr\n=fw9x\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c92a9b0e4db7e46ff11c7fc9efd32c991e635074",
          "sha": "c92a9b0e4db7e46ff11c7fc9efd32c991e635074",
          "html_url": "https://github.com/bitcoin/bips/commit/c92a9b0e4db7e46ff11c7fc9efd32c991e635074"
        }
      ],
      "message": "Add details on attestation structure and parsing. (#14)\n\n* Add details on attestation structure and parsing.\r\n\r\n* bip-p2qrh.mediawiki:  Separating discussion about Grovers algorithm into\r\nits own section.\r\n\r\n* Update phrasing and formatting.\r\n\r\n* Kyle fixes\r\n\r\n* Add Jeff Bride to acknowledgments\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Kyle Crews <92337423+CrewsControlSolutions@users.noreply.github.com>\r\n\r\n* Updates to clarity.\r\n\r\n---------\r\n\r\nCo-authored-by: jbride <jbride2001@yahoo.com>\r\nCo-authored-by: Kyle Crews <92337423+CrewsControlSolutions@users.noreply.github.com>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-12-03T22:36:38Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2024-12-03T22:36:38Z"
      },
      "sha": "e1b7007cd93027409aa99a43ce2e35854771088b"
    },
    {
      "event": "commented",
      "id": 2515698597,
      "node_id": "IC_kwDOAN28mc6V8oOl",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2515698597",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-03T22:40:35Z",
      "updated_at": "2024-12-03T22:40:35Z",
      "author_association": "NONE",
      "body": "Just a note: The content of the BIP should be nearing its final state. Feel free to leave feedback while I work on the test vectors, it'll take me a while since I'm also making changes to rust-bitcoin in order to support P2QRH and transaction attestation, but I don't expect any major changes from my side at this point.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2515698597",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDYwZDcyOTQyYWEyM2E3NjBhNWM1MGRmNDhiODZmODhjNzFkMDkxNWQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/60d72942aa23a760a5c50df48b86f88c71d0915d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/60d72942aa23a760a5c50df48b86f88c71d0915d",
      "tree": {
        "sha": "5ce28f992ffb5d677afd5f9a449bbec0438d7de4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5ce28f992ffb5d677afd5f9a449bbec0438d7de4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5ce28f992ffb5d677afd5f9a449bbec0438d7de4\nparent e1b7007cd93027409aa99a43ce2e35854771088b\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733268141 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733268141 -0700\n\nMediaWiki formatting fixes\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ0+SrQAKCRBn2nwXlg36\nz1ysAQCE3yGVdh0DV+PHcQnnqpinrBSe3wTzkvReOVKoGMNMNgD+KbTCvJYcHrFI\nf30pSJKSGvMN88nso9I70cDnoQLmbwI=\n=D2M8\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e1b7007cd93027409aa99a43ce2e35854771088b",
          "sha": "e1b7007cd93027409aa99a43ce2e35854771088b",
          "html_url": "https://github.com/bitcoin/bips/commit/e1b7007cd93027409aa99a43ce2e35854771088b"
        }
      ],
      "message": "MediaWiki formatting fixes",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-03T23:22:21Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-03T23:22:21Z"
      },
      "sha": "60d72942aa23a760a5c50df48b86f88c71d0915d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15546592531,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOepi0T",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15546592531",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9159aa93dc4bb672a192201686848fa567176334",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/9159aa93dc4bb672a192201686848fa567176334",
      "created_at": "2024-12-05T16:06:58Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDJkMDk4ZDlhZGYxMTkyOTIzNDI1ODc5M2UyMjc3NmEwZTJkZGI5ZmE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2d098d9adf11929234258793e22776a0e2ddb9fa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2d098d9adf11929234258793e22776a0e2ddb9fa",
      "tree": {
        "sha": "5bd8c4f11544b2032957242bc081d8319dd5d6ee",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5bd8c4f11544b2032957242bc081d8319dd5d6ee"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5bd8c4f11544b2032957242bc081d8319dd5d6ee\nparent 60d72942aa23a760a5c50df48b86f88c71d0915d\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733414668 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733414945 -0700\n\nMediaWiki formatting fixes\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1HQIQAKCRBn2nwXlg36\nz6hGAP4tQmQfVf+G80OTD5T19X4+iKLnT+uliS/XuyFRUWZx8gEA0EkduBVwSKc7\nZTvFU3wyI3tkt/YXv8R7Jf3Ci3ZnDAE=\n=r4Wy\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/60d72942aa23a760a5c50df48b86f88c71d0915d",
          "sha": "60d72942aa23a760a5c50df48b86f88c71d0915d",
          "html_url": "https://github.com/bitcoin/bips/commit/60d72942aa23a760a5c50df48b86f88c71d0915d"
        }
      ],
      "message": "MediaWiki formatting fixes",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-05T16:09:05Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-05T16:04:28Z"
      },
      "sha": "2d098d9adf11929234258793e22776a0e2ddb9fa"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15546626140,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOeprBc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15546626140",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2d098d9adf11929234258793e22776a0e2ddb9fa",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/2d098d9adf11929234258793e22776a0e2ddb9fa",
      "created_at": "2024-12-05T16:09:08Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGVkNGU4NjI3ZTY3Yzg0MDRjMjk3ZTQ1MWZhMzYyMGRkOGY4NWU1YTY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ed4e8627e67c8404c297e451fa3620dd8f85e5a6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ed4e8627e67c8404c297e451fa3620dd8f85e5a6",
      "tree": {
        "sha": "14b5c504e166ea833538928eb9b38ad6a20f3357",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/14b5c504e166ea833538928eb9b38ad6a20f3357"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 14b5c504e166ea833538928eb9b38ad6a20f3357\nparent 2d098d9adf11929234258793e22776a0e2ddb9fa\nauthor Hunter Beast <hunter@cryptoquick.com> 1733498984 -0700\ncommitter GitHub <noreply@github.com> 1733498984 -0700\n\nMediaWiki fixes, remove redundant sections. (#16)\n\n* MediaWiki fixes, remove redundant sections.\r\n\r\n* Fix link format check",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnUxhoCRC1aQ7uu5UhlAAAd/oQAByqUoow4on0izhnUKp7Fmhh\nwA5cSuKrDY55+Vz47Q+NKwyuWeISGSj2x9/sP7cwCFVPSNG9pwSQ+ooIIi8S5xTc\nGDN1nPT+46BPfhlQFCSFK0iSvYGIcDMZUm+NXZXGMgNdRXaYvufp0ZqCY2IYue/m\n02SSX9b8jQSCx20hdWTHcBfuga+JFTVOrZ1K/q9aNcWULP+1zvP2omImtV2yyXVF\ni1+m9e/b4+zKr2p2s3ze1WlTZ6dcFvWqXvgERBRU2Ra9+6Bb+YqNkveqeR9bB8VQ\nxdFF5JiTfJgy/zgPWDA/7zeAqDz58OqEkv1I9+SwsXv5gPtXBQLRnH5gwZQpwYuK\nwtp0+f2j6de0aXqSRyV1gSXITb98DT0lU0UzOp35AsHF04VqCmWt9lA/kFLj3kXI\nLRTOTKjH+LSKOxwdQCF2mBA0oJTLNJkCQ96VAbH7+HhPkohgnUjpjnI/r3LptJGK\nXGbxAaq84aV5cSZZiv4z+KqG3r/oUhylCx6egymWqs4FETXOgx/0xGkrPVy0+Pji\n1n5blCPw30hnPwC5CcblACRZGhXHYXK9lhiZ1orqYaoi6IeTB9xwWF3oHuXy+2XU\nV9QvHuvmXk3JD/c1AtqctkKMKYqrvTxH/QJLdVlIonFw1VgwV6OZhePJpnYwE7D/\nYyD2RpKYiEUcRnVK0X7R\n=Hrnl\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2d098d9adf11929234258793e22776a0e2ddb9fa",
          "sha": "2d098d9adf11929234258793e22776a0e2ddb9fa",
          "html_url": "https://github.com/bitcoin/bips/commit/2d098d9adf11929234258793e22776a0e2ddb9fa"
        }
      ],
      "message": "MediaWiki fixes, remove redundant sections. (#16)\n\n* MediaWiki fixes, remove redundant sections.\r\n\r\n* Fix link format check",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-12-06T15:29:44Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2024-12-06T15:29:44Z"
      },
      "sha": "ed4e8627e67c8404c297e451fa3620dd8f85e5a6"
    },
    {
      "event": "commented",
      "id": 2523737288,
      "node_id": "IC_kwDOAN28mc6WbSzI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2523737288",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T16:57:28Z",
      "updated_at": "2024-12-06T16:57:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hey @cryptoquick, just wanted to mention a few quick things: \r\n\r\n1. While I would consider test vectors and reference implementation necessary for a proposal to move to the \"Proposed\" status, their lack would not necessarily prevent something to be considered for getting a number and be merged as draft.\r\n2. I have a formatting request: Having lines with over 1000 characters makes it really hard to see what changed between pushes and to give review suggestions. May I suggest that you break the lines in text blocks at e.g. 120 characters?\r\nAs an example from my own draft, it’s just much easier to see what exactly was changed when the lines are shorter: \r\n![image](https://github.com/user-attachments/assets/c5fd9fd0-c5f1-4654-8682-9e687017a340)\r\n3. This PR is currently marked as \"draft\", please click \"ready for review\" if/when you want editors to take a look. :)",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2523737288",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 15563201881,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOfo51Z",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15563201881",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T16:57:30Z"
    },
    {
      "event": "subscribed",
      "id": 15563201912,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOfo514",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15563201912",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T16:57:30Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGYyNDI2YzY2NTY5YTkzYjM5M2RhMGY5YTlkNTM1MTg0MzA2NjQwZDE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f2426c66569a93b393da0f9a9d535184306640d1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f2426c66569a93b393da0f9a9d535184306640d1",
      "tree": {
        "sha": "abdeec4b9e9f6c33a608ba3ab339435a4043bfe6",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/abdeec4b9e9f6c33a608ba3ab339435a4043bfe6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree abdeec4b9e9f6c33a608ba3ab339435a4043bfe6\nparent ed4e8627e67c8404c297e451fa3620dd8f85e5a6\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733504907 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733504907 -0700\n\nUpdate title and formatting.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1MviwAKCRBn2nwXlg36\nz8WrAQCHKne3KsQzv+GnNoNLln0vEDYsB9hyEY8ziUJ+WY5KBgD8CEG4gGVK1iJ0\nbM7ghIHiVKj9WCGMEAljuNQyVkxo3wk=\n=jYwX\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ed4e8627e67c8404c297e451fa3620dd8f85e5a6",
          "sha": "ed4e8627e67c8404c297e451fa3620dd8f85e5a6",
          "html_url": "https://github.com/bitcoin/bips/commit/ed4e8627e67c8404c297e451fa3620dd8f85e5a6"
        }
      ],
      "message": "Update title and formatting.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T17:08:27Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T17:08:27Z"
      },
      "sha": "f2426c66569a93b393da0f9a9d535184306640d1"
    },
    {
      "event": "ready_for_review",
      "id": 15563361180,
      "node_id": "RFRE_lADOAN28mc6YMAnczwAAAAOfpguc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15563361180",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T17:09:18Z"
    },
    {
      "event": "commented",
      "id": 2523763261,
      "node_id": "IC_kwDOAN28mc6WbZI9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2523763261",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T17:09:32Z",
      "updated_at": "2024-12-06T17:09:32Z",
      "author_association": "NONE",
      "body": "@murchandamus Done!",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2523763261",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 15563364074,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOfphbq",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15563364074",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T17:09:34Z"
    },
    {
      "event": "subscribed",
      "id": 15563364086,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOfphb2",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15563364086",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T17:09:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15563957756,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOfryX8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15563957756",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c006a0b71d1c9095f6b640dc34b5a1f560f7d3aa",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/c006a0b71d1c9095f6b640dc34b5a1f560f7d3aa",
      "created_at": "2024-12-06T17:55:08Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDJlNGFkODExY2ZiMDQ4ZDgzOTk3MzBmZGUxNWYzZjcwMTk2OWI0ZTE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2e4ad811cfb048d8399730fde15f3f701969b4e1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2e4ad811cfb048d8399730fde15f3f701969b4e1",
      "tree": {
        "sha": "9e9d84e8007941711b90b0810aff2ed052500b90",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9e9d84e8007941711b90b0810aff2ed052500b90"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9e9d84e8007941711b90b0810aff2ed052500b90\nparent f2426c66569a93b393da0f9a9d535184306640d1\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733507341 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733508272 -0700\n\nMore wrestling with MediaWiki formatting...\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1M8sAAKCRBn2nwXlg36\nz8YIAP9csIdmooSitPsp+GeEEKZnJNNxJmkDDWkQSxIa+BiRbgEAx+Y+t288RISE\nUrxKEXrJBv23EUBfJqjcO8w8Ogg3LgY=\n=J0M3\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f2426c66569a93b393da0f9a9d535184306640d1",
          "sha": "f2426c66569a93b393da0f9a9d535184306640d1",
          "html_url": "https://github.com/bitcoin/bips/commit/f2426c66569a93b393da0f9a9d535184306640d1"
        }
      ],
      "message": "More wrestling with MediaWiki formatting...",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:04:32Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T17:49:01Z"
      },
      "sha": "2e4ad811cfb048d8399730fde15f3f701969b4e1"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15564067883,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOfsNQr",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15564067883",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2e4ad811cfb048d8399730fde15f3f701969b4e1",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/2e4ad811cfb048d8399730fde15f3f701969b4e1",
      "created_at": "2024-12-06T18:04:37Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDk5MzUwMDVlZmI4MTRiNjc0YjMxNDZlYTdmYjFiYjM2OTgyYzlmYjg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9935005efb814b674b3146ea7fb1bb36982c9fb8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9935005efb814b674b3146ea7fb1bb36982c9fb8",
      "tree": {
        "sha": "3fea6f6972daa8d9214b75872171ccca77186ba5",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3fea6f6972daa8d9214b75872171ccca77186ba5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3fea6f6972daa8d9214b75872171ccca77186ba5\nparent 2e4ad811cfb048d8399730fde15f3f701969b4e1\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733508476 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733508476 -0700\n\nI give up. Removing code and pre blocks.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1M9fAAKCRBn2nwXlg36\nz3eqAQCt4tYRaMbf/o2mtlzsE2KfvIoVJXrUYFz4oo0H00aTwQEA3gve34c6kNzp\nGYzcCaGGzOA25xcDuLdmZujKBqDjVAY=\n=9zOv\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2e4ad811cfb048d8399730fde15f3f701969b4e1",
          "sha": "2e4ad811cfb048d8399730fde15f3f701969b4e1",
          "html_url": "https://github.com/bitcoin/bips/commit/2e4ad811cfb048d8399730fde15f3f701969b4e1"
        }
      ],
      "message": "I give up. Removing code and pre blocks.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:07:56Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:07:56Z"
      },
      "sha": "9935005efb814b674b3146ea7fb1bb36982c9fb8"
    },
    {
      "event": "reviewed",
      "id": 2485453691,
      "node_id": "PRR_kwDOAN28mc6UJQN7",
      "url": null,
      "actor": null,
      "commit_id": "9935005efb814b674b3146ea7fb1bb36982c9fb8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I started taking a look, but two additional commits have been made since. I’ll try to take a look next week.\r\n\r\nThe line break suggestion was meant mostly as a way to make diffs more readable and make it easier to make suggestions in the review. It’s not a fixed rule, so if it breaks stuff, feel free to e.g. leave table rows or links in a single line even if it’s longer than other stuff.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2485453691",
      "submitted_at": "2024-12-06T18:12:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGNjNDdmOWUzNzBiM2RmNmViNmFkMjA1OTJiNWQzZjczOGM1M2Q1MzI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cc47f9e370b3df6eb6ad20592b5d3f738c53d532",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/cc47f9e370b3df6eb6ad20592b5d3f738c53d532",
      "tree": {
        "sha": "1b072ab494d4df9378c6c58996bb152be6475308",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1b072ab494d4df9378c6c58996bb152be6475308"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1b072ab494d4df9378c6c58996bb152be6475308\nparent 9935005efb814b674b3146ea7fb1bb36982c9fb8\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733508809 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733508809 -0700\n\nMore formatting fixes.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1M+yQAKCRBn2nwXlg36\nz+eVAP430ox2eJr379G3bHYQ5MFDkJA66nyB50Kgb/pdflqeXQD+OQzh8S77J0iE\nKahVkt6a0l/oAO9uNbZkROqMwmUYLQI=\n=4ZEn\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9935005efb814b674b3146ea7fb1bb36982c9fb8",
          "sha": "9935005efb814b674b3146ea7fb1bb36982c9fb8",
          "html_url": "https://github.com/bitcoin/bips/commit/9935005efb814b674b3146ea7fb1bb36982c9fb8"
        }
      ],
      "message": "More formatting fixes.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:13:29Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:13:29Z"
      },
      "sha": "cc47f9e370b3df6eb6ad20592b5d3f738c53d532"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGZmNGQyYzI4MTk4ZmIzNjNhOTFjZmNhOTFmNDU2YWY2ZjgxYWYwNDk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ff4d2c28198fb363a91cfca91f456af6f81af049",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ff4d2c28198fb363a91cfca91f456af6f81af049",
      "tree": {
        "sha": "72c84606401e46e450e6d2a81748577d8ac4408a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/72c84606401e46e450e6d2a81748577d8ac4408a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 72c84606401e46e450e6d2a81748577d8ac4408a\nparent cc47f9e370b3df6eb6ad20592b5d3f738c53d532\nauthor Hunter Beast <hunter@cryptoquick.com> 1733509628 -0700\ncommitter GitHub <noreply@github.com> 1733509628 -0700\n\nApply suggestions from code review\n\nCo-authored-by: Mark \"Murch\" Erhardt <murch@murch.one>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnU0H9CRC1aQ7uu5UhlAAA+kAQAGT8btAt4UKL5vS6pBiJm3cV\nQp60RqTPKUN7vI9zSNVNajVQFy54J77EdokEu6+gD+nsxLA2QEoxe1lGgtCjvzH1\nc/6mR7VHDK3hA4E0Y9or55MU/nn2IJDj9D2mpD6XJbAxWP2IqaDnYDPb27S18bCj\n5DNVnodBltSKLn0pGn0VUt1mcV1Nv2vt5wr/hOO+2Z2KkEZFOE3Fv/o1uFTVLcX1\nqCjov79L2VsyNYW7MR8+348Qy9LcuLN0mDysYs8kFFMJM1crh8XOOsduULZwVcxQ\njCrJLauOL83U4bB+iKaQypJFktoDdG2M/HnT8/hwQmb9THQf7F1c/1tnKZmG2DFL\npECThIkmNe4Lfh7GMFfgg5AhEbasaSosFy/5eIrhUb72AvmBN5SRG8lcTA3sutqc\nTlR4Yero9pNVOr6r+0wtxh3M5HAtj2XcuA3zN2UOHrBzKRqJh7jSQ6n4Mt+gBSHo\nQQweooycv0QfxD3eGnS+jl2tyLhEPeKeBDbI0+UaWqKteFx2AirLXzDQwYq/0ueW\nWY8p3zOzWKWHhlbdp8/5RjvKPHIKwD5V54FO3SJl++3VAVigkAvnW4QajpNjzLC/\n0H2F87KixpAqOeK6oknkQE0WLpiQPTzy4sNRPrG65+EXvIch7MMK7izTbY9H66T6\nOnQT7whabSYfAd8U4me9\n=p20X\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cc47f9e370b3df6eb6ad20592b5d3f738c53d532",
          "sha": "cc47f9e370b3df6eb6ad20592b5d3f738c53d532",
          "html_url": "https://github.com/bitcoin/bips/commit/cc47f9e370b3df6eb6ad20592b5d3f738c53d532"
        }
      ],
      "message": "Apply suggestions from code review\n\nCo-authored-by: Mark \"Murch\" Erhardt <murch@murch.one>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-12-06T18:27:08Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2024-12-06T18:27:08Z"
      },
      "sha": "ff4d2c28198fb363a91cfca91f456af6f81af049"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGYyMDZiOTc0NWFmNTgyZjlkNjQ5Nzg3ZmY4NzJjYTQxYTA2ODNjNzE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f206b9745af582f9d649787ff872ca41a0683c71",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f206b9745af582f9d649787ff872ca41a0683c71",
      "tree": {
        "sha": "daea5a39057e99ac826171aa070b556a5b64e311",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/daea5a39057e99ac826171aa070b556a5b64e311"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree daea5a39057e99ac826171aa070b556a5b64e311\nparent cc47f9e370b3df6eb6ad20592b5d3f738c53d532\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733509685 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733509685 -0700\n\nAddress Murch feedback.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1NCNQAKCRBn2nwXlg36\nz61bAPwIrkpomsdyBiMhhdCYGvUQ/NC0+dLYALmIoF0qZTcnhAEAxD8p4aFuzaUm\n+llYKQ4lxIy+KIig6tVq+StMfCLaDQ0=\n=Kv77\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cc47f9e370b3df6eb6ad20592b5d3f738c53d532",
          "sha": "cc47f9e370b3df6eb6ad20592b5d3f738c53d532",
          "html_url": "https://github.com/bitcoin/bips/commit/cc47f9e370b3df6eb6ad20592b5d3f738c53d532"
        }
      ],
      "message": "Address Murch feedback.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:28:05Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:28:05Z"
      },
      "sha": "f206b9745af582f9d649787ff872ca41a0683c71"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDcwNjQ5ZWFlY2VhMGE2MmI2OTk3OGY2ZTI4NjdlNGY1YzAwMzM1NTQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/70649eaecea0a62b69978f6e2867e4f5c0033554",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/70649eaecea0a62b69978f6e2867e4f5c0033554",
      "tree": {
        "sha": "1b8fda6702b9bcd4bc99f2da37d220bb1eb001ae",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1b8fda6702b9bcd4bc99f2da37d220bb1eb001ae"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1b8fda6702b9bcd4bc99f2da37d220bb1eb001ae\nparent f206b9745af582f9d649787ff872ca41a0683c71\nparent ff4d2c28198fb363a91cfca91f456af6f81af049\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733509687 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733509687 -0700\n\nMerge branch 'p2qrh' of github.com:cryptoquick/bips into p2qrh\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1NCOQAKCRBn2nwXlg36\nz6GiAQC53q4KSL9oTCFzWSCnDf1gQFMnz317QIRPy0gqFTwgUwEAgT82fSir2FbT\nK6x+PVkrKUyR77QLfGn5rMzFcWUt1Q8=\n=tHrN\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f206b9745af582f9d649787ff872ca41a0683c71",
          "sha": "f206b9745af582f9d649787ff872ca41a0683c71",
          "html_url": "https://github.com/bitcoin/bips/commit/f206b9745af582f9d649787ff872ca41a0683c71"
        },
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ff4d2c28198fb363a91cfca91f456af6f81af049",
          "sha": "ff4d2c28198fb363a91cfca91f456af6f81af049",
          "html_url": "https://github.com/bitcoin/bips/commit/ff4d2c28198fb363a91cfca91f456af6f81af049"
        }
      ],
      "message": "Merge branch 'p2qrh' of github.com:cryptoquick/bips into p2qrh",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:28:07Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:28:07Z"
      },
      "sha": "70649eaecea0a62b69978f6e2867e4f5c0033554"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGZlZmY4NDc3YzBlMTAxNjM3MGFkZmE5M2QzYWVjZWUwZTUzYTJmMzM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/feff8477c0e1016370adfa93d3aecee0e53a2f33",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/feff8477c0e1016370adfa93d3aecee0e53a2f33",
      "tree": {
        "sha": "565f158512237e1219315dd30fec21b2249d587f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/565f158512237e1219315dd30fec21b2249d587f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 565f158512237e1219315dd30fec21b2249d587f\nparent 70649eaecea0a62b69978f6e2867e4f5c0033554\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733509830 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733509908 -0700\n\nMediaWiki formatting.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1NDFAAKCRBn2nwXlg36\nz/ykAP9gFjeVBxOb3wJsWoRsc+/OkmsMoNIFFYQOQvngLPoXiwEAkU4C8SaVlBb2\n/EUByxwTt2Bx0UjQja0uEeYC/Gb9dg4=\n=4yH4\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/70649eaecea0a62b69978f6e2867e4f5c0033554",
          "sha": "70649eaecea0a62b69978f6e2867e4f5c0033554",
          "html_url": "https://github.com/bitcoin/bips/commit/70649eaecea0a62b69978f6e2867e4f5c0033554"
        }
      ],
      "message": "MediaWiki formatting.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:31:48Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:30:30Z"
      },
      "sha": "feff8477c0e1016370adfa93d3aecee0e53a2f33"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15564327753,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOftMtJ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15564327753",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "feff8477c0e1016370adfa93d3aecee0e53a2f33",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/feff8477c0e1016370adfa93d3aecee0e53a2f33",
      "created_at": "2024-12-06T18:31:53Z"
    },
    {
      "event": "review_requested",
      "id": 15564332984,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAAOftN-4",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15564332984",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T18:32:27Z",
      "requested_reviewer": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 15564335568,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAAOftOnQ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15564335568",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T18:32:44Z",
      "requested_reviewer": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "renamed",
      "id": 15586926882,
      "node_id": "RTE_lADOAN28mc6YMAnczwAAAAOhDaEi",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15586926882",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-09T16:47:09Z",
      "rename": {
        "from": "Draft: QuBit - P2QRH spending rules",
        "to": "QuBit - P2QRH spending rules"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGUxODZiNTJjZmY1MzQ0Yzc4OWJjNTk5NmRlODY2OTdlNjIyNDQzMjM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e186b52cff5344c789bc5996de86697e62244323",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e186b52cff5344c789bc5996de86697e62244323",
      "tree": {
        "sha": "b283844dd02afa7bda50bbb2d267a3d91ed3b6b4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b283844dd02afa7bda50bbb2d267a3d91ed3b6b4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b283844dd02afa7bda50bbb2d267a3d91ed3b6b4\nparent feff8477c0e1016370adfa93d3aecee0e53a2f33\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733763426 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733763426 -0700\n\nSwap layer and title.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1chYgAKCRBn2nwXlg36\nz/PkAQCWln5DhO6zErGqlaLWr34XPew2iUpRUK24HQmzmxEPfAEArV2anSVgruQU\nncAOT8lJ52AfMCNKbTEgKAwh7C8PLQQ=\n=sNhz\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/feff8477c0e1016370adfa93d3aecee0e53a2f33",
          "sha": "feff8477c0e1016370adfa93d3aecee0e53a2f33",
          "html_url": "https://github.com/bitcoin/bips/commit/feff8477c0e1016370adfa93d3aecee0e53a2f33"
        }
      ],
      "message": "Swap layer and title.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-09T16:57:06Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-09T16:57:06Z"
      },
      "sha": "e186b52cff5344c789bc5996de86697e62244323"
    },
    {
      "event": "commented",
      "id": 2537420293,
      "node_id": "IC_kwDOAN28mc6XPfYF",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2537420293",
      "actor": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-11T23:37:37Z",
      "updated_at": "2024-12-11T23:37:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "I want to propose an alternative design. Instead of supporting multiple different signature algorithms in the same output and then inferring algorithm based on public key length. Flag signature algorithm based on address prefix, e.g. addresses that start with `bc1f` only accept FALCON-1024 public keys and signatures. \r\n\r\n- This makes it straightforward to add new post-quantum signature algorithms and lets you streamline this design by only needing to support one post-quantum signature algorithm.\r\n- This avoids using length as a signaling mechanism. Currently length works, but what if two algorithms have the same length public key? Do we lengthen one?\r\n- Supporting multiple signature algorithms in the same output is likely to increase complexity for other protocols. Say a payment channel where the two parties are using different signature algorithms. I don't see this as a strong reason not to do this, but I think the BIP needs a justification for this additional complexity.\r\n\r\nIs the reason you are doing multisig outside of script, because of the stack element limitations of some these bigger signatures? Are there any issues with the values on the attestation stack being larger than 520?\r\n",
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2537420293",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "reviewed",
      "id": 2494122656,
      "node_id": "PRR_kwDOAN28mc6UqUqg",
      "url": null,
      "actor": null,
      "commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2494122656",
      "submitted_at": "2024-12-12T00:50:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "commented",
      "id": 2541212231,
      "node_id": "IC_kwDOAN28mc6Xd9JH",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2541212231",
      "actor": {
        "login": "QbitsCode",
        "id": 99557903,
        "node_id": "U_kgDOBe8iDw",
        "avatar_url": "https://avatars.githubusercontent.com/u/99557903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/QbitsCode",
        "html_url": "https://github.com/QbitsCode",
        "followers_url": "https://api.github.com/users/QbitsCode/followers",
        "following_url": "https://api.github.com/users/QbitsCode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/QbitsCode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/QbitsCode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/QbitsCode/subscriptions",
        "organizations_url": "https://api.github.com/users/QbitsCode/orgs",
        "repos_url": "https://api.github.com/users/QbitsCode/repos",
        "events_url": "https://api.github.com/users/QbitsCode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/QbitsCode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-13T11:11:26Z",
      "updated_at": "2024-12-13T11:11:26Z",
      "author_association": "NONE",
      "body": "Sorry for coming late with this important PR, we have just shared 3 proposed pqc algorithms that guarantee elimination of quantum computer risk.  \r\n\r\nhttps://delvingbitcoin.org/t/implemented-post-quantum-cryptography-pqc-feature-into-bitcoin-core/1320",
      "user": {
        "login": "QbitsCode",
        "id": 99557903,
        "node_id": "U_kgDOBe8iDw",
        "avatar_url": "https://avatars.githubusercontent.com/u/99557903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/QbitsCode",
        "html_url": "https://github.com/QbitsCode",
        "followers_url": "https://api.github.com/users/QbitsCode/followers",
        "following_url": "https://api.github.com/users/QbitsCode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/QbitsCode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/QbitsCode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/QbitsCode/subscriptions",
        "organizations_url": "https://api.github.com/users/QbitsCode/orgs",
        "repos_url": "https://api.github.com/users/QbitsCode/repos",
        "events_url": "https://api.github.com/users/QbitsCode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/QbitsCode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2541212231",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2541698148,
      "node_id": "IC_kwDOAN28mc6Xfzxk",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2541698148",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-13T15:26:42Z",
      "updated_at": "2024-12-13T15:26:42Z",
      "author_association": "NONE",
      "body": "> Sorry for coming late with this important PR, we have just shared 3 proposed pqc algorithms that guarantee elimination of quantum computer risk.\r\n> \r\n> https://delvingbitcoin.org/t/implemented-post-quantum-cryptography-pqc-feature-into-bitcoin-core/1320\r\n\r\nThat's a great start! I see from [your documentation here](https://github.com/QBlockQ/pqc-bitcoin/blob/main/doc/pqc.md#digital-signatures-coming-soon) you're intending to use the same PQC signature algorithms we've selected, which is validating of the approach recommended for this BIP.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2541698148",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQ1MDAxMjQxYmEwNDllMThhOTFjZDI3MjJiNWU2MTRlYzkzOTkxNGY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d5001241ba049e18a91cd2722b5e614ec939914f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d5001241ba049e18a91cd2722b5e614ec939914f",
      "tree": {
        "sha": "e3d7397a0e1549bb4f8f119a0ed2bed964f6b45c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e3d7397a0e1549bb4f8f119a0ed2bed964f6b45c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e3d7397a0e1549bb4f8f119a0ed2bed964f6b45c\nparent e186b52cff5344c789bc5996de86697e62244323\nauthor Hunter Beast <hunter@cryptoquick.com> 1734104130 -0700\ncommitter GitHub <noreply@github.com> 1734104130 -0700\n\nApply suggestions from code review\n\nCo-authored-by: Ethan Heilman <ethan.r.heilman@gmail.com>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnXFRCCRC1aQ7uu5UhlAAAyhIQAGxMmFmmlE2QCHj9yKfc5u6F\nv++aCuki7YF/vw/F0J0Q+540xvig6abjhDlzCZt28DZo2qL3QvsKsBc9+Lmm3HtQ\nrHBTIzMlBAk2SMldCUuK2zAz0TbpUKkv8i4sqZolDQ7OHRygGtYXhbmGvt2P5fen\n1k46WIzpHJJ4cf8CyeXOF9dDOBdxxjBMgB6u9YPXNYDw769W8Ns5yFxwwpPtblLS\nMkYhkh4KBqhADjS60JbwLVhb7hcgIPX0ZJpha6PZWEgzvxOaqDUA+TV9PeGwHCGK\n8YTV6uUExVqJp6ROubWXJ4tZhGIXQ+Na5U/rOIfP/0EpVQurk3YE+Se4W96IFk26\ngWQIomg+y0QQJm/8hpWNAHos5zpdVVF00eDDjjVx2QxkG2swvBhR1ifnHAam0WEc\n05rJlFbCHObUuQwD6MKuFiqllknOTbpsfPyVPx4JoDxETqyQ58/J2vocyEB3tjcx\nuvdO8BMQPRz0jnrYzryQpK+xgLzpbNdS6NvXCOQRS3BSN10mympecdxxGeG8KjZ8\ncKau7oyMe7Qida/XueMovkAXPPuEirpeIEtM13ix7ubdZ/1gFe43SPiC5Alwm/VV\neeMNp/YT+PW5akb8abQ/SX7+veEK6Je6d7YQwGnBA3f0ogWc3AMyXPuJcUu8HXdg\nmpdU4fHCRkAIoAtvOqNM\n=0Ffw\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e186b52cff5344c789bc5996de86697e62244323",
          "sha": "e186b52cff5344c789bc5996de86697e62244323",
          "html_url": "https://github.com/bitcoin/bips/commit/e186b52cff5344c789bc5996de86697e62244323"
        }
      ],
      "message": "Apply suggestions from code review\n\nCo-authored-by: Ethan Heilman <ethan.r.heilman@gmail.com>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-12-13T15:35:30Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2024-12-13T15:35:30Z"
      },
      "sha": "d5001241ba049e18a91cd2722b5e614ec939914f"
    },
    {
      "event": "commented",
      "id": 2541736709,
      "node_id": "IC_kwDOAN28mc6Xf9MF",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2541736709",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-13T15:46:25Z",
      "updated_at": "2024-12-13T15:46:25Z",
      "author_association": "NONE",
      "body": "> I want to propose an alternative design. Instead of supporting multiple different signature algorithms in the same output and then inferring algorithm based on public key length. Flag signature algorithm based on address prefix, e.g. addresses that start with `bc1f` only accept FALCON-1024 public keys and signatures.\r\n\r\nThe problem with that approach is that there's only so many OP_NUMs to prefix the address type with for each signature type. If new signature algorithms were added, I would imagine they would be added in batches, so that bc1f would indicate a superset of multiple algorithms.\r\n\r\n> * This makes it straightforward to add new post-quantum signature algorithms and lets you streamline this design by only needing to support one post-quantum signature algorithm.\r\n> * This avoids using length as a signaling mechanism. Currently length works, but what if two algorithms have the same length public key? Do we lengthen one?\r\n\r\nYes, we would lengthen one.\r\n\r\n> * Supporting multiple signature algorithms in the same output is likely to increase complexity for other protocols. Say a payment channel where the two parties are using different signature algorithms. I don't see this as a strong reason not to do this, but I think the BIP needs a justification for this additional complexity.\r\n\r\nIn the case of a payment channel, it's a 2-of-2 multisig agreed to by both parties. If either party finds the signature algorithms proposed unacceptable, the channel simply won't be funded.\r\n\r\n> Is the reason you are doing multisig outside of script, because of the stack element limitations of some these bigger signatures? Are there any issues with the values on the attestation stack being larger than 520?\r\n\r\nPartly for that reason, and also, because I want this to use stricter validation rules than all that script expresses.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2541736709",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDg1YTM0N2I1YTIzNmVmZGU3NmRkNzZmOTE3NjhkNzgyMGIzMWU5ZTA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/85a347b5a236efde76dd76f91768d7820b31e9e0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/85a347b5a236efde76dd76f91768d7820b31e9e0",
      "tree": {
        "sha": "074ab6ee388d6c474d7b43429c255ee7178f961b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/074ab6ee388d6c474d7b43429c255ee7178f961b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 074ab6ee388d6c474d7b43429c255ee7178f961b\nparent d5001241ba049e18a91cd2722b5e614ec939914f\nauthor Hunter Trujillo <cryptoquick@pm.me> 1734107511 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1734107511 -0700\n\nUpdate to use merkle tree for attestation commitment. Update LR & SR quantum attack scenarios.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1xhdwAKCRBn2nwXlg36\nz8EJAP9O7uCSk6WFvARo8Jeg2de05kHe2eaCes7sLeVRKrr+KgEA5D7fl6ZvWl3K\nli6zFsAKI4k3H9kDKi0is5qqrjK2cQE=\n=qGqf\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d5001241ba049e18a91cd2722b5e614ec939914f",
          "sha": "d5001241ba049e18a91cd2722b5e614ec939914f",
          "html_url": "https://github.com/bitcoin/bips/commit/d5001241ba049e18a91cd2722b5e614ec939914f"
        }
      ],
      "message": "Update to use merkle tree for attestation commitment. Update LR & SR quantum attack scenarios.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-13T16:31:51Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-13T16:31:51Z"
      },
      "sha": "85a347b5a236efde76dd76f91768d7820b31e9e0"
    },
    {
      "event": "review_requested",
      "id": 15650997152,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAAOk30Og",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15650997152",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-13T16:34:51Z",
      "requested_reviewer": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2544834722,
      "node_id": "IC_kwDOAN28mc6Xrxii",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2544834722",
      "actor": {
        "login": "junaga",
        "id": 35770913,
        "node_id": "MDQ6VXNlcjM1NzcwOTEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/35770913?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/junaga",
        "html_url": "https://github.com/junaga",
        "followers_url": "https://api.github.com/users/junaga/followers",
        "following_url": "https://api.github.com/users/junaga/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/junaga/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/junaga/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/junaga/subscriptions",
        "organizations_url": "https://api.github.com/users/junaga/orgs",
        "repos_url": "https://api.github.com/users/junaga/repos",
        "events_url": "https://api.github.com/users/junaga/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/junaga/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-16T07:50:28Z",
      "updated_at": "2024-12-16T07:50:28Z",
      "author_association": "NONE",
      "body": "Hi, Sorry for the ping, This is too complicated for me. Is there no way to simplify or generalize this?",
      "user": {
        "login": "junaga",
        "id": 35770913,
        "node_id": "MDQ6VXNlcjM1NzcwOTEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/35770913?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/junaga",
        "html_url": "https://github.com/junaga",
        "followers_url": "https://api.github.com/users/junaga/followers",
        "following_url": "https://api.github.com/users/junaga/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/junaga/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/junaga/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/junaga/subscriptions",
        "organizations_url": "https://api.github.com/users/junaga/orgs",
        "repos_url": "https://api.github.com/users/junaga/repos",
        "events_url": "https://api.github.com/users/junaga/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/junaga/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2544834722",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2546412114,
      "node_id": "IC_kwDOAN28mc6XxypS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2546412114",
      "actor": {
        "login": "QbitsCode",
        "id": 99557903,
        "node_id": "U_kgDOBe8iDw",
        "avatar_url": "https://avatars.githubusercontent.com/u/99557903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/QbitsCode",
        "html_url": "https://github.com/QbitsCode",
        "followers_url": "https://api.github.com/users/QbitsCode/followers",
        "following_url": "https://api.github.com/users/QbitsCode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/QbitsCode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/QbitsCode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/QbitsCode/subscriptions",
        "organizations_url": "https://api.github.com/users/QbitsCode/orgs",
        "repos_url": "https://api.github.com/users/QbitsCode/repos",
        "events_url": "https://api.github.com/users/QbitsCode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/QbitsCode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-16T19:03:01Z",
      "updated_at": "2024-12-16T19:03:18Z",
      "author_association": "NONE",
      "body": "Yesterday, we pushed it with a simplified and holistic version.",
      "user": {
        "login": "QbitsCode",
        "id": 99557903,
        "node_id": "U_kgDOBe8iDw",
        "avatar_url": "https://avatars.githubusercontent.com/u/99557903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/QbitsCode",
        "html_url": "https://github.com/QbitsCode",
        "followers_url": "https://api.github.com/users/QbitsCode/followers",
        "following_url": "https://api.github.com/users/QbitsCode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/QbitsCode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/QbitsCode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/QbitsCode/subscriptions",
        "organizations_url": "https://api.github.com/users/QbitsCode/orgs",
        "repos_url": "https://api.github.com/users/QbitsCode/repos",
        "events_url": "https://api.github.com/users/QbitsCode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/QbitsCode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2546412114",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2546503597,
      "node_id": "IC_kwDOAN28mc6XyI-t",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2546503597",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-16T19:34:23Z",
      "updated_at": "2024-12-16T19:34:23Z",
      "author_association": "NONE",
      "body": "> Hi, Sorry for the ping, This is too complicated for me. Is there no way to simplify or generalize this?\r\n\r\nPerhaps a good summary is this:\r\n\r\nIn this BIP we suggest a new address format beginning with bc1r that introduces the capability for users to generate addresses that can receive payments signed using quantum-resistant keys and signatures.\r\n\r\nIt really is that simple, but there are the details for why this needs to happen and how it should happen and this tries to cover those in a comprehensive enough manner, or at least, as comprehensive as we can be without test vectors.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2546503597",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "renamed",
      "id": 15693894736,
      "node_id": "RTE_lADOAN28mc6YMAnczwAAAAOnbdRQ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15693894736",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T22:11:40Z",
      "rename": {
        "from": "QuBit - P2QRH spending rules",
        "to": "BIP draft: QuBit - P2QRH spending rules"
      }
    },
    {
      "event": "commented",
      "id": 2551706449,
      "node_id": "IC_kwDOAN28mc6YF_NR",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2551706449",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:00:18Z",
      "updated_at": "2024-12-18T16:00:18Z",
      "author_association": "NONE",
      "body": "@jonatack Why did you re-add the draft designation? From what I understand, @murchandamus recommended that be changed:\r\nhttps://github.com/bitcoin/bips/pull/1670#issuecomment-2523737288",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2551706449",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 15705634067,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOoIPUT",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705634067",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:00:19Z"
    },
    {
      "event": "subscribed",
      "id": 15705634089,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOoIPUp",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705634089",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:00:20Z"
    },
    {
      "event": "mentioned",
      "id": 15705634124,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOoIPVM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705634124",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:00:20Z"
    },
    {
      "event": "subscribed",
      "id": 15705634147,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOoIPVj",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705634147",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:00:20Z"
    },
    {
      "event": "commented",
      "id": 2551722843,
      "node_id": "IC_kwDOAN28mc6YGDNb",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2551722843",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:07:26Z",
      "updated_at": "2024-12-18T16:09:07Z",
      "author_association": "MEMBER",
      "body": "> @jonatack Why did you re-add the draft designation? From what I understand, @murchandamus recommended that be changed: [#1670 (comment)](https://github.com/bitcoin/bips/pull/1670#issuecomment-2523737288)\r\n\r\nI see. The PR title doesn't refer to the GitHub status of \"draft, not ready for review\", only that it is a BIP draft as yet without a number -- once there is a number, then the title becomes \"BIP \\<number\\>: ...\" instead. I unified a few titles yesterday to make it easier for me to follow the various PRs.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2551722843",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 15705745561,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOoIqiZ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705745561",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:07:28Z"
    },
    {
      "event": "subscribed",
      "id": 15705745588,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOoIqi0",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705745588",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:07:28Z"
    },
    {
      "event": "mentioned",
      "id": 15705745609,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOoIqjJ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705745609",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:07:29Z"
    },
    {
      "event": "subscribed",
      "id": 15705745628,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOoIqjc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705745628",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:07:29Z"
    },
    {
      "event": "commented",
      "id": 2551730090,
      "node_id": "IC_kwDOAN28mc6YGE-q",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2551730090",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:10:33Z",
      "updated_at": "2024-12-18T16:10:33Z",
      "author_association": "NONE",
      "body": "Are there any remaining obstacles keeping this from getting a BIP number?",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2551730090",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2551739630,
      "node_id": "IC_kwDOAN28mc6YGHTu",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2551739630",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:14:52Z",
      "updated_at": "2024-12-18T16:14:52Z",
      "author_association": "MEMBER",
      "body": "I have a range of numbers in mind for QC resistance BIPs to run by the other editors and am re-reviewing here.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2551739630",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "reviewed",
      "id": 2512659485,
      "node_id": "PRR_kwDOAN28mc6VxCQd",
      "url": null,
      "actor": null,
      "commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Assigned BIP number 360.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2512659485",
      "submitted_at": "2024-12-18T19:27:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "renamed",
      "id": 15707988502,
      "node_id": "RTE_lADOAN28mc6YMAnczwAAAAOoROIW",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15707988502",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T19:28:25Z",
      "rename": {
        "from": "BIP draft: QuBit - P2QRH spending rules",
        "to": "BIP-360: QuBit - P2QRH spending rules"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15709227784,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOoV8sI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15709227784",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9d12258e4f98e62eed9c429ab763be5afd17b997",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/9d12258e4f98e62eed9c429ab763be5afd17b997",
      "created_at": "2024-12-18T21:46:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15709242248,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOoWAOI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15709242248",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "60a3cdc1cf2005c22a3015592d15350dc65f22b0",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/60a3cdc1cf2005c22a3015592d15350dc65f22b0",
      "created_at": "2024-12-18T21:48:34Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDg1MzQ4YzAxZmY4NDBkNzczMDIwMTNkYjA1NDA4OTdmYWZiZDhlNmQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/85348c01ff840d77302013db0540897fafbd8e6d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/85348c01ff840d77302013db0540897fafbd8e6d",
      "tree": {
        "sha": "6a549b74cf74ec72d4d093e2109067ea9deb8772",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6a549b74cf74ec72d4d093e2109067ea9deb8772"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6a549b74cf74ec72d4d093e2109067ea9deb8772\nparent 85a347b5a236efde76dd76f91768d7820b31e9e0\nauthor Hunter Trujillo <cryptoquick@pm.me> 1734558204 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1734558557 -0700\n\nP2QRH assigned BIP number 360.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ2NDXQAKCRBn2nwXlg36\nzy3GAP0S0p+joWhseeKqKKV3fzmQH6e/TOcqskR2ubvVOVmDXQD8DVYBpAthixPm\nP/BEuO2HnPVzYzkJl+jpFHLe5JZROQ4=\n=IjGX\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/85a347b5a236efde76dd76f91768d7820b31e9e0",
          "sha": "85a347b5a236efde76dd76f91768d7820b31e9e0",
          "html_url": "https://github.com/bitcoin/bips/commit/85a347b5a236efde76dd76f91768d7820b31e9e0"
        }
      ],
      "message": "P2QRH assigned BIP number 360.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-18T21:49:17Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-18T21:43:24Z"
      },
      "sha": "85348c01ff840d77302013db0540897fafbd8e6d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15709248614,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOoWBxm",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15709248614",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/85348c01ff840d77302013db0540897fafbd8e6d",
      "created_at": "2024-12-18T21:49:21Z"
    },
    {
      "event": "review_requested",
      "id": 15709799485,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAAOoYIQ9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15709799485",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T23:05:03Z",
      "requested_reviewer": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "subscribed",
      "id": 15711837651,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOof53T",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15711837651",
      "actor": {
        "login": "Bodisatva",
        "id": 20432372,
        "node_id": "MDQ6VXNlcjIwNDMyMzcy",
        "avatar_url": "https://avatars.githubusercontent.com/u/20432372?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Bodisatva",
        "html_url": "https://github.com/Bodisatva",
        "followers_url": "https://api.github.com/users/Bodisatva/followers",
        "following_url": "https://api.github.com/users/Bodisatva/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Bodisatva/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Bodisatva/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Bodisatva/subscriptions",
        "organizations_url": "https://api.github.com/users/Bodisatva/orgs",
        "repos_url": "https://api.github.com/users/Bodisatva/repos",
        "events_url": "https://api.github.com/users/Bodisatva/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Bodisatva/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-19T04:53:40Z"
    },
    {
      "event": "commented",
      "id": 2552983769,
      "node_id": "IC_kwDOAN28mc6YK3DZ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2552983769",
      "actor": {
        "login": "kayabaNerve",
        "id": 25259837,
        "node_id": "MDQ6VXNlcjI1MjU5ODM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/25259837?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kayabaNerve",
        "html_url": "https://github.com/kayabaNerve",
        "followers_url": "https://api.github.com/users/kayabaNerve/followers",
        "following_url": "https://api.github.com/users/kayabaNerve/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kayabaNerve/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kayabaNerve/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kayabaNerve/subscriptions",
        "organizations_url": "https://api.github.com/users/kayabaNerve/orgs",
        "repos_url": "https://api.github.com/users/kayabaNerve/repos",
        "events_url": "https://api.github.com/users/kayabaNerve/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kayabaNerve/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-19T07:41:33Z",
      "updated_at": "2024-12-19T07:42:48Z",
      "author_association": "NONE",
      "body": "Sorry for being late, but was any thought been given to the feasibility of cryptographic multisig for the algorithms named?\n\nRaccoon has a few threshold signature protocols which can drop in with the originally defined Raccoon (so long as parameters are mutual).\n\nhttps://eprint.iacr.org/2024/1291\nhttps://eprint.iacr.org/2024/184\nhttps://eprint.iacr.org/2024/496\n\nThis would avoid the on-chain cost of several signatures and provide indistinguishability.",
      "user": {
        "login": "kayabaNerve",
        "id": 25259837,
        "node_id": "MDQ6VXNlcjI1MjU5ODM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/25259837?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kayabaNerve",
        "html_url": "https://github.com/kayabaNerve",
        "followers_url": "https://api.github.com/users/kayabaNerve/followers",
        "following_url": "https://api.github.com/users/kayabaNerve/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kayabaNerve/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kayabaNerve/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kayabaNerve/subscriptions",
        "organizations_url": "https://api.github.com/users/kayabaNerve/orgs",
        "repos_url": "https://api.github.com/users/kayabaNerve/repos",
        "events_url": "https://api.github.com/users/kayabaNerve/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kayabaNerve/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2552983769",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2554000206,
      "node_id": "IC_kwDOAN28mc6YOvNO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2554000206",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-19T13:32:35Z",
      "updated_at": "2024-12-19T13:32:35Z",
      "author_association": "NONE",
      "body": "@kayabaNerve This BIP supports multisig. Maybe threshold signatures can be added once they're more mature.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2554000206",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 15718704582,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOo6GXG",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15718704582",
      "actor": {
        "login": "kayabaNerve",
        "id": 25259837,
        "node_id": "MDQ6VXNlcjI1MjU5ODM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/25259837?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kayabaNerve",
        "html_url": "https://github.com/kayabaNerve",
        "followers_url": "https://api.github.com/users/kayabaNerve/followers",
        "following_url": "https://api.github.com/users/kayabaNerve/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kayabaNerve/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kayabaNerve/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kayabaNerve/subscriptions",
        "organizations_url": "https://api.github.com/users/kayabaNerve/orgs",
        "repos_url": "https://api.github.com/users/kayabaNerve/repos",
        "events_url": "https://api.github.com/users/kayabaNerve/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kayabaNerve/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-19T13:32:37Z"
    },
    {
      "event": "subscribed",
      "id": 15718704609,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOo6GXh",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15718704609",
      "actor": {
        "login": "kayabaNerve",
        "id": 25259837,
        "node_id": "MDQ6VXNlcjI1MjU5ODM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/25259837?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kayabaNerve",
        "html_url": "https://github.com/kayabaNerve",
        "followers_url": "https://api.github.com/users/kayabaNerve/followers",
        "following_url": "https://api.github.com/users/kayabaNerve/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kayabaNerve/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kayabaNerve/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kayabaNerve/subscriptions",
        "organizations_url": "https://api.github.com/users/kayabaNerve/orgs",
        "repos_url": "https://api.github.com/users/kayabaNerve/repos",
        "events_url": "https://api.github.com/users/kayabaNerve/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kayabaNerve/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-19T13:32:37Z"
    },
    {
      "event": "commented",
      "id": 2554351672,
      "node_id": "IC_kwDOAN28mc6YQFA4",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2554351672",
      "actor": {
        "login": "kayabaNerve",
        "id": 25259837,
        "node_id": "MDQ6VXNlcjI1MjU5ODM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/25259837?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kayabaNerve",
        "html_url": "https://github.com/kayabaNerve",
        "followers_url": "https://api.github.com/users/kayabaNerve/followers",
        "following_url": "https://api.github.com/users/kayabaNerve/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kayabaNerve/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kayabaNerve/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kayabaNerve/subscriptions",
        "organizations_url": "https://api.github.com/users/kayabaNerve/orgs",
        "repos_url": "https://api.github.com/users/kayabaNerve/repos",
        "events_url": "https://api.github.com/users/kayabaNerve/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kayabaNerve/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-19T14:37:52Z",
      "updated_at": "2024-12-19T14:37:52Z",
      "author_association": "NONE",
      "body": "I'm aware of the on-chain multisig possible with this proposal, which would have non-trivial scalability limits.\n\nRaccoon was one of the PQ signature algorithms submitted to the NIST competition for additional schemes, alongside SQIsign. It isn't explicitly/inherently a threshold signature and just has threshold signature schemes available. I'd question if it is too immature given the (currently rather) unique benefits provided.",
      "user": {
        "login": "kayabaNerve",
        "id": 25259837,
        "node_id": "MDQ6VXNlcjI1MjU5ODM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/25259837?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kayabaNerve",
        "html_url": "https://github.com/kayabaNerve",
        "followers_url": "https://api.github.com/users/kayabaNerve/followers",
        "following_url": "https://api.github.com/users/kayabaNerve/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kayabaNerve/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kayabaNerve/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kayabaNerve/subscriptions",
        "organizations_url": "https://api.github.com/users/kayabaNerve/orgs",
        "repos_url": "https://api.github.com/users/kayabaNerve/repos",
        "events_url": "https://api.github.com/users/kayabaNerve/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kayabaNerve/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2554351672",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "reviewed",
      "id": 2516399765,
      "node_id": "PRR_kwDOAN28mc6V_TaV",
      "url": null,
      "actor": null,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2516399765",
      "submitted_at": "2024-12-19T23:15:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGE0ZjNkYzY4ODM5NGE2MTRmYjMwMGRlZmUxMjBjM2Q2YTY2ZjY4Yzc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a4f3dc688394a614fb300defe120c3d6a66f68c7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a4f3dc688394a614fb300defe120c3d6a66f68c7",
      "tree": {
        "sha": "bd3bdb6c4c279d3d44f142f699e22ee533230f1c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bd3bdb6c4c279d3d44f142f699e22ee533230f1c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree bd3bdb6c4c279d3d44f142f699e22ee533230f1c\nparent 85348c01ff840d77302013db0540897fafbd8e6d\nauthor Hunter Beast <hunter@cryptoquick.com> 1734714503 -0700\ncommitter GitHub <noreply@github.com> 1734714503 -0700\n\nApply suggestions from code review\n\nCo-authored-by: Vojtěch Strnad <43024885+vostrnad@users.noreply.github.com>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnZaSHCRC1aQ7uu5UhlAAAP2UQADO0b313aKhzLZAuapaDzG5m\nRCRrgU6faGZvviVQFK+C2OOyrXpI7YcXuic2P/V390+0qyWGLh5NragQzaOeLc1/\nM4X8G6aUowsTAen+8VOUOpEWjqB0t2xzCtU6ly9Ly4c1qGJjlscHBkJNNm9Vgs+E\nGqRpKvnxm8ZH0/ExcFKebFQYUnSqnXtNd1DfJP94MwpWO3Zqdaf9f96zsSpx2HuC\naJGBeeFgt5V+K+6bxWmRrSy66CsLB9A1uXATwz6YpCsO26Iz1aA+ziASBOE58tsL\naP2JMiaxSHKCR8VYx79SQfDQQxT5hyUZv/0TKntznzvq08GEYlONPpQPZy//QdmQ\nhC6GisIiv7hqkchk3LvY6ty3oJI/twNkCRrdjkCr2gSxP61cwIIXlhCqV7lAZOuq\nGFDwET31QChJ52EBdEnre8/KO60Az8xyUx1NgflcXoCqYsLHV4ZFUl3DfqJFrLx7\nuc+sQHfLCHKlEoRGIxSzsiRxXheULjvF+4juxjYEPL94ZyWQA94fG2DuJBAWiOIk\nH8BTSbzEe3VNsst9+jVgZMD/r27EP3Q4OUOSTfM2WM9nyovJBmyG0ORvcZUvykUr\nqG2HAdx6KvZDdGmRzIA41UmzXBU2wkrV8Pbynmt+AroOLW251/19EOLdcVYDcPD0\nBP/x94R5UIxJaBNboOMt\n=32xt\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/85348c01ff840d77302013db0540897fafbd8e6d",
          "sha": "85348c01ff840d77302013db0540897fafbd8e6d",
          "html_url": "https://github.com/bitcoin/bips/commit/85348c01ff840d77302013db0540897fafbd8e6d"
        }
      ],
      "message": "Apply suggestions from code review\n\nCo-authored-by: Vojtěch Strnad <43024885+vostrnad@users.noreply.github.com>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-12-20T17:08:23Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2024-12-20T17:08:23Z"
      },
      "sha": "a4f3dc688394a614fb300defe120c3d6a66f68c7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDJiNjQxYjg5OWUzZDA2MzQ0YTAxMjgyY2MyNzQ2MGViMDlhMTZkMDQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2b641b899e3d06344a01282cc27460eb09a16d04",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2b641b899e3d06344a01282cc27460eb09a16d04",
      "tree": {
        "sha": "e7698984bac026b68ae12d116437154111d4edd0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e7698984bac026b68ae12d116437154111d4edd0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e7698984bac026b68ae12d116437154111d4edd0\nparent a4f3dc688394a614fb300defe120c3d6a66f68c7\nauthor Hunter Trujillo <cryptoquick@pm.me> 1734720204 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1734720204 -0700\n\nAddress feedback from vostrnad.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ2W6zAAKCRBn2nwXlg36\nz9poAQCcG2Q874tu9c4N1PRxpPEQtLqK63IiEsYAEq22utGcVQEA+autXl12E/mS\nt/MKHAfA1jJSTdVJSQT8k45KxMgrsgI=\n=gY3S\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a4f3dc688394a614fb300defe120c3d6a66f68c7",
          "sha": "a4f3dc688394a614fb300defe120c3d6a66f68c7",
          "html_url": "https://github.com/bitcoin/bips/commit/a4f3dc688394a614fb300defe120c3d6a66f68c7"
        }
      ],
      "message": "Address feedback from vostrnad.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-20T18:43:24Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-20T18:43:24Z"
      },
      "sha": "2b641b899e3d06344a01282cc27460eb09a16d04"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDRiOGI2NDcwZTZlNDZhMjJhNTA1OTViMDYwODc1ZjEyYmMxN2NiOTk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "tree": {
        "sha": "0f5e637f0e76f12c1930affa924cc17b282e4992",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/0f5e637f0e76f12c1930affa924cc17b282e4992"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0f5e637f0e76f12c1930affa924cc17b282e4992\nparent 2b641b899e3d06344a01282cc27460eb09a16d04\nauthor Hunter Trujillo <cryptoquick@pm.me> 1734720391 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1734720391 -0700\n\nUpdate typos list.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ2W7hwAKCRBn2nwXlg36\nz+1rAQCK3+KhJixbD3VqLF2xVfqKK914byaMOjC/SGEbUdZgYgD+Key0eVlT9HTN\nUDqP49RK7SwQLrLbkcTYlRZGoteO5wA=\n=hsCS\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2b641b899e3d06344a01282cc27460eb09a16d04",
          "sha": "2b641b899e3d06344a01282cc27460eb09a16d04",
          "html_url": "https://github.com/bitcoin/bips/commit/2b641b899e3d06344a01282cc27460eb09a16d04"
        }
      ],
      "message": "Update typos list.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-20T18:46:31Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-20T18:46:31Z"
      },
      "sha": "4b8b6470e6e46a22a50595b060875f12bc17cb99"
    },
    {
      "event": "review_requested",
      "id": 15736448879,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAAOp9ydv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15736448879",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-20T19:52:33Z",
      "requested_reviewer": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDk5MGQ4YTg3YjUxODFmZDRmMGQ1MGExYjY1YjUzZmJjMDJiYzYzMzA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/990d8a87b5181fd4f0d50a1b65b53fbc02bc6330",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/990d8a87b5181fd4f0d50a1b65b53fbc02bc6330",
      "tree": {
        "sha": "a3f0f282988260657714eb75673cd0c1794ee0b1",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a3f0f282988260657714eb75673cd0c1794ee0b1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a3f0f282988260657714eb75673cd0c1794ee0b1\nparent 4b8b6470e6e46a22a50595b060875f12bc17cb99\nauthor Hunter Trujillo <cryptoquick@pm.me> 1734724953 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1734724953 -0700\n\nFixes, typos, formatting.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ2XNWQAKCRBn2nwXlg36\nz3z6AP91r8dPtTPGWEnL/heyd3zGy9EtVhCFZ/ClzApB1u78WAEAlmhBeDUD2d3g\n/Lp39K/zCo5BrhIPiaDcm/BVlBsPwg4=\n=bVvl\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4b8b6470e6e46a22a50595b060875f12bc17cb99",
          "sha": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
          "html_url": "https://github.com/bitcoin/bips/commit/4b8b6470e6e46a22a50595b060875f12bc17cb99"
        }
      ],
      "message": "Fixes, typos, formatting.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-20T20:02:33Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-20T20:02:33Z"
      },
      "sha": "990d8a87b5181fd4f0d50a1b65b53fbc02bc6330"
    },
    {
      "event": "reviewed",
      "id": 2490053669,
      "node_id": "PRR_kwDOAN28mc6UazQl",
      "url": null,
      "actor": null,
      "commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Sorry for the many comments. I’m glad that someone is looking into this topic, but it seems to me that there are still many unknowns with the topic, and I’m not sure the proposal is already at a level where it provides sufficient information for anyone to fashion an implementation.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2490053669",
      "submitted_at": "2024-12-20T21:22:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "reviewed",
      "id": 2518365076,
      "node_id": "PRR_kwDOAN28mc6WGzOU",
      "url": null,
      "actor": null,
      "commit_id": "990d8a87b5181fd4f0d50a1b65b53fbc02bc6330",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "After going over the editor checklist, I’m not sure why the term \"QuBit\" is introduced.\r\n\r\nAltogether, it feels like Motivation and Rationale are giving a very broad overview of the topic, straying maybe a bit too far for a document describing \"Spending Rules\". Perhaps the document could be more concise in several sections, and the corresponding information could be provided outside of the BIP and just linked, or moved to the footnotes.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2518365076",
      "submitted_at": "2024-12-20T21:48:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDBmZGQ4YzNlZGM5ZTU2M2JjZjVhN2NiMGNjOTNlNmY0MjhiOTQ4ZDg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0fdd8c3edc9e563bcf5a7cb0cc93e6f428b948d8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0fdd8c3edc9e563bcf5a7cb0cc93e6f428b948d8",
      "tree": {
        "sha": "7244307f93da6532b7e23f2bc2e8e2c10453786a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7244307f93da6532b7e23f2bc2e8e2c10453786a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7244307f93da6532b7e23f2bc2e8e2c10453786a\nparent 990d8a87b5181fd4f0d50a1b65b53fbc02bc6330\nauthor Hunter Trujillo <cryptoquick@pm.me> 1734736351 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1734736351 -0700\n\nUpdates based on Murch and vostrnad feedback.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ2X53wAKCRBn2nwXlg36\nz0ZuAP0SXK2Ah2QKROooH5hAAfbiWdXEC2Gx47XFazBA610dCQEA6Xk7eoFqN0NC\nIfSu+BcyTOwEgsxpGuS5NzyCYyUpnA0=\n=IGSQ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/990d8a87b5181fd4f0d50a1b65b53fbc02bc6330",
          "sha": "990d8a87b5181fd4f0d50a1b65b53fbc02bc6330",
          "html_url": "https://github.com/bitcoin/bips/commit/990d8a87b5181fd4f0d50a1b65b53fbc02bc6330"
        }
      ],
      "message": "Updates based on Murch and vostrnad feedback.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-20T23:12:31Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-20T23:12:31Z"
      },
      "sha": "0fdd8c3edc9e563bcf5a7cb0cc93e6f428b948d8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDIwOGE5ODdmMmZiZmY5YmUxODBkZjcxODhjY2VhOGVkZTU1OGZmOTg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/208a987f2fbff9be180df7188ccea8ede558ff98",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/208a987f2fbff9be180df7188ccea8ede558ff98",
      "tree": {
        "sha": "65f23b5aaf5d92778448e5f16b97688243e9fe5b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/65f23b5aaf5d92778448e5f16b97688243e9fe5b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 65f23b5aaf5d92778448e5f16b97688243e9fe5b\nparent 0fdd8c3edc9e563bcf5a7cb0cc93e6f428b948d8\nauthor Hunter Trujillo <cryptoquick@pm.me> 1734736724 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1734736724 -0700\n\nFix title change in README.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ2X7VAAKCRBn2nwXlg36\nz5raAQD6zJIpM38vcCuyfz6tvHZkMjAA/DMm4l9HG17U+1GdhQD9HcAfYk0/PjvE\nJPYV1iYKlmeGmdmTHYuMwEPcJefw6w8=\n=Kfe2\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0fdd8c3edc9e563bcf5a7cb0cc93e6f428b948d8",
          "sha": "0fdd8c3edc9e563bcf5a7cb0cc93e6f428b948d8",
          "html_url": "https://github.com/bitcoin/bips/commit/0fdd8c3edc9e563bcf5a7cb0cc93e6f428b948d8"
        }
      ],
      "message": "Fix title change in README.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-20T23:18:44Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-20T23:18:44Z"
      },
      "sha": "208a987f2fbff9be180df7188ccea8ede558ff98"
    },
    {
      "event": "commented",
      "id": 2557873447,
      "node_id": "IC_kwDOAN28mc6Ydg0n",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2557873447",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-20T23:20:33Z",
      "updated_at": "2024-12-22T05:30:30Z",
      "author_association": "NONE",
      "body": "@murchandamus @vostrnad Thank you for taking the time to review. I realize this is a long BIP and there's a lot to go over, but I think it's important as the first quantum BIP to go into the problem in detail. In that way it's similar to BIP-52.\r\n\r\nRegardless, I've made updates to satisfy your recommendations the best I can, here's a diff for your convenience:\r\nhttps://github.com/bitcoin/bips/pull/1670/commits/0fdd8c3edc9e563bcf5a7cb0cc93e6f428b948d8\r\n\r\nFor context, I also intend to introduce a QuBit activation BIP, and a P2TRH BIP separate from QuBit. Additionally, I realize that there's some sections here that are underspecified. That will come with test vectors and an implementation, which I'm working towards.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2557873447",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 15738034630,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOqD1nG",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15738034630",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-20T23:20:35Z"
    },
    {
      "event": "subscribed",
      "id": 15738034636,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOqD1nM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15738034636",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-20T23:20:35Z"
    },
    {
      "event": "mentioned",
      "id": 15738034642,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOqD1nS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15738034642",
      "actor": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-20T23:20:35Z"
    },
    {
      "event": "subscribed",
      "id": 15738034646,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOqD1nW",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15738034646",
      "actor": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-20T23:20:35Z"
    },
    {
      "event": "reviewed",
      "id": 2521095040,
      "node_id": "PRR_kwDOAN28mc6WRNuA",
      "url": null,
      "actor": null,
      "commit_id": "208a987f2fbff9be180df7188ccea8ede558ff98",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Just a few quick responses to the edits",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2521095040",
      "submitted_at": "2024-12-23T20:54:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDhlYjM1Yzg5YTMzYzNlNWU2YjQ0YzcyY2I5MDU3NzhhYTNiMjNhOTk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8eb35c89a33c3e5e6b44c72cb905778aa3b23a99",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8eb35c89a33c3e5e6b44c72cb905778aa3b23a99",
      "tree": {
        "sha": "1932aef4f7375da522ba80970f9b0325cae88db4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1932aef4f7375da522ba80970f9b0325cae88db4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1932aef4f7375da522ba80970f9b0325cae88db4\nparent 208a987f2fbff9be180df7188ccea8ede558ff98\nauthor Hunter Beast <hunter@cryptoquick.com> 1734992574 -0700\ncommitter GitHub <noreply@github.com> 1734992574 -0700\n\nApply suggestions from code review\n\nCo-authored-by: Mark \"Murch\" Erhardt <murch@murch.one>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnaeK+CRC1aQ7uu5UhlAAAhVcQAJHIyWkmGXe/1ippaCEjW09p\nk32z28RkuUu9xb697ZAftrVZCQSDh1C7mRlkMsyluCz3hOIcZltUNLMACn9Ex3sB\nz+fHCwQnLLBfnDeR1F0sZCoYPZf46c0kFBGm5logqU/4v/1t0QvxKdg1mdehJ1Ow\nmAUV581gHqnWBvhefoFe2JUU75CDn0W7CZCitPKtLhD+Dt4Ukjrai/8Zfq+LhEdL\n7oadRB+Ts2TI3cR2gkPiCrFIQE20fn+Eja6rxSwqiD2Ygiv2RK4kyRwRhxYXh+8G\nVZ+c+JuHYGyvpm/KsGXnw4S5NzVurvGF1XWuspOJ5Dl1g8wUgQE1XRUzUgUBwxD3\n/dx2wukCzU9Y9j6hLlh+hf8cGq3aeREFQoqP1HdCO+stOiMRfsx+5Jsz8n1TxHX1\ng0TCGz8wM6sDTzSSUb521lp1y98q60lYdvHxTPYI56XNAp+D1FomQMtOnMtIquiP\nOqLTv0NIuSPSGDe5Lw8EWx/d3cw7fXkMImlUxY49MeRefH3S0XpueMPkjK1cj71E\nDQiGagF1XrT4U5qIwqyHDNLxL2cdm9Btypy9o6HwHf1IDbVEFc10SjPvNkXntvvF\n+qxk9RlY/mUHlCmLqzK8LJnE6Nt11psU6oxdsKV6lvZ1GyhrN0tlExl5HWJ7k/qL\nV73sLBCFS174fQLnjnuv\n=a4JP\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/208a987f2fbff9be180df7188ccea8ede558ff98",
          "sha": "208a987f2fbff9be180df7188ccea8ede558ff98",
          "html_url": "https://github.com/bitcoin/bips/commit/208a987f2fbff9be180df7188ccea8ede558ff98"
        }
      ],
      "message": "Apply suggestions from code review\n\nCo-authored-by: Mark \"Murch\" Erhardt <murch@murch.one>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-12-23T22:22:54Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2024-12-23T22:22:54Z"
      },
      "sha": "8eb35c89a33c3e5e6b44c72cb905778aa3b23a99"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQ5YmIwZmZlZjEzZTBkYWY2MDNkY2QzNmJjOGRiYmY3NzY5ZjU4ZmM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d9bb0ffef13e0daf603dcd36bc8dbbf7769f58fc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d9bb0ffef13e0daf603dcd36bc8dbbf7769f58fc",
      "tree": {
        "sha": "1be5716e01be766b813d6660d012e7fab34d4a13",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1be5716e01be766b813d6660d012e7fab34d4a13"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1be5716e01be766b813d6660d012e7fab34d4a13\nparent 8eb35c89a33c3e5e6b44c72cb905778aa3b23a99\nauthor Hunter Trujillo <cryptoquick@pm.me> 1734992784 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1734992784 -0700\n\nFix broken link.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ2njkAAKCRBn2nwXlg36\nzyPiAP91ZVXwALdtxqE/6e70O94Nx8FuP/5KYLuxewuluJr9cgEAnU9A3Dq4hwrx\ngv9TpQ/bsfhi9KmCXppwF7jDoXDgYgU=\n=glFP\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8eb35c89a33c3e5e6b44c72cb905778aa3b23a99",
          "sha": "8eb35c89a33c3e5e6b44c72cb905778aa3b23a99",
          "html_url": "https://github.com/bitcoin/bips/commit/8eb35c89a33c3e5e6b44c72cb905778aa3b23a99"
        }
      ],
      "message": "Fix broken link.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-23T22:26:24Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-23T22:26:24Z"
      },
      "sha": "d9bb0ffef13e0daf603dcd36bc8dbbf7769f58fc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDBhZTY5ZGI3MGE0YTI4ZjIwMmQ0NDFiNzEzMWNkNWIyMTY5ZTdhZmU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "tree": {
        "sha": "0098ed6a329c59b621e357f8d69612a6cb387a21",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/0098ed6a329c59b621e357f8d69612a6cb387a21"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0098ed6a329c59b621e357f8d69612a6cb387a21\nparent d9bb0ffef13e0daf603dcd36bc8dbbf7769f58fc\nauthor Hunter Trujillo <cryptoquick@pm.me> 1734994046 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1734994046 -0700\n\nRemove Canary section.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ2nofgAKCRBn2nwXlg36\nz+qZAP9jeW24BwtyqcUrL8wJKecfDIK5DXOsU6wMQKJJwpZwQgEA1plIdXx9SDus\nrum/xPWTDs4aa+87QOT8BfZNOf7oOwY=\n=84O9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d9bb0ffef13e0daf603dcd36bc8dbbf7769f58fc",
          "sha": "d9bb0ffef13e0daf603dcd36bc8dbbf7769f58fc",
          "html_url": "https://github.com/bitcoin/bips/commit/d9bb0ffef13e0daf603dcd36bc8dbbf7769f58fc"
        }
      ],
      "message": "Remove Canary section.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-23T22:47:26Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-23T22:47:26Z"
      },
      "sha": "0ae69db70a4a28f202d441b7131cd5b2169e7afe"
    },
    {
      "event": "reviewed",
      "id": 2523357584,
      "node_id": "PRR_kwDOAN28mc6WZ2GQ",
      "url": null,
      "actor": null,
      "commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "This is all that I have at this time from an editorial standpoint. It would be good if this proposal got more feedback and/or endorsements from domain experts in the next steps.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2523357584",
      "submitted_at": "2024-12-26T17:11:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "commented",
      "id": 2565763959,
      "node_id": "IC_kwDOAN28mc6Y7nN3",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2565763959",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-30T17:52:32Z",
      "updated_at": "2024-12-30T17:52:32Z",
      "author_association": "NONE",
      "body": "the main problem that I see is decryptor wallets, as well as a master private key and a master public key, curves allow us to use something like this, but post-quantum algorithms do not provide such an opportunity (in current implementations)\r\n\r\nif use clasic logic with key pool , we simple get key pairs and use them\r\n\r\nbut how are we going to associate a key obtained from master keys with post quantum keys?\r\n",
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2565763959",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2566850468,
      "node_id": "IC_kwDOAN28mc6Y_wek",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2566850468",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-01T05:06:32Z",
      "updated_at": "2025-01-01T05:06:32Z",
      "author_association": "NONE",
      "body": "@mraksoll4 All PQC algos will of course need to be compatible with BIP-32 HD wallet-style key derivation. There are definitely PQC libraries out there that just assume you'll never want to bring your own entropy, and so they don't provide a field or argument to provide that, but the intention behind the implementation of this BIP is that there will be a custom PQC library for bitcoin specifically that will implement things like this. So, your concern, while valid, is an implementation detail, and doesn't really have much bearing on the BIP itself.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2566850468",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 15792808552,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOtUyJo",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15792808552",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-01T05:06:34Z"
    },
    {
      "event": "subscribed",
      "id": 15792808556,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOtUyJs",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15792808556",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-01T05:06:34Z"
    },
    {
      "event": "commented",
      "id": 2567068218,
      "node_id": "IC_kwDOAN28mc6ZAlo6",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2567068218",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-01T16:22:04Z",
      "updated_at": "2025-01-02T19:58:31Z",
      "author_association": "NONE",
      "body": "> @mraksoll4 All PQC algos will of course need to be compatible with BIP-32 HD wallet-style key derivation. There are definitely PQC libraries out there that just assume you'll never want to bring your own entropy, and so they don't provide a field or argument to provide that, but the intention behind the implementation of this BIP is that there will be a custom PQC library for bitcoin specifically that will implement things like this. So, your concern, while valid, is an implementation detail, and doesn't really have much bearing on the BIP itself.\r\n\r\nWell, we have no problems with private keys, and also with generating from a seed, I have already implemented for experiments on the liboqs library the use of my own seed for falcon and dilithium to obtain a pair of keys, as well as obtaining a public key from a private one.\r\n\r\nThere are also no problems with multi-signature, the signature itself can be merged.\r\n\r\nbut we have a problem with obtaining public keys from the master public key ; due to the design of post quantum algorithms, we do not have the ability to obtain public keys from other public keys through predictable mathematical operations as in ecdsa.\r\n\r\nalthough perhaps I don’t fully understand how we get the master public key.\r\n\r\nhow start you can see at base examle .\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/pull/2031\r\n\r\nfirst we need to solve the problem of key hierarchy, or we will have to forget about generating public keys without cration the private key, although for example in Falcon you don't need the entire private key but only part of it to reconstruct the public key\r\n```\r\n\r\n/*\r\n * This function reconstructs the public key from a given private key.\r\n * It decodes the private key components (f and g) from the secret key\r\n * and uses them to regenerate the corresponding public key (h).\r\n * The generated public key is then encoded into the provided pk array.\r\n * \r\n * public (pk):  The output buffer where the public key will be stored (must be at least PQCLEAN_FALCON512_CLEAN_CRYPTO_PUBLICKEYBYTES in size).\r\n * private (sk):  The input secret key (private key) in byte array format (must be PQCLEAN_FALCON512_CLEAN_CRYPTO_SECRETKEYBYTES in size).\r\n * Return value: 0 on success, -1 on error.\r\n */\r\nint \r\nPQCLEAN_FALCON1024_CLEAN_crypto_sign_pubkey_from_privkey(\r\n    uint8_t *pk, const uint8_t *sk) {\r\n    union {\r\n        uint8_t b[FALCON_KEYGEN_TEMP_10];\r\n        uint64_t dummy_u64;\r\n        fpr dummy_fpr;\r\n    } tmp;\r\n    int8_t f[1024], g[1024], F[1024];\r\n    uint16_t h[1024];\r\n    size_t u, v;\r\n\r\n    /*\r\n     * Decode the private key.\r\n     */\r\n    if (sk[0] != 0x50 + 10) {\r\n        return -1;\r\n    }\r\n    u = 1;\r\n    v = PQCLEAN_FALCON1024_CLEAN_trim_i8_decode(\r\n            f, 10, PQCLEAN_FALCON1024_CLEAN_max_fg_bits[10],\r\n            sk + u, PQCLEAN_FALCON1024_CLEAN_CRYPTO_SECRETKEYBYTES - u);\r\n    if (v == 0) {\r\n        return -1;\r\n    }\r\n    u += v;\r\n    v = PQCLEAN_FALCON1024_CLEAN_trim_i8_decode(\r\n            g, 10, PQCLEAN_FALCON1024_CLEAN_max_fg_bits[10],\r\n            sk + u, PQCLEAN_FALCON1024_CLEAN_CRYPTO_SECRETKEYBYTES - u);\r\n    if (v == 0) {\r\n        return -1;\r\n    }\r\n\r\n    /*\r\n     * Reconstruct the public key using f and g by calling the compute_public function.\r\n     */\r\n    if (!PQCLEAN_FALCON1024_CLEAN_compute_public(h, f, g, 10, tmp.b)) {\r\n        return -1;\r\n    }\r\n\r\n    /*\r\n     * Encode public key.\r\n     */\r\n    pk[0] = 0x00 + 10;\r\n    v = PQCLEAN_FALCON1024_CLEAN_modq_encode(\r\n            pk + 1, PQCLEAN_FALCON1024_CLEAN_CRYPTO_PUBLICKEYBYTES - 1,\r\n            h, 10);\r\n    if (v != PQCLEAN_FALCON1024_CLEAN_CRYPTO_PUBLICKEYBYTES - 1) {\r\n        return -1;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n```",
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2567068218",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 15794134419,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOtZ12T",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15794134419",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-01T16:22:06Z"
    },
    {
      "event": "subscribed",
      "id": 15794134422,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOtZ12W",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15794134422",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-01T16:22:06Z"
    },
    {
      "event": "reviewed",
      "id": 2528311023,
      "node_id": "PRR_kwDOAN28mc6Wsvbv",
      "url": null,
      "actor": null,
      "commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Did another review pass. Updated the PR title, as it looks like the BIP is now named \"Pay to Quantum Resistant Hash.\"\r\n\r\nHave you read the mail list discussion at https://groups.google.com/g/bitcoindev/c/8O857bRSVV8? It might be good to weigh in there if you're inclined.\r\n\r\nMost important of the comments below: https://github.com/bitcoin/bips/pull/1670#discussion_r1901344370 and https://github.com/bitcoin/bips/pull/1670#discussion_r1901408606.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2528311023",
      "submitted_at": "2025-01-03T01:45:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "renamed",
      "id": 15803701035,
      "node_id": "RTE_lADOAN28mc6YMAnczwAAAAOt-Vcr",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15803701035",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-03T01:46:35Z",
      "rename": {
        "from": "BIP-360: QuBit - P2QRH spending rules",
        "to": "BIP-360: QuBit - Pay to Quantum Resistant Hash"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDgxZTE4MzgwNjFhZDM1OGFjNzcwMzgxN2IxZGZiZGFjYTIxMmNlNWI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/81e1838061ad358ac7703817b1dfbdaca212ce5b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/81e1838061ad358ac7703817b1dfbdaca212ce5b",
      "tree": {
        "sha": "481df331666ce95eff1ef7fc378221762b22f565",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/481df331666ce95eff1ef7fc378221762b22f565"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 481df331666ce95eff1ef7fc378221762b22f565\nparent 0ae69db70a4a28f202d441b7131cd5b2169e7afe\nauthor Hunter Beast <hunter@cryptoquick.com> 1736887184 -0700\ncommitter GitHub <noreply@github.com> 1736887184 -0700\n\nApply suggestions from code review\n\nCo-authored-by: Jon Atack <jon@atack.com>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnhsuQCRC1aQ7uu5UhlAAACsQQALAS6gjtHa/1uZ2hw8YwY/aY\n+8VzXL8iPHbfSlSaLTYUUTTNxvH3k6aW+BAj5EdHJlb+vhOj+urMQ/sBS70oI2uw\nGbZaYJGBc5Xum5O66jO8msv+ZIEpgf+jzT7ONh0EX6alLY4F1mnKs8huQC7sQgCg\nE3jbT1cFdsvoHBlhRBqdBnp8hEF0B/RVX7CXp58TrKOc/4KF4rOMCnlkj/jtrrJ3\np4sc752XpAr/tPIME0g6d6HMk5o2B4F8mqJvQ3MGuM+TJ/DOPpvl6VFTh6l3lvyG\nbJ8hQE3qOaNM4htWLYuKf2x/1IfCLJqh3w91GYzHMh4TekTFTHmPD5c2X4duLy8R\nQk4RU65vq/r9T64UQAPpkH2V7uofJlCcyGHHWVS6KDf5WdwHqOqXt9Hh8PWTGrRP\nIA+rkrn7dOxR/zOptvPTLzo0EFQ7pS4atFzJwPOM44XN5XUeF0WqBqn49O6J1eO0\nRbSUvUnUlT4rd7Gx6cjimNJQhCC0LNsBbir5sK4kiu6o6wXJYcQqQui2YDNXfcT9\n68FixmWmdfc5S8lAjhBl759md14qPV+iegh8FERGH8s+dN407jbFMYCZ+ZUtBzhD\nbiOWlzkpBY6tSIhSkouRNy4TlnQ3YC4jzXSs8ADmDYm/h5Xwnb3arVfUVTr6Th1q\nA/78aTmJJK7UNkPRuSE6\n=uG1D\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0ae69db70a4a28f202d441b7131cd5b2169e7afe",
          "sha": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
          "html_url": "https://github.com/bitcoin/bips/commit/0ae69db70a4a28f202d441b7131cd5b2169e7afe"
        }
      ],
      "message": "Apply suggestions from code review\n\nCo-authored-by: Jon Atack <jon@atack.com>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2025-01-14T20:39:44Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2025-01-14T20:39:44Z"
      },
      "sha": "81e1838061ad358ac7703817b1dfbdaca212ce5b"
    },
    {
      "event": "commented",
      "id": 2591066972,
      "node_id": "IC_kwDOAN28mc6acItc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2591066972",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-14T20:44:24Z",
      "updated_at": "2025-01-14T20:44:24Z",
      "author_association": "NONE",
      "body": "> Have you read the mail list discussion at https://groups.google.com/g/bitcoindev/c/8O857bRSVV8? It might be good to weigh in there if you're inclined.\r\n\r\nI did write a response in the mailing list many months ago, but it never showed up. Not sure what happened. I really don't want to repeat my analysis... It was a good amount of work that was lost.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2591066972",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGMxYjkwNDc2NTU2ZDA1Yzc2YTkzZTZiMmRjZTQxYzNjZGI5NzM1NTk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c1b90476556d05c76a93e6b2dce41c3cdb973559",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c1b90476556d05c76a93e6b2dce41c3cdb973559",
      "tree": {
        "sha": "d83d3c086304a9214889cdbfadc7f15310b0a2cd",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d83d3c086304a9214889cdbfadc7f15310b0a2cd"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d83d3c086304a9214889cdbfadc7f15310b0a2cd\nparent 81e1838061ad358ac7703817b1dfbdaca212ce5b\nauthor Hunter Trujillo <cryptoquick@pm.me> 1736888380 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1736888380 -0700\n\nAddress suggestions from jonatack's review.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ4bQPAAKCRBn2nwXlg36\nzxSPAP4/sx5cKWMHdWlpFCmngBxTyiD3+aqPevX92coFe3WUfgD9Ff+KK5Dv0A8m\n7/SRlLUVhGU6B1xcf+7RBJaMG9kMjQU=\n=3VDh\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/81e1838061ad358ac7703817b1dfbdaca212ce5b",
          "sha": "81e1838061ad358ac7703817b1dfbdaca212ce5b",
          "html_url": "https://github.com/bitcoin/bips/commit/81e1838061ad358ac7703817b1dfbdaca212ce5b"
        }
      ],
      "message": "Address suggestions from jonatack's review.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2025-01-14T20:59:40Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2025-01-14T20:59:40Z"
      },
      "sha": "c1b90476556d05c76a93e6b2dce41c3cdb973559"
    },
    {
      "event": "review_requested",
      "id": 15930154908,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAAO1gt-c",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15930154908",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-14T21:02:27Z",
      "requested_reviewer": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 15930155395,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAAO1guGD",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15930155395",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-14T21:02:30Z",
      "requested_reviewer": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2596258771,
      "node_id": "IC_kwDOAN28mc6av8PT",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596258771",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T17:04:18Z",
      "updated_at": "2025-02-06T20:32:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "And is it not in your send folder?",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596258771",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2596268119,
      "node_id": "IC_kwDOAN28mc6av-hX",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596268119",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T17:08:36Z",
      "updated_at": "2025-02-06T20:32:12Z",
      "author_association": "NONE",
      "body": "> And is it not in your send folder?\r\n\r\nI composed it in the Google GUI ... Last I checked there wasn't a way to check back on it.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596268119",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2596283305,
      "node_id": "IC_kwDOAN28mc6awCOp",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596283305",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T17:15:54Z",
      "updated_at": "2025-02-06T20:31:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "If you sent it from there, it should be in your \"Sent\" or \"Drafts\" folder, unless you deleted it.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596283305",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2596287722,
      "node_id": "IC_kwDOAN28mc6awDTq",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596287722",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T17:18:12Z",
      "updated_at": "2025-02-06T20:31:27Z",
      "author_association": "NONE",
      "body": "I don't see anything like that here...\r\n![Screenshot from 2025-01-16 10-17-30](https://github.com/user-attachments/assets/0872f72e-22d5-4241-a5d7-c5a06e31becf)\r\n",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596287722",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2596292667,
      "node_id": "IC_kwDOAN28mc6awEg7",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596292667",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T17:20:37Z",
      "updated_at": "2025-02-06T20:31:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "Oh, I thought you meant from the GUI of a Gmail account.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596292667",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "reviewed",
      "id": 2556753690,
      "node_id": "PRR_kwDOAN28mc6YZPca",
      "url": null,
      "actor": null,
      "commit_id": "c1b90476556d05c76a93e6b2dce41c3cdb973559",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I’m a bit confused that another review was requested from me. As I said in my prior review:\r\n\r\n> This is all that I have at this time from an editorial standpoint. It would be good if this proposal got more feedback and/or endorsements from domain experts in the next steps.\r\n\r\nI don’t think this needs another review from me, but rather it needs more engagement and support from other domain experts. Personally, I’m pretty skeptical about the approach of introducing a multitude of different signature schemes at once. ",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2556753690",
      "submitted_at": "2025-01-16T17:21:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "commented",
      "id": 2596302452,
      "node_id": "IC_kwDOAN28mc6awG50",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596302452",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T17:25:26Z",
      "updated_at": "2025-01-16T17:25:26Z",
      "author_association": "NONE",
      "body": "To start, I think we need to create a \"skeleton\" for integrating signature algorithms, such as Falcon-512  - 1024, as it seems to be the most optimal candidate at the moment. Since Falcon-512 - 1024 but it does not support key derivation for private and public keys, we can introduce an additional field in the wallet.dat to store the keys specifically for post-quantum signature algorithms.\r\n\r\nNaturally, the descriptor would also need to be designed to handle single keys, ensuring compatibility with Falcon . This \"skeleton\" would serve as a foundation for integrating Falcon and similar post-quantum algorithms into the system. It will allow us to expand functionality while maintaining separation from existing ECDSA or other elliptic-curve-based algorithms.\r\n\r\nI'm already trying to implement something similar using the available API, with slight extensions such as key generation from a seed and deriving a public key from a private key to match the expected logic\r\n",
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596302452",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2596309191,
      "node_id": "IC_kwDOAN28mc6awIjH",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596309191",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T17:28:48Z",
      "updated_at": "2025-01-16T17:28:48Z",
      "author_association": "NONE",
      "body": "![Снимок экрана 2025-01-12 052928](https://github.com/user-attachments/assets/4c144848-f8c5-485b-9755-ea9c380da129)\r\n",
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596309191",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2596364611,
      "node_id": "IC_kwDOAN28mc6awWFD",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596364611",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T17:57:20Z",
      "updated_at": "2025-01-16T17:57:20Z",
      "author_association": "NONE",
      "body": "@murchandamus \r\n> I’m a bit confused that another review was requested from me. As I said in my prior review:\r\n> \r\n> > This is all that I have at this time from an editorial standpoint. It would be good if this proposal got more feedback and/or endorsements from domain experts in the next steps.\r\n> \r\n> I don’t think this needs another review from me, but rather it needs more engagement and support from other domain experts. Personally, I’m pretty skeptical about the approach of introducing a multitude of different signature schemes at once.\r\n\r\nThat makes sense. I'll try to solicit more feedback from SMEs. The only reason I re-requested review was because I was hoping to get an approval and merge, but I'm not sure how far off we are from that.\r\n\r\nThe reason four were proposed to be introduced was, not only does it make sense from a hybrid cryptography perspective (some may sign high-value transactions with multiple types for redundancy), it's also possible that this early on, there might be vulnerabilities in the PQC algorithms chosen. There is skepticism about algorithms that make more modern security assumptions. Some prefer hash-based algorithms like SPHINCS, which was a strong preference from people like Antoine Riard and Matthew Corallo. There are problems with SPHINCS, however, in that it's quite large, and also it doesn't support signature aggregation so far as I'm aware.\r\n\r\nDo you think it might make sense to edit this to omit the specific signature algorithms? The only problem with that is, that makes it so I can't implement valid test vectors, and when I eventually go to implement BIP-360, it's unclear from the spec which algorithms to support.\r\n\r\nMy stance has evolved on this over time... In my opinion, we should wait as long as possible until PQC algos are better understood, verified, and implemented. That said, P2QRH, as it was introduced on the mailing list, is meant to just be a concrete starting point for these discussions, and it's essentially an imperfect compromise between multiple different competing interests.\r\n\r\nAdditionally, I'd like to have another conversation around how multisig should work. Currently specified is a merkle tree approach, but I'm considering instead going with an approach similar to P2SH as I outlined [in one of my comments](https://github.com/bitcoin/bips/pull/1670#discussion_r1896163249). I'm not sure if that should go into this PR or into a separate PR.\r\n\r\nI also would like to work on an alternative BIP, one that's more conservative and informed by lessons learned from this BIP, for Pay to Taproot Hash (P2TRH, with SegWit v2 addresses), but I'm reticent to open multiple BIP PRs at once. I think it makes sense as a sort of stopgap for those who rely on signature aggregation such as FROST multisig, and it's a much less heavy a lift. It would be less controversial due to lack of PQC algo bikeshedding, and while it's imperfect because it doesn't make the mempool trustless to use, we can then point to P2QRH as the proposal to support if that's where community consensus is.\r\n\r\nSo, yes, there are a lot of considerations to be had here. I'm also likely going to need to deprecate SQIsign due to its terrible performance (100,000 times more computationally expensive to verify than ECDSA according to @EthanHeilman), and I might also want to include RACCOON because there's definitely demand for signature aggregation. Additionally, I've heard concerns about the constants chosen for FALCON in favor or NTRU Prime, but there are also people working on signature aggregation for FALCON which could improve the utility of the proposal.\r\n\r\nOne other possibility is that we make signature aggregation a requirement for any PQC algo included from this point forward so as to not have a significant reduction in functionality available with Taproot / Schnorr signatures. This requirement, which has been expressed to me by a number of users, would dramatically narrow down the number of valid signature algorithm candidates.\r\n\r\n@mraksoll4 \r\n> Since Falcon-512 - 1024 but it does not support key derivation for private and public keys\r\n\r\nI believe this is actually an implementation detail. pqclean is unsuitable for bitcoin pqc because of its lack of BIP-32 support, but it might be useful as a basis. It just lacks an API to provide your own entropy, but that's not the fault of the signature algorithm, it's instead the fault of the implementation, which can be corrected in a more unified bitcoin pqc library designed in support of this BIP.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596364611",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 15965504567,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAO3nkQ3",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15965504567",
      "actor": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T17:57:23Z"
    },
    {
      "event": "subscribed",
      "id": 15965504585,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAO3nkRJ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15965504585",
      "actor": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T17:57:23Z"
    },
    {
      "event": "mentioned",
      "id": 15965504617,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAO3nkRp",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15965504617",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T17:57:23Z"
    },
    {
      "event": "subscribed",
      "id": 15965504635,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAO3nkR7",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15965504635",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T17:57:23Z"
    },
    {
      "event": "mentioned",
      "id": 15965504657,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAO3nkSR",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15965504657",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T17:57:23Z"
    },
    {
      "event": "subscribed",
      "id": 15965504680,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAO3nkSo",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15965504680",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T17:57:23Z"
    },
    {
      "event": "commented",
      "id": 2596402656,
      "node_id": "IC_kwDOAN28mc6awfXg",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596402656",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T18:18:26Z",
      "updated_at": "2025-01-16T18:18:57Z",
      "author_association": "NONE",
      "body": "most post-quantum algorithms that are not yet cracked are lattice structures (unless we want the signature size to be several megabytes) their mathematical basis does not allow for tweaks, as in eleptic curves. These are different mathematical structures, for example RSA, the problem with dilithium and falcon is that there is no analogous G, even potential components f and g are secrets\r\n\r\nThis is not native functions of of clean , i created self based at exist function ( you can see it via added memory cleanse .. native does not clear temp buffers )\r\n\r\n```\r\n#include <stddef.h>\r\n#include <string.h>\r\n#include <stdio.h>\r\n\r\n#include \"api.h\"\r\n#include \"inner.h\"\r\n#include \"memory_cleanse.h\"\r\n\r\n#define NONCELEN   40\r\n\r\n#include \"randombytes.h\"\r\n/* keypair from fixed seed*/\r\nint\r\nPQCLEAN_FALCON512_CLEAN_crypto_sign_keypair_from_fseed(\r\n    uint8_t *pk, uint8_t *sk, const uint8_t *seed) {\r\n    union {\r\n        uint8_t b[FALCON_KEYGEN_TEMP_9];\r\n        uint64_t dummy_u64;\r\n        fpr dummy_fpr;\r\n    } tmp;\r\n    int8_t f[512], g[512], F[512];\r\n    uint16_t h[512];\r\n    inner_shake256_context rng;\r\n    size_t u, v;\r\n\r\n    /*\r\n     * Checking the input seed parameter.\r\n     * If the seed is NULL, return an error.\r\n     */\r\n    if (seed == NULL) {\r\n        return -1;  // Error: seed is not provided.\r\n    }\r\n\r\n    /*\r\n     * Initialize the SHAKE256 random number generator using the seed.\r\n     * We now pass the seed directly to the generator.\r\n     */\r\n\r\n    /*\r\n     * print seed for debug \r\n\t */\r\n    print_hex_debug(\"Generated Seed Keypair from fseed 1\", seed, 48);\r\n\r\n    inner_shake256_init(&rng);\r\n    inner_shake256_inject(&rng, seed, 48);\r\n\r\n    /*\r\n     * print seed for debug \r\n\t */\r\n    print_hex_debug(\"Generated Seed Keypair from fseed 2\", seed, 48);\r\n\r\n    memory_cleanse((void*)seed, 48);\r\n    inner_shake256_flip(&rng);\r\n    PQCLEAN_FALCON512_CLEAN_keygen(&rng, f, g, F, NULL, h, 9, tmp.b);\r\n    inner_shake256_ctx_release(&rng);\r\n\r\n\tmemory_cleanse(&rng, sizeof(inner_shake256_context));\r\n\r\n    /*\r\n     * Encode private key.\r\n     */\r\n    sk[0] = 0x50 + 9;\r\n    u = 1;\r\n    v = PQCLEAN_FALCON512_CLEAN_trim_i8_encode(\r\n            sk + u, PQCLEAN_FALCON512_CLEAN_CRYPTO_SECRETKEYBYTES - u,\r\n            f, 9, PQCLEAN_FALCON512_CLEAN_max_fg_bits[9]);\r\n    if (v == 0) {\r\n\t\tmemory_cleanse(f, sizeof(f));\r\n        memory_cleanse(g, sizeof(g));\r\n        memory_cleanse(F, sizeof(F));\r\n        memory_cleanse(h, sizeof(h));\r\n        memory_cleanse(tmp.b, sizeof(tmp.b));\r\n        return -1;\r\n    }\r\n    u += v;\r\n    v = PQCLEAN_FALCON512_CLEAN_trim_i8_encode(\r\n            sk + u, PQCLEAN_FALCON512_CLEAN_CRYPTO_SECRETKEYBYTES - u,\r\n            g, 9, PQCLEAN_FALCON512_CLEAN_max_fg_bits[9]);\r\n    if (v == 0) {\r\n\t\tmemory_cleanse(f, sizeof(f));\r\n        memory_cleanse(g, sizeof(g));\r\n        memory_cleanse(F, sizeof(F));\r\n        memory_cleanse(h, sizeof(h));\r\n        memory_cleanse(tmp.b, sizeof(tmp.b));\r\n        return -1;\r\n    }\r\n    u += v;\r\n    v = PQCLEAN_FALCON512_CLEAN_trim_i8_encode(\r\n            sk + u, PQCLEAN_FALCON512_CLEAN_CRYPTO_SECRETKEYBYTES - u,\r\n            F, 9, PQCLEAN_FALCON512_CLEAN_max_FG_bits[9]);\r\n    if (v == 0) {\r\n\t\tmemory_cleanse(f, sizeof(f));\r\n        memory_cleanse(g, sizeof(g));\r\n        memory_cleanse(F, sizeof(F));\r\n        memory_cleanse(h, sizeof(h));\r\n        memory_cleanse(tmp.b, sizeof(tmp.b));\r\n        return -1;\r\n    }\r\n    u += v;\r\n    if (u != PQCLEAN_FALCON512_CLEAN_CRYPTO_SECRETKEYBYTES) {\r\n\t\tmemory_cleanse(f, sizeof(f));\r\n        memory_cleanse(g, sizeof(g));\r\n        memory_cleanse(F, sizeof(F));\r\n        memory_cleanse(h, sizeof(h));\r\n        memory_cleanse(tmp.b, sizeof(tmp.b));\r\n        return -1;\r\n    }\r\n\r\n    memory_cleanse(f, sizeof(f));\r\n    memory_cleanse(g, sizeof(g));\r\n    memory_cleanse(F, sizeof(F));\r\n\r\n    /*\r\n     * Encode public key.\r\n     */\r\n    pk[0] = 0x00 + 9;\r\n    v = PQCLEAN_FALCON512_CLEAN_modq_encode(\r\n            pk + 1, PQCLEAN_FALCON512_CLEAN_CRYPTO_PUBLICKEYBYTES - 1,\r\n            h, 9);\r\n    if (v != PQCLEAN_FALCON512_CLEAN_CRYPTO_PUBLICKEYBYTES - 1) {\r\n        memory_cleanse(h, sizeof(h));\r\n        memory_cleanse(tmp.b, sizeof(tmp.b));\r\n        return -1;\r\n    }\r\n\r\n    memory_cleanse(h, sizeof(h));\r\n    memory_cleanse(tmp.b, sizeof(tmp.b));\r\n\r\n    return 0;\r\n}\r\n\r\n/*\r\n * This function reconstructs the public key from a given private key.\r\n * It decodes the private key components (f and g) from the secret key\r\n * and uses them to regenerate the corresponding public key (h).\r\n * The generated public key is then encoded into the provided pk array.\r\n * \r\n * public (pk):  The output buffer where the public key will be stored (must be at least PQCLEAN_FALCON512_CLEAN_CRYPTO_PUBLICKEYBYTES in size).\r\n * private (sk):  The input secret key (private key) in byte array format (must be PQCLEAN_FALCON512_CLEAN_CRYPTO_SECRETKEYBYTES in size).\r\n * Return value: 0 on success, -1 on error.\r\n */\r\nint\r\nPQCLEAN_FALCON512_CLEAN_crypto_sign_pubkey_from_privkey(\r\n    uint8_t *pk, const uint8_t *sk) {\r\n    union {\r\n        uint8_t b[FALCON_KEYGEN_TEMP_9];\r\n        uint64_t dummy_u64;\r\n        fpr dummy_fpr;\r\n    } tmp;\r\n    int8_t f[512], g[512];\r\n    uint16_t h[512];\r\n    size_t u, v;\r\n\r\n    /*\r\n     * Decode the private key.\r\n     */\r\n    if (sk[0] != 0x50 + 9) {\r\n        return -1;\r\n    }\r\n    u = 1;\r\n    v = PQCLEAN_FALCON512_CLEAN_trim_i8_decode(\r\n            f, 9, PQCLEAN_FALCON512_CLEAN_max_fg_bits[9],\r\n            sk + u, PQCLEAN_FALCON512_CLEAN_CRYPTO_SECRETKEYBYTES - u);\r\n    if (v == 0) {\r\n        return -1;\r\n    }\r\n    u += v;\r\n    v = PQCLEAN_FALCON512_CLEAN_trim_i8_decode(\r\n            g, 9, PQCLEAN_FALCON512_CLEAN_max_fg_bits[9],\r\n            sk + u, PQCLEAN_FALCON512_CLEAN_CRYPTO_SECRETKEYBYTES - u);\r\n    if (v == 0) {\r\n        return -1;\r\n    }\r\n\r\n    /*\r\n     * Reconstruct the public key using f and g by calling the compute_public function.\r\n     */\r\n    if (!PQCLEAN_FALCON512_CLEAN_compute_public(h, f, g, 9, tmp.b)) {\r\n\t\tmemory_cleanse(f, sizeof(f));\r\n        memory_cleanse(g, sizeof(g));\r\n        memory_cleanse(tmp.b, sizeof(tmp.b));\r\n\t    memory_cleanse(h, sizeof(h));\r\n        return -1;\r\n    }\r\n\r\n    /*\r\n     * Encode public key.\r\n     */\r\n    pk[0] = 0x00 + 9;\r\n    v = PQCLEAN_FALCON512_CLEAN_modq_encode(\r\n            pk + 1, PQCLEAN_FALCON512_CLEAN_CRYPTO_PUBLICKEYBYTES - 1,\r\n            h, 9);\r\n    if (v != PQCLEAN_FALCON512_CLEAN_CRYPTO_PUBLICKEYBYTES - 1) {\r\n\t\tmemory_cleanse(f, sizeof(f));\r\n        memory_cleanse(g, sizeof(g));\r\n        memory_cleanse(tmp.b, sizeof(tmp.b));\r\n\t    memory_cleanse(h, sizeof(h));\r\n        return -1;\r\n    }\r\n\r\n    // Securely clear sensitive buffers\r\n    memory_cleanse(f, sizeof(f));\r\n    memory_cleanse(g, sizeof(g));\r\n    memory_cleanse(tmp.b, sizeof(tmp.b));\r\n\tmemory_cleanse(h, sizeof(h));\r\n    return 0;\r\n}\r\n\r\n```\r\n",
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596402656",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2596406567,
      "node_id": "IC_kwDOAN28mc6awgUn",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596406567",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T18:20:39Z",
      "updated_at": "2025-01-16T18:20:39Z",
      "author_association": "NONE",
      "body": "@mraksoll4 I'm not sure I understand the point you're trying to make.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596406567",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 15965752751,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAO3og2v",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15965752751",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T18:20:40Z"
    },
    {
      "event": "subscribed",
      "id": 15965752768,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAO3og3A",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15965752768",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T18:20:40Z"
    },
    {
      "event": "commented",
      "id": 2596426167,
      "node_id": "IC_kwDOAN28mc6awlG3",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596426167",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T18:31:57Z",
      "updated_at": "2025-01-16T18:31:57Z",
      "author_association": "NONE",
      "body": "> @mraksoll4 I'm not sure I understand the point you're trying to make.\r\n\r\nI meant that the capabilities of elliptic curves cannot and should not be directly projected onto post-quantum algorithms. A different approach is needed. BIP32 and the ability to derive public keys from public keys is a unique feature of elliptic curves. Even isogeny-based cryptography, which no longer holds against certain attacks, doesn’t support such functionality. The key difference lies in the underlying mathematical structures.\r\n\r\nBut we can still build a key tree for private keys using abstractions on top of the seed.\r\n\r\nThe problem lies specifically with public keys.",
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596426167",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 15965868627,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAO3o9JT",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15965868627",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T18:32:00Z"
    },
    {
      "event": "subscribed",
      "id": 15965868637,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAO3o9Jd",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15965868637",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T18:32:00Z"
    },
    {
      "event": "commented",
      "id": 2596437285,
      "node_id": "IC_kwDOAN28mc6awn0l",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596437285",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T18:35:27Z",
      "updated_at": "2025-01-16T18:35:27Z",
      "author_association": "NONE",
      "body": "No, it's not. BIP-32 doesn't rely on key tweaking. It just produces entropy (private keys) in a deterministic way.\r\n\r\nI think you're confused because you're only working from one implementation. For example, this implementation of FALCON would support BIP-32:\r\n\r\nhttps://docs.rs/falcon-rust/latest/falcon_rust/falcon1024/fn.keygen.html#:~:text=pub%20fn%20keygen(-,seed%3A%20%5Bu8%3B%2032%5D,-)%20-%3E%20(SecretKey%2C",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596437285",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2596489011,
      "node_id": "IC_kwDOAN28mc6aw0cz",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596489011",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T18:50:05Z",
      "updated_at": "2025-01-16T18:50:05Z",
      "author_association": "NONE",
      "body": "> No, it's not. BIP-32 doesn't rely on key tweaking. It just produces entropy (private keys) in a deterministic way.\r\n> \r\n> I think you're confused because you're only working from one implementation. For example, this implementation of FALCON would support BIP-32:\r\n> \r\n> https://docs.rs/falcon-rust/latest/falcon_rust/falcon1024/fn.keygen.html#:~:text=pub%20fn%20keygen(-,seed%3A%20%5Bu8%3B%2032%5D,-)%20-%3E%20(SecretKey%2C\r\n\r\nAs far as I understand, this also works directly with key pairs. Earlier, I mentioned that we can manipulate the seed to generate child key pairs. The issue lies in the fact that we cannot derive public keys from other public key\r\n\r\n```\r\nshake256(seed + some data + some data  + index)=seed (48 bytes) --> int\r\nPQCLEAN_FALCON512_CLEAN_crypto_sign_keypair_from_fseed(\r\n    uint8_t *pk, uint8_t *sk, const uint8_t *seed)\r\n```",
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596489011",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2596501588,
      "node_id": "IC_kwDOAN28mc6aw3hU",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596501588",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T18:52:59Z",
      "updated_at": "2025-01-16T18:52:59Z",
      "author_association": "NONE",
      "body": "I see your point now. For example, using an xpub alone to generate more keys for, say, a watch-only wallet, might not be possible with FALCON.\r\n\r\nI'll need to think about that.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596501588",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2596555464,
      "node_id": "IC_kwDOAN28mc6axErI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596555464",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T19:05:16Z",
      "updated_at": "2025-01-16T19:05:16Z",
      "author_association": "NONE",
      "body": "> I see your point now. For example, using an xpub alone to generate more keys for, say, a watch-only wallet, might not be possible with FALCON.\r\n> \r\n> I'll need to think about that.\r\n\r\nYes, but nothing prevents us from using single keys for watch-only wallets. For example, if a user tries to export an xpub for a post-quantum algorithm, we could display a message like:\r\n\r\n\"Post-quantum algorithm [name] does not support xpub keys. You need to explicitly export the key using a command to retrieve it from the descriptor or key cache.\"\r\n\r\nAlternatively, we could provide a list of existing keys in a serialized format. For instance:\r\n\r\nGenerate 2000 keys on-demand when the user requests a key list.\r\nOffer an option to save the corresponding private keys to wallet.dat or not, securely wiping the buffer after generation.\r\nThis approach would give flexibility while acknowledging the limitations of post-quantum algorithms and maintaining compatibility with watch-only and partially signed setups.",
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596555464",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2596647353,
      "node_id": "IC_kwDOAN28mc6axbG5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2596647353",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T19:25:03Z",
      "updated_at": "2025-01-16T19:25:03Z",
      "author_association": "NONE",
      "body": "There is another option where multiple addresses can be linked to a single key pair through key packing and unpacking using additional parameters, with the index influencing the final address. However, this approach has limited practical value. While it makes it impossible to determine any connection between the addresses before a transaction is conducted, it resembles the concept of non-hardened derivation.",
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2596647353",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI3NTAwM2U2NGJjYTc3YzIwMGEyNDQzNzhmMWQ0NTQwZDQ2MjMwOWE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b75003e64bca77c200a244378f1d4540d462309a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b75003e64bca77c200a244378f1d4540d462309a",
      "tree": {
        "sha": "41fd29df65dc5761445a2924503fd81c622651ff",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/41fd29df65dc5761445a2924503fd81c622651ff"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 41fd29df65dc5761445a2924503fd81c622651ff\nparent c1b90476556d05c76a93e6b2dce41c3cdb973559\nauthor Hunter Trujillo <cryptoquick@pm.me> 1737383962 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1737383962 -0700\n\nRemove SQIsign from consideration due to significant performance concerns. Refactor language from long-range attack to long-exposure so as to not be confused with the language around block re-org attacks.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ45gGgAKCRBn2nwXlg36\nz/9rAQCWYhX6xhwdAID1QldqJq5igTal4LU3+YwfoMNMKZwnfwEAi02wc+hhYp+Q\nb+sSGx3hyvzEZBn4Os/etXyRz9EqaAA=\n=sdK3\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c1b90476556d05c76a93e6b2dce41c3cdb973559",
          "sha": "c1b90476556d05c76a93e6b2dce41c3cdb973559",
          "html_url": "https://github.com/bitcoin/bips/commit/c1b90476556d05c76a93e6b2dce41c3cdb973559"
        }
      ],
      "message": "Remove SQIsign from consideration due to significant performance concerns. Refactor language from long-range attack to long-exposure so as to not be confused with the language around block re-org attacks.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2025-01-20T14:39:22Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2025-01-20T14:39:22Z"
      },
      "sha": "b75003e64bca77c200a244378f1d4540d462309a"
    },
    {
      "event": "commented",
      "id": 2605529975,
      "node_id": "IC_kwDOAN28mc6bTTt3",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2605529975",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T19:07:28Z",
      "updated_at": "2025-01-21T19:07:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Do you think it might make sense to edit this to omit the specific signature algorithms? The only problem with that is, that makes it so I can't implement valid test vectors, and when I eventually go to implement BIP-360, it's unclear from the spec which algorithms to support.\r\n\r\nPerhaps it would make sense to describe the general output type mechanism, and then to have a separate BIP per signature algorithm to plug in?",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2605529975",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDVlNTY4ZTMxNDFiNDIzMTM5NTE4NTM3YTMwYjg1NzEyNWFiZjQxN2U",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5e568e3141b423139518537a30b857125abf417e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5e568e3141b423139518537a30b857125abf417e",
      "tree": {
        "sha": "285970ef231a6f28dd716b718c47bcfc8bc71841",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/285970ef231a6f28dd716b718c47bcfc8bc71841"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 285970ef231a6f28dd716b718c47bcfc8bc71841\nparent b75003e64bca77c200a244378f1d4540d462309a\nauthor Hunter Trujillo <cryptoquick@pm.me> 1737665354 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1737665366 -0700\n\nFix typo.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ5KrVgAKCRBn2nwXlg36\nzxCeAQD1u4IPQZguNENoZ+gbAM85eWyWgOfZnUtCI5KSzsOpGwD+NUE5M/JcU3h5\nek+Y1rvFTGQQG93EOsj8540fvB6eTgQ=\n=bS96\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b75003e64bca77c200a244378f1d4540d462309a",
          "sha": "b75003e64bca77c200a244378f1d4540d462309a",
          "html_url": "https://github.com/bitcoin/bips/commit/b75003e64bca77c200a244378f1d4540d462309a"
        }
      ],
      "message": "Fix typo.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2025-01-23T20:49:26Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2025-01-23T20:49:14Z"
      },
      "sha": "5e568e3141b423139518537a30b857125abf417e"
    },
    {
      "event": "commented",
      "id": 2611013459,
      "node_id": "IC_kwDOAN28mc6boOdT",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2611013459",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-23T21:04:11Z",
      "updated_at": "2025-01-23T21:04:11Z",
      "author_association": "NONE",
      "body": "That's an interesting idea. Do you think it would make sense to showcase the new transaction structure and commitment scheme, which by default still requires Schnorr signatures, just without the additional signature algorithms? Then the test vectors for this BIP would only be for secp256k1, and then we work out the requirements for specific PQC algorithms into a separate BIP...?\r\n\r\nThis would have the advantage that it would simplify large sections of the BIP dedicated to signature algorithm selection and we can have those discussions separately.\r\n\r\nThe only problem with that is, it really takes the fangs out of BIP-360 as a quantum hardening BIP. It does make the improvement that it secures Taproot against long exposure attacks, so we don't need a BIP, like say, Pay to Taproot Hash. Do you think it might make sense to implement just one algorithm in this also, maybe FALCON? Maybe we make the stipulation that FALCON is provisional and that a more authoritative set of signature algorithms will be provided in a separate BIP?\r\n\r\nOne argument for having a separate P2TRH BIP is that it's a much simpler implementation, since it doesn't require a change to transaction structure and commitment scheme. [I've already worked on a draft of that](https://github.com/cryptoquick/bips/blob/p2trh/bip-p2trh.mediawiki), but it's not polished and I'm not sure if I want to announce it since we might go with an abbreviated BIP-360.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2611013459",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2611020443,
      "node_id": "IC_kwDOAN28mc6boQKb",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2611020443",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-23T21:08:06Z",
      "updated_at": "2025-01-23T21:19:21Z",
      "author_association": "NONE",
      "body": "I believe the solution would be to use multithreading for signing and verification processes to mitigate the slowness of post-quantum algorithms. In my opinion, the most promising algorithms so far are lattice-based ones. Ideally, they should be used in combination with hash-based approaches, such as sponge constructions like Keccak (e.g., SHA-3, SHAKE256).\r\nSHAKE256 will be convenient for replacing HMAC when working with seeds for building derivations. Additionally, I believe the approach should be independent of ECDSA to avoid even the slightest potential vulnerability. As for the address, it should either be purely post-quantum-based or a hybrid of public keys.\r\n\r\nIn the case of hybrid public keys, for each ECDSA-derived child address generation, there should be an automatic request for parallel derivation of a corresponding public key - using a post-quantum algorithm (if the attestation field method is used).\r\n\r\nI’m talking about real-world scenarios that are already available now. So, while there might be something new in the future, it’s likely that the evolution of post-quantum addresses will follow a similar path as P2SH -> Taproot.\r\n\r\nRegarding old addresses, there could be a separate rule with flexible timeframes where the attestation field would be required \r\nfor subsequent transactions, even for existing ones, in case of a critical situation—such as the emergence of a real threat of address compromise. This would act as a kind of \"hotfix\" that could be activated if necessary to minimize damage to the network, provided it is approved by a majority (enforcing a \"ONLYPOSTQUANTUMCANPAY\" mechanism). \r\n",
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2611020443",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDhjMGY3OTgyOTMyZTE4MGEzMjUzOTEyMDQ0NWE2MjkwNzcwNzJiNDA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8c0f7982932e180a32539120445a629077072b40",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8c0f7982932e180a32539120445a629077072b40",
      "tree": {
        "sha": "1eedd2a133cf5ab89caf93d52eb7808df0815feb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1eedd2a133cf5ab89caf93d52eb7808df0815feb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1eedd2a133cf5ab89caf93d52eb7808df0815feb\nparent 5e568e3141b423139518537a30b857125abf417e\nauthor Hunter Trujillo <cryptoquick@pm.me> 1737666887 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1737666887 -0700\n\nFix typo.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ5KxRwAKCRBn2nwXlg36\nz7ERAQC7jFZ/L5MxfOiSJ2/O7Vrv1xOJPyG52pWB7HGI5dWMVwEAxRlV6LV4dNYd\nN1UG4FNoeBreu2kK7tAmtn9SnaMwlwo=\n=/6fY\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5e568e3141b423139518537a30b857125abf417e",
          "sha": "5e568e3141b423139518537a30b857125abf417e",
          "html_url": "https://github.com/bitcoin/bips/commit/5e568e3141b423139518537a30b857125abf417e"
        }
      ],
      "message": "Fix typo.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2025-01-23T21:14:47Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2025-01-23T21:14:47Z"
      },
      "sha": "8c0f7982932e180a32539120445a629077072b40"
    },
    {
      "event": "commented",
      "id": 2611058171,
      "node_id": "IC_kwDOAN28mc6boZX7",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2611058171",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-23T21:31:22Z",
      "updated_at": "2025-01-23T21:31:22Z",
      "author_association": "NONE",
      "body": "@mraksoll4 \r\n> multithreading\r\n\r\nSome things are not easy to multithread, such as WASM implementations, like that used by BDK web wallets, so we can't rely on that to address those concerns. SQIsign's performance was particularly terrible, and so it was removed.\r\n\r\n> Ideally, they should be used in combination with hash-based approaches, such as sponge constructions like Keccak (e.g., SHA-3, SHAKE256)\r\n\r\nGiven that the threat Grover's poses is more remote than the threat posed by Shor's, I'd really rather restrict this BIP to only changes to signature algorithms and not to any hash functions used by Bitcoin.\r\n\r\n> I believe the approach should be independent of ECDSA to avoid even the slightest potential vulnerability.\r\n\r\nAbsolutely not. It's fine to support secp256k1 even in a post-quantum regime so long as it's combined with PQC.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2611058171",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 16050146742,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAO8qc22",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16050146742",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-23T21:31:23Z"
    },
    {
      "event": "subscribed",
      "id": 16050146753,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAO8qc3B",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16050146753",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-23T21:31:23Z"
    },
    {
      "event": "commented",
      "id": 2613410631,
      "node_id": "IC_kwDOAN28mc6bxXtH",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2613410631",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-24T21:30:03Z",
      "updated_at": "2025-01-24T22:46:19Z",
      "author_association": "NONE",
      "body": "> @mraksoll4\r\n> \r\n> > multithreading\r\n> \r\n> Some things are not easy to multithread, such as WASM implementations, like that used by BDK web wallets, so we can't rely on that to address those concerns. SQIsign's performance was particularly terrible, and so it was removed.\r\n> \r\n> > Ideally, they should be used in combination with hash-based approaches, such as sponge constructions like Keccak (e.g., SHA-3, SHAKE256)\r\n> \r\n> Given that the threat Grover's poses is more remote than the threat posed by Shor's, I'd really rather restrict this BIP to only changes to signature algorithms and not to any hash functions used by Bitcoin.\r\n> \r\n> > I believe the approach should be independent of ECDSA to avoid even the slightest potential vulnerability.\r\n> \r\n> Absolutely not. It's fine to support secp256k1 even in a post-quantum regime so long as it's combined with PQC.\r\n\r\nIt’s more convenient to store a separate descriptor with a separate seed for post quantum addresses and separation of generation; in addition to security, this is convenient if we later want to add more signature algorithms\r\n\r\n\r\nin case of combination it is also important what do we want to use for quantum algorithm as a seed? If keys are what they are and convert them to 48 bytes of seed, then what is the point? It will be enough for an attacker to crack ecdsa, because they are connected, if they have their keygen with their seed and are connected almost exclusively by paths, that is, an additional level of protection. Sha3 algorithms are less susceptible to Sha256 problems, shake256 is simply convenient as a converter for obtaining good cryptographic bytes from combined paths with a base seed.\r\n\r\n\r\n```\r\nqrh key descritpor(ECDSA + Master seed with base path as simple example)\r\n       │                                           │  \r\n       │                                           │  \r\nMaster Key(ECDSA)                           Master Seed (PQ) \r\n       │                                           │\r\n       │                                           │\r\n       │                                           │\r\n       │                                           │                                           \r\n       │                                           │               \r\n       │                                           │\r\n       ▼                                           │                                   \r\n   xpub (ECDSA)                                    │                       \r\n       │                                           │\r\n       │                                           │\r\nDrive Path (ECDSA)                      shake256(Derived path + seed (PQ))\r\n       │                                           │\r\n       │                                           │\r\n┌──────▼─────────┐                         ┌───────▼───────┐\r\n│                │                         │               │\r\n│ Pub Key (ECDSA)│                         │ Pub Key (PQ)  │\r\n│                │                         │               │\r\n│                │                         │               │\r\n└───────┬────────┘                         └───────┬───────┘\r\n        │                                          │\r\n        │                                          │\r\n        ├──────────────────────────────────────────┤\r\n        │                                          │\r\n        ▼                                          ▼\r\n┌───────────────────────────────────────────────────────────┐\r\n│                     Merkle Tree Root                      │\r\n│ (Combining Pub Keys from ECDSA and PQ for Merkle Root)    │\r\n└───────────────────────────────────────────────────────────┘\r\n```\r\n\r\nthis is a simplified scheme without scripts, in a real scheme we also include scripts\r\n\r\n\r\nin essence, 2 signature algorithms converge for us through the use of 1 path in relation to the child keys of ecdsa, simultaneously requesting for the attestation field a public key for PQ, or a private key when we need a signature\r\n\r\nit is also possible to do caching, but due to the fact that the keys are huge, this should be optional for anyone who needs it, for everyday use we store only the master and the paths associated with it\r\n\r\n",
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2613410631",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 16064349464,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAO9goUY",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16064349464",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-24T21:30:05Z"
    },
    {
      "event": "subscribed",
      "id": 16064349478,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAO9goUm",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16064349478",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-24T21:30:05Z"
    },
    {
      "event": "commented",
      "id": 2643237844,
      "node_id": "IC_kwDOAN28mc6djJvU",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2643237844",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-07T15:23:42Z",
      "updated_at": "2025-02-07T15:23:42Z",
      "author_association": "NONE",
      "body": "@mraksoll4 That makes sense. Just so you're aware, this BIP is for the consensus layer. A separate BIP will be needed to describe wallet behavior in the application layer.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2643237844",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 16226618591,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAPHLozf",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16226618591",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-07T15:23:44Z"
    },
    {
      "event": "subscribed",
      "id": 16226618607,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAPHLozv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16226618607",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-07T15:23:44Z"
    },
    {
      "event": "commented",
      "id": 2644387727,
      "node_id": "IC_kwDOAN28mc6dnieP",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2644387727",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-08T00:48:21Z",
      "updated_at": "2025-02-08T00:48:21Z",
      "author_association": "NONE",
      "body": "> @mraksoll4 That makes sense. Just so you're aware, this BIP is for the consensus layer. A separate BIP will be needed to describe wallet behavior in the application layer.\r\n\r\nHonestly, this descriptor logic has completely broken my brain... Need to create not just a separate descriptor but an entirely separate seed storage. In principle, there's no major issue in implementing an HMAC-like derivation using SHA3 and Shake256, where it will be necessary to operate with seeds (though FIPS prohibits any form of derivation if certification is required). The optimal version remains the padded Falcon 512 with a fixed signature size—1024 already seems excessive to me.",
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2644387727",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 16231977887,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAPHgFOf",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16231977887",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-08T00:48:22Z"
    },
    {
      "event": "subscribed",
      "id": 16231977890,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAPHgFOi",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16231977890",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-08T00:48:22Z"
    },
    {
      "event": "commented",
      "id": 2647057766,
      "node_id": "IC_kwDOAN28mc6dxuVm",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2647057766",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-10T06:28:00Z",
      "updated_at": "2025-02-10T06:28:12Z",
      "author_association": "NONE",
      "body": "> The optimal version remains the padded Falcon 512 with a fixed signature size—1024 already seems excessive to me.\r\n\r\nFalcon 1024 corresponds to NIST Level V which corresponds to 256 bits of security. I originally thought that would be analogous to the security level provided by secp256k1, so there would be no regression in security assumptions. Technically that's not true due to Pollard's rho attack (Ideally a cryptographer could help demystify this assumption), but the intention was clearly there to use 256 bit security was there when Satoshi chose the curve.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2647057766",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2647881263,
      "node_id": "IC_kwDOAN28mc6d03Yv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2647881263",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-10T12:44:04Z",
      "updated_at": "2025-02-10T13:26:13Z",
      "author_association": "NONE",
      "body": "> > The optimal version remains the padded Falcon 512 with a fixed signature size—1024 already seems excessive to me.\r\n> \r\n> Falcon 1024 corresponds to NIST Level V which corresponds to 256 bits of security. I originally thought that would be analogous to the security level provided by secp256k1, so there would be no regression in security assumptions. Technically that's not true due to Pollard's rho attack (Ideally a cryptographer could help demystify this assumption), but the intention was clearly there to use 256 bit security was there when Satoshi chose the curve.\r\n\r\nAs far as I remember falcon 512 ≈ secp256k1 security as an acceptable minimum ≈ AES-128\r\n\r\nthat is, for a classical system they are approximately equal, but secp256k1 has a vulnerability in the case of a quantum environment; post-quantum algorithms try to solve this problem. Most likely, the choice fell on secp256k1 256 bits (it seems even smaller there) as a balance between security and performance when Satoshi chose what to use.\r\n\r\nThe primary security relied on the system of change addresses, since it was assumed that no one would reuse the same address and that the address space would be sufficient even considering the change addresses.\r\n\r\nIn fact, when executing a transaction there should be at least two outputs - one for the intended transaction and one for the change. However, it turned out that many people needed to reuse the same address.",
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2647881263",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "reviewed",
      "id": 2630099795,
      "node_id": "PRR_kwDOAN28mc6cxCNT",
      "url": null,
      "actor": null,
      "commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2630099795",
      "submitted_at": "2025-02-20T14:47:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "commented",
      "id": 2672261736,
      "node_id": "IC_kwDOAN28mc6fR3po",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2672261736",
      "actor": {
        "login": "kayabaNerve",
        "id": 25259837,
        "node_id": "MDQ6VXNlcjI1MjU5ODM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/25259837?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kayabaNerve",
        "html_url": "https://github.com/kayabaNerve",
        "followers_url": "https://api.github.com/users/kayabaNerve/followers",
        "following_url": "https://api.github.com/users/kayabaNerve/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kayabaNerve/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kayabaNerve/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kayabaNerve/subscriptions",
        "organizations_url": "https://api.github.com/users/kayabaNerve/orgs",
        "repos_url": "https://api.github.com/users/kayabaNerve/repos",
        "events_url": "https://api.github.com/users/kayabaNerve/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kayabaNerve/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-20T17:57:45Z",
      "updated_at": "2025-02-20T17:57:45Z",
      "author_association": "NONE",
      "body": "> > The optimal version remains the padded Falcon 512 with a fixed signature size—1024 already seems excessive to me.\n> \n> Falcon 1024 corresponds to NIST Level V which corresponds to 256 bits of security. I originally thought that would be analogous to the security level provided by secp256k1, so there would be no regression in security assumptions. Technically that's not true due to Pollard's rho attack (Ideally a cryptographer could help demystify this assumption), but the intention was clearly there to use 256 bit security was there when Satoshi chose the curve.\n\nBitcoin only achieves 128-bit security in both its curve and its choice of hash function (SHA-256 only has 128-bit security against arbitrary collisions). While I won't comment on Satoshi's intent, I don't believe it's reasonable to seek a 256-bit security level, solely a level expected to at-worst decay to 128-bit.",
      "user": {
        "login": "kayabaNerve",
        "id": 25259837,
        "node_id": "MDQ6VXNlcjI1MjU5ODM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/25259837?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kayabaNerve",
        "html_url": "https://github.com/kayabaNerve",
        "followers_url": "https://api.github.com/users/kayabaNerve/followers",
        "following_url": "https://api.github.com/users/kayabaNerve/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kayabaNerve/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kayabaNerve/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kayabaNerve/subscriptions",
        "organizations_url": "https://api.github.com/users/kayabaNerve/orgs",
        "repos_url": "https://api.github.com/users/kayabaNerve/repos",
        "events_url": "https://api.github.com/users/kayabaNerve/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kayabaNerve/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2672261736",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "reviewed",
      "id": 2631271190,
      "node_id": "PRR_kwDOAN28mc6c1gMW",
      "url": null,
      "actor": null,
      "commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2631271190",
      "submitted_at": "2025-02-20T22:09:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "reviewed",
      "id": 2635736658,
      "node_id": "PRR_kwDOAN28mc6dGiZS",
      "url": null,
      "actor": null,
      "commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "Reviewed only the new “Motivation” section so far. \r\n\r\nI think it’s a good idea to indeed dissociate the output type itself (P2QRH) from the supported post-quantum signature algorithm (FALCON, SPHINCS+, etc) and ensuring the output type can be indifferently committed in a new witness program, as a new taproot leaf version or in the future as a g’root / grafroot style construction. ",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2635736658",
      "submitted_at": "2025-02-23T21:01:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDMyYzBhM2Q4MTY0NWU2M2U1OTMwNWYyODAxODZiYjE5Mjg2OWMzZTg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/32c0a3d81645e63e59305f280186bb192869c3e8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/32c0a3d81645e63e59305f280186bb192869c3e8",
      "tree": {
        "sha": "bf97d26509283220f1be7f7f741755cd1dcc9fa4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bf97d26509283220f1be7f7f741755cd1dcc9fa4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree bf97d26509283220f1be7f7f741755cd1dcc9fa4\nparent 8c0f7982932e180a32539120445a629077072b40\nauthor Hunter Trujillo <cryptoquick@pm.me> 1740346701 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1740346701 -0700\n\nUpdates based on Antoine Riard's feedback and others.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ7uVTQAKCRBn2nwXlg36\nz9bhAP4/DcBiIe2m+YE7kTH6wDSr7Ankv+/DJvINit/JZLhCagEA+p6SMpCEJN3z\n6S4ASWeRlb1j9nCY0RwJPaHaQNaNPwc=\n=Mr9j\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8c0f7982932e180a32539120445a629077072b40",
          "sha": "8c0f7982932e180a32539120445a629077072b40",
          "html_url": "https://github.com/bitcoin/bips/commit/8c0f7982932e180a32539120445a629077072b40"
        }
      ],
      "message": "Updates based on Antoine Riard's feedback and others.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2025-02-23T21:38:21Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2025-02-23T21:38:21Z"
      },
      "sha": "32c0a3d81645e63e59305f280186bb192869c3e8"
    },
    {
      "event": "reviewed",
      "id": 2637211529,
      "node_id": "PRR_kwDOAN28mc6dMKeJ",
      "url": null,
      "actor": null,
      "commit_id": "32c0a3d81645e63e59305f280186bb192869c3e8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2637211529",
      "submitted_at": "2025-02-24T14:28:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDkxM2NmNzk3MjIxYTgzOTNiZmZjNGU1YmIwOTEzODFhMGRhYWFiNjM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/913cf797221a8393bffc4e5bb091381a0daaab63",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/913cf797221a8393bffc4e5bb091381a0daaab63",
      "tree": {
        "sha": "fbc8ee407dba70b1224ff7543937cfe6200e6b48",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/fbc8ee407dba70b1224ff7543937cfe6200e6b48"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fbc8ee407dba70b1224ff7543937cfe6200e6b48\nparent 32c0a3d81645e63e59305f280186bb192869c3e8\nauthor Hunter Beast <hunter@cryptoquick.com> 1740416051 -0700\ncommitter GitHub <noreply@github.com> 1740416051 -0700\n\nApply suggestions from jonasnick code review\n\nCo-authored-by: Jonas Nick <jonasd.nick@gmail.com>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnvKQzCRC1aQ7uu5UhlAAA40sQAHfPTmayJrJ72iV1uG6Kwa6e\n6qiOtk5kSRzI/aVMY3wYl/8u/9L7laFjU+JMzCMDUsCtNqwqElRFRWIL6n7AXo5j\nAKfBv0osvFRQ9MKx5djSLQxNQ2tPoldA8rmwcS14jypjBolg7NK6H30ePH+Fg/GK\nQ9zB6UWsqYQqHAAt1NAnim1gdGJWHSDHYCJjKOvjyyztAfovFwmfTn/ubOdmYkqX\njP8TupRT0dqUP+YAP6nkFdsEWEYAEF/ASu53USeQZCK9k9xMwa1FKvO2Ng4KV1bB\n2Ku5H+k5WspSfvKz+VMXzt9FcAerkIfEpDobIqLhdbrLqhbzcQ/BNI66MFPmqoGD\n2yzQARCj/neQK0WSXr54Fe1UJncHJ3B/qGwQ1l0h+ymO5uxXXNEb+snDuGJ1fpsE\nGqytFNAmewo9Q+OgW5oOYZ/89A5HyzIEqvqgUsxOQhyZXpk4EIYKk7hY8+8zbms/\nOZTeS9gRQiGa5uRCctr19ENeOS4ZUj/c6UPLikwQf9AkoS/z71aKh4btRwhiJc3z\ns7P0glS4KoNZXl2wyLYF76xe37eU1Quvm2+0p+fMRcPmAnKo36D2u62l0z6zJyPm\n/zR3QuOr4Np/Eu12Cyb1S/yqJFxf58MwL3J6TO5007M7LQfmlLUZ5u2g4clKuw5f\nBdtCLCfkq2CzzcWxX2iZ\n=2vJT\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/32c0a3d81645e63e59305f280186bb192869c3e8",
          "sha": "32c0a3d81645e63e59305f280186bb192869c3e8",
          "html_url": "https://github.com/bitcoin/bips/commit/32c0a3d81645e63e59305f280186bb192869c3e8"
        }
      ],
      "message": "Apply suggestions from jonasnick code review\n\nCo-authored-by: Jonas Nick <jonasd.nick@gmail.com>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2025-02-24T16:54:11Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2025-02-24T16:54:11Z"
      },
      "sha": "913cf797221a8393bffc4e5bb091381a0daaab63"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDVhMTQ1OWJiMTc5YWNjMjU5ZGI0MWZjNmQ3OTY1ZjgzMGYyMmUxNDc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5a1459bb179acc259db41fc6d7965f830f22e147",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5a1459bb179acc259db41fc6d7965f830f22e147",
      "tree": {
        "sha": "93be8a71b484d25aa9743c7c4576d038fc4d68e3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/93be8a71b484d25aa9743c7c4576d038fc4d68e3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 93be8a71b484d25aa9743c7c4576d038fc4d68e3\nparent 913cf797221a8393bffc4e5bb091381a0daaab63\nauthor Hunter Trujillo <cryptoquick@pm.me> 1740418821 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1740418821 -0700\n\nUpdates based on Jonas Nick's feedback.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ7yvBQAKCRBn2nwXlg36\nz6gsAQDayk1+VGVcB3MEG+3rDcrLnQ5E/M2Ue9xMWYE1Fufg3wD/YLtqCCswbVe1\nRapucLvdLtNDBhoKsolKM3pOgqG8jwo=\n=qN7J\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/913cf797221a8393bffc4e5bb091381a0daaab63",
          "sha": "913cf797221a8393bffc4e5bb091381a0daaab63",
          "html_url": "https://github.com/bitcoin/bips/commit/913cf797221a8393bffc4e5bb091381a0daaab63"
        }
      ],
      "message": "Updates based on Jonas Nick's feedback.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2025-02-24T17:40:21Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2025-02-24T17:40:21Z"
      },
      "sha": "5a1459bb179acc259db41fc6d7965f830f22e147"
    },
    {
      "event": "reviewed",
      "id": 2513062938,
      "node_id": "PRR_kwDOAN28mc6Vykwa",
      "url": null,
      "actor": null,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "QbitsCode",
        "id": 99557903,
        "node_id": "U_kgDOBe8iDw",
        "avatar_url": "https://avatars.githubusercontent.com/u/99557903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/QbitsCode",
        "html_url": "https://github.com/QbitsCode",
        "followers_url": "https://api.github.com/users/QbitsCode/followers",
        "following_url": "https://api.github.com/users/QbitsCode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/QbitsCode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/QbitsCode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/QbitsCode/subscriptions",
        "organizations_url": "https://api.github.com/users/QbitsCode/orgs",
        "repos_url": "https://api.github.com/users/QbitsCode/repos",
        "events_url": "https://api.github.com/users/QbitsCode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/QbitsCode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2513062938",
      "submitted_at": "2025-02-25T05:53:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "commented",
      "id": 2680690242,
      "node_id": "IC_kwDOAN28mc6fyBZC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2680690242",
      "actor": {
        "login": "QbitsCode",
        "id": 99557903,
        "node_id": "U_kgDOBe8iDw",
        "avatar_url": "https://avatars.githubusercontent.com/u/99557903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/QbitsCode",
        "html_url": "https://github.com/QbitsCode",
        "followers_url": "https://api.github.com/users/QbitsCode/followers",
        "following_url": "https://api.github.com/users/QbitsCode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/QbitsCode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/QbitsCode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/QbitsCode/subscriptions",
        "organizations_url": "https://api.github.com/users/QbitsCode/orgs",
        "repos_url": "https://api.github.com/users/QbitsCode/repos",
        "events_url": "https://api.github.com/users/QbitsCode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/QbitsCode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-25T05:54:55Z",
      "updated_at": "2025-02-25T05:54:55Z",
      "author_association": "NONE",
      "body": "Greetings all, can we have virtual clarification meeting.  Thanks",
      "user": {
        "login": "QbitsCode",
        "id": 99557903,
        "node_id": "U_kgDOBe8iDw",
        "avatar_url": "https://avatars.githubusercontent.com/u/99557903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/QbitsCode",
        "html_url": "https://github.com/QbitsCode",
        "followers_url": "https://api.github.com/users/QbitsCode/followers",
        "following_url": "https://api.github.com/users/QbitsCode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/QbitsCode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/QbitsCode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/QbitsCode/subscriptions",
        "organizations_url": "https://api.github.com/users/QbitsCode/orgs",
        "repos_url": "https://api.github.com/users/QbitsCode/repos",
        "events_url": "https://api.github.com/users/QbitsCode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/QbitsCode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2680690242",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2692799342,
      "node_id": "IC_kwDOAN28mc6ggNtu",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2692799342",
      "actor": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-02T16:13:22Z",
      "updated_at": "2025-03-02T16:13:22Z",
      "author_association": "NONE",
      "body": "Considering Microsoft's advances with their quantum chip, the threat is no longer imaginary but quite real.",
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2692799342",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2701720907,
      "node_id": "IC_kwDOAN28mc6hCP1L",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2701720907",
      "actor": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-05T18:17:01Z",
      "updated_at": "2025-03-05T18:17:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry for the delayed read.\r\n\r\nI only wanna comment that I just read the current version (and only the current version) of the doc these days, the libbitcoinpqc line left me a small implementation detail smell. Found https://github.com/bitcoin/bips/pull/1670#discussion_r1894439303 about that, I see it seems that line perhaps was not originally in your vision.\r\n\r\nI understand nothing technical about this, but the text doesn't leave me with a fully good vibe specially the witness version skip (https://github.com/bitcoin/bips/pull/1670#discussion_r1889231215 and https://github.com/bitcoin/bips/pull/1670#discussion_r1894420664), I guess I would appreciate if you shared a draft of your P2TRH proposal that you used to give meaning to the version skip - less vaporbipping is best for everybody.\r\n\r\nI don't understand the technical details of Taproot, but two things come to my mind, (1) can't you apply hashing in a Taproot script (and then P2TRH is not _really_ necessary)? and (2) have you done, or will you do, economic analysis on P2TRH impact in the transaction fee for the coin owner?\r\n\r\nI appreciate your struggle anyway and wish you the best about it.\r\n",
      "user": {
        "login": "katesalazar",
        "id": 52637275,
        "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/katesalazar",
        "html_url": "https://github.com/katesalazar",
        "followers_url": "https://api.github.com/users/katesalazar/followers",
        "following_url": "https://api.github.com/users/katesalazar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/katesalazar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/katesalazar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
        "organizations_url": "https://api.github.com/users/katesalazar/orgs",
        "repos_url": "https://api.github.com/users/katesalazar/repos",
        "events_url": "https://api.github.com/users/katesalazar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/katesalazar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2701720907",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2701863050,
      "node_id": "IC_kwDOAN28mc6hCyiK",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2701863050",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-05T19:23:02Z",
      "updated_at": "2025-03-05T19:23:02Z",
      "author_association": "NONE",
      "body": "> I only wanna comment that I just read the current version (and only the current version) of the doc these days, the libbitcoinpqc line left me a small implementation detail smell. Found [#1670 (comment)](https://github.com/bitcoin/bips/pull/1670#discussion_r1894439303) about that, I see it seems that line perhaps was not originally in your vision.\r\n\r\nYou make a good point, and I'm glad you saw that discussion point. Would you recommend I remove that?\r\n\r\n> I understand nothing technical about this, but the text doesn't leave me with a fully good vibe specially the witness version skip ([#1670 (comment)](https://github.com/bitcoin/bips/pull/1670#discussion_r1889231215) and [#1670 (comment)](https://github.com/bitcoin/bips/pull/1670#discussion_r1894420664)), I guess I would appreciate if you shared a draft of your P2TRH proposal that you used to give meaning to the version skip - less vaporbipping is best for everybody.\r\n\r\nSure, I shared my P2TRH proposal in my latest update, in case you haven't seen it:\r\n\r\nhttps://groups.google.com/g/bitcoindev/c/oQKezDOc4us/m/uOc8dFbVAQAJ\r\n\r\nThe link to the BIP itself is here:\r\n\r\nhttps://github.com/cryptoquick/bips/blob/p2trh/bip-p2trh.mediawiki\r\n\r\nAfter reading that, let me know your opinion on the witness version skip.\r\n\r\n> I don't understand the technical details of Taproot, but two things come to my mind, (1) can't you apply hashing in a Taproot script (and then P2TRH is not _really_ necessary)? and (2) have you done, or will you do, economic analysis on P2TRH impact in the transaction fee for the coin owner?\r\n\r\nThe problem is that no matter what is put in the script, a CRQC can derive the key needed to initiate a root level keypath spend.\r\n\r\nEconomic analysis is done further down in the P2TRH BIP: https://github.com/cryptoquick/bips/blob/p2trh/bip-p2trh.mediawiki#cost-comparison\r\n\r\nThe punchline is that going with P2TRH would have added 8.25 vB to every Taproot transaction.\r\n\r\n> I appreciate your struggle anyway and wish you the best about it.\r\n\r\nThanks, and your feedback is much appreciated! As a fellow contributor, I'm curious, do you recommend I also submit P2TRH to BIPs?\r\n\r\n",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2701863050",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779153889",
      "pull_request_review_id": 2334631534,
      "id": 1779153889,
      "node_id": "PRRC_kwDOAN28mc5qC7vh",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a post-quantum cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive, but meant to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 46,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It might be worth discussing the conditions under which P2PKH is vulnerable in more detail. While the Deloitte report covers this, this table leaves the impression that P2PKH is safe.\r\n\r\n```suggestion\r\n| P2PKH || No (trusted miner) || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\r\n| P2PKH (reused) || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\r\n```\r\n\r\n",
      "created_at": "2024-09-27T20:55:55Z",
      "updated_at": "2024-09-27T20:55:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779153889",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779153889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779156396",
      "pull_request_review_id": 2334635312,
      "id": 1779156396,
      "node_id": "PRRC_kwDOAN28mc5qC8Ws",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What about public keys that are derived via BIP-32 non-hardened child keys? While the public key is not reused, one might be able to guess and check child keys from revealed public keys and learn the public key for a p2pkh address prior to seeing a signature for that public key. Is there a reason this is not a concern?",
      "created_at": "2024-09-27T20:59:16Z",
      "updated_at": "2024-09-27T20:59:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779156396",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779156396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779190521",
      "pull_request_review_id": 2334683627,
      "id": 1779190521,
      "node_id": "PRRC_kwDOAN28mc5qDEr5",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Reading \"Benchmarking the quantum cryptanalysis of symmetric, public-key and hash-based cryptographic schemes\" it is unclear to me how the number 10^40 for applying Grover to Bitcoin's POW was arrived at in this BIP. It might be worth creating a footnote that details the derivation of this result from that paper.",
      "created_at": "2024-09-27T21:41:32Z",
      "updated_at": "2024-09-27T21:41:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779190521",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779190521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779282281",
      "pull_request_review_id": 2334779205,
      "id": 1779282281,
      "node_id": "PRRC_kwDOAN28mc5qDbFp",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a post-quantum cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive, but meant to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase output in Block 1 back to itself. It is proposed to call this the [https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee Canary address]. The reasoning behind this is that this can only be done by Satoshi, and given his absence, this can only be spent by others if there is a significant vulnerability in secp256k1. Should the Canary coins move, that will signal that bitcoin is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined.\n+\n+It's for this reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more than 50 bitcoin are kept under a single distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is assuming that the attacker is financially-motivated instead of, for example, a nation state looking to break confidence in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their cryptography already.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be upgraded by 2030, with browsers and operating systems fully upgraded by 2033.\n+\n+Lastly, it is worth noting by way of comparison that [https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32 seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for bitcoin.\n+\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and the capital B represents its connection to bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to remember that these are [r]esistant addresses, similar to how bc1q corresponds to Se[q]Wit and bc1p corresponds to Ta[p]root. This is referencing the lookup table under [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with post-quantum cryptography. This is a form of \"hybrid cryptography\" such that no regression in security is presented should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR however is that P2QRH will encode a hash of the public key. This is a significant change in how Taproot works, but is necessary to avoid exposing public keys on-chain in advance of attackers.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in [https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the witness discount.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one done on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user adoption and general user-friendliness, the most secure variant (NIST V, 256 bit) is proposed, despite the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly.  It must be resistant to applications that might take advantage of this discount (e.g. storage of arbitrary data as seen with \"inscriptions\") without a corresponding increase in economic activity. Such an increase would not only impact node runners but those with inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent this while also increasing the discount is to have a completely separate witness, a quantum witness, or \"quitness,\" that is solely responsible for providing post-quantum signatures.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the quitness stack. Multiple signatures can be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 quitness, arbitrary data cannot be added by miners, as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a Taproot witness. Doing the work to meet the requirement for it to be consensus-valid data would prove cost-prohibitive.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for bitcoin ecosystem devs to go from a single cryptosystem implementation to two distinct cryptosystems-- and it most certainly is-- the ramifications of a chain broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere signatures are used should be seen as an acceptable compromise for maintained integrity of bitcoin transfers during a regime of quantum advantage.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing, while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+\n+== Description ==\n+\n+We first build up a definition of the signature scheme by going through the design choices. Afterwards, we specify the exact encodings and operations.\n+\n+\n+=== Design ===\n+\n+For P2QRH descriptors, <code>qrh()</code> should be used.\n+\n+> Further specific details to be completed later in the draft process as outlined in [https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki BIP-2]\n+\n+\n+== Security ==\n+\n+{|\n+|+ Proposed quantum resistant signature algorithms ordered by largest to smallest signature size, NIST I\n+|-\n+! Signature algorithm !! Year first introduced !! Signature size, NIST I !! Public key size, NIST I\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 7856 bytes || 32 bytes\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 2420 bytes || 1312 bytes\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 702 bytes || 752 bytes\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 666 bytes || 897 bytes\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 652 bytes || 1006 bytes\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 177 bytes || 64 bytes\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 148 bytes || 66 bytes\n+|-\n+| [https://link.springer.com/content/pdf/10.1007/978-3-031-58716-0_1.pdf SQIsignHD] || 2024 || 109 bytes || not provided\n+|}\n+\n+{|\n+|+ Proposed quantum resistant signature algorithms ordered by largest to smallest signature size, NIST V\n+|-\n+! Signature algorithm !! Year first introduced !! Signature size, NIST V !! Public key size, NIST V\n+|-\n+| Lamport signature || 1977 || 8192 bytes || 16384 bytes\n+|-\n+| SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA) || 2015 || 29792 bytes || 64 bytes\n+|-\n+| CRYSTALS-Dilithium (FIPS 204 - ML-DSA) || 2017 || 4595 bytes || 2592 bytes\n+|-\n+| pqNTRUsign || 2016 || 1814 bytes || 1927 bytes\n+|-\n+| FALCON (FIPS 206 - FN-DSA) || 2017 || 1280 bytes || 1793 bytes\n+|-\n+| HAWK || 2022 || 1261 bytes || 2329 bytes\n+|-\n+| SQIsign || 2023 || 335 bytes || 128 bytes\n+|-\n+| SQIsign2D-West || 2024 || 294 bytes || 130 bytes\n+|-\n+| SQIsignHD || 2023 || not provided || not provided\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is approved for production use. Meanwhile, FALCON signatures are already approved and have achieved broader community consensus.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA - 70-72 bytes\n+* Schnorr - 64 bytes\n+\n+In comparison to year, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was chosen as bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support [https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR addresses. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it might be possible to implement Isogeny Schnorr signatures.\n+\n+Signature verification speed as it compares to Schnorr or ECDSA isn't seen as high a consideration as signature size due to block space being the primary fee constraint. As a P2QRH implementation materializes, a benchmark will be added for performance comparison. Fortunately, SQIsign signatures are substantially faster to verify than it is to generate keys or to sign, which is a major consideration when a transaction need only be signed once, or a handful of times with PSBT, compared to being verified simultaneously on tens of thousands of nodes. Key generation may need to cached in [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32 HD wallets].\n+\n+An additional consideration is security levels. Longer signature sizes provide more security. NIST has standardized five security levels for post-quantum cryptography. NIST security level I provides security equivalent to 128-bit keys, and security level V provides 256-bit security.\n+\n+\n+== Specification ==\n+\n+How the quitness is differentiated from the witness can be accomplished similar to how [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Transaction_ID BIP-141] introduced the marker and flag, with the QuBit flag being set to 0x02. This means all QuBit transactions are also SegWit transactions. The additional data would be included as a second array of byte arrays following the witness stack.\n+\n+The new transaction serialization format would be as follows:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][quitness][nLockTime]\n+\n+WIP\n+\n+=== Public Key Generation ===\n+\n+TBD, pending test vectors\n+\n+=== Public Key Conversion ===\n+\n+TBD\n+\n+=== Default Signing ===\n+\n+TBD\n+\n+=== Alternative Signing ===\n+\n+TBD\n+\n+=== Verification ===\n+\n+TBD\n+\n+=== Batch Verification ===\n+\n+TBD\n+\n+=== Usage Considerations ===\n+\n+TBD\n+\n+== Test Vectors and Reference Code ==\n+\n+TBD\n+\n+\n+== References ==\n+\n+* [https://groups.google.com/g/bitcoindev/c/Aee8xKuIC2s/m/cu6xej1mBQAJ Mailing list discussion]\n+* [https://delvingbitcoin.org/t/proposing-a-p2qrh-bip-towards-a-quantum-resistant-soft-fork/956?u=cryptoquick Delving Bitcoin discussion]\n+* [https://bitcoinops.org/en/newsletters/2024/06/14/ Bitcoin OpTech newsletter]\n+* [https://bitcoinops.org/en/podcast/2024/06/18/#draft-bip-for-quantum-safe-address-format Bitcoin OpTech discussion transcript]\n+\n+<references />\n+\n+\n+== Changelog ==\n+\n+To help implementors understand updates to this BIP, we keep a list of substantial changes.\n+\n+* 2024-06: High level rough draft\n+* 2024-07: Additional algorithms in PQC table\n+* 2024-08: Add FALCON signatures, update to use NIST standard terminology, add public key sizes.\n+* 2024-09: Additional detail on P2QS. Deprecate P2QR. Postpone SQIsign. Add details on quitness.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 235,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A few non-urgent nits regarding the changelog:\r\n\r\n- latest version first\r\n- use [semvar](https://semver.org/); for the final draft, maybe these should be collapsed to one initial version entry\r\n- YYYY-MM-DD date format\r\n\r\n(See https://keepachangelog.com and https://www.gnu.org/prep/standards/html_node/Style-of-Change-Logs)",
      "created_at": "2024-09-27T22:54:52Z",
      "updated_at": "2024-09-27T22:57:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779282281",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779282281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779592875",
      "pull_request_review_id": 2335182157,
      "id": 1779592875,
      "node_id": "PRRC_kwDOAN28mc5qEm6r",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779156396,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That is a concern I haven't considered. I'll be sure to add that.",
      "created_at": "2024-09-28T15:09:20Z",
      "updated_at": "2024-09-28T15:09:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779592875",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779592875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779606859",
      "pull_request_review_id": 2335204810,
      "id": 1779606859,
      "node_id": "PRRC_kwDOAN28mc5qEqVL",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a post-quantum cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive, but meant to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 46,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779153889,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I'd like to structure that information differently, similar to how I did so on this slide:\r\n![Screenshot from 2024-09-28 09-10-37](https://github.com/user-attachments/assets/b83fac54-d811-4c99-8430-31a822c2a957)\r\nI'll also need to add a 5th case: Unhardened BIP-32 HD wallet keys",
      "created_at": "2024-09-28T15:11:50Z",
      "updated_at": "2024-09-28T15:11:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779606859",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779606859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779726567",
      "pull_request_review_id": 2335386298,
      "id": 1779726567,
      "node_id": "PRRC_kwDOAN28mc5qFHjn",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a post-quantum cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive, but meant to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 46,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779153889,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This should be resolved now. Let me know if it's not.",
      "created_at": "2024-09-28T18:02:39Z",
      "updated_at": "2024-09-28T18:02:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779726567",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779726567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779726638",
      "pull_request_review_id": 2335386383,
      "id": 1779726638,
      "node_id": "PRRC_kwDOAN28mc5qFHku",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a post-quantum cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive, but meant to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase output in Block 1 back to itself. It is proposed to call this the [https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee Canary address]. The reasoning behind this is that this can only be done by Satoshi, and given his absence, this can only be spent by others if there is a significant vulnerability in secp256k1. Should the Canary coins move, that will signal that bitcoin is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined.\n+\n+It's for this reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more than 50 bitcoin are kept under a single distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is assuming that the attacker is financially-motivated instead of, for example, a nation state looking to break confidence in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their cryptography already.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be upgraded by 2030, with browsers and operating systems fully upgraded by 2033.\n+\n+Lastly, it is worth noting by way of comparison that [https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32 seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for bitcoin.\n+\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and the capital B represents its connection to bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to remember that these are [r]esistant addresses, similar to how bc1q corresponds to Se[q]Wit and bc1p corresponds to Ta[p]root. This is referencing the lookup table under [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with post-quantum cryptography. This is a form of \"hybrid cryptography\" such that no regression in security is presented should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR however is that P2QRH will encode a hash of the public key. This is a significant change in how Taproot works, but is necessary to avoid exposing public keys on-chain in advance of attackers.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in [https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the witness discount.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one done on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user adoption and general user-friendliness, the most secure variant (NIST V, 256 bit) is proposed, despite the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly.  It must be resistant to applications that might take advantage of this discount (e.g. storage of arbitrary data as seen with \"inscriptions\") without a corresponding increase in economic activity. Such an increase would not only impact node runners but those with inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent this while also increasing the discount is to have a completely separate witness, a quantum witness, or \"quitness,\" that is solely responsible for providing post-quantum signatures.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the quitness stack. Multiple signatures can be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 quitness, arbitrary data cannot be added by miners, as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a Taproot witness. Doing the work to meet the requirement for it to be consensus-valid data would prove cost-prohibitive.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for bitcoin ecosystem devs to go from a single cryptosystem implementation to two distinct cryptosystems-- and it most certainly is-- the ramifications of a chain broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere signatures are used should be seen as an acceptable compromise for maintained integrity of bitcoin transfers during a regime of quantum advantage.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing, while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+\n+== Description ==\n+\n+We first build up a definition of the signature scheme by going through the design choices. Afterwards, we specify the exact encodings and operations.\n+\n+\n+=== Design ===\n+\n+For P2QRH descriptors, <code>qrh()</code> should be used.\n+\n+> Further specific details to be completed later in the draft process as outlined in [https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki BIP-2]\n+\n+\n+== Security ==\n+\n+{|\n+|+ Proposed quantum resistant signature algorithms ordered by largest to smallest signature size, NIST I\n+|-\n+! Signature algorithm !! Year first introduced !! Signature size, NIST I !! Public key size, NIST I\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 7856 bytes || 32 bytes\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 2420 bytes || 1312 bytes\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 702 bytes || 752 bytes\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 666 bytes || 897 bytes\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 652 bytes || 1006 bytes\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 177 bytes || 64 bytes\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 148 bytes || 66 bytes\n+|-\n+| [https://link.springer.com/content/pdf/10.1007/978-3-031-58716-0_1.pdf SQIsignHD] || 2024 || 109 bytes || not provided\n+|}\n+\n+{|\n+|+ Proposed quantum resistant signature algorithms ordered by largest to smallest signature size, NIST V\n+|-\n+! Signature algorithm !! Year first introduced !! Signature size, NIST V !! Public key size, NIST V\n+|-\n+| Lamport signature || 1977 || 8192 bytes || 16384 bytes\n+|-\n+| SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA) || 2015 || 29792 bytes || 64 bytes\n+|-\n+| CRYSTALS-Dilithium (FIPS 204 - ML-DSA) || 2017 || 4595 bytes || 2592 bytes\n+|-\n+| pqNTRUsign || 2016 || 1814 bytes || 1927 bytes\n+|-\n+| FALCON (FIPS 206 - FN-DSA) || 2017 || 1280 bytes || 1793 bytes\n+|-\n+| HAWK || 2022 || 1261 bytes || 2329 bytes\n+|-\n+| SQIsign || 2023 || 335 bytes || 128 bytes\n+|-\n+| SQIsign2D-West || 2024 || 294 bytes || 130 bytes\n+|-\n+| SQIsignHD || 2023 || not provided || not provided\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is approved for production use. Meanwhile, FALCON signatures are already approved and have achieved broader community consensus.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA - 70-72 bytes\n+* Schnorr - 64 bytes\n+\n+In comparison to year, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was chosen as bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support [https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR addresses. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it might be possible to implement Isogeny Schnorr signatures.\n+\n+Signature verification speed as it compares to Schnorr or ECDSA isn't seen as high a consideration as signature size due to block space being the primary fee constraint. As a P2QRH implementation materializes, a benchmark will be added for performance comparison. Fortunately, SQIsign signatures are substantially faster to verify than it is to generate keys or to sign, which is a major consideration when a transaction need only be signed once, or a handful of times with PSBT, compared to being verified simultaneously on tens of thousands of nodes. Key generation may need to cached in [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32 HD wallets].\n+\n+An additional consideration is security levels. Longer signature sizes provide more security. NIST has standardized five security levels for post-quantum cryptography. NIST security level I provides security equivalent to 128-bit keys, and security level V provides 256-bit security.\n+\n+\n+== Specification ==\n+\n+How the quitness is differentiated from the witness can be accomplished similar to how [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Transaction_ID BIP-141] introduced the marker and flag, with the QuBit flag being set to 0x02. This means all QuBit transactions are also SegWit transactions. The additional data would be included as a second array of byte arrays following the witness stack.\n+\n+The new transaction serialization format would be as follows:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][quitness][nLockTime]\n+\n+WIP\n+\n+=== Public Key Generation ===\n+\n+TBD, pending test vectors\n+\n+=== Public Key Conversion ===\n+\n+TBD\n+\n+=== Default Signing ===\n+\n+TBD\n+\n+=== Alternative Signing ===\n+\n+TBD\n+\n+=== Verification ===\n+\n+TBD\n+\n+=== Batch Verification ===\n+\n+TBD\n+\n+=== Usage Considerations ===\n+\n+TBD\n+\n+== Test Vectors and Reference Code ==\n+\n+TBD\n+\n+\n+== References ==\n+\n+* [https://groups.google.com/g/bitcoindev/c/Aee8xKuIC2s/m/cu6xej1mBQAJ Mailing list discussion]\n+* [https://delvingbitcoin.org/t/proposing-a-p2qrh-bip-towards-a-quantum-resistant-soft-fork/956?u=cryptoquick Delving Bitcoin discussion]\n+* [https://bitcoinops.org/en/newsletters/2024/06/14/ Bitcoin OpTech newsletter]\n+* [https://bitcoinops.org/en/podcast/2024/06/18/#draft-bip-for-quantum-safe-address-format Bitcoin OpTech discussion transcript]\n+\n+<references />\n+\n+\n+== Changelog ==\n+\n+To help implementors understand updates to this BIP, we keep a list of substantial changes.\n+\n+* 2024-06: High level rough draft\n+* 2024-07: Additional algorithms in PQC table\n+* 2024-08: Add FALCON signatures, update to use NIST standard terminology, add public key sizes.\n+* 2024-09: Additional detail on P2QS. Deprecate P2QR. Postpone SQIsign. Add details on quitness.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 235,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779282281,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sounds good. Let me know if my latest changes have resolved this.",
      "created_at": "2024-09-28T18:03:11Z",
      "updated_at": "2024-09-28T18:03:11Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779726638",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779726638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779728051",
      "pull_request_review_id": 2335387619,
      "id": 1779728051,
      "node_id": "PRRC_kwDOAN28mc5qFH6z",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Those figures were provided by Pierre-Luc, along with the relevant paper. I've included a footnote with his comments.\r\n\r\n",
      "created_at": "2024-09-28T18:10:58Z",
      "updated_at": "2024-09-28T18:10:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779728051",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779728051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779807924",
      "pull_request_review_id": 2335484424,
      "id": 1779807924,
      "node_id": "PRRC_kwDOAN28mc5qFba0",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I completely agree with your claim that: \r\n> It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\r\n\r\nThe math in the footnote is for finding SHA256 preimages, but the text and cited article discusses Bitcoin mining/POW which is only a partial preimage, e.g. find SHA256 output with 75 zeros in front. These partial preimages should be not as hard as finding a full SHA256 preimage.\r\n\r\nThe quantum safety of Bitcoin POW is a an open question. Is a quantum computer than can do the POW significantly faster than a classic miner an attack or simply better mining technology? Are there other quantum attacks on Bitcoin mining?\r\n\r\nI would frame this as symmetric cryptography in Bitcoin, such as preimages in the transactions Merkle tree, rather than mining.",
      "created_at": "2024-09-28T22:09:45Z",
      "updated_at": "2024-09-28T22:09:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779807924",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779807924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779918823",
      "pull_request_review_id": 2335705303,
      "id": 1779918823,
      "node_id": "PRRC_kwDOAN28mc5qF2fn",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Very interesting. I'll be sure to include that nuance.",
      "created_at": "2024-09-29T06:15:28Z",
      "updated_at": "2024-09-29T06:15:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779918823",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779918823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779947292",
      "pull_request_review_id": 2335742734,
      "id": 1779947292,
      "node_id": "PRRC_kwDOAN28mc5qF9cc",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've reworked the paragraph. Let me know if that works. The 95 zeros figure came from the `log2_work` message from Bitcoin Core in the latest block... Let me know if that's not right.",
      "created_at": "2024-09-29T07:23:38Z",
      "updated_at": "2024-09-29T07:23:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779947292",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779947292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1780170002",
      "pull_request_review_id": 2335996978,
      "id": 1780170002,
      "node_id": "PRRC_kwDOAN28mc5qGz0S",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Log2 work is [the total work from the genesis block all the way to that current block](https://bitcoin.stackexchange.com/a/116486 ) not a measure of work of that block alone.\r\n\r\nBitcoin PoW per hash is ~700 Exahash/second. That roughly $log2(700 * 10^{18} )=2^{68.2}$ per second and $2^{74.5}$ per block. 75 zero bits would more the accurate current number.\r\n\r\nThere is a big difference between the cost of preimages on SHA256 and HASH160 with a quadratic reduction: \r\nSHA256 as you point out is $2^{128} \\approx 10^{40}$ but HASH160 used in P2PKH is  $2^{80} \\approx 10^{24}$. Still much larger than ECC, but I wanted to call this out because it is unlikely we will ever build a computer classical or quantum that can do $2^{128}$ within the next 100 years whereas Bitcoin currently does $2^{80}$ every 30 minutes. \r\n\r\nIf I didn't misunderstand [\"Applying Grover's Algorithm to Hash Functions\"](https://arxiv.org/pdf/2202.10982) the cost of a groover preimage attack on a n-bit hash function where you are trying to want to find 1 preimage out of a set of k preimages is $\\sqrt{2^{n-\\log2{(k)}}}$. Let's say we are looking for any preimage of a P2PKH output. [As of Sept 29 2024](https://bitaps.com/statistic/outputs) there are 53,102,992 P2PKH in Bitcoin's UTXO set. This gets us an attack cost of $\\sqrt{2^{160-25.66}}=2^{67.17} \\approx 10^{20}$.\r\n\r\nAll of this still supports your argument that the current pressing need in Bitcoin is ECC. It worth having tighter bounds, so we know when we are in danger for the symmetric side of Bitcoin.\r\n\r\n\r\n\r\n",
      "created_at": "2024-09-29T20:56:55Z",
      "updated_at": "2024-09-29T20:56:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1780170002",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1780170002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1780193350",
      "pull_request_review_id": 2336030169,
      "id": 1780193350,
      "node_id": "PRRC_kwDOAN28mc5qG5hG",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "All very good points. I'll make sure those are reflected in the BIP.",
      "created_at": "2024-09-29T22:31:33Z",
      "updated_at": "2024-09-29T22:31:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1780193350",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1780193350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1780957226",
      "pull_request_review_id": 2337254602,
      "id": 1780957226,
      "node_id": "PRRC_kwDOAN28mc5qJ0Aq",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've published some more updates you can see here: \r\n\r\nhttps://github.com/bitcoin/bips/compare/eae4707e74805435e3e57d0bb1902d9313955ef3..19d45929a2229b03d26503b6530eeed1524ff31f\r\n\r\nAlso, is P2WPKH not also as vulnerable as P2PKH? I think they both use HASH160, do they not?",
      "created_at": "2024-09-30T11:38:16Z",
      "updated_at": "2024-09-30T11:38:17Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1780957226",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1780957226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781089592",
      "pull_request_review_id": 2337478700,
      "id": 1781089592,
      "node_id": "PRRC_kwDOAN28mc5qKUU4",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes P2WPKH, P2PKH, P2SH all use HASH160 (20 Byte) whereas P2WSH uses SHA256 (32 Byte).\r\n\r\nThanks for the updates and making the changes. My main concern is that if precise numbers are going to be used for Bitcoin and Groovers I want to avoid a situation where the numbers are not representative of the threat. I suspect many people in Bitcoin will use this BIP to educate themselves on quantum attacks. I'll write up a longer comment during my lunch break today.",
      "created_at": "2024-09-30T13:01:44Z",
      "updated_at": "2024-09-30T13:01:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1781089592",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781089592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781133437",
      "pull_request_review_id": 2337556440,
      "id": 1781133437,
      "node_id": "PRRC_kwDOAN28mc5qKfB9",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779156396,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Let me know if this is sufficient:\r\nhttps://github.com/bitcoin/bips/pull/1670/files?short_path=917a32a#diff-917a32a71b69bf62d7c85dfb13d520a0340a30a2889b015b82d36411ed45e754:~:text=If%20a%20key%20is%20recovered%20by%20a%20CRQC%2C%20it%20can%20also%20be%20trivially%20checked%20to%20see%20if%20any%20child%20keys%20were%20produced%20using%20an%20unhardened%20BIP%2D32%20derivation%20path.\r\n\r\nIt's also been added to the new table for scenarios for revealed public keys on bitcoin.",
      "created_at": "2024-09-30T13:29:23Z",
      "updated_at": "2024-09-30T13:29:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1781133437",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781133437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781509175",
      "pull_request_review_id": 2338191441,
      "id": 1781509175,
      "node_id": "PRRC_kwDOAN28mc5qL6w3",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I realize by pointing out the nuances I've accidentally caused this section to grow into two large paragraphs, when really all you are trying to do make is the reasonable point that quantum attacks on ECC signatures should be the most immediate concern.\r\n\r\nHere is my attempt to get the same point across but without having to get into the details:\r\n\r\n\r\n> The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its uses of ECC (Ecliptic Curve Cryptography) used in Bitcoin's signatures and Taproot commitments]. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 ≈ 2^26) quantum operations. While a QRQC could use Grover's algorithm to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more power quantum computer is needed for these attacks to meaningfully impact Bitcoin. For instance a preimage attack on HASH160 using Grover's algorithm would require at least 10^24 ≈ 2^80 quantum operations.\r\n\r\n\r\nIt does make sense to discuss Grover's algorithm w.r.t. multi-target preimage attacks against P2SH and P2PKH when discussing the security of address types against a QRQC.",
      "created_at": "2024-09-30T17:24:37Z",
      "updated_at": "2024-09-30T17:24:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1781509175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781509175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781873035",
      "pull_request_review_id": 2338756440,
      "id": 1781873035,
      "node_id": "PRRC_kwDOAN28mc5qNTmL",
      "diff_hunk": "@@ -0,0 +1,274 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's. Grover's potentially requires roughly 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC, should no optimization for partial preimages be needed. Partial preimage optimization may lower the difficulty to find a block than the full 256-bit preimage (say, for a number with 75 zero bits in front).<ref>See [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques on Bitcoin mining].</ref> Regardless of such optimizations, the primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its signature algorithm] and not necessarily Proof of Work, hence the focus on a new address format. Additionally, should quantum mining demonstrate quantum advantage over ASIC miners, miners will transition to operating CRQCs instead.<ref>Grover's algorithm is a quadratic speedup, so instead of 2^256 tries it takes about 2^128 calls to the oracle (which is about 10^38 operations) to get a 256 bit preimage. The number of gates would be some multiple of that number. That's roughly how we get the correct order of magnitude, Mosca did a more finegrained calculation and land ballpark in similar large numbers. The number is so large, it's unclear the exact calculation with all the prefactors so far, contrary to ECC, which is roughly 10^8 operations, including the constant factors. A talk by [https://sam-jaques.appspot.com/papers Sam Jaques] gave some estimate of the size of the machine that would be necessary for Grover to attack hashes and it was a small astronomical body.</ref>\n+\n+It is worth mentioning that any addresses using RIPEMD160 / HASH160 could also be vulnerable to Grover's algorithm.<ref>There is a big difference between the cost of preimages on SHA256 and HASH160 with a quadratic reduction:\n+SHA256 is 2^128 ≈ 10^40 but HASH160 used in P2PKH and P2WPKH is 2^80 ≈ 10^24 quantum operations. This is much larger than ECC, and while it is unlikely a classical or quantum computer that can perform 2^128 within the next 100 years, Bitcoin currently does 2^80 classical operations every 30 minutes. Additionally, with Grover's, [https://bitcoin.stackexchange.com/a/115849/139611 a black box function could sidestep Shor's entirely, and SHA-256, providing the private key itself to a P2PKH or P2SH address.]</ref>\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 34,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "7f4456de30db2528bcfc1dddbbc3c7533169646a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Another vulnerability estimation in early 2019: 5M-10M bitcoin\r\n\r\nhttps://x.com/pwuille/status/1108097835365339136",
      "created_at": "2024-09-30T23:02:34Z",
      "updated_at": "2024-09-30T23:02:34Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1781873035",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781873035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781979561",
      "pull_request_review_id": 2338917603,
      "id": 1781979561,
      "node_id": "PRRC_kwDOAN28mc5qNtmp",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a post-quantum cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive, but meant to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase output in Block 1 back to itself. It is proposed to call this the [https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee Canary address]. The reasoning behind this is that this can only be done by Satoshi, and given his absence, this can only be spent by others if there is a significant vulnerability in secp256k1. Should the Canary coins move, that will signal that bitcoin is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined.\n+\n+It's for this reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more than 50 bitcoin are kept under a single distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is assuming that the attacker is financially-motivated instead of, for example, a nation state looking to break confidence in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their cryptography already.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be upgraded by 2030, with browsers and operating systems fully upgraded by 2033.\n+\n+Lastly, it is worth noting by way of comparison that [https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32 seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for bitcoin.\n+\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and the capital B represents its connection to bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to remember that these are [r]esistant addresses, similar to how bc1q corresponds to Se[q]Wit and bc1p corresponds to Ta[p]root. This is referencing the lookup table under [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with post-quantum cryptography. This is a form of \"hybrid cryptography\" such that no regression in security is presented should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR however is that P2QRH will encode a hash of the public key. This is a significant change in how Taproot works, but is necessary to avoid exposing public keys on-chain in advance of attackers.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in [https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the witness discount.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one done on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user adoption and general user-friendliness, the most secure variant (NIST V, 256 bit) is proposed, despite the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly.  It must be resistant to applications that might take advantage of this discount (e.g. storage of arbitrary data as seen with \"inscriptions\") without a corresponding increase in economic activity. Such an increase would not only impact node runners but those with inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent this while also increasing the discount is to have a completely separate witness, a quantum witness, or \"quitness,\" that is solely responsible for providing post-quantum signatures.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the quitness stack. Multiple signatures can be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 quitness, arbitrary data cannot be added by miners, as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a Taproot witness. Doing the work to meet the requirement for it to be consensus-valid data would prove cost-prohibitive.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for bitcoin ecosystem devs to go from a single cryptosystem implementation to two distinct cryptosystems-- and it most certainly is-- the ramifications of a chain broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere signatures are used should be seen as an acceptable compromise for maintained integrity of bitcoin transfers during a regime of quantum advantage.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing, while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+\n+== Description ==\n+\n+We first build up a definition of the signature scheme by going through the design choices. Afterwards, we specify the exact encodings and operations.\n+\n+\n+=== Design ===\n+\n+For P2QRH descriptors, <code>qrh()</code> should be used.\n+\n+> Further specific details to be completed later in the draft process as outlined in [https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki BIP-2]\n+\n+\n+== Security ==\n+\n+{|\n+|+ Proposed quantum resistant signature algorithms ordered by largest to smallest signature size, NIST I\n+|-\n+! Signature algorithm !! Year first introduced !! Signature size, NIST I !! Public key size, NIST I\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 7856 bytes || 32 bytes\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 2420 bytes || 1312 bytes\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 702 bytes || 752 bytes\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 666 bytes || 897 bytes\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 652 bytes || 1006 bytes\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 177 bytes || 64 bytes\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 148 bytes || 66 bytes\n+|-\n+| [https://link.springer.com/content/pdf/10.1007/978-3-031-58716-0_1.pdf SQIsignHD] || 2024 || 109 bytes || not provided\n+|}\n+\n+{|\n+|+ Proposed quantum resistant signature algorithms ordered by largest to smallest signature size, NIST V\n+|-\n+! Signature algorithm !! Year first introduced !! Signature size, NIST V !! Public key size, NIST V\n+|-\n+| Lamport signature || 1977 || 8192 bytes || 16384 bytes\n+|-\n+| SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA) || 2015 || 29792 bytes || 64 bytes\n+|-\n+| CRYSTALS-Dilithium (FIPS 204 - ML-DSA) || 2017 || 4595 bytes || 2592 bytes\n+|-\n+| pqNTRUsign || 2016 || 1814 bytes || 1927 bytes\n+|-\n+| FALCON (FIPS 206 - FN-DSA) || 2017 || 1280 bytes || 1793 bytes\n+|-\n+| HAWK || 2022 || 1261 bytes || 2329 bytes\n+|-\n+| SQIsign || 2023 || 335 bytes || 128 bytes\n+|-\n+| SQIsign2D-West || 2024 || 294 bytes || 130 bytes\n+|-\n+| SQIsignHD || 2023 || not provided || not provided\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is approved for production use. Meanwhile, FALCON signatures are already approved and have achieved broader community consensus.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA - 70-72 bytes\n+* Schnorr - 64 bytes\n+\n+In comparison to year, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was chosen as bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support [https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR addresses. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it might be possible to implement Isogeny Schnorr signatures.\n+\n+Signature verification speed as it compares to Schnorr or ECDSA isn't seen as high a consideration as signature size due to block space being the primary fee constraint. As a P2QRH implementation materializes, a benchmark will be added for performance comparison. Fortunately, SQIsign signatures are substantially faster to verify than it is to generate keys or to sign, which is a major consideration when a transaction need only be signed once, or a handful of times with PSBT, compared to being verified simultaneously on tens of thousands of nodes. Key generation may need to cached in [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32 HD wallets].\n+\n+An additional consideration is security levels. Longer signature sizes provide more security. NIST has standardized five security levels for post-quantum cryptography. NIST security level I provides security equivalent to 128-bit keys, and security level V provides 256-bit security.\n+\n+\n+== Specification ==\n+\n+How the quitness is differentiated from the witness can be accomplished similar to how [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Transaction_ID BIP-141] introduced the marker and flag, with the QuBit flag being set to 0x02. This means all QuBit transactions are also SegWit transactions. The additional data would be included as a second array of byte arrays following the witness stack.\n+\n+The new transaction serialization format would be as follows:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][quitness][nLockTime]\n+\n+WIP\n+\n+=== Public Key Generation ===\n+\n+TBD, pending test vectors\n+\n+=== Public Key Conversion ===\n+\n+TBD\n+\n+=== Default Signing ===\n+\n+TBD\n+\n+=== Alternative Signing ===\n+\n+TBD\n+\n+=== Verification ===\n+\n+TBD\n+\n+=== Batch Verification ===\n+\n+TBD\n+\n+=== Usage Considerations ===\n+\n+TBD\n+\n+== Test Vectors and Reference Code ==\n+\n+TBD\n+\n+\n+== References ==\n+\n+* [https://groups.google.com/g/bitcoindev/c/Aee8xKuIC2s/m/cu6xej1mBQAJ Mailing list discussion]\n+* [https://delvingbitcoin.org/t/proposing-a-p2qrh-bip-towards-a-quantum-resistant-soft-fork/956?u=cryptoquick Delving Bitcoin discussion]\n+* [https://bitcoinops.org/en/newsletters/2024/06/14/ Bitcoin OpTech newsletter]\n+* [https://bitcoinops.org/en/podcast/2024/06/18/#draft-bip-for-quantum-safe-address-format Bitcoin OpTech discussion transcript]\n+\n+<references />\n+\n+\n+== Changelog ==\n+\n+To help implementors understand updates to this BIP, we keep a list of substantial changes.\n+\n+* 2024-06: High level rough draft\n+* 2024-07: Additional algorithms in PQC table\n+* 2024-08: Add FALCON signatures, update to use NIST standard terminology, add public key sizes.\n+* 2024-09: Additional detail on P2QS. Deprecate P2QR. Postpone SQIsign. Add details on quitness.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 235,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779282281,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Looks good for now, thank you.",
      "created_at": "2024-10-01T00:29:55Z",
      "updated_at": "2024-10-01T00:29:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1781979561",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781979561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781994737",
      "pull_request_review_id": 2338939886,
      "id": 1781994737,
      "node_id": "PRRC_kwDOAN28mc5qNxTx",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thank you for that. I've made some edits and replaced the other sections with that. Here's the diff:\r\nhttps://github.com/bitcoin/bips/compare/7f4456de30db2528bcfc1dddbbc3c7533169646a..d83c29d59b78443e20a040395ca23777bfc332f1",
      "created_at": "2024-10-01T01:04:12Z",
      "updated_at": "2024-10-01T01:04:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1781994737",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781994737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781995162",
      "pull_request_review_id": 2338940555,
      "id": 1781995162,
      "node_id": "PRRC_kwDOAN28mc5qNxaa",
      "diff_hunk": "@@ -0,0 +1,274 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's. Grover's potentially requires roughly 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC, should no optimization for partial preimages be needed. Partial preimage optimization may lower the difficulty to find a block than the full 256-bit preimage (say, for a number with 75 zero bits in front).<ref>See [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques on Bitcoin mining].</ref> Regardless of such optimizations, the primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its signature algorithm] and not necessarily Proof of Work, hence the focus on a new address format. Additionally, should quantum mining demonstrate quantum advantage over ASIC miners, miners will transition to operating CRQCs instead.<ref>Grover's algorithm is a quadratic speedup, so instead of 2^256 tries it takes about 2^128 calls to the oracle (which is about 10^38 operations) to get a 256 bit preimage. The number of gates would be some multiple of that number. That's roughly how we get the correct order of magnitude, Mosca did a more finegrained calculation and land ballpark in similar large numbers. The number is so large, it's unclear the exact calculation with all the prefactors so far, contrary to ECC, which is roughly 10^8 operations, including the constant factors. A talk by [https://sam-jaques.appspot.com/papers Sam Jaques] gave some estimate of the size of the machine that would be necessary for Grover to attack hashes and it was a small astronomical body.</ref>\n+\n+It is worth mentioning that any addresses using RIPEMD160 / HASH160 could also be vulnerable to Grover's algorithm.<ref>There is a big difference between the cost of preimages on SHA256 and HASH160 with a quadratic reduction:\n+SHA256 is 2^128 ≈ 10^40 but HASH160 used in P2PKH and P2WPKH is 2^80 ≈ 10^24 quantum operations. This is much larger than ECC, and while it is unlikely a classical or quantum computer that can perform 2^128 within the next 100 years, Bitcoin currently does 2^80 classical operations every 30 minutes. Additionally, with Grover's, [https://bitcoin.stackexchange.com/a/115849/139611 a black box function could sidestep Shor's entirely, and SHA-256, providing the private key itself to a P2PKH or P2SH address.]</ref>\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 34,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "7f4456de30db2528bcfc1dddbbc3c7533169646a",
      "in_reply_to_id": 1781873035,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thank you for that, I've added that link as a reference.",
      "created_at": "2024-10-01T01:05:06Z",
      "updated_at": "2024-10-01T01:05:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1781995162",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781995162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838800695",
      "pull_request_review_id": 2430740303,
      "id": 1838800695,
      "node_id": "PRRC_kwDOAN28mc5tmd83",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 17,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Some of this might fit better in later parts of this document.\r\n\r\nHow about something like this:\r\n\r\n```suggestion\r\nThis document proposes the introduction of a new output type based on FALCON signatures. This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\r\n```\r\n\r\nThe inspiration by BIP 341 could be mentioned in the acknowledgments, and Rationale and Security being the relevant sections to understand the \"Why\" seem natural.",
      "created_at": "2024-11-12T21:32:35Z",
      "updated_at": "2024-11-12T22:09:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838800695",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838800695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838804349",
      "pull_request_review_id": 2430740303,
      "id": 1838804349,
      "node_id": "PRRC_kwDOAN28mc5tme19",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\r\n```",
      "created_at": "2024-11-12T21:36:27Z",
      "updated_at": "2024-11-12T22:09:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838804349",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838804349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838805486",
      "pull_request_review_id": 2430740303,
      "id": 1838805486,
      "node_id": "PRRC_kwDOAN28mc5tmfHu",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 31,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more might be vulnerable.\r\n```",
      "created_at": "2024-11-12T21:37:40Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838805486",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838805486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838807880",
      "pull_request_review_id": 2430740303,
      "id": 1838807880,
      "node_id": "PRRC_kwDOAN28mc5tmftI",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 35,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is this not just a question of time? If the security of the DLP is broken, eventually it could be broken in the time between submission of a transaction and its confirmation. Anyway, an attacker could simply outspend the victim’s transaction to buy more time.",
      "created_at": "2024-11-12T21:39:59Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838807880",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838807880"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838810043",
      "pull_request_review_id": 2430740303,
      "id": 1838810043,
      "node_id": "PRRC_kwDOAN28mc5tmgO7",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Relying on mining pools to keep transactions private does not feel like a viable security assumption.",
      "created_at": "2024-11-12T21:41:44Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838810043",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838810043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838810917",
      "pull_request_review_id": 2430740303,
      "id": 1838810917,
      "node_id": "PRRC_kwDOAN28mc5tmgcl",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a Post-Quantum Cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 37,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Rather, this new output type would be expected not be vulnerable at all?",
      "created_at": "2024-11-12T21:42:35Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838810917",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838810917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838813896",
      "pull_request_review_id": 2430740303,
      "id": 1838813896,
      "node_id": "PRRC_kwDOAN28mc5tmhLI",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a Post-Quantum Cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 39,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This feels like it is oversimplifying a bit. This seems to show output types that are generally vulnerable to _long-range_ attacks. Additionally, any reused hash-based addresses are also vulnerable to long-range attacks, and all of the output types below are vulnerable to short-range attacks.\r\n\r\nEdit: I see, it is clarified briefly later. Perhaps it would make sense to reorder a bit here.\r\n\r\n```suggestion\r\nThe following table is non-exhaustive but intended to inform the average bitcoin user whether their bitcoin is vulnerable to a long-range quantum attack.\r\n```",
      "created_at": "2024-11-12T21:45:45Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838813896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838813896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838815771",
      "pull_request_review_id": 2430740303,
      "id": 1838815771,
      "node_id": "PRRC_kwDOAN28mc5tmhob",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a Post-Quantum Cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of attack the underlying addresses are vulnerable to:\n+\n+{|\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except bc1r) || Long-range",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What is \"bc1r\"? It has not been introduced at this point.",
      "created_at": "2024-11-12T21:47:37Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838815771",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838815771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838819872",
      "pull_request_review_id": 2430740303,
      "id": 1838819872,
      "node_id": "PRRC_kwDOAN28mc5tmiog",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a Post-Quantum Cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of attack the underlying addresses are vulnerable to:\n+\n+{|\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except bc1r) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for bc1r) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase output in Block 1 back to itself. It is proposed to call the address in Block 1 the [https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 81,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As of earlier this month, ₿1,723,848 were held in P2PK outputs.",
      "created_at": "2024-11-12T21:51:55Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838819872",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838819872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838822897",
      "pull_request_review_id": 2430740303,
      "id": 1838822897,
      "node_id": "PRRC_kwDOAN28mc5tmjXx",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a Post-Quantum Cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of attack the underlying addresses are vulnerable to:\n+\n+{|\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except bc1r) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for bc1r) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase output in Block 1 back to itself. It is proposed to call the address in Block 1 the [https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more than 50 bitcoin are kept under a single distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is assuming that the attacker is financially-motivated instead of, for example, a nation state looking to break confidence in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their cryptography already.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be upgraded by 2030, with browsers and operating systems fully upgraded by 2033.\n+\n+Lastly, it is worth noting by way of comparison that [https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32 seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for bitcoin.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 87,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Some of this Motivation section could appear in \"Related Work\" or \"backward compatibility\".",
      "created_at": "2024-11-12T21:55:04Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838822897",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838822897"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838825430",
      "pull_request_review_id": 2430740303,
      "id": 1838825430,
      "node_id": "PRRC_kwDOAN28mc5tmj_W",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a Post-Quantum Cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of attack the underlying addresses are vulnerable to:\n+\n+{|\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except bc1r) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for bc1r) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase output in Block 1 back to itself. It is proposed to call the address in Block 1 the [https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more than 50 bitcoin are kept under a single distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is assuming that the attacker is financially-motivated instead of, for example, a nation state looking to break confidence in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their cryptography already.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be upgraded by 2030, with browsers and operating systems fully upgraded by 2033.\n+\n+Lastly, it is worth noting by way of comparison that [https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32 seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for bitcoin.\n+\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and the capital B refers to bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to remember that these are quantum [r]esistant addresses (similar to how bc1q corresponds to Se[q]Wit and bc1p corresponds to Ta[p]root). This is referencing the lookup table under [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with post-quantum cryptography. This is a form of \"hybrid cryptography\" such that no regression in security is presented should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 98,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does it then even make sense to base the new output type on Taproot rather than e.g. P2WPKH?",
      "created_at": "2024-11-12T21:57:37Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838825430",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838825430"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1851167052",
      "pull_request_review_id": 2449999639,
      "id": 1851167052,
      "node_id": "PRRC_kwDOAN28mc5uVpFM",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a Post-Quantum Cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of attack the underlying addresses are vulnerable to:\n+\n+{|\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except bc1r) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for bc1r) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase output in Block 1 back to itself. It is proposed to call the address in Block 1 the [https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more than 50 bitcoin are kept under a single distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is assuming that the attacker is financially-motivated instead of, for example, a nation state looking to break confidence in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their cryptography already.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be upgraded by 2030, with browsers and operating systems fully upgraded by 2033.\n+\n+Lastly, it is worth noting by way of comparison that [https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32 seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for bitcoin.\n+\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and the capital B refers to bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to remember that these are quantum [r]esistant addresses (similar to how bc1q corresponds to Se[q]Wit and bc1p corresponds to Ta[p]root). This is referencing the lookup table under [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with post-quantum cryptography. This is a form of \"hybrid cryptography\" such that no regression in security is presented should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 98,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": 1838825430,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There's already things that use taptrees where this kind of cryptographic commitment scheme would be adequate, such as for RGB. It would be nice to also be able to rely on Schnorr signature aggregation even in cases where its security has to be augmented by PQC. Do you know of anything that could be broken if the public key isn't known in advance? Like MuSig2 or FROST?",
      "created_at": "2024-11-21T00:47:15Z",
      "updated_at": "2024-11-21T00:47:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1851167052",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1851167052"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1851177983",
      "pull_request_review_id": 2450015091,
      "id": 1851177983,
      "node_id": "PRRC_kwDOAN28mc5uVrv_",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": 1838810043,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agreed, which is why P2QRH is preferable. It's still worth mentioning, but I'll be sure to explain this is the entire purpose of P2QRH, to essentially keep the mempool trustless.",
      "created_at": "2024-11-21T01:05:31Z",
      "updated_at": "2024-11-21T01:05:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1851177983",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1851177983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873731137",
      "pull_request_review_id": 2485453691,
      "id": 1873731137,
      "node_id": "PRRC_kwDOAN28mc5vrt5B",
      "diff_hunk": "@@ -0,0 +1,592 @@\n+<pre>\n+  BIP: TBD",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 2,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "f2426c66569a93b393da0f9a9d535184306640d1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit:\r\n```suggestion\r\n  BIP: ?\r\n```",
      "created_at": "2024-12-06T17:19:10Z",
      "updated_at": "2024-12-06T18:12:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1873731137",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873731137"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873731390",
      "pull_request_review_id": 2485453691,
      "id": 1873731390,
      "node_id": "PRRC_kwDOAN28mc5vrt8-",
      "diff_hunk": "@@ -0,0 +1,592 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 3,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "f2426c66569a93b393da0f9a9d535184306640d1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should mention that it’s a soft fork:\r\n\r\n```suggestion\r\n  Layer: <Consensus (soft fork)\r\n  Title: QuBit: SegWit version 3 spending rules (P2QRH)\r\n```",
      "created_at": "2024-12-06T17:19:27Z",
      "updated_at": "2024-12-06T18:12:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1873731390",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873731390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873733035",
      "pull_request_review_id": 2485453691,
      "id": 1873733035,
      "node_id": "PRRC_kwDOAN28mc5vruWr",
      "diff_hunk": "@@ -0,0 +1,592 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 10,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "f2426c66569a93b393da0f9a9d535184306640d1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The preamble is order sensitive:\r\n\r\n```suggestion\r\n  Created: 2024-06-08\r\n  License: BSD-3-Clause\r\n```",
      "created_at": "2024-12-06T17:20:55Z",
      "updated_at": "2024-12-06T18:12:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1873733035",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873733035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 9,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873737346",
      "pull_request_review_id": 2485453691,
      "id": 1873737346,
      "node_id": "PRRC_kwDOAN28mc5vrvaC",
      "diff_hunk": "@@ -0,0 +1,592 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of Bitcoin's signature security should the Discrete Logarithm\n+Problem (DLP), which secures Elliptic Curve Cryptography (ECC), no longer prove to be computationally hard, likely\n+through quantum advantage by Cryptoanalytically-Relevant Quantum Computers (CRQCs).\n+[https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the\n+private key from a public key exponentially faster than classical means. The application of this variant of Shor's\n+algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a\n+hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of\n+this is investigated further in the paper,\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks\n+generally considered to be their potential to break ECC, which is used in signatures and Taproot commitments], hence",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 38,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "f2426c66569a93b393da0f9a9d535184306640d1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This feels like a partial repetition of lines 29–31. Perhaps the prior lines should be folded into this introduction of the issue.",
      "created_at": "2024-12-06T17:24:45Z",
      "updated_at": "2024-12-06T18:12:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1873737346",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873737346"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 37,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873738896",
      "pull_request_review_id": 2485453691,
      "id": 1873738896,
      "node_id": "PRRC_kwDOAN28mc5vrvyQ",
      "diff_hunk": "@@ -0,0 +1,592 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of Bitcoin's signature security should the Discrete Logarithm\n+Problem (DLP), which secures Elliptic Curve Cryptography (ECC), no longer prove to be computationally hard, likely\n+through quantum advantage by Cryptoanalytically-Relevant Quantum Computers (CRQCs).\n+[https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the\n+private key from a public key exponentially faster than classical means. The application of this variant of Shor's\n+algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a\n+hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of\n+this is investigated further in the paper,\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks\n+generally considered to be their potential to break ECC, which is used in signatures and Taproot commitments], hence\n+the focus on a new address format. Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in\n+roughly 10^8 quantum operations.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 49,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "f2426c66569a93b393da0f9a9d535184306640d1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Most output types require the public key is explicitly stated in the input script and it doesn’t even have to be recovered from the signature.",
      "created_at": "2024-12-06T17:26:14Z",
      "updated_at": "2024-12-06T18:12:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1873738896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873738896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873799105",
      "pull_request_review_id": 2485453691,
      "id": 1873799105,
      "node_id": "PRRC_kwDOAN28mc5vr-fB",
      "diff_hunk": "@@ -0,0 +1,609 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+__TOC__",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 13,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "2e4ad811cfb048d8399730fde15f3f701969b4e1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n```\r\nThe TOC is generated automatically in the richtext view:\r\n\r\n![image](https://github.com/user-attachments/assets/466e33a6-64e1-4b5d-b857-8681d4d3565e)",
      "created_at": "2024-12-06T18:06:20Z",
      "updated_at": "2024-12-06T18:12:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1873799105",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873799105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876737665",
      "pull_request_review_id": 2490053669,
      "id": 1876737665,
      "node_id": "PRRC_kwDOAN28mc5v3L6B",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 4,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry, my suggestion had an errant \"<\" here.\r\n\r\n```suggestion\r\n  Layer: Consensus (soft fork)\r\n```",
      "created_at": "2024-12-09T20:50:58Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1876737665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1876737665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879211380",
      "pull_request_review_id": 2494122656,
      "id": 1879211380,
      "node_id": "PRRC_kwDOAN28mc5wAn10",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nnot to reveal the transaction public key to attackers.\r\n```\r\nSuggest removing unnecessary sentence. If you disagree, resolve this comment.",
      "created_at": "2024-12-11T02:05:27Z",
      "updated_at": "2024-12-12T00:50:37Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1879211380",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879211380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 54,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879248187",
      "pull_request_review_id": 2494122656,
      "id": 1879248187,
      "node_id": "PRRC_kwDOAN28mc5wAw07",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Did you mean `fee market` rather than `free market`?",
      "created_at": "2024-12-11T02:49:45Z",
      "updated_at": "2024-12-12T00:50:37Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1879248187",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879248187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879250821",
      "pull_request_review_id": 2494122656,
      "id": 1879250821,
      "node_id": "PRRC_kwDOAN28mc5wAxeF",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 72,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nvulnerable to a long-range quantum attack:\r\n```",
      "created_at": "2024-12-11T02:54:21Z",
      "updated_at": "2024-12-12T00:50:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1879250821",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879250821"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879255239",
      "pull_request_review_id": 2494122656,
      "id": 1879255239,
      "node_id": "PRRC_kwDOAN28mc5wAyjH",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 115,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'd suggest that readability would be improved by having a subsection titled something like \"Long Range and Short Range Quantum Attacks\" that defines this terminology and consequences are introduced upfront.\r\n\r\nSomething like:\r\n\r\n## Long Range and Short Range Quantum Attacks\r\n- **Long Range Quantum Attack** is an attack in which ...\r\n- **Short  Range Quantum Attack** is an attack in which ...\r\n\r\nIf you disagree with this suggestion, just mark this comment as resolved.",
      "created_at": "2024-12-11T03:00:10Z",
      "updated_at": "2024-12-12T00:50:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1879255239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879255239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881140873",
      "pull_request_review_id": 2494122656,
      "id": 1881140873,
      "node_id": "PRRC_kwDOAN28mc5wH-6J",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 319,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe specific quantum-resistant signature algorithm used is inferred from the length of the public key.\r\n```\r\n\r\nIf we infer the signature algorithm from the public key alone, then we will reject a signature which has the wrong length for that algorithm. This makes error handling easier and the output commits to the signature algorithm.\r\n\r\nWhereas if we infer the signature algorithm from the public key and the signature then if one of them is wrong, we don't know the intended signature algorithm.",
      "created_at": "2024-12-11T23:09:28Z",
      "updated_at": "2024-12-12T00:50:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1881140873",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881140873"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881141857",
      "pull_request_review_id": 2494122656,
      "id": 1881141857,
      "node_id": "PRRC_kwDOAN28mc5wH_Jh",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported algorithms and their NIST Level V parameters:",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 322,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Below you discuss supporting `secp256k1` as an algorithm for this output. It should probably be included in this list.",
      "created_at": "2024-12-11T23:10:52Z",
      "updated_at": "2024-12-12T00:50:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1881141857",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881141857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 322,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881206909",
      "pull_request_review_id": 2494122656,
      "id": 1881206909,
      "node_id": "PRRC_kwDOAN28mc5wIPB9",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. This includes classical Schnorr signatures.\n+\n+==== Public Key Hashing ====\n+\n+All public keys included in the attestation are hashed using HASH256 (double SHA-256). The concatenation of these\n+hashes is then hashed again using HASH256 before being included in the <code>scriptPubKey</code>. This ensures a\n+fixed-size commitment to potentially multiple public keys of varying lengths.\n+\n+==== Hash Computation ====\n+\n+hash = HASH256(HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN))\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> by concatenating the <code>HASH256</code> of each provided public key:\n+\n+  hashed_pubkeys = HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN)\n+\n+* Compute <code>computed_hash</code>:\n+\n+  computed_hash = HASH256(hashed_pubkeys)\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security and is supported.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 29,792\n+bytes || 64 bytes || Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/484.pdf XMSS]<ref name=\"xmss\">XMSS, which is based on Winternitz, uses a value of 108\n+for its most compact signature size, with only a 4.6x (2.34/0.51) increase in verification time. Signing and key\n+generation are not considered a significant factor because they are not distributed throughout the entire Bitcoin\n+network, which take place only inside of wallets one time.</ref> || 2011 || 15,384 bytes || 13,568 bytes ||\n+Hash-based cryptography (Winternitz OTS)\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 4,595 bytes || 2,592 bytes ||\n+Lattice cryptography\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 1,814 bytes || 1,927 bytes || Lattice cryptography (NTRU)\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 1,280 bytes || 1,793 bytes || Lattice cryptography\n+(NTRU)\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 1,261 bytes || 2,329 bytes || Lattice cryptography\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 335 bytes || 128 bytes || Supersingular Elliptic Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 294 bytes || 130 bytes || Supersingular Elliptic\n+Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2023/436.pdf SQIsignHD] || 2023 || 109 bytes (NIST Level I) || Not provided ||\n+Supersingular Elliptic Curve Isogeny\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in\n+post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major\n+constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is\n+approved for production use. Meanwhile, SPHINCS+ and CRYSTALS-Dilithium signatures are already approved and have\n+achieved broader community consensus. FALCON signatures are also NIST approved.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA: 70-72 bytes\n+* Schnorr: 64 bytes\n+\n+In comparison to inception date, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was\n+chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support\n+[https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to\n+replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 524,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What about just using a merklized structure for tapscript so we don't need to depend on signature specifies? The output could be `HASH256(HASH256(pubkey),scriptroot)` where `scriptroot = HASH256(merkletree of scripts)`. You'd get the taproot privacy benefits of not revealing that a script spend path exists when doing a key spend. If no script spend path exists simply choosing scriptroot to be a random number, if a script spend path exists, include a random number as one of the branches of your merkle tree.\r\n\r\nThe main downside of this merklized approach is that each spend has to push an additional 32 bytes. However given the size of post-quantum signatures and public keys, this additional 32 bytes shouldn't matter much.\r\n\r\nhttps://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki",
      "created_at": "2024-12-12T00:44:09Z",
      "updated_at": "2024-12-12T00:50:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1881206909",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881206909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881209471",
      "pull_request_review_id": 2494122656,
      "id": 1881209471,
      "node_id": "PRRC_kwDOAN28mc5wIPp_",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. This includes classical Schnorr signatures.\n+\n+==== Public Key Hashing ====\n+\n+All public keys included in the attestation are hashed using HASH256 (double SHA-256). The concatenation of these\n+hashes is then hashed again using HASH256 before being included in the <code>scriptPubKey</code>. This ensures a\n+fixed-size commitment to potentially multiple public keys of varying lengths.\n+\n+==== Hash Computation ====\n+\n+hash = HASH256(HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN))\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> by concatenating the <code>HASH256</code> of each provided public key:\n+\n+  hashed_pubkeys = HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN)\n+\n+* Compute <code>computed_hash</code>:\n+\n+  computed_hash = HASH256(hashed_pubkeys)\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security and is supported.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 447,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What about using a STARK over all the post-quantum signatures included in a block by the miner to accelerate verification? Is there anything about this design that would prevent adding such a feature?",
      "created_at": "2024-12-12T00:47:53Z",
      "updated_at": "2024-12-12T00:51:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1881209471",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881209471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 447,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1882547707",
      "pull_request_review_id": 2500275746,
      "id": 1882547707,
      "node_id": "PRRC_kwDOAN28mc5wNWX7",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1879211380,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Actually, I think it provides important context and insight as to what P2QRH specifically addresses given the alternative (private miner mempools), but that's just my opinion.",
      "created_at": "2024-12-12T17:02:59Z",
      "updated_at": "2024-12-12T17:03:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1882547707",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1882547707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 54,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1882574533",
      "pull_request_review_id": 2500315352,
      "id": 1882574533,
      "node_id": "PRRC_kwDOAN28mc5wNc7F",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1879248187,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not really, but maybe that might make more sense? The fee market is supposed to be a free market.",
      "created_at": "2024-12-12T17:18:10Z",
      "updated_at": "2024-12-12T17:18:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1882574533",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1882574533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884105335",
      "pull_request_review_id": 2502560966,
      "id": 1884105335,
      "node_id": "PRRC_kwDOAN28mc5wTSp3",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 319,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1881140873,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's a good point.",
      "created_at": "2024-12-13T15:29:09Z",
      "updated_at": "2024-12-13T15:29:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1884105335",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884105335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884106684",
      "pull_request_review_id": 2502563043,
      "id": 1884106684,
      "node_id": "PRRC_kwDOAN28mc5wTS-8",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported algorithms and their NIST Level V parameters:",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 322,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1881141857,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I'll just clarify this section is for PQC algorithms.",
      "created_at": "2024-12-13T15:30:08Z",
      "updated_at": "2024-12-13T15:30:08Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1884106684",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884106684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 322,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884111321",
      "pull_request_review_id": 2502570004,
      "id": 1884111321,
      "node_id": "PRRC_kwDOAN28mc5wTUHZ",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. This includes classical Schnorr signatures.\n+\n+==== Public Key Hashing ====\n+\n+All public keys included in the attestation are hashed using HASH256 (double SHA-256). The concatenation of these\n+hashes is then hashed again using HASH256 before being included in the <code>scriptPubKey</code>. This ensures a\n+fixed-size commitment to potentially multiple public keys of varying lengths.\n+\n+==== Hash Computation ====\n+\n+hash = HASH256(HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN))\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> by concatenating the <code>HASH256</code> of each provided public key:\n+\n+  hashed_pubkeys = HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN)\n+\n+* Compute <code>computed_hash</code>:\n+\n+  computed_hash = HASH256(hashed_pubkeys)\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security and is supported.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 29,792\n+bytes || 64 bytes || Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/484.pdf XMSS]<ref name=\"xmss\">XMSS, which is based on Winternitz, uses a value of 108\n+for its most compact signature size, with only a 4.6x (2.34/0.51) increase in verification time. Signing and key\n+generation are not considered a significant factor because they are not distributed throughout the entire Bitcoin\n+network, which take place only inside of wallets one time.</ref> || 2011 || 15,384 bytes || 13,568 bytes ||\n+Hash-based cryptography (Winternitz OTS)\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 4,595 bytes || 2,592 bytes ||\n+Lattice cryptography\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 1,814 bytes || 1,927 bytes || Lattice cryptography (NTRU)\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 1,280 bytes || 1,793 bytes || Lattice cryptography\n+(NTRU)\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 1,261 bytes || 2,329 bytes || Lattice cryptography\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 335 bytes || 128 bytes || Supersingular Elliptic Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 294 bytes || 130 bytes || Supersingular Elliptic\n+Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2023/436.pdf SQIsignHD] || 2023 || 109 bytes (NIST Level I) || Not provided ||\n+Supersingular Elliptic Curve Isogeny\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in\n+post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major\n+constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is\n+approved for production use. Meanwhile, SPHINCS+ and CRYSTALS-Dilithium signatures are already approved and have\n+achieved broader community consensus. FALCON signatures are also NIST approved.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA: 70-72 bytes\n+* Schnorr: 64 bytes\n+\n+In comparison to inception date, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was\n+chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support\n+[https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to\n+replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 524,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1881206909,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's a great point. You're right, we should use a merkle tree to allow branch exclusions. We can distinguish between hashes and x-only public keys because x-only public keys will be accompanied by a signature, whereas a hash would not, and so it would be considered and excluded branch.",
      "created_at": "2024-12-13T15:33:18Z",
      "updated_at": "2024-12-13T15:33:18Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1884111321",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884111321"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884112556",
      "pull_request_review_id": 2502571967,
      "id": 1884112556,
      "node_id": "PRRC_kwDOAN28mc5wTUas",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. This includes classical Schnorr signatures.\n+\n+==== Public Key Hashing ====\n+\n+All public keys included in the attestation are hashed using HASH256 (double SHA-256). The concatenation of these\n+hashes is then hashed again using HASH256 before being included in the <code>scriptPubKey</code>. This ensures a\n+fixed-size commitment to potentially multiple public keys of varying lengths.\n+\n+==== Hash Computation ====\n+\n+hash = HASH256(HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN))\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> by concatenating the <code>HASH256</code> of each provided public key:\n+\n+  hashed_pubkeys = HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN)\n+\n+* Compute <code>computed_hash</code>:\n+\n+  computed_hash = HASH256(hashed_pubkeys)\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security and is supported.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 447,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1881209471,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As we discussed privately, a STARKS-based approach would be out of scope for this BIP, but alternative approaches specified in separate BIPs are certainly welcome.",
      "created_at": "2024-12-13T15:34:16Z",
      "updated_at": "2024-12-13T15:34:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1884112556",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884112556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 447,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884192887",
      "pull_request_review_id": 2502693465,
      "id": 1884192887,
      "node_id": "PRRC_kwDOAN28mc5wToB3",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 115,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1879255239,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done!",
      "created_at": "2024-12-13T16:35:15Z",
      "updated_at": "2024-12-13T16:35:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1884192887",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884192887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889210464",
      "pull_request_review_id": 2490053669,
      "id": 1889210464,
      "node_id": "PRRC_kwDOAN28mc5wmxBg",
      "diff_hunk": "@@ -0,0 +1,598 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 34,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I assume that the doubling from the example here is meant to be relevant for the duplication of the effort:\r\n\r\n```suggestion\r\nkeys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public key\r\nlength (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\r\n```",
      "created_at": "2024-12-17T20:57:33Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1889210464",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889210464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889213477",
      "pull_request_review_id": 2490053669,
      "id": 1889213477,
      "node_id": "PRRC_kwDOAN28mc5wmxwl",
      "diff_hunk": "@@ -0,0 +1,598 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 47,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"Additionally\" could be read as being related:\r\n```suggestion\r\ncloser to 20%. Independently, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\r\n```",
      "created_at": "2024-12-17T20:59:52Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1889213477",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889213477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889219559",
      "pull_request_review_id": 2490053669,
      "id": 1889219559,
      "node_id": "PRRC_kwDOAN28mc5wmzPn",
      "diff_hunk": "@@ -0,0 +1,598 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 81,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry for being imprecise when I suggested line breaks. I meant that it would be preferable for lines of flowing text to be limited in length as it can be hard to see what exactly changed for extremely long lines\r\n\r\nIt is fine for tables and code samples to be longer, as line breaks can add confusion or introduce errors in those cases.",
      "created_at": "2024-12-17T21:04:35Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1889219559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889219559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 79,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889231215",
      "pull_request_review_id": 2490053669,
      "id": 1889231215,
      "node_id": "PRRC_kwDOAN28mc5wm2Fv",
      "diff_hunk": "@@ -0,0 +1,598 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 161,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Some schemes already assume that higher native segwit versions follow lower segwit versions. It seems that skipping a version should have a stronger motivation as a similar mnemonic could be crafted as easily for version 2: bc1(z), corresponds to \"(z)ecure addresses\" or to addresses that \"let the user rest e(z)\".",
      "created_at": "2024-12-17T21:14:05Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1889231215",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889231215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 158,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889233616",
      "pull_request_review_id": 2490053669,
      "id": 1889233616,
      "node_id": "PRRC_kwDOAN28mc5wm2rQ",
      "diff_hunk": "@@ -0,0 +1,598 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 164,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I’m not sure that is a pressing concern.",
      "created_at": "2024-12-17T21:16:21Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1889233616",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889233616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 163,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889247309",
      "pull_request_review_id": 2490053669,
      "id": 1889247309,
      "node_id": "PRRC_kwDOAN28mc5wm6BN",
      "diff_hunk": "@@ -0,0 +1,598 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 138,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "While maybe a sensible recommendation, this feels a bit digressive.",
      "created_at": "2024-12-17T21:26:13Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1889247309",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889247309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 134,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889248599",
      "pull_request_review_id": 2490053669,
      "id": 1889248599,
      "node_id": "PRRC_kwDOAN28mc5wm6VX",
      "diff_hunk": "@@ -0,0 +1,598 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. Public keys that are not needed can be excluded by including their hash in the attestation accompanied\n+with an empty signature. This includes classical Schnorr signatures.\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> as specified in the Hash Computation section.\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security, and is supported by\n+the implementation.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 29,792\n+bytes || 64 bytes || Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/484.pdf XMSS]<ref name=\"xmss\">XMSS, which is based on Winternitz, uses a value of 108\n+for its most compact signature size, with only a 4.6x (2.34/0.51) increase in verification time. Signing and key\n+generation are not considered a significant factor because they are not distributed throughout the entire Bitcoin\n+network, which take place only inside of wallets one time.</ref> || 2011 || 15,384 bytes || 13,568 bytes ||\n+Hash-based cryptography (Winternitz OTS)\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 4,595 bytes || 2,592 bytes ||\n+Lattice cryptography\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 1,814 bytes || 1,927 bytes || Lattice cryptography (NTRU)\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 1,280 bytes || 1,793 bytes || Lattice cryptography\n+(NTRU)\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 1,261 bytes || 2,329 bytes || Lattice cryptography\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 335 bytes || 128 bytes || Supersingular Elliptic Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 294 bytes || 130 bytes || Supersingular Elliptic\n+Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2023/436.pdf SQIsignHD] || 2023 || 109 bytes (NIST Level I) || Not provided ||\n+Supersingular Elliptic Curve Isogeny\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in\n+post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major\n+constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is\n+approved for production use. Meanwhile, SPHINCS+ and CRYSTALS-Dilithium signatures are already approved and have\n+achieved broader community consensus. FALCON signatures are also NIST approved.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA: 70-72 bytes\n+* Schnorr: 64 bytes\n+\n+In comparison to inception date, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was\n+chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support\n+[https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to\n+replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR\n+addresses. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it\n+might be possible to implement Isogeny Schnorr signatures.\n+\n+Signature verification speed as it compares to Schnorr or ECDSA isn't seen as high a consideration as signature size\n+due to block space being the primary fee constraint. As a P2QRH implementation materializes, a benchmark will be added\n+for performance comparison. Fortunately, SQIsign signatures are substantially faster to verify than it is to generate\n+keys or to sign, which is a major consideration when a transaction need only be signed once, or a handful of times with\n+PSBT, compared to being verified simultaneously on tens of thousands of nodes. Key generation may need to be cached in\n+BIP-32 Hierarchical Deterministic wallets.\n+\n+An additional consideration is security level. Longer signature sizes provide more security. NIST has standardized five\n+security levels for post-quantum cryptography. NIST security level I provides security equivalent to 128-bit keys, and\n+security level V provides 256-bit security.\n+\n+== Test Vectors and Reference Code ==\n+\n+TBD\n+\n+== Related Work ==\n+\n+It is worth noting by way of comparison that\n+[https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's\n+proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves\n+a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32\n+seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for Bitcoin.\n+\n+== References ==\n+\n+* [https://groups.google.com/g/bitcoindev/c/Aee8xKuIC2s/m/cu6xej1mBQAJ Mailing list discussion]\n+* [https://delvingbitcoin.org/t/proposing-a-p2qrh-bip-towards-a-quantum-resistant-soft-fork/956?u=cryptoquick Delving\n+Bitcoin discussion]\n+* [https://bitcoinops.org/en/newsletters/2024/06/14/ Bitcoin OpTech newsletter]\n+* [https://bitcoinops.org/en/podcast/2024/06/18/#draft-bip-for-quantum-safe-address-format Bitcoin OpTech discussion",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 567,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit:\r\n\r\n```suggestion\r\n* [https://bitcoinops.org/en/newsletters/2024/06/14/ Bitcoin Optech newsletter]\r\n* [https://bitcoinops.org/en/podcast/2024/06/18/#draft-bip-for-quantum-safe-address-format Bitcoin Optech discussion\r\n```",
      "created_at": "2024-12-17T21:27:27Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1889248599",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889248599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 566,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 567,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889460220",
      "pull_request_review_id": 2510546176,
      "id": 1889460220,
      "node_id": "PRRC_kwDOAN28mc5wnt_8",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779156396,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Looks good to me",
      "created_at": "2024-12-18T01:19:48Z",
      "updated_at": "2024-12-18T01:19:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1889460220",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889460220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1890477463",
      "pull_request_review_id": 2512248782,
      "id": 1890477463,
      "node_id": "PRRC_kwDOAN28mc5wrmWX",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. This includes classical Schnorr signatures.\n+\n+==== Public Key Hashing ====\n+\n+All public keys included in the attestation are hashed using HASH256 (double SHA-256). The concatenation of these\n+hashes is then hashed again using HASH256 before being included in the <code>scriptPubKey</code>. This ensures a\n+fixed-size commitment to potentially multiple public keys of varying lengths.\n+\n+==== Hash Computation ====\n+\n+hash = HASH256(HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN))\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> by concatenating the <code>HASH256</code> of each provided public key:\n+\n+  hashed_pubkeys = HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN)\n+\n+* Compute <code>computed_hash</code>:\n+\n+  computed_hash = HASH256(hashed_pubkeys)\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security and is supported.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 29,792\n+bytes || 64 bytes || Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/484.pdf XMSS]<ref name=\"xmss\">XMSS, which is based on Winternitz, uses a value of 108\n+for its most compact signature size, with only a 4.6x (2.34/0.51) increase in verification time. Signing and key\n+generation are not considered a significant factor because they are not distributed throughout the entire Bitcoin\n+network, which take place only inside of wallets one time.</ref> || 2011 || 15,384 bytes || 13,568 bytes ||\n+Hash-based cryptography (Winternitz OTS)\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 4,595 bytes || 2,592 bytes ||\n+Lattice cryptography\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 1,814 bytes || 1,927 bytes || Lattice cryptography (NTRU)\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 1,280 bytes || 1,793 bytes || Lattice cryptography\n+(NTRU)\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 1,261 bytes || 2,329 bytes || Lattice cryptography\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 335 bytes || 128 bytes || Supersingular Elliptic Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 294 bytes || 130 bytes || Supersingular Elliptic\n+Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2023/436.pdf SQIsignHD] || 2023 || 109 bytes (NIST Level I) || Not provided ||\n+Supersingular Elliptic Curve Isogeny\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in\n+post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major\n+constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is\n+approved for production use. Meanwhile, SPHINCS+ and CRYSTALS-Dilithium signatures are already approved and have\n+achieved broader community consensus. FALCON signatures are also NIST approved.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA: 70-72 bytes\n+* Schnorr: 64 bytes\n+\n+In comparison to inception date, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was\n+chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support\n+[https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to\n+replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 524,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1881206909,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That work is done here, btw:\r\nhttps://github.com/bitcoin/bips/pull/1670/files#diff-917a32a71b69bf62d7c85dfb13d520a0340a30a2889b015b82d36411ed45e754R272-R301",
      "created_at": "2024-12-18T15:58:20Z",
      "updated_at": "2024-12-18T15:58:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1890477463",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1890477463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1890719482",
      "pull_request_review_id": 2512659485,
      "id": 1890719482,
      "node_id": "PRRC_kwDOAN28mc5wshb6",
      "diff_hunk": "@@ -0,0 +1,598 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 10,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Please update the BIP number (on line 2), filename, and the created date to 2024-12-18 (date of BIP number assignment) and add a corresponding BIP draft entry to the repo root README file.",
      "created_at": "2024-12-18T19:14:13Z",
      "updated_at": "2024-12-18T19:29:30Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1890719482",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1890719482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1890878149",
      "pull_request_review_id": 2512929513,
      "id": 1890878149,
      "node_id": "PRRC_kwDOAN28mc5wtILF",
      "diff_hunk": "@@ -0,0 +1,598 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 10,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "in_reply_to_id": 1890719482,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done!",
      "created_at": "2024-12-18T21:49:51Z",
      "updated_at": "2024-12-18T21:49:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1890878149",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1890878149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1890963516",
      "pull_request_review_id": 2513062938,
      "id": 1890963516,
      "node_id": "PRRC_kwDOAN28mc5wtdA8",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 357,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "QbitsCode",
        "id": 99557903,
        "node_id": "U_kgDOBe8iDw",
        "avatar_url": "https://avatars.githubusercontent.com/u/99557903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/QbitsCode",
        "html_url": "https://github.com/QbitsCode",
        "followers_url": "https://api.github.com/users/QbitsCode/followers",
        "following_url": "https://api.github.com/users/QbitsCode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/QbitsCode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/QbitsCode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/QbitsCode/subscriptions",
        "organizations_url": "https://api.github.com/users/QbitsCode/orgs",
        "repos_url": "https://api.github.com/users/QbitsCode/repos",
        "events_url": "https://api.github.com/users/QbitsCode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/QbitsCode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This proposal uses SQIsign signatures, an isogeny-based quantum-resistant signature scheme, to enhance the protocol's quantum security. While SQIsign has shown promising performance and compact signature sizes, it is worth noting that SQIsign is not part of the NIST PQC standardization process. This choice reflects a consideration of alternatives beyond NIST's selected algorithms, aiming to balance quantum resistance with efficiency and practical implementation constraints. Future analysis and community feedback will determine its suitability for adoption.  All other pq alogrithms of Group 1 & 2 highlighted in pqcBitcoin repo are confirmed NIST standard and tested.",
      "created_at": "2024-12-18T23:49:46Z",
      "updated_at": "2025-02-25T05:53:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1890963516",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1890963516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 357,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893250661",
      "pull_request_review_id": 2516399765,
      "id": 1893250661,
      "node_id": "PRRC_kwDOAN28mc5w2LZl",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 39,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This proposal defines a new _output_ type, not address type. An address is merely an encoding of an output script, and in this case an existing address type (Bech32m) is used.\r\n\r\n```suggestion\r\nThis proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\r\n```",
      "created_at": "2024-12-19T23:13:38Z",
      "updated_at": "2024-12-19T23:15:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893250661",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893250661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893250716",
      "pull_request_review_id": 2516399765,
      "id": 1893250716,
      "node_id": "PRRC_kwDOAN28mc5w2Lac",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 63,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems intuitive that a short range attack would require a more powerful QC than a long range attack, but is this just intuition or is it rooted in actual science? In the former case this text needs more \"may\"s and \"it is believed\"s, and in the latter case a link to relevant research.",
      "created_at": "2024-12-19T23:13:42Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893250716",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893250716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 61,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893250812",
      "pull_request_review_id": 2516399765,
      "id": 1893250812,
      "node_id": "PRRC_kwDOAN28mc5w2Lb8",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 71,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since there are only 7 standard output types relevant to this discussion, does the table really need to be non-exhaustive?\r\n\r\n(P2PK, P2PKH, P2MS, P2SH, P2WPKH, P2WSH, P2TR)",
      "created_at": "2024-12-19T23:13:49Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893250812",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893250812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893250886",
      "pull_request_review_id": 2516399765,
      "id": 1893250886,
      "node_id": "PRRC_kwDOAN28mc5w2LdG",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 77,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n|+ Vulnerable output types\r\n|-\r\n! Type !! Vulnerable !! Prefix !! Example\r\n```",
      "created_at": "2024-12-19T23:13:55Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893250886",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893250886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 75,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893250951",
      "pull_request_review_id": 2516399765,
      "id": 1893250951,
      "node_id": "PRRC_kwDOAN28mc5w2LeH",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 80,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "To prevent formatting breaks, I'd recommend using a 33-byte (compressed) key instead.",
      "created_at": "2024-12-19T23:14:00Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893250951",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893250951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251058",
      "pull_request_review_id": 2516399765,
      "id": 1893251058,
      "node_id": "PRRC_kwDOAN28mc5w2Lfy",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nIt should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\r\n```",
      "created_at": "2024-12-19T23:14:07Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893251058",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251116",
      "pull_request_review_id": 2516399765,
      "id": 1893251116,
      "node_id": "PRRC_kwDOAN28mc5w2Lgs",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 94,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you elaborate? Child keys depend not only on the parent key but also on the chain code.",
      "created_at": "2024-12-19T23:14:11Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893251116",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251250",
      "pull_request_review_id": 2516399765,
      "id": 1893251250,
      "node_id": "PRRC_kwDOAN28mc5w2Liy",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 101,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\r\n```",
      "created_at": "2024-12-19T23:14:20Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893251250",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251292",
      "pull_request_review_id": 2516399765,
      "id": 1893251292,
      "node_id": "PRRC_kwDOAN28mc5w2Ljc",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 104,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Shouldn't this say \"BIP-32 extended public keys\" instead?",
      "created_at": "2024-12-19T23:14:24Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893251292",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251349",
      "pull_request_review_id": 2516399765,
      "id": 1893251349,
      "node_id": "PRRC_kwDOAN28mc5w2LkV",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 117,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "1. You can't \"spend\" a key, only an output. \r\n2. What do you mean by \"full key\"?\r\n3. Why do we require sending back to the same key?",
      "created_at": "2024-12-19T23:14:28Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893251349",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 116,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251383",
      "pull_request_review_id": 2516399765,
      "id": 1893251383,
      "node_id": "PRRC_kwDOAN28mc5w2Lk3",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 118,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Link doesn't work, please fix.",
      "created_at": "2024-12-19T23:14:31Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893251383",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251483",
      "pull_request_review_id": 2516399765,
      "id": 1893251483,
      "node_id": "PRRC_kwDOAN28mc5w2Lmb",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 123,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This still leaves in the possibility that Satoshi comes back and spends the coins. Why don't we choose coins that we know nobody knows the private key for, i.e. coins locked to a NUMS point?",
      "created_at": "2024-12-19T23:14:37Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893251483",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 121,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251556",
      "pull_request_review_id": 2516399765,
      "id": 1893251556,
      "node_id": "PRRC_kwDOAN28mc5w2Lnk",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 127,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There's no such thing as a \"P2PK address\"; P2PK scripts don't have a standardized address format. (What mempool.space shows is just the raw public key, not an address, not least because you can't send to it using any commonly used wallet software.)\r\n```suggestion\r\nblock reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\r\n```",
      "created_at": "2024-12-19T23:14:43Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893251556",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251626",
      "pull_request_review_id": 2516399765,
      "id": 1893251626,
      "node_id": "PRRC_kwDOAN28mc5w2Loq",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 142,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nCryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\r\n```",
      "created_at": "2024-12-19T23:14:48Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893251626",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251684",
      "pull_request_review_id": 2516399765,
      "id": 1893251684,
      "node_id": "PRRC_kwDOAN28mc5w2Lpk",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 160,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In the case of SegWit and Taproot these are just coincidences. I would leave this out.",
      "created_at": "2024-12-19T23:14:52Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893251684",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 159,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251764",
      "pull_request_review_id": 2516399765,
      "id": 1893251764,
      "node_id": "PRRC_kwDOAN28mc5w2Lq0",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 173,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "BIP16 doesn't use double SHA-256 though?",
      "created_at": "2024-12-19T23:14:59Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893251764",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 172,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251796",
      "pull_request_review_id": 2516399765,
      "id": 1893251796,
      "node_id": "PRRC_kwDOAN28mc5w2LrU",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 175,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What's an \"output spend script\"?",
      "created_at": "2024-12-19T23:15:01Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893251796",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251910",
      "pull_request_review_id": 2516399765,
      "id": 1893251910,
      "node_id": "PRRC_kwDOAN28mc5w2LtG",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 197,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nTo address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\r\n```",
      "created_at": "2024-12-19T23:15:07Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893251910",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251954",
      "pull_request_review_id": 2516399765,
      "id": 1893251954,
      "node_id": "PRRC_kwDOAN28mc5w2Lty",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 227,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nIn the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\r\n```",
      "created_at": "2024-12-19T23:15:10Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893251954",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893251954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893252040",
      "pull_request_review_id": 2516399765,
      "id": 1893252040,
      "node_id": "PRRC_kwDOAN28mc5w2LvI",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 305,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is a bit inaccurate: you can't just modify the existing serialization format because existing nodes still need to receive transactions in that format. Instead you're creating a new format and keeping both (actually 3 now).\r\n\r\nBy the way, will you not also need to introduce e.g. a `qtxid`, similar to `wtxid`?\r\n```suggestion\r\nFollowing BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\r\n```",
      "created_at": "2024-12-19T23:15:18Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893252040",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893252040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893252118",
      "pull_request_review_id": 2516399765,
      "id": 1893252118,
      "node_id": "PRRC_kwDOAN28mc5w2LwW",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 319,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You probably mean compact size, not VarInt. See https://learnmeabitcoin.com/technical/general/compact-size",
      "created_at": "2024-12-19T23:15:22Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893252118",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893252118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893252181",
      "pull_request_review_id": 2516399765,
      "id": 1893252181,
      "node_id": "PRRC_kwDOAN28mc5w2LxV",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. Public keys that are not needed can be excluded by including their hash in the attestation accompanied\n+with an empty signature. This includes classical Schnorr signatures.\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> as specified in the Hash Computation section.\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security, and is supported by\n+the implementation.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 29,792\n+bytes || 64 bytes || Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/484.pdf XMSS]<ref name=\"xmss\">XMSS, which is based on Winternitz, uses a value of 108\n+for its most compact signature size, with only a 4.6x (2.34/0.51) increase in verification time. Signing and key\n+generation are not considered a significant factor because they are not distributed throughout the entire Bitcoin\n+network, which take place only inside of wallets one time.</ref> || 2011 || 15,384 bytes || 13,568 bytes ||\n+Hash-based cryptography (Winternitz OTS)\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 4,595 bytes || 2,592 bytes ||\n+Lattice cryptography\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 1,814 bytes || 1,927 bytes || Lattice cryptography (NTRU)\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 1,280 bytes || 1,793 bytes || Lattice cryptography\n+(NTRU)\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 1,261 bytes || 2,329 bytes || Lattice cryptography\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 335 bytes || 128 bytes || Supersingular Elliptic Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 294 bytes || 130 bytes || Supersingular Elliptic\n+Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2023/436.pdf SQIsignHD] || 2023 || 109 bytes (NIST Level I) || Not provided ||\n+Supersingular Elliptic Curve Isogeny\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in\n+post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major\n+constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is\n+approved for production use. Meanwhile, SPHINCS+ and CRYSTALS-Dilithium signatures are already approved and have\n+achieved broader community consensus. FALCON signatures are also NIST approved.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA: 70-72 bytes\n+* Schnorr: 64 bytes\n+\n+In comparison to inception date, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was\n+chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support\n+[https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to\n+replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR\n+addresses. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 535,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\noutputs. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it\r\n```",
      "created_at": "2024-12-19T23:15:28Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893252181",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893252181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 535,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893252254",
      "pull_request_review_id": 2516399765,
      "id": 1893252254,
      "node_id": "PRRC_kwDOAN28mc5w2Lye",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. Public keys that are not needed can be excluded by including their hash in the attestation accompanied\n+with an empty signature. This includes classical Schnorr signatures.\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> as specified in the Hash Computation section.\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security, and is supported by\n+the implementation.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 29,792\n+bytes || 64 bytes || Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/484.pdf XMSS]<ref name=\"xmss\">XMSS, which is based on Winternitz, uses a value of 108\n+for its most compact signature size, with only a 4.6x (2.34/0.51) increase in verification time. Signing and key\n+generation are not considered a significant factor because they are not distributed throughout the entire Bitcoin\n+network, which take place only inside of wallets one time.</ref> || 2011 || 15,384 bytes || 13,568 bytes ||\n+Hash-based cryptography (Winternitz OTS)\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 4,595 bytes || 2,592 bytes ||\n+Lattice cryptography\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 1,814 bytes || 1,927 bytes || Lattice cryptography (NTRU)\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 1,280 bytes || 1,793 bytes || Lattice cryptography\n+(NTRU)\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 1,261 bytes || 2,329 bytes || Lattice cryptography\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 335 bytes || 128 bytes || Supersingular Elliptic Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 294 bytes || 130 bytes || Supersingular Elliptic\n+Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2023/436.pdf SQIsignHD] || 2023 || 109 bytes (NIST Level I) || Not provided ||\n+Supersingular Elliptic Curve Isogeny\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in\n+post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major\n+constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is\n+approved for production use. Meanwhile, SPHINCS+ and CRYSTALS-Dilithium signatures are already approved and have\n+achieved broader community consensus. FALCON signatures are also NIST approved.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA: 70-72 bytes\n+* Schnorr: 64 bytes\n+\n+In comparison to inception date, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was\n+chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support\n+[https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to\n+replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR\n+addresses. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it\n+might be possible to implement Isogeny Schnorr signatures.\n+\n+Signature verification speed as it compares to Schnorr or ECDSA isn't seen as high a consideration as signature size\n+due to block space being the primary fee constraint. As a P2QRH implementation materializes, a benchmark will be added\n+for performance comparison. Fortunately, SQIsign signatures are substantially faster to verify than it is to generate\n+keys or to sign, which is a major consideration when a transaction need only be signed once, or a handful of times with\n+PSBT, compared to being verified simultaneously on tens of thousands of nodes. Key generation may need to be cached in\n+BIP-32 Hierarchical Deterministic wallets.\n+\n+An additional consideration is security level. Longer signature sizes provide more security. NIST has standardized five\n+security levels for post-quantum cryptography. NIST security level I provides security equivalent to 128-bit keys, and\n+security level V provides 256-bit security.\n+\n+== Test Vectors and Reference Code ==\n+\n+TBD\n+\n+== Related Work ==\n+\n+It is worth noting by way of comparison that\n+[https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's\n+proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves\n+a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32\n+seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for Bitcoin.\n+\n+== References ==\n+\n+* [https://groups.google.com/g/bitcoindev/c/Aee8xKuIC2s/m/cu6xej1mBQAJ Mailing list discussion]\n+* [https://delvingbitcoin.org/t/proposing-a-p2qrh-bip-towards-a-quantum-resistant-soft-fork/956?u=cryptoquick Delving Bitcoin discussion]\n+* [https://bitcoinops.org/en/newsletters/2024/06/14/ Bitcoin OpTech newsletter]\n+* [https://bitcoinops.org/en/podcast/2024/06/18/#draft-bip-for-quantum-safe-address-format Bitcoin OpTech discussion transcript]\n+\n+== Footnotes ==\n+\n+<references />\n+\n+== Changelog ==\n+\n+To help implementors understand updates to this BIP, we keep a list of substantial changes.\n+\n+* 2024-12-18 - Assigned BIP number.\n+* 2024-12-13 - Update to use merkle tree for attestation commitment. Update LR & SR quantum attack scenarios.\n+* 2024-12-06 - Update title and formatting.\n+* 2024-12-03 - MediaWiki formatting fixes.\n+* 2024-12-01 - Add details on attestation structure and parsing.\n+* 2024-11-20 - Clarifications based on feedback from Murch. Remove some sections that are not yet ready.\n+* 2024-10-21 - Replace XMSS with CRYSTALS-Dilithium due to NIST approval and size constraints.\n+* 2024-09-30 - Refactor the ECC vs PoW section. Swap quitness for attestation.\n+* 2024-09-29 - Update section on PoW to include partial-preimage.\n+* 2024-09-28 - Add Winternitz, XMSS signatures, and security assumption types to PQC table. Omit NIST Level I table. Add spend script specification. Add revealed public key scenario table.\n+* 2024-09-27 - Initial draft proposal\n+\n+== Acknowledgements ==\n+\n+This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced\n+the design of the P2TR (Taproot) address type using Schnorr signatures.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 591,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nthe design of the P2TR (Taproot) output type using Schnorr signatures.\r\n```",
      "created_at": "2024-12-19T23:15:36Z",
      "updated_at": "2024-12-19T23:15:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1893252254",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1893252254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 591,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894182705",
      "pull_request_review_id": 2517978462,
      "id": 1894182705,
      "node_id": "PRRC_kwDOAN28mc5w5u8x",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 175,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": 1893251796,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also known as the scriptpubkey. Is that the preferred terminology?",
      "created_at": "2024-12-20T17:06:29Z",
      "updated_at": "2024-12-20T17:06:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894182705",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894182705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894203577",
      "pull_request_review_id": 2518013735,
      "id": 1894203577,
      "node_id": "PRRC_kwDOAN28mc5w50C5",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 63,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": 1893250716,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I will add this section:\r\n\r\n```\r\n<ref name=\"short-range\">\r\nIn the paper\r\n[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\r\nthe authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\r\n256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\r\nmany qubits would be roughly 7 times faster.\r\n</ref>\r\n```",
      "created_at": "2024-12-20T17:28:47Z",
      "updated_at": "2024-12-20T17:28:47Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894203577",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894203577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 61,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894263714",
      "pull_request_review_id": 2518117921,
      "id": 1894263714,
      "node_id": "PRRC_kwDOAN28mc5w6Cui",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 94,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": 1893251116,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is in reference to this comment:\r\nhttps://github.com/bitcoin/bips/pull/1670#discussion_r1779156396",
      "created_at": "2024-12-20T18:32:04Z",
      "updated_at": "2024-12-20T18:32:04Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894263714",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894263714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894264248",
      "pull_request_review_id": 2518118831,
      "id": 1894264248,
      "node_id": "PRRC_kwDOAN28mc5w6C24",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 104,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": 1893251292,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think so, if I understand @EthanHeilman 's feedback, but I could be wrong.",
      "created_at": "2024-12-20T18:32:44Z",
      "updated_at": "2024-12-20T18:32:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894264248",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894264248"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894267860",
      "pull_request_review_id": 2518124861,
      "id": 1894267860,
      "node_id": "PRRC_kwDOAN28mc5w6DvU",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 123,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": 1893251483,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there an example of that? If so, a link would be very helpful.",
      "created_at": "2024-12-20T18:37:17Z",
      "updated_at": "2024-12-20T18:37:18Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894267860",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894267860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 121,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894313814",
      "pull_request_review_id": 2490053669,
      "id": 1894313814,
      "node_id": "PRRC_kwDOAN28mc5w6O9W",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 175,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": 1893251796,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I prefer either \"input script\" and \"output script\" or \"scriptSig\" and \"scriptPubKey\". I don’t think I’ve seen \"output spend script\" before.",
      "created_at": "2024-12-20T19:29:04Z",
      "updated_at": "2024-12-20T21:22:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894313814",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894313814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894340721",
      "pull_request_review_id": 2490053669,
      "id": 1894340721,
      "node_id": "PRRC_kwDOAN28mc5w6Vhx",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 34,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I assume that \"twice\" specifically corresponds to doubling the length rather than \"increasing it\".\r\n\r\n```suggestion\r\nkeys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public key\r\nlength (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\r\n```",
      "created_at": "2024-12-20T19:55:37Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894340721",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894340721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894342388",
      "pull_request_review_id": 2490053669,
      "id": 1894342388,
      "node_id": "PRRC_kwDOAN28mc5w6V70",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 47,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It sounds like the two are related, but rather you are citing two independent resources. Also, Pieter has previously espoused the opinion that he is not a cryptographer.\r\n\r\n```suggestion\r\ncloser to 20%. Independently, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\r\n```",
      "created_at": "2024-12-20T19:57:46Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894342388",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894342388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894345048",
      "pull_request_review_id": 2490053669,
      "id": 1894345048,
      "node_id": "PRRC_kwDOAN28mc5w6WlY",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 47,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894342388,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also I think Pieter has previously mentioned that he wouldn’t consider himself a cryptographer, so maybe just go with \"Bitcoin developer\"",
      "created_at": "2024-12-20T20:01:52Z",
      "updated_at": "2024-12-20T21:22:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894345048",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894345048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894346519",
      "pull_request_review_id": 2490053669,
      "id": 1894346519,
      "node_id": "PRRC_kwDOAN28mc5w6W8X",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 75,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nIt is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\r\n```",
      "created_at": "2024-12-20T20:03:48Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894346519",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894346519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894346648",
      "pull_request_review_id": 2490053669,
      "id": 1894346648,
      "node_id": "PRRC_kwDOAN28mc5w6W-Y",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 76,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nalgorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\r\n```",
      "created_at": "2024-12-20T20:03:59Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894346648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894346648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894347945",
      "pull_request_review_id": 2490053669,
      "id": 1894347945,
      "node_id": "PRRC_kwDOAN28mc5w6XSp",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 102,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It should perhaps be reiterated in the context of this table that their funds are only safe in P2PKH, P2SH, P2WPKH, and P2WSH outputs if they haven’t used the address before.",
      "created_at": "2024-12-20T20:05:51Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894347945",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894347945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 79,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894349074",
      "pull_request_review_id": 2490053669,
      "id": 1894349074,
      "node_id": "PRRC_kwDOAN28mc5w6XkS",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 94,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": 1893251116,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think @vostrnad’s point stands",
      "created_at": "2024-12-20T20:07:29Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894349074",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894349074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894349597",
      "pull_request_review_id": 2490053669,
      "id": 1894349597,
      "node_id": "PRRC_kwDOAN28mc5w6Xsd",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 104,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": 1893251292,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I’m not sure, but I could see that you would need the entire xpub, not just the parent public key.",
      "created_at": "2024-12-20T20:08:10Z",
      "updated_at": "2024-12-20T21:22:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894349597",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894349597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894351521",
      "pull_request_review_id": 2490053669,
      "id": 1894351521,
      "node_id": "PRRC_kwDOAN28mc5w6YKh",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 124,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same point as raised above by @vostrnad",
      "created_at": "2024-12-20T20:10:55Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894351521",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894351521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894366970",
      "pull_request_review_id": 2490053669,
      "id": 1894366970,
      "node_id": "PRRC_kwDOAN28mc5w6b76",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 151,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This whole part about the Canary and Satoshi’s Shield feels a bit like an excursion from the main topic. Anyway, if I were to attack anything, I wouldn’t go after Satoshi’s coins. First because it would raise suspicion immediately, and secondly, because e.g., the Binance Cold Wallet [`34xp4vRoCGJym3xR7yCVPFHoCNxv4Twseo`](https://mempool.space/address/34xp4vRoCGJym3xR7yCVPFHoCNxv4Twseo) currently holds ₿248,597.53479136 and is a [reused address](https://mempool.space/tx/aa0c3412dc6bb27412cb7eee0f70d1848a64af1de81fa5b1957ceeee44da7db4#vin=0).",
      "created_at": "2024-12-20T20:32:07Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894366970",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894366970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 130,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894369554",
      "pull_request_review_id": 2490053669,
      "id": 1894369554,
      "node_id": "PRRC_kwDOAN28mc5w6ckS",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].",
      "path": "bip-0360.mediawiki",
      "position": 177,
      "original_position": 173,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I’m not convinced by this rationale for skipping ahead in the versions. A similar mnemonic could be made up for `bc1z` e.g., \"(z)ecure against quantum\".",
      "created_at": "2024-12-20T20:35:37Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894369554",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894369554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 175,
      "original_start_line": 171,
      "start_side": "RIGHT",
      "line": 177,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894370788",
      "pull_request_review_id": 2490053669,
      "id": 1894370788,
      "node_id": "PRRC_kwDOAN28mc5w6c3k",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 176,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I would prefer using native segwit versions as proposals come up rather than leaving space for things with an uncertain timeline.",
      "created_at": "2024-12-20T20:37:30Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894370788",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894370788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 175,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894373221",
      "pull_request_review_id": 2490053669,
      "id": 1894373221,
      "node_id": "PRRC_kwDOAN28mc5w6ddl",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 186,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would this perhaps better be described as a [Witness Program](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program)?",
      "created_at": "2024-12-20T20:40:53Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894373221",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894373221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894375043",
      "pull_request_review_id": 2490053669,
      "id": 1894375043,
      "node_id": "PRRC_kwDOAN28mc5w6d6D",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 213,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It might generally make sense to separate the description of the output type mechanics from the serialization format into different sections.",
      "created_at": "2024-12-20T20:43:53Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894375043",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894375043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 207,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894379956",
      "pull_request_review_id": 2490053669,
      "id": 1894379956,
      "node_id": "PRRC_kwDOAN28mc5w6fG0",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 235,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have no clue about the trade-offs here, but wouldn’t it make the proposal much more viable if it picked only one and added hooks to introduce another later in case we change our mind as we learn more?",
      "created_at": "2024-12-20T20:51:26Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894379956",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894379956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 224,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894381836",
      "pull_request_review_id": 2490053669,
      "id": 1894381836,
      "node_id": "PRRC_kwDOAN28mc5w6fkM",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 241,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This begs the question how Quantum Resistant and Quantum Secure are distinguished.",
      "created_at": "2024-12-20T20:54:22Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894381836",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894381836"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 237,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894384130",
      "pull_request_review_id": 2490053669,
      "id": 1894384130,
      "node_id": "PRRC_kwDOAN28mc5w6gIC",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:",
      "path": "bip-0360.mediawiki",
      "position": 261,
      "original_position": 254,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It’s not clear to me why we are suddenly talking about multiple public keys here.",
      "created_at": "2024-12-20T20:57:59Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894384130",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894384130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 260,
      "original_start_line": 253,
      "start_side": "RIGHT",
      "line": 261,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894390693",
      "pull_request_review_id": 2490053669,
      "id": 1894390693,
      "node_id": "PRRC_kwDOAN28mc5w6hul",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 311,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I’m fairly lost here. The multiple public keys and tree construction seems to be mentioned for the first time here. If there was rationale for this tree construction, I missed it. It’s not clear to me what this tree construction achieves. How many of the public keys can be provided directly in the form of their hashes? When you mention MAST, I assume you mean \"Merklized Alternative Script Trees\", so one would spend by revealing only a single key from the tree and satisfy its spending conditions? Altogether, this section is hard to follow for me.",
      "created_at": "2024-12-20T21:08:48Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894390693",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894390693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 303,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894391770",
      "pull_request_review_id": 2490053669,
      "id": 1894391770,
      "node_id": "PRRC_kwDOAN28mc5w6h_a",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 321,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should the flag not be considered a boolean array? 0x01 for witness, 0x02 for attestation, 0x03 for witness and attestation? Is it possible for an attestation to appear without a witness section?",
      "created_at": "2024-12-20T21:10:33Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894391770",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894391770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894392870",
      "pull_request_review_id": 2490053669,
      "id": 1894392870,
      "node_id": "PRRC_kwDOAN28mc5w6iQm",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys\n+([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.",
      "path": "bip-0360.mediawiki",
      "position": 385,
      "original_position": 347,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I haven’t thought a lot about this, but given the goal of extensibility, it might be good to add a byte to indicate a signature type for more flexibility?",
      "created_at": "2024-12-20T21:12:24Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894392870",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894392870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 381,
      "original_start_line": 343,
      "start_side": "RIGHT",
      "line": 385,
      "original_line": 347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894394103",
      "pull_request_review_id": 2490053669,
      "id": 1894394103,
      "node_id": "PRRC_kwDOAN28mc5w6ij3",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys\n+([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. Public keys that are not needed can be excluded by including their hash in the attestation accompanied\n+with an empty signature. This includes classical Schnorr signatures.",
      "path": "bip-0360.mediawiki",
      "position": 429,
      "original_position": 391,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For a multisignature scheme, would you need to reveal multiple leafs from the pubkey tree? From what I understood the tree can only hold public keys, not scripts. How then is the threshold communicated? Wouldn’t a spender be able to reveal only their own key and provide a signature for that?",
      "created_at": "2024-12-20T21:14:25Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894394103",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894394103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 427,
      "original_start_line": 389,
      "start_side": "RIGHT",
      "line": 429,
      "original_line": 391,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894396925",
      "pull_request_review_id": 2490053669,
      "id": 1894396925,
      "node_id": "PRRC_kwDOAN28mc5w6jP9",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys\n+([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. Public keys that are not needed can be excluded by including their hash in the attestation accompanied\n+with an empty signature. This includes classical Schnorr signatures.\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> as specified in the Hash Computation section.\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security, and is supported by\n+the implementation.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 29,792\n+bytes || 64 bytes || Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/484.pdf XMSS]<ref name=\"xmss\">XMSS, which is based on Winternitz, uses a value of 108\n+for its most compact signature size, with only a 4.6x (2.34/0.51) increase in verification time. Signing and key\n+generation are not considered a significant factor because they are not distributed throughout the entire Bitcoin\n+network, which take place only inside of wallets one time.</ref> || 2011 || 15,384 bytes || 13,568 bytes ||\n+Hash-based cryptography (Winternitz OTS)\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 4,595 bytes || 2,592 bytes ||\n+Lattice cryptography\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 1,814 bytes || 1,927 bytes || Lattice cryptography (NTRU)\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 1,280 bytes || 1,793 bytes || Lattice cryptography\n+(NTRU)\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 1,261 bytes || 2,329 bytes || Lattice cryptography\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 335 bytes || 128 bytes || Supersingular Elliptic Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 294 bytes || 130 bytes || Supersingular Elliptic\n+Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2023/436.pdf SQIsignHD] || 2023 || 109 bytes (NIST Level I) || Not provided ||\n+Supersingular Elliptic Curve Isogeny\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in\n+post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major\n+constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is\n+approved for production use. Meanwhile, SPHINCS+ and CRYSTALS-Dilithium signatures are already approved and have\n+achieved broader community consensus. FALCON signatures are also NIST approved.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA: 70-72 bytes\n+* Schnorr: 64 bytes\n+\n+In comparison to inception date, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was\n+chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support\n+[https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to\n+replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR\n+outputs. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it\n+might be possible to implement Isogeny Schnorr signatures.\n+\n+Signature verification speed as it compares to Schnorr or ECDSA isn't seen as high a consideration as signature size\n+due to block space being the primary fee constraint. As a P2QRH implementation materializes, a benchmark will be added\n+for performance comparison. Fortunately, SQIsign signatures are substantially faster to verify than it is to generate\n+keys or to sign, which is a major consideration when a transaction need only be signed once, or a handful of times with\n+PSBT, compared to being verified simultaneously on tens of thousands of nodes. Key generation may need to be cached in\n+BIP-32 Hierarchical Deterministic wallets.\n+\n+An additional consideration is security level. Longer signature sizes provide more security. NIST has standardized five\n+security levels for post-quantum cryptography. NIST security level I provides security equivalent to 128-bit keys, and\n+security level V provides 256-bit security.\n+\n+== Test Vectors and Reference Code ==\n+\n+TBD\n+\n+== Related Work ==\n+\n+It is worth noting by way of comparison that\n+[https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's\n+proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves\n+a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32\n+seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for Bitcoin.\n+\n+== References ==\n+\n+* [https://groups.google.com/g/bitcoindev/c/Aee8xKuIC2s/m/cu6xej1mBQAJ Mailing list discussion]\n+* [https://delvingbitcoin.org/t/proposing-a-p2qrh-bip-towards-a-quantum-resistant-soft-fork/956?u=cryptoquick Delving Bitcoin discussion]\n+* [https://bitcoinops.org/en/newsletters/2024/06/14/ Bitcoin OpTech newsletter]\n+* [https://bitcoinops.org/en/podcast/2024/06/18/#draft-bip-for-quantum-safe-address-format Bitcoin OpTech discussion transcript]",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 577,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* [https://bitcoinops.org/en/newsletters/2024/06/14/ Bitcoin Optech newsletter]\r\n* [https://bitcoinops.org/en/podcast/2024/06/18/#draft-bip-for-quantum-safe-address-format Bitcoin Optech discussion transcript]\r\n```",
      "created_at": "2024-12-20T21:18:48Z",
      "updated_at": "2024-12-20T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894396925",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894396925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 576,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 577,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894402557",
      "pull_request_review_id": 2518365076,
      "id": 1894402557,
      "node_id": "PRRC_kwDOAN28mc5w6kn9",
      "diff_hunk": "@@ -0,0 +1,607 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 3,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "990d8a87b5181fd4f0d50a1b65b53fbc02bc6330",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "After having just read the BIP again, I’m not sure why the term \"QuBit\" appears in the title. Wouldn’t the main topic simply be:\r\n\r\n```suggestion\r\n  Title: Pay to Quantum Resistant Hash\r\n```",
      "created_at": "2024-12-20T21:27:56Z",
      "updated_at": "2024-12-20T21:48:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894402557",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894402557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894407146",
      "pull_request_review_id": 2518365076,
      "id": 1894407146,
      "node_id": "PRRC_kwDOAN28mc5w6lvq",
      "diff_hunk": "@@ -0,0 +1,607 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.",
      "path": "bip-0360.mediawiki",
      "position": 173,
      "original_position": 169,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "990d8a87b5181fd4f0d50a1b65b53fbc02bc6330",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is the intention to make a group of several BIPs that are intended to be activated together like SegWit? Otherwise I’m not sure whether I get the purpose of introducing the term \"QuBit\" here.",
      "created_at": "2024-12-20T21:36:10Z",
      "updated_at": "2024-12-20T21:48:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894407146",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894407146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 172,
      "original_start_line": 168,
      "start_side": "RIGHT",
      "line": 173,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894412958",
      "pull_request_review_id": 2518365076,
      "id": 1894412958,
      "node_id": "PRRC_kwDOAN28mc5w6nKe",
      "diff_hunk": "@@ -0,0 +1,607 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. Public keys that are not needed can be excluded by including their hash in the attestation accompanied\n+with an empty signature. This includes classical Schnorr signatures.\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> as specified in the Hash Computation section.\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security, and is supported by\n+the implementation.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 29,792\n+bytes || 64 bytes || Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/484.pdf XMSS]<ref name=\"xmss\">XMSS, which is based on Winternitz, uses a value of 108\n+for its most compact signature size, with only a 4.6x (2.34/0.51) increase in verification time. Signing and key\n+generation are not considered a significant factor because they are not distributed throughout the entire Bitcoin\n+network, which take place only inside of wallets one time.</ref> || 2011 || 15,384 bytes || 13,568 bytes ||\n+Hash-based cryptography (Winternitz OTS)\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 4,595 bytes || 2,592 bytes ||\n+Lattice cryptography\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 1,814 bytes || 1,927 bytes || Lattice cryptography (NTRU)\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 1,280 bytes || 1,793 bytes || Lattice cryptography\n+(NTRU)\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 1,261 bytes || 2,329 bytes || Lattice cryptography\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 335 bytes || 128 bytes || Supersingular Elliptic Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 294 bytes || 130 bytes || Supersingular Elliptic\n+Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2023/436.pdf SQIsignHD] || 2023 || 109 bytes (NIST Level I) || Not provided ||\n+Supersingular Elliptic Curve Isogeny\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in\n+post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major\n+constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is\n+approved for production use. Meanwhile, SPHINCS+ and CRYSTALS-Dilithium signatures are already approved and have\n+achieved broader community consensus. FALCON signatures are also NIST approved.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA: 70-72 bytes\n+* Schnorr: 64 bytes\n+\n+In comparison to inception date, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was\n+chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support\n+[https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to\n+replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR\n+outputs. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it\n+might be possible to implement Isogeny Schnorr signatures.\n+\n+Signature verification speed as it compares to Schnorr or ECDSA isn't seen as high a consideration as signature size\n+due to block space being the primary fee constraint. As a P2QRH implementation materializes, a benchmark will be added\n+for performance comparison. Fortunately, SQIsign signatures are substantially faster to verify than it is to generate\n+keys or to sign, which is a major consideration when a transaction need only be signed once, or a handful of times with\n+PSBT, compared to being verified simultaneously on tens of thousands of nodes. Key generation may need to be cached in\n+BIP-32 Hierarchical Deterministic wallets.\n+\n+An additional consideration is security level. Longer signature sizes provide more security. NIST has standardized five\n+security levels for post-quantum cryptography. NIST security level I provides security equivalent to 128-bit keys, and\n+security level V provides 256-bit security.\n+\n+== Test Vectors and Reference Code ==\n+\n+TBD\n+\n+== Related Work ==\n+\n+It is worth noting by way of comparison that\n+[https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's\n+proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves\n+a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32\n+seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for Bitcoin.\n+\n+== References ==\n+\n+* [https://groups.google.com/g/bitcoindev/c/Aee8xKuIC2s/m/cu6xej1mBQAJ Mailing list discussion]\n+* [https://delvingbitcoin.org/t/proposing-a-p2qrh-bip-towards-a-quantum-resistant-soft-fork/956?u=cryptoquick Delving Bitcoin discussion]\n+* [https://bitcoinops.org/en/newsletters/2024/06/14/ Bitcoin OpTech newsletter]\n+* [https://bitcoinops.org/en/podcast/2024/06/18/#draft-bip-for-quantum-safe-address-format Bitcoin OpTech discussion transcript]\n+\n+== Footnotes ==\n+\n+<references />\n+\n+== Changelog ==\n+\n+To help implementors understand updates to this BIP, we keep a list of substantial changes.\n+\n+* 2024-12-20 - Address feedback from vostrnad.\n+* 2024-12-18 - Assigned BIP number.\n+* 2024-12-13 - Update to use merkle tree for attestation commitment. Update LR & SR quantum attack scenarios.\n+* 2024-12-06 - Update title and formatting.\n+* 2024-12-03 - MediaWiki formatting fixes.\n+* 2024-12-01 - Add details on attestation structure and parsing.\n+* 2024-11-20 - Clarifications based on feedback from Murch. Remove some sections that are not yet ready.\n+* 2024-10-21 - Replace XMSS with CRYSTALS-Dilithium due to NIST approval and size constraints.\n+* 2024-09-30 - Refactor the ECC vs PoW section. Swap quitness for attestation.\n+* 2024-09-29 - Update section on PoW to include partial-preimage.\n+* 2024-09-28 - Add Winternitz, XMSS signatures, and security assumption types to PQC table. Omit NIST Level I table. Add spend script specification. Add revealed public key scenario table.\n+* 2024-09-27 - Initial draft proposal",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 597,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "990d8a87b5181fd4f0d50a1b65b53fbc02bc6330",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don’t think \"Address feedback form vostrnad\", \"Update title and formatting\", \"MediaWiki formatting fixes\", etc. are substantial changes that need to be tracked in the Changelog. Maybe this list could be compressed a bit.",
      "created_at": "2024-12-20T21:46:33Z",
      "updated_at": "2024-12-20T21:48:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894412958",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894412958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 586,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 597,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894413337",
      "pull_request_review_id": 2518383453,
      "id": 1894413337,
      "node_id": "PRRC_kwDOAN28mc5w6nQZ",
      "diff_hunk": "@@ -0,0 +1,598 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 161,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "in_reply_to_id": 1889231215,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've removed this as per @vostrnad's suggestion.",
      "created_at": "2024-12-20T21:47:06Z",
      "updated_at": "2024-12-20T21:47:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894413337",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894413337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 158,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894413684",
      "pull_request_review_id": 2518383991,
      "id": 1894413684,
      "node_id": "PRRC_kwDOAN28mc5w6nV0",
      "diff_hunk": "@@ -0,0 +1,598 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 164,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "in_reply_to_id": 1889233616,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed. Nobody cares about CISA anymore :joy_cat: ",
      "created_at": "2024-12-20T21:47:37Z",
      "updated_at": "2024-12-20T21:47:37Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894413684",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894413684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 163,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894414948",
      "pull_request_review_id": 2518385894,
      "id": 1894414948,
      "node_id": "PRRC_kwDOAN28mc5w6npk",
      "diff_hunk": "@@ -0,0 +1,598 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 138,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "in_reply_to_id": 1889247309,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe, but BIPs are read by many kinds of people with different backgrounds and motivations, and I think it's important to provide background on Satoshi's Shield in order to not be fearmongering. It's important that readers have a proper perspective of the threat this addresses, you know?",
      "created_at": "2024-12-20T21:49:35Z",
      "updated_at": "2024-12-20T21:49:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894414948",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894414948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 134,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894415941",
      "pull_request_review_id": 2518387518,
      "id": 1894415941,
      "node_id": "PRRC_kwDOAN28mc5w6n5F",
      "diff_hunk": "@@ -0,0 +1,598 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 164,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "in_reply_to_id": 1889233616,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh, I don’t mean that people don’t care about CISA anymore. I just don’t think we would need to skip a version to keep space for it, when there isn’t even a concrete proposal yet.",
      "created_at": "2024-12-20T21:51:27Z",
      "updated_at": "2024-12-20T21:51:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894415941",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894415941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 163,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894418010",
      "pull_request_review_id": 2518391354,
      "id": 1894418010,
      "node_id": "PRRC_kwDOAN28mc5w6oZa",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 94,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": 1893251116,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I'll just leave that point out, then.",
      "created_at": "2024-12-20T21:55:26Z",
      "updated_at": "2024-12-20T21:55:26Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894418010",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894418010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894419566",
      "pull_request_review_id": 2518393722,
      "id": 1894419566,
      "node_id": "PRRC_kwDOAN28mc5w6oxu",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 151,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894366970,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I understand that perspective, but as the first BIP related to quantum computing, I wanted to appropriately set the stage even for skeptics. The Canary address is meant to be a flag in the sand that people can hopefully agree that if Satoshi is expected never to return, then this is a logical place to check to agree that Bitcoin is unequivocally compromised.",
      "created_at": "2024-12-20T21:58:06Z",
      "updated_at": "2024-12-20T21:58:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894419566",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894419566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 130,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894420664",
      "pull_request_review_id": 2518395519,
      "id": 1894420664,
      "node_id": "PRRC_kwDOAN28mc5w6pC4",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].",
      "path": "bip-0360.mediawiki",
      "position": 177,
      "original_position": 173,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894369554,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think a better use for bc1z would be P2TRH, which is a follow-up BIP I want to introduce as an alternative should this BIP fail to gather consensus.\r\n\r\nAs for bc1r, I think to some degree aesthetics matter. \"Resistant\" should be the word that comes to mind.",
      "created_at": "2024-12-20T22:00:10Z",
      "updated_at": "2024-12-20T22:00:11Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894420664",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894420664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 175,
      "original_start_line": 171,
      "start_side": "RIGHT",
      "line": 177,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894422131",
      "pull_request_review_id": 2518397879,
      "id": 1894422131,
      "node_id": "PRRC_kwDOAN28mc5w6pZz",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779156396,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Derivation of child keys (whether hardened or not) requires the chain code, so this is only a concern if the attacker has access to the extended public key (in which case they can just directly convert it to an extended private key).",
      "created_at": "2024-12-20T22:02:56Z",
      "updated_at": "2024-12-20T22:02:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894422131",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894422131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894422309",
      "pull_request_review_id": 2518398182,
      "id": 1894422309,
      "node_id": "PRRC_kwDOAN28mc5w6pcl",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 94,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": 1893251116,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I believe so, too: https://github.com/bitcoin/bips/pull/1670#discussion_r1894422131",
      "created_at": "2024-12-20T22:03:18Z",
      "updated_at": "2024-12-20T22:03:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894422309",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894422309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 93,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894424500",
      "pull_request_review_id": 2518401702,
      "id": 1894424500,
      "node_id": "PRRC_kwDOAN28mc5w6p-0",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 213,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894375043,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good suggestion. I've moved this section and the next to a section after the ScriptPubKey section called Output Mechanics.",
      "created_at": "2024-12-20T22:07:26Z",
      "updated_at": "2024-12-20T22:07:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894424500",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894424500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 207,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894439303",
      "pull_request_review_id": 2518422320,
      "id": 1894439303,
      "node_id": "PRRC_kwDOAN28mc5w6tmH",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 235,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894379956,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's in the interest of supporting hybrid cryptography, especially for high value outputs, such as cold wallets used by exchanges. I'll be sure to add that explanation, if it helps.\r\n\r\nAs for viability, I can explain that a separate libbitcoinpqc library could be developed as a drop-in analogue to libsecp256k1.",
      "created_at": "2024-12-20T22:16:58Z",
      "updated_at": "2024-12-20T22:16:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894439303",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894439303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 224,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894475838",
      "pull_request_review_id": 2518466743,
      "id": 1894475838,
      "node_id": "PRRC_kwDOAN28mc5w62g-",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 321,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894391770,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've considered this, and yes, it might make sense if we've completely transitioned away from classical cryptography. I'll be sure to factor that in.",
      "created_at": "2024-12-20T22:42:04Z",
      "updated_at": "2024-12-20T22:42:04Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894475838",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894475838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894482723",
      "pull_request_review_id": 2518482019,
      "id": 1894482723,
      "node_id": "PRRC_kwDOAN28mc5w64Mj",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys\n+([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.",
      "path": "bip-0360.mediawiki",
      "position": 385,
      "original_position": 347,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894392870,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As I go into in the `Signature Algorithm Identification` section, we just use the length of the key and signature to indicate signature type. If there's overlap, an extra byte is added.",
      "created_at": "2024-12-20T22:59:06Z",
      "updated_at": "2024-12-20T22:59:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894482723",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894482723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 381,
      "original_start_line": 343,
      "start_side": "RIGHT",
      "line": 385,
      "original_line": 347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894485473",
      "pull_request_review_id": 2518487638,
      "id": 1894485473,
      "node_id": "PRRC_kwDOAN28mc5w643h",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys\n+([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. Public keys that are not needed can be excluded by including their hash in the attestation accompanied\n+with an empty signature. This includes classical Schnorr signatures.",
      "path": "bip-0360.mediawiki",
      "position": 429,
      "original_position": 391,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894394103,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's a good point. Does that need to be committed to in the output or just expressed in the attestation?",
      "created_at": "2024-12-20T23:03:16Z",
      "updated_at": "2024-12-20T23:03:17Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894485473",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894485473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 427,
      "original_start_line": 389,
      "start_side": "RIGHT",
      "line": 429,
      "original_line": 391,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894487949",
      "pull_request_review_id": 2518490056,
      "id": 1894487949,
      "node_id": "PRRC_kwDOAN28mc5w65eN",
      "diff_hunk": "@@ -0,0 +1,607 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.",
      "path": "bip-0360.mediawiki",
      "position": 173,
      "original_position": 169,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "990d8a87b5181fd4f0d50a1b65b53fbc02bc6330",
      "in_reply_to_id": 1894407146,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That is the idea, yes. QuBit is the name of the soft fork, similar to SegWit and Taproot.",
      "created_at": "2024-12-20T23:07:39Z",
      "updated_at": "2024-12-20T23:07:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894487949",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894487949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 172,
      "original_start_line": 168,
      "start_side": "RIGHT",
      "line": 173,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894493214",
      "pull_request_review_id": 2518498136,
      "id": 1894493214,
      "node_id": "PRRC_kwDOAN28mc5w66we",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 311,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894390693,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've tried to add more supporting information. Let me know if that's better.",
      "created_at": "2024-12-20T23:21:44Z",
      "updated_at": "2024-12-20T23:21:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894493214",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894493214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 303,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894493513",
      "pull_request_review_id": 2518498559,
      "id": 1894493513,
      "node_id": "PRRC_kwDOAN28mc5w661J",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:",
      "path": "bip-0360.mediawiki",
      "position": 261,
      "original_position": 254,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894384130,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've added some more details, let me know if that helps.",
      "created_at": "2024-12-20T23:22:38Z",
      "updated_at": "2024-12-20T23:22:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894493513",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894493513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 260,
      "original_start_line": 253,
      "start_side": "RIGHT",
      "line": 261,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894493643",
      "pull_request_review_id": 2518498741,
      "id": 1894493643,
      "node_id": "PRRC_kwDOAN28mc5w663L",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 241,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894381836,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good question. I've added more details on that.",
      "created_at": "2024-12-20T23:23:02Z",
      "updated_at": "2024-12-20T23:23:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1894493643",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1894493643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 237,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896071155",
      "pull_request_review_id": 2521075883,
      "id": 1896071155,
      "node_id": "PRRC_kwDOAN28mc5xA7_z",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 151,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894366970,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don’t get it. If you could compromise an output script worth 50 ₿ or an output script worth 250 k₿, how does the former serve as a canary, i.e., an early warning?!",
      "created_at": "2024-12-23T19:41:08Z",
      "updated_at": "2024-12-23T19:41:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1896071155",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896071155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 130,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896074709",
      "pull_request_review_id": 2521080614,
      "id": 1896074709,
      "node_id": "PRRC_kwDOAN28mc5xA83V",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys\n+([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. Public keys that are not needed can be excluded by including their hash in the attestation accompanied\n+with an empty signature. This includes classical Schnorr signatures.",
      "path": "bip-0360.mediawiki",
      "position": 429,
      "original_position": 391,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894394103,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If it’s not committed to in advance, you are building either a 1-of-n or a 0-of-n scheme, depending on the minimum value for the threshold.",
      "created_at": "2024-12-23T19:46:41Z",
      "updated_at": "2024-12-23T19:46:41Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1896074709",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896074709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 427,
      "original_start_line": 389,
      "start_side": "RIGHT",
      "line": 429,
      "original_line": 391,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896085309",
      "pull_request_review_id": 2521095040,
      "id": 1896085309,
      "node_id": "PRRC_kwDOAN28mc5xA_c9",
      "diff_hunk": "@@ -0,0 +1,630 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 36,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "208a987f2fbff9be180df7188ccea8ede558ff98",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Collaboration nit: Please don’t reformat a paragraph when you change just a couple words. Keep the line breaks at the same place to make it easier to spot the changes:\r\n\r\nIt’s much easier to review\r\n\r\n```diff\r\n believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\r\n-keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\r\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public key\r\n length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\r\n insufficient protection. The computational complexity of this attack is further explored in\r\n-[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\r\n-of hardware specifications on reaching quantum advantage in the fault-tolerant regime''\r\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\r\n```\r\n\r\nthan\r\n\r\n```diff\r\n-believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\r\n-keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\r\n-length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\r\n-insufficient protection. The computational complexity of this attack is further explored in\r\n-[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\r\n-of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\r\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\r\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\r\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\r\n+offering insufficient protection. The computational complexity of this attack is further explored in\r\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\r\n```\r\n\r\nbecause all the linebreaks were readjusted after the \"private\" at the end of the first line was moved to the second line.",
      "created_at": "2024-12-23T20:02:46Z",
      "updated_at": "2024-12-23T20:55:34Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1896085309",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896085309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 32,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896090998",
      "pull_request_review_id": 2521102774,
      "id": 1896090998,
      "node_id": "PRRC_kwDOAN28mc5xBA12",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 123,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": 1893251483,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I only managed to find two non-empty addresses that use an obvious NUMS point containing around 0.02 BTC in total:\r\n\r\n- [1D8eDztgv79J59V7UBBpNGnRE6hjstqKb5](https://mempool.space/address/1D8eDztgv79J59V7UBBpNGnRE6hjstqKb5), whose uncompressed public key's x-coordinate is the SHA-256 hash of the secp256k1 generator point in uncompressed form (see [BIP341](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#constructing-and-spending-taproot-outputs)).\r\n- [1JRy3CrZciF42nqTJESVuqsBXU3z2p1mDJ](1JRy3CrZciF42nqTJESVuqsBXU3z2p1mDJ), whose uncompressed public key's x-coordinate is 1.\r\n\r\nGiven this lack of funds locked in NUMS addresses and Murch's other criticisms (which I agree with) I'd recommend completely removing the concept of canary coins from the BIP.",
      "created_at": "2024-12-23T20:12:06Z",
      "updated_at": "2024-12-23T20:12:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1896090998",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896090998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 121,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896091991",
      "pull_request_review_id": 2521104151,
      "id": 1896091991,
      "node_id": "PRRC_kwDOAN28mc5xBBFX",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 151,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894366970,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I agree, attempting to create a convention for canary coins seems inherently flawed and out of scope for this BIP.",
      "created_at": "2024-12-23T20:13:53Z",
      "updated_at": "2024-12-23T20:13:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1896091991",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896091991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 130,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896095345",
      "pull_request_review_id": 2521095040,
      "id": 1896095345,
      "node_id": "PRRC_kwDOAN28mc5xBB5x",
      "diff_hunk": "@@ -0,0 +1,630 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+Note: Funds are only safe in P2PKH, P2SH, P2WPKH, and P2WSH outputs if they haven't used the address before.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 103,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "208a987f2fbff9be180df7188ccea8ede558ff98",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Address reuse can refer to just receiving funds to the same address multiple times, but that in itself is not unsafe. Here we specifically mean that it becomes vulnerable the input script has been revealed.\r\n\r\nMaybe add a `¹` to distinguish P2QRH from the mentioned output types:\r\n\r\n```suggestion\r\n{| class=\"wikitable\"\r\n|+ Vulnerable output types\r\n|-\r\n! Type !! Vulnerable !! Prefix !! Example\r\n|-\r\n| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\r\n|-\r\n| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\r\n|-\r\n| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\r\n|-\r\n| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\r\n|-\r\n| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\r\n|-\r\n| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\r\n|-\r\n| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\r\n|-\r\n| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\r\n|}\r\n\r\n¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\r\n```",
      "created_at": "2024-12-23T20:19:36Z",
      "updated_at": "2024-12-23T20:57:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1896095345",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896095345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 81,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896101351",
      "pull_request_review_id": 2521095040,
      "id": 1896101351,
      "node_id": "PRRC_kwDOAN28mc5xBDXn",
      "diff_hunk": "@@ -0,0 +1,630 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+Note: Funds are only safe in P2PKH, P2SH, P2WPKH, and P2WSH outputs if they haven't used the address before.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+Derivation of child keys (whether hardened or not) requires the chain code, so this is only a concern if the attacker\n+has access to the extended public key (in which case they can just directly convert it to an extended private key).",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 109,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "208a987f2fbff9be180df7188ccea8ede558ff98",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Your new text seems to be responding to the thought of the removed sentence. How about this combination of the original and new version:\r\n\r\n```suggestion\r\nIf an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers\r\nthe entire extended private key, whether it uses hardened or unhardened derivation.\r\n```",
      "created_at": "2024-12-23T20:30:28Z",
      "updated_at": "2024-12-23T20:54:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1896101351",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896101351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 108,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896102267",
      "pull_request_review_id": 2521095040,
      "id": 1896102267,
      "node_id": "PRRC_kwDOAN28mc5xBDl7",
      "diff_hunk": "@@ -0,0 +1,630 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+Note: Funds are only safe in P2PKH, P2SH, P2WPKH, and P2WSH outputs if they haven't used the address before.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+Derivation of child keys (whether hardened or not) requires the chain code, so this is only a concern if the attacker\n+has access to the extended public key (in which case they can just directly convert it to an extended private key).\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Wallet descriptor extended public keys, commonly known as \"xpubs\"",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 119,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "208a987f2fbff9be180df7188ccea8ede558ff98",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I am not sure what you mean with \"Wallet descriptor extended public keys\". Did you mean wallet descriptors _and_ extended public keys?\r\n\r\n```suggestion\r\n* Extended public keys, commonly known as \"xpubs\"\r\n* Wallet descriptors\r\n```",
      "created_at": "2024-12-23T20:32:02Z",
      "updated_at": "2024-12-23T20:54:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1896102267",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896102267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896112590",
      "pull_request_review_id": 2521095040,
      "id": 1896112590,
      "node_id": "PRRC_kwDOAN28mc5xBGHO",
      "diff_hunk": "@@ -0,0 +1,630 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+Note: Funds are only safe in P2PKH, P2SH, P2WPKH, and P2WSH outputs if they haven't used the address before.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+Derivation of child keys (whether hardened or not) requires the chain code, so this is only a concern if the attacker\n+has access to the extended public key (in which case they can just directly convert it to an extended private key).\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Wallet descriptor extended public keys, commonly known as \"xpubs\"\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+The inclusion of these four PQC cryptosystems is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output, one that makes use of classical cryptography and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section.\n+\n+=== Output Mechanics ===\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 280,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "208a987f2fbff9be180df7188ccea8ede558ff98",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is confusing. We don’t \"spend from the witness stack\". From what I understand meanwhile, the public keys and public key hashes are provided in the attestation, and any signatures are provided in the witness. Under the assumption that the threshold of necessary keys is pre-committed and I understand that right, how about:\r\n\r\n```suggestion\r\nTo prevent storage of arbitrary data using P2QRH (QuBit) outputs,\r\nthe witness stack for inputs spending segwit v3 outputs is limited to the fixed-size signatures necessary for spending the\r\n```",
      "created_at": "2024-12-23T20:48:48Z",
      "updated_at": "2024-12-23T20:54:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1896112590",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896112590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 279,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896114314",
      "pull_request_review_id": 2521095040,
      "id": 1896114314,
      "node_id": "PRRC_kwDOAN28mc5xBGiK",
      "diff_hunk": "@@ -0,0 +1,630 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+Note: Funds are only safe in P2PKH, P2SH, P2WPKH, and P2WSH outputs if they haven't used the address before.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+Derivation of child keys (whether hardened or not) requires the chain code, so this is only a concern if the attacker\n+has access to the extended public key (in which case they can just directly convert it to an extended private key).\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Wallet descriptor extended public keys, commonly known as \"xpubs\"\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+The inclusion of these four PQC cryptosystems is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output, one that makes use of classical cryptography and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section.\n+\n+=== Output Mechanics ===\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)",
      "path": "bip-0360.mediawiki",
      "position": 325,
      "original_position": 311,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "208a987f2fbff9be180df7188ccea8ede558ff98",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Have you considered making this tagged hashes to mitigate some of the general issues with Satoshi-style merkle trees?",
      "created_at": "2024-12-23T20:52:07Z",
      "updated_at": "2024-12-23T20:54:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1896114314",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896114314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 322,
      "original_start_line": 308,
      "start_side": "RIGHT",
      "line": 325,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896115317",
      "pull_request_review_id": 2521095040,
      "id": 1896115317,
      "node_id": "PRRC_kwDOAN28mc5xBGx1",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 311,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894390693,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I’m slowly getting the gist of it, but it might help to cover the abstract idea briefly at a higher level before getting into all the details.",
      "created_at": "2024-12-23T20:53:54Z",
      "updated_at": "2024-12-23T20:54:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1896115317",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896115317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 303,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896148377",
      "pull_request_review_id": 2521182839,
      "id": 1896148377,
      "node_id": "PRRC_kwDOAN28mc5xBO2Z",
      "diff_hunk": "@@ -0,0 +1,630 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 36,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "208a987f2fbff9be180df7188ccea8ede558ff98",
      "in_reply_to_id": 1896085309,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point",
      "created_at": "2024-12-23T21:51:56Z",
      "updated_at": "2024-12-23T21:51:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1896148377",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896148377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 32,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896150062",
      "pull_request_review_id": 2521186907,
      "id": 1896150062,
      "node_id": "PRRC_kwDOAN28mc5xBPQu",
      "diff_hunk": "@@ -0,0 +1,630 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+Note: Funds are only safe in P2PKH, P2SH, P2WPKH, and P2WSH outputs if they haven't used the address before.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+Derivation of child keys (whether hardened or not) requires the chain code, so this is only a concern if the attacker\n+has access to the extended public key (in which case they can just directly convert it to an extended private key).\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Wallet descriptor extended public keys, commonly known as \"xpubs\"\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+The inclusion of these four PQC cryptosystems is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output, one that makes use of classical cryptography and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section.\n+\n+=== Output Mechanics ===\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)",
      "path": "bip-0360.mediawiki",
      "position": 325,
      "original_position": 311,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "208a987f2fbff9be180df7188ccea8ede558ff98",
      "in_reply_to_id": 1896114314,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have not. I'm not familiar with the problem with Satoshi-style merkle trees. Wouldn't tagged hashes require additional data?",
      "created_at": "2024-12-23T21:54:40Z",
      "updated_at": "2024-12-23T21:54:41Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1896150062",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896150062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 322,
      "original_start_line": 308,
      "start_side": "RIGHT",
      "line": 325,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896163249",
      "pull_request_review_id": 2521205436,
      "id": 1896163249,
      "node_id": "PRRC_kwDOAN28mc5xBSex",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys\n+([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. Public keys that are not needed can be excluded by including their hash in the attestation accompanied\n+with an empty signature. This includes classical Schnorr signatures.",
      "path": "bip-0360.mediawiki",
      "position": 429,
      "original_position": 391,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894394103,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That makes sense. So, we essentially need to commit to a script hash. I'm thinking we just do a bunch of consecutive data pushes of PKHs and they correspond to leaves on a binary tree. This is then included in the witness. Keys in the attestation are hashed and compared to the PKHs in the v3 witness. Like this:\r\n\r\n```\r\nOP_3\r\nOP_PUSHBYTES_32\r\nd81fd577272bbe73308c93009eec5dc9fc319fc1ee2e7066e17220a5d47a1a5\r\nOP_PUSHBYTES_32\r\n8314578be2faea34b9f1f8ca078f8621acd4bc22897b03daa422b9bf56646b3\r\nOP_PUSHBYTES_32\r\nec3afff0b2b66e8152e9018fe3be3fc92b30bf886b3487a525997d00fd9dae1\r\nOP_PUSHBYTES_32\r\n2d012dce5d5275854adc3106572a5d1e12d4211b228429f5a7b2f7ba92eb047\r\nOP_PUSHBYTES_32\r\nb49b496684b02855bc32f5daefa2e2e406db4418f3b86bca5195600951c7db9\r\nOP_5\r\nOP_CHECKMULTISIG\r\n```\r\n\r\nNotice, all 5 PKHs need to be committed to in advance in the script hash. Maybe we need to introduce a concept like QPKH? QuBit public key hash? And QSH for script hashes? Or would APKH / ASH be better, for attestation?\r\n\r\nWhat do you think? This I think will obviate the necessity for a merkle tree, as recommended by @EthanHeilman. If 3 public keys aren't included and don't hash to any of the public keys in the script hash, then the transaction fails.",
      "created_at": "2024-12-23T22:18:46Z",
      "updated_at": "2024-12-23T22:21:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1896163249",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896163249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 427,
      "original_start_line": 389,
      "start_side": "RIGHT",
      "line": 429,
      "original_line": 391,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896179653",
      "pull_request_review_id": 2521226340,
      "id": 1896179653,
      "node_id": "PRRC_kwDOAN28mc5xBWfF",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 151,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894366970,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Okay, I'll remove it.",
      "created_at": "2024-12-23T22:46:44Z",
      "updated_at": "2024-12-23T22:46:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1896179653",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1896179653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 130,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1898024530",
      "pull_request_review_id": 2523357584,
      "id": 1898024530,
      "node_id": "PRRC_kwDOAN28mc5xIY5S",
      "diff_hunk": "@@ -0,0 +1,630 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+Note: Funds are only safe in P2PKH, P2SH, P2WPKH, and P2WSH outputs if they haven't used the address before.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+Derivation of child keys (whether hardened or not) requires the chain code, so this is only a concern if the attacker\n+has access to the extended public key (in which case they can just directly convert it to an extended private key).\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Wallet descriptor extended public keys, commonly known as \"xpubs\"\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+The inclusion of these four PQC cryptosystems is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output, one that makes use of classical cryptography and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section.\n+\n+=== Output Mechanics ===\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)",
      "path": "bip-0360.mediawiki",
      "position": 325,
      "original_position": 311,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "208a987f2fbff9be180df7188ccea8ede558ff98",
      "in_reply_to_id": 1896114314,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "No, they’re the same cost, you just prefix the hashing process with the tag. The advantage is that it prevents any collisions or hashing the same things at different levels of the tree in different contexts. They could for example be used to disambiguate the different types of cryptographic schemes on the public key commitment level for free, or for distinguishing public key hashes from inner node hashes. I’m not sure they’re necessary here, but they clean-up a whole category of issues, so they might be useful.",
      "created_at": "2024-12-26T17:10:01Z",
      "updated_at": "2024-12-26T17:11:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1898024530",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1898024530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 322,
      "original_start_line": 308,
      "start_side": "RIGHT",
      "line": 325,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1898118596",
      "pull_request_review_id": 2523501713,
      "id": 1898118596,
      "node_id": "PRRC_kwDOAN28mc5xIv3E",
      "diff_hunk": "@@ -0,0 +1,630 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+Note: Funds are only safe in P2PKH, P2SH, P2WPKH, and P2WSH outputs if they haven't used the address before.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+Derivation of child keys (whether hardened or not) requires the chain code, so this is only a concern if the attacker\n+has access to the extended public key (in which case they can just directly convert it to an extended private key).\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Wallet descriptor extended public keys, commonly known as \"xpubs\"\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+The inclusion of these four PQC cryptosystems is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output, one that makes use of classical cryptography and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section.\n+\n+=== Output Mechanics ===\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)",
      "path": "bip-0360.mediawiki",
      "position": 325,
      "original_position": 311,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "208a987f2fbff9be180df7188ccea8ede558ff98",
      "in_reply_to_id": 1896114314,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That makes sense. That might be a good idea, if we are using Merkle trees.",
      "created_at": "2024-12-26T21:41:52Z",
      "updated_at": "2024-12-26T21:41:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1898118596",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1898118596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 322,
      "original_start_line": 308,
      "start_side": "RIGHT",
      "line": 325,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901319447",
      "pull_request_review_id": 2528311023,
      "id": 1901319447,
      "node_id": "PRRC_kwDOAN28mc5xU9UX",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 44,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit, let's avoid a line break in the url here, and s/estimates/estimated/\r\n\r\n```diff\r\n-[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\r\n-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\r\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimated that in 2020 approximately 25% of the\r\n```\r\n",
      "created_at": "2025-01-02T22:34:22Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901319447",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901319447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901323177",
      "pull_request_review_id": 2528311023,
      "id": 1901323177,
      "node_id": "PRRC_kwDOAN28mc5xU-Op",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 47,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\neven more addresses might be vulnerable, representing 5M to 10M bitcoin.\r\n```",
      "created_at": "2025-01-02T22:41:09Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901323177",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901323177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901328595",
      "pull_request_review_id": 2528311023,
      "id": 1901328595,
      "node_id": "PRRC_kwDOAN28mc5xU_jT",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 65,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nthe authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\r\n```",
      "created_at": "2025-01-02T22:48:39Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901328595",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901328595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901344370",
      "pull_request_review_id": 2528311023,
      "id": 1901344370,
      "node_id": "PRRC_kwDOAN28mc5xVDZy",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65",
      "path": "bip-0360.mediawiki",
      "position": 104,
      "original_position": 96,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ISTM all of the `No¹` entries ought to be `Yes¹` or `If revealed¹`...",
      "created_at": "2025-01-02T22:54:00Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901344370",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901344370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901350733",
      "pull_request_review_id": 2528311023,
      "id": 1901350733,
      "node_id": "PRRC_kwDOAN28mc5xVE9N",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 108,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nIf the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\r\n```",
      "created_at": "2025-01-02T22:56:08Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901350733",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901350733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901355191",
      "pull_request_review_id": 2528311023,
      "id": 1901355191,
      "node_id": "PRRC_kwDOAN28mc5xVGC3",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 113,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nA Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\r\n```",
      "created_at": "2025-01-02T22:57:48Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901355191",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901355191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901356585",
      "pull_request_review_id": 2528311023,
      "id": 1901356585,
      "node_id": "PRRC_kwDOAN28mc5xVGYp",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 122,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nA Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\r\n```",
      "created_at": "2025-01-02T22:58:28Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901356585",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901356585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901356789",
      "pull_request_review_id": 2528311023,
      "id": 1901356789,
      "node_id": "PRRC_kwDOAN28mc5xVGb1",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 123,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nbefore it is mined into a block. This affects:\r\n```",
      "created_at": "2025-01-02T22:58:56Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901356789",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901356789"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901357318",
      "pull_request_review_id": 2528311023,
      "id": 1901357318,
      "node_id": "PRRC_kwDOAN28mc5xVGkG",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 132,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Duplicate \"at the time of writing\" in this sentence.",
      "created_at": "2025-01-02T23:00:12Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901357318",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901357318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901385960",
      "pull_request_review_id": 2528311023,
      "id": 1901385960,
      "node_id": "PRRC_kwDOAN28mc5xVNjo",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 151,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nAlthough the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\r\n```",
      "created_at": "2025-01-03T00:12:50Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901385960",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901385960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901401627",
      "pull_request_review_id": 2528311023,
      "id": 1901401627,
      "node_id": "PRRC_kwDOAN28mc5xVRYb",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+The inclusion of these four PQC cryptosystems is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output, one that makes use of classical cryptography and one that makes use",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 245,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nthere should be two public keys in a P2QRH output: one key that makes use of classical cryptography, and one that makes use\r\n```",
      "created_at": "2025-01-03T01:04:20Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901401627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901401627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901402165",
      "pull_request_review_id": 2528311023,
      "id": 1901402165,
      "node_id": "PRRC_kwDOAN28mc5xVRg1",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+The inclusion of these four PQC cryptosystems is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output, one that makes use of classical cryptography and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 268,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nHash Computation section below.\r\n```",
      "created_at": "2025-01-03T01:06:34Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901402165",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901402165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 268,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901402421",
      "pull_request_review_id": 2528311023,
      "id": 1901402421,
      "node_id": "PRRC_kwDOAN28mc5xVRk1",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+The inclusion of these four PQC cryptosystems is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output, one that makes use of classical cryptography and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending segwit v3 outputs is limited to the fixed-size signatures necessary for spending the",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 273,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The other references in this document are to \"SegWit\"\r\n```suggestion\r\nthe witness stack for inputs spending SegWit v3 outputs is limited to the fixed-size signatures necessary for spending the\r\n```",
      "created_at": "2025-01-03T01:07:39Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901402421",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901402421"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 273,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901404656",
      "pull_request_review_id": 2528311023,
      "id": 1901404656,
      "node_id": "PRRC_kwDOAN28mc5xVSHw",
      "diff_hunk": "@@ -0,0 +1,608 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No || 5 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the 65-byte P2PK output used by the coinbase\n+output in Block 1. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's\n+ continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1\n+is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were\n+moved with keys belonging to the original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key. It goes into the scriptPubKey, which does not receive the witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) outputs, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 311,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "4b8b6470e6e46a22a50595b060875f12bc17cb99",
      "in_reply_to_id": 1894390693,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "BIP114 is also named \"MAST\" (Merkelized Abstract Syntax Trees), so perhaps write out the MAST you are referring to here.",
      "created_at": "2025-01-03T01:16:01Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901404656",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901404656"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 303,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901405331",
      "pull_request_review_id": 2528311023,
      "id": 1901405331,
      "node_id": "PRRC_kwDOAN28mc5xVSST",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+The inclusion of these four PQC cryptosystems is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output, one that makes use of classical cryptography and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending segwit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If there a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 390,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nIf a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\r\n```",
      "created_at": "2025-01-03T01:18:29Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901405331",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901405331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901407463",
      "pull_request_review_id": 2528311023,
      "id": 1901407463,
      "node_id": "PRRC_kwDOAN28mc5xVSzn",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+The inclusion of these four PQC cryptosystems is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output, one that makes use of classical cryptography and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending segwit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If there a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. Public keys that are not needed can be excluded by including their hash in the attestation accompanied\n+with an empty signature. This includes classical Schnorr signatures.\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> as specified in the Hash Computation section.\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security, and is supported by\n+the implementation.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 29,792\n+bytes || 64 bytes || Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/484.pdf XMSS]<ref name=\"xmss\">XMSS, which is based on Winternitz, uses a value of 108\n+for its most compact signature size, with only a 4.6x (2.34/0.51) increase in verification time. Signing and key\n+generation are not considered a significant factor because they are not distributed throughout the entire Bitcoin\n+network, which take place only inside of wallets one time.</ref> || 2011 || 15,384 bytes || 13,568 bytes ||\n+Hash-based cryptography (Winternitz OTS)\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 4,595 bytes || 2,592 bytes ||\n+Lattice cryptography\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 1,814 bytes || 1,927 bytes || Lattice cryptography (NTRU)\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 1,280 bytes || 1,793 bytes || Lattice cryptography\n+(NTRU)\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 1,261 bytes || 2,329 bytes || Lattice cryptography\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 335 bytes || 128 bytes || Supersingular Elliptic Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 294 bytes || 130 bytes || Supersingular Elliptic\n+Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2023/436.pdf SQIsignHD] || 2023 || 109 bytes (NIST Level I) || Not provided ||\n+Supersingular Elliptic Curve Isogeny\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in\n+post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major\n+constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is\n+approved for production use. Meanwhile, SPHINCS+ and CRYSTALS-Dilithium signatures are already approved and have\n+achieved broader community consensus. FALCON signatures are also NIST approved.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA: 70-72 bytes\n+* Schnorr: 64 bytes\n+\n+In comparison to inception date, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was\n+chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support\n+[https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to\n+replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR\n+outputs. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it\n+might be possible to implement Isogeny Schnorr signatures.\n+\n+Signature verification speed as it compares to Schnorr or ECDSA isn't seen as high a consideration as signature size\n+due to block space being the primary fee constraint. As a P2QRH implementation materializes, a benchmark will be added\n+for performance comparison. Fortunately, SQIsign signatures are substantially faster to verify than it is to generate",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 570,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nfor performance comparison. Fortunately, SQIsign signatures are substantially faster to verify than they are to generate\r\n```",
      "created_at": "2025-01-03T01:26:04Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901407463",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901407463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 570,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901408606",
      "pull_request_review_id": 2528311023,
      "id": 1901408606,
      "node_id": "PRRC_kwDOAN28mc5xVTFe",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+The inclusion of these four PQC cryptosystems is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output, one that makes use of classical cryptography and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending segwit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If there a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. Public keys that are not needed can be excluded by including their hash in the attestation accompanied\n+with an empty signature. This includes classical Schnorr signatures.\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> as specified in the Hash Computation section.\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security, and is supported by\n+the implementation.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 516,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should the caveat and consequences be mentioned here that Winternitz signatures are one-time?",
      "created_at": "2025-01-03T01:30:15Z",
      "updated_at": "2025-01-03T16:27:41Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901408606",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901408606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 516,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901409293",
      "pull_request_review_id": 2528311023,
      "id": 1901409293,
      "node_id": "PRRC_kwDOAN28mc5xVTQN",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+The inclusion of these four PQC cryptosystems is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output, one that makes use of classical cryptography and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending segwit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If there a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. Public keys that are not needed can be excluded by including their hash in the attestation accompanied\n+with an empty signature. This includes classical Schnorr signatures.\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> as specified in the Hash Computation section.\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security, and is supported by\n+the implementation.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 29,792\n+bytes || 64 bytes || Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/484.pdf XMSS]<ref name=\"xmss\">XMSS, which is based on Winternitz, uses a value of 108\n+for its most compact signature size, with only a 4.6x (2.34/0.51) increase in verification time. Signing and key\n+generation are not considered a significant factor because they are not distributed throughout the entire Bitcoin\n+network, which take place only inside of wallets one time.</ref> || 2011 || 15,384 bytes || 13,568 bytes ||\n+Hash-based cryptography (Winternitz OTS)\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 4,595 bytes || 2,592 bytes ||\n+Lattice cryptography\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 1,814 bytes || 1,927 bytes || Lattice cryptography (NTRU)\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 1,280 bytes || 1,793 bytes || Lattice cryptography\n+(NTRU)\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 1,261 bytes || 2,329 bytes || Lattice cryptography\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 335 bytes || 128 bytes || Supersingular Elliptic Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 294 bytes || 130 bytes || Supersingular Elliptic\n+Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2023/436.pdf SQIsignHD] || 2023 || 109 bytes (NIST Level I) || Not provided ||\n+Supersingular Elliptic Curve Isogeny\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in\n+post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major\n+constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is\n+approved for production use. Meanwhile, SPHINCS+ and CRYSTALS-Dilithium signatures are already approved and have\n+achieved broader community consensus. FALCON signatures are also NIST approved.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA: 70-72 bytes\n+* Schnorr: 64 bytes\n+\n+In comparison to inception date, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was\n+chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support\n+[https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to\n+replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR\n+outputs. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it\n+might be possible to implement Isogeny Schnorr signatures.\n+\n+Signature verification speed as it compares to Schnorr or ECDSA isn't seen as high a consideration as signature size\n+due to block space being the primary fee constraint. As a P2QRH implementation materializes, a benchmark will be added\n+for performance comparison. Fortunately, SQIsign signatures are substantially faster to verify than it is to generate\n+keys or to sign, which is a major consideration when a transaction need only be signed once, or a handful of times with\n+PSBT, compared to being verified simultaneously on tens of thousands of nodes. Key generation may need to be cached in\n+BIP-32 Hierarchical Deterministic wallets.\n+\n+An additional consideration is security level. Longer signature sizes provide more security. NIST has standardized five\n+security levels for post-quantum cryptography. NIST security level I provides security equivalent to 128-bit keys, and\n+security level V provides 256-bit security.\n+\n+== Test Vectors and Reference Code ==\n+\n+TBD",
      "path": "bip-0360.mediawiki",
      "position": 593,
      "original_position": 581,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Any timeline for adding these?",
      "created_at": "2025-01-03T01:33:00Z",
      "updated_at": "2025-01-03T01:45:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901409293",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901409293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 593,
      "original_line": 581,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901420331",
      "pull_request_review_id": 2528482480,
      "id": 1901420331,
      "node_id": "PRRC_kwDOAN28mc5xVV8r",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+The inclusion of these four PQC cryptosystems is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output, one that makes use of classical cryptography and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending segwit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If there a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. Public keys that are not needed can be excluded by including their hash in the attestation accompanied\n+with an empty signature. This includes classical Schnorr signatures.\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> as specified in the Hash Computation section.\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security, and is supported by\n+the implementation.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 29,792\n+bytes || 64 bytes || Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/484.pdf XMSS]<ref name=\"xmss\">XMSS, which is based on Winternitz, uses a value of 108\n+for its most compact signature size, with only a 4.6x (2.34/0.51) increase in verification time. Signing and key\n+generation are not considered a significant factor because they are not distributed throughout the entire Bitcoin\n+network, which take place only inside of wallets one time.</ref> || 2011 || 15,384 bytes || 13,568 bytes ||\n+Hash-based cryptography (Winternitz OTS)\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 4,595 bytes || 2,592 bytes ||\n+Lattice cryptography\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 1,814 bytes || 1,927 bytes || Lattice cryptography (NTRU)\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 1,280 bytes || 1,793 bytes || Lattice cryptography\n+(NTRU)\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 1,261 bytes || 2,329 bytes || Lattice cryptography\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 335 bytes || 128 bytes || Supersingular Elliptic Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 294 bytes || 130 bytes || Supersingular Elliptic\n+Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2023/436.pdf SQIsignHD] || 2023 || 109 bytes (NIST Level I) || Not provided ||\n+Supersingular Elliptic Curve Isogeny\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in\n+post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major\n+constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is\n+approved for production use. Meanwhile, SPHINCS+ and CRYSTALS-Dilithium signatures are already approved and have\n+achieved broader community consensus. FALCON signatures are also NIST approved.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA: 70-72 bytes\n+* Schnorr: 64 bytes\n+\n+In comparison to inception date, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was\n+chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support\n+[https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to\n+replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR\n+outputs. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it\n+might be possible to implement Isogeny Schnorr signatures.\n+\n+Signature verification speed as it compares to Schnorr or ECDSA isn't seen as high a consideration as signature size\n+due to block space being the primary fee constraint. As a P2QRH implementation materializes, a benchmark will be added\n+for performance comparison. Fortunately, SQIsign signatures are substantially faster to verify than it is to generate\n+keys or to sign, which is a major consideration when a transaction need only be signed once, or a handful of times with\n+PSBT, compared to being verified simultaneously on tens of thousands of nodes. Key generation may need to be cached in\n+BIP-32 Hierarchical Deterministic wallets.\n+\n+An additional consideration is security level. Longer signature sizes provide more security. NIST has standardized five\n+security levels for post-quantum cryptography. NIST security level I provides security equivalent to 128-bit keys, and\n+security level V provides 256-bit security.\n+\n+== Test Vectors and Reference Code ==\n+\n+TBD",
      "path": "bip-0360.mediawiki",
      "position": 593,
      "original_position": 581,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": 1901409293,
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "First, it is necessary to solve a rather simple and complex problem:  key structure tree of priv and pub keys. Since in post-quantum algorithms there are not even approximate solutions, possible it will be universal since almost all of them are built on lattices\r\n\r\nWell, what’s important is that we only have a problem with generating public keys from a master public key  or xpub, there are no problems with private keys, in almost any algorithm you can feed a seed to get a pair of keys and, as in the example above, reconstruct the public key from part of the private one.",
      "created_at": "2025-01-03T02:12:37Z",
      "updated_at": "2025-01-03T02:12:37Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1901420331",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1901420331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 593,
      "original_line": 581,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1915572101",
      "pull_request_review_id": 2550974401,
      "id": 1915572101,
      "node_id": "PRRC_kwDOAN28mc5yLU-F",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-range quantum attacks when their input script is revealed. An address is no longer safe against long-range quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If an extended public key’s (xPub’s) parent private key of is recovered by CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+The inclusion of these four PQC cryptosystems is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output, one that makes use of classical cryptography and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending segwit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If there a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. Public keys that are not needed can be excluded by including their hash in the attestation accompanied\n+with an empty signature. This includes classical Schnorr signatures.\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> as specified in the Hash Computation section.\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security, and is supported by\n+the implementation.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 29,792\n+bytes || 64 bytes || Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/484.pdf XMSS]<ref name=\"xmss\">XMSS, which is based on Winternitz, uses a value of 108\n+for its most compact signature size, with only a 4.6x (2.34/0.51) increase in verification time. Signing and key\n+generation are not considered a significant factor because they are not distributed throughout the entire Bitcoin\n+network, which take place only inside of wallets one time.</ref> || 2011 || 15,384 bytes || 13,568 bytes ||\n+Hash-based cryptography (Winternitz OTS)\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 4,595 bytes || 2,592 bytes ||\n+Lattice cryptography\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 1,814 bytes || 1,927 bytes || Lattice cryptography (NTRU)\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 1,280 bytes || 1,793 bytes || Lattice cryptography\n+(NTRU)\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 1,261 bytes || 2,329 bytes || Lattice cryptography\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 335 bytes || 128 bytes || Supersingular Elliptic Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 294 bytes || 130 bytes || Supersingular Elliptic\n+Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2023/436.pdf SQIsignHD] || 2023 || 109 bytes (NIST Level I) || Not provided ||\n+Supersingular Elliptic Curve Isogeny\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in\n+post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major\n+constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is\n+approved for production use. Meanwhile, SPHINCS+ and CRYSTALS-Dilithium signatures are already approved and have\n+achieved broader community consensus. FALCON signatures are also NIST approved.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA: 70-72 bytes\n+* Schnorr: 64 bytes\n+\n+In comparison to inception date, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was\n+chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support\n+[https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to\n+replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR\n+outputs. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it\n+might be possible to implement Isogeny Schnorr signatures.\n+\n+Signature verification speed as it compares to Schnorr or ECDSA isn't seen as high a consideration as signature size\n+due to block space being the primary fee constraint. As a P2QRH implementation materializes, a benchmark will be added\n+for performance comparison. Fortunately, SQIsign signatures are substantially faster to verify than it is to generate\n+keys or to sign, which is a major consideration when a transaction need only be signed once, or a handful of times with\n+PSBT, compared to being verified simultaneously on tens of thousands of nodes. Key generation may need to be cached in\n+BIP-32 Hierarchical Deterministic wallets.\n+\n+An additional consideration is security level. Longer signature sizes provide more security. NIST has standardized five\n+security levels for post-quantum cryptography. NIST security level I provides security equivalent to 128-bit keys, and\n+security level V provides 256-bit security.\n+\n+== Test Vectors and Reference Code ==\n+\n+TBD",
      "path": "bip-0360.mediawiki",
      "position": 593,
      "original_position": 581,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": 1901409293,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@jonatack I haven't had much time to focus on that part. Ideally I could add them as a separate pull request.",
      "created_at": "2025-01-14T20:41:25Z",
      "updated_at": "2025-01-14T20:41:25Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1915572101",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1915572101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 593,
      "original_line": 581,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1915582042",
      "pull_request_review_id": 2550989455,
      "id": 1915582042,
      "node_id": "PRRC_kwDOAN28mc5yLXZa",
      "diff_hunk": "@@ -0,0 +1,623 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-range\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-range\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable output types\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65",
      "path": "bip-0360.mediawiki",
      "position": 104,
      "original_position": 96,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "0ae69db70a4a28f202d441b7131cd5b2169e7afe",
      "in_reply_to_id": 1901344370,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe it would be clearer if I set the table caption to be this?\r\n\r\n> Output types vulnerable to long-range attacks on unspent addresses",
      "created_at": "2025-01-14T20:49:34Z",
      "updated_at": "2025-01-14T20:49:34Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1915582042",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1915582042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918908360",
      "pull_request_review_id": 2556753690,
      "id": 1918908360,
      "node_id": "PRRC_kwDOAN28mc5yYDfI",
      "diff_hunk": "@@ -129,13 +129,11 @@ before a transaction is mined. Long-range attacks can be executed over a longer\n exposed on the blockchain indefinitely.\n \n Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n-are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n-block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n-can be\n-considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n-considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n-to provide time to\n-transition Bitcoin to implement post-quantum security.\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.",
      "path": "bip-0360.mediawiki",
      "position": 149,
      "original_position": 41,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "c1b90476556d05c76a93e6b2dce41c3cdb973559",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Once someone just starts stealing ~5% of the supply, it seems that it would be too late?",
      "created_at": "2025-01-16T17:06:01Z",
      "updated_at": "2025-01-16T17:21:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1918908360",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918908360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 146,
      "original_start_line": 133,
      "start_side": "RIGHT",
      "line": 149,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918912174",
      "pull_request_review_id": 2556753690,
      "id": 1918912174,
      "node_id": "PRRC_kwDOAN28mc5yYEau",
      "diff_hunk": "@@ -315,8 +313,9 @@ keys from the transaction while still proving they were part of the original com\n This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n selective disclosure.\n \n-This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n-version of Taproot.\n+This allows for inclusion of a [https://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki BIP-114] Taproot\n+Merkelized Abstract Syntax Tree (MAST) merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot transactions.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 72,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "c1b90476556d05c76a93e6b2dce41c3cdb973559",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taproot does not use an Abstract Syntax Tree. It uses an Alternative Script Tree. Also the term \"MAST\" is not used in the Taproot BIPs in this context, they refer to the concept as \"script tree\".",
      "created_at": "2025-01-16T17:08:57Z",
      "updated_at": "2025-01-16T17:24:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1918912174",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918912174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 316,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918918343",
      "pull_request_review_id": 2556753690,
      "id": 1918918343,
      "node_id": "PRRC_kwDOAN28mc5yYF7H",
      "diff_hunk": "@@ -40,11 +40,11 @@ relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC\n resistance without requiring a hard fork or block size increase.\n \n The vulnerability of existing Bitcoin addresses is investigated in\n-[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n-Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n-closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n-even more addresses might be vulnerable, representing 5M to 10M bitcoin.\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.",
      "path": "bip-0360.mediawiki",
      "position": 53,
      "original_position": 13,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "c1b90476556d05c76a93e6b2dce41c3cdb973559",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As [described](https://github.com/bitcoin/bips/pull/1670#discussion_r1896085309) above, please don’t reformat the entire paragraph when you change a single line. Moving all the line breaks makes it needlessly difficult to see what actually changed about the text.",
      "created_at": "2025-01-16T17:13:53Z",
      "updated_at": "2025-01-16T17:21:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1918918343",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918918343"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918932010",
      "pull_request_review_id": 2556792651,
      "id": 1918932010,
      "node_id": "PRRC_kwDOAN28mc5yYJQq",
      "diff_hunk": "@@ -40,11 +40,11 @@ relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC\n resistance without requiring a hard fork or block size increase.\n \n The vulnerability of existing Bitcoin addresses is investigated in\n-[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n-Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n-closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n-even more addresses might be vulnerable, representing 5M to 10M bitcoin.\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.",
      "path": "bip-0360.mediawiki",
      "position": 53,
      "original_position": 13,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "c1b90476556d05c76a93e6b2dce41c3cdb973559",
      "in_reply_to_id": 1918918343,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry, I just noticed that it was over 120 characters in length, which was something you requested earlier.",
      "created_at": "2025-01-16T17:24:31Z",
      "updated_at": "2025-01-16T17:24:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1918932010",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1918932010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1924226425",
      "pull_request_review_id": 2565461844,
      "id": 1924226425,
      "node_id": "PRRC_kwDOAN28mc5ysV15",
      "diff_hunk": "@@ -40,11 +40,11 @@ relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC\n resistance without requiring a hard fork or block size increase.\n \n The vulnerability of existing Bitcoin addresses is investigated in\n-[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n-Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n-closer to 20%. Independently, Bitcoin developer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n-even more addresses might be vulnerable, representing 5M to 10M bitcoin.\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.",
      "path": "bip-0360.mediawiki",
      "position": 53,
      "original_position": 13,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "c1b90476556d05c76a93e6b2dce41c3cdb973559",
      "in_reply_to_id": 1918918343,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, I see. Let me clarify: I would suggest that you generally aim for a limited line length so that suggestions left in review refer to a limited amount of text and it is easy to see what changed. When you add a word or two in a change that pushes the line to a slightly larger length, you can either just leave it a bit longer, or you break just that line into two lines, leaving the rest of the lines without changes. That way it is still easy to say what was changed about the text. If that leaves an occasional line a little longer or some lines shorter, it is still easy to review and doesn’t change the visual appearance of the final document.\r\n\r\nIf you instead reformat the entire paragraph, a diff will highlight everything as changed which makes it more time consuming to review.",
      "created_at": "2025-01-21T18:56:13Z",
      "updated_at": "2025-01-21T18:56:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1924226425",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1924226425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1927687091",
      "pull_request_review_id": 2571025498,
      "id": 1927687091,
      "node_id": "PRRC_kwDOAN28mc5y5iuz",
      "diff_hunk": "@@ -129,13 +129,11 @@ before a transaction is mined. Long-range attacks can be executed over a longer\n exposed on the blockchain indefinitely.\n \n Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n-are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n-block reward of 50 coins each, and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins\n-can be\n-considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n-considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n-to provide time to\n-transition Bitcoin to implement post-quantum security.\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.",
      "path": "bip-0360.mediawiki",
      "position": 149,
      "original_position": 41,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "c1b90476556d05c76a93e6b2dce41c3cdb973559",
      "in_reply_to_id": 1918908360,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think anything can be done about the vulnerability of Satoshi's coins without also introducing confiscatory changes. They do serve a useful purpose, however, in that they provide cover to the migration of smaller value transactions in the mempool.\r\n\r\nI'm just thinking worst case scenario, where the process to upgrade Bitcoin's quantum security takes much longer than we all expect.",
      "created_at": "2025-01-23T21:14:12Z",
      "updated_at": "2025-01-23T21:14:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1927687091",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1927687091"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 146,
      "original_start_line": 133,
      "start_side": "RIGHT",
      "line": 149,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1963707362",
      "pull_request_review_id": 2630099795,
      "id": 1963707362,
      "node_id": "PRRC_kwDOAN28mc51C8vi",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 20x larger than Schnorr signatures.\n+FALCON has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. This means, to maintain present transaction throughput, an\n+increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit\n+BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these three cryptosystems: SPHINCS+, CRYSTALS-Dilithium, and FALCON have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures.\n+\n+The reason multiple cryptosystems are included is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems, called libbitcoinpqc.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output: one key that makes use of classical cryptography, and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section below.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending SegWit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte. Consequently, the correct\n+signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the\n+attestation stack. Multiple signatures can be included in order to support multisig applications, and also for spending\n+multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a [https://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki BIP-114] Taproot\n+Merkelized Alternative Script Tree (MAST) merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot transactions.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.",
      "path": "bip-0360.mediawiki",
      "position": 423,
      "original_position": 398,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you clarify whether all leafs (all public keys) must be revealed or whether it is sufficient to reveal only the leaf hashes (and at least a single public key I suppose).",
      "created_at": "2025-02-20T14:47:32Z",
      "updated_at": "2025-02-20T14:47:37Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1963707362",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1963707362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 420,
      "original_start_line": 395,
      "start_side": "RIGHT",
      "line": 423,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1964407115",
      "pull_request_review_id": 2631271190,
      "id": 1964407115,
      "node_id": "PRRC_kwDOAN28mc51FnlL",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 46,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just learned this link is now dead, as that developer deleted his account.",
      "created_at": "2025-02-20T22:09:18Z",
      "updated_at": "2025-02-20T22:09:18Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1964407115",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1964407115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1964576228",
      "pull_request_review_id": 2631545879,
      "id": 1964576228,
      "node_id": "PRRC_kwDOAN28mc51GQ3k",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 20x larger than Schnorr signatures.\n+FALCON has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. This means, to maintain present transaction throughput, an\n+increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit\n+BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these three cryptosystems: SPHINCS+, CRYSTALS-Dilithium, and FALCON have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures.\n+\n+The reason multiple cryptosystems are included is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems, called libbitcoinpqc.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output: one key that makes use of classical cryptography, and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section below.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending SegWit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte. Consequently, the correct\n+signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the\n+attestation stack. Multiple signatures can be included in order to support multisig applications, and also for spending\n+multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a [https://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki BIP-114] Taproot\n+Merkelized Alternative Script Tree (MAST) merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot transactions.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.",
      "path": "bip-0360.mediawiki",
      "position": 423,
      "original_position": 398,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": 1963707362,
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ideally, if an address is being reused, to save space we can store a virtual link to the existing public key if it has already been revealed.\r\nFor greater address security, it makes sense to also hash the key from the post quantum algorithm in sha3\r\n\r\nRegarding the level of security, it is possible to consider a system where for multi-signature addresses you can use a more secure version of the algorithm; for regular addresses where new addresses for change can be created, we can use a lighter version of the algorithm.\r\n\r\n\r\nusing Falcon as an example\r\nFalcon 512 for regular address.\r\nFalcon 1024 for Multisig (since such addresses will not change and here it will also be useful to use a link if the public key has already been revealed)\r\n\r\nwhen I tried to make a test solution, I got stuck on organizing the storage of additional keys in the db. I even had an idea of ​​​​completely separate storage up to a separate wallet.dat, that is, when creating a wallet, we have a choice of transition, and the wallet will be able to only generate post quantum addresses, from the rest only accept without generating old types of addresses, transferring all types to legacy + format. If we need old types of addresses, we will have to use a separate wallet.dat.",
      "created_at": "2025-02-21T00:49:34Z",
      "updated_at": "2025-02-21T00:49:34Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1964576228",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1964576228"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 420,
      "original_start_line": 395,
      "start_side": "RIGHT",
      "line": 423,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966743090",
      "pull_request_review_id": 2635517807,
      "id": 1966743090,
      "node_id": "PRRC_kwDOAN28mc51Oh4y",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 46,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": 1964407115,
      "user": {
        "login": "tsusanka",
        "id": 1835345,
        "node_id": "MDQ6VXNlcjE4MzUzNDU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1835345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tsusanka",
        "html_url": "https://github.com/tsusanka",
        "followers_url": "https://api.github.com/users/tsusanka/followers",
        "following_url": "https://api.github.com/users/tsusanka/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tsusanka/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tsusanka/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tsusanka/subscriptions",
        "organizations_url": "https://api.github.com/users/tsusanka/orgs",
        "repos_url": "https://api.github.com/users/tsusanka/repos",
        "events_url": "https://api.github.com/users/tsusanka/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tsusanka/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems to be available through archive.org if needed https://web.archive.org/web/20220531184542/https://twitter.com/pwuille/status/1108085284862713856",
      "created_at": "2025-02-23T11:05:56Z",
      "updated_at": "2025-02-23T11:05:56Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1966743090",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966743090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966874149",
      "pull_request_review_id": 2635736658,
      "id": 1966874149,
      "node_id": "PRRC_kwDOAN28mc51PB4l",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 28,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This can be valuable to have a footnote pointing that Cryptoanalytically-Relevant Quantum Computers is an _object_ which is only defined with loosely _characteristics_ in quantum physics as of today. It could be understood in the context of this BIP / bitcoin that it’s a _hardware_-_agnostic_ computer supposed to have the architecture to keep _coherent_ a sufficient number of logical qubits to be able to run the Shor algorithm in an efficient fashion.\r\n\r\nFor the context of bitcoin, at least simplifying a bit, I do not think we have to reason further than on a basic quantum computer being able to computer Shor’s algorithm or Grover’s algorithm. At least, even if the energy consumed starts to matter, especially to analyze the comparison w.r.t to miners I think it matters less from a _cryptanalysis_ viewpoint.",
      "created_at": "2025-02-23T20:15:07Z",
      "updated_at": "2025-02-23T21:01:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1966874149",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966874149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966875304",
      "pull_request_review_id": 2635736658,
      "id": 1966875304,
      "node_id": "PRRC_kwDOAN28mc51PCKo",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 42,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it can be valuable to come with a practical definition of a vulnerable bitcoin address and not only giving quantitative estimate of the exposed scriptpubkeys. E.g a vulnerable bitcoin address is a _scriptpubkey type_ exposing as _raw bytes_ in a _block_ an elliptic curve public key _solvable_ by a run of the Shor’s algorithm.\r\n",
      "created_at": "2025-02-23T20:21:12Z",
      "updated_at": "2025-02-23T21:01:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1966875304",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966875304"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966877017",
      "pull_request_review_id": 2635736658,
      "id": 1966877017,
      "node_id": "PRRC_kwDOAN28mc51PClZ",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.",
      "path": "bip-0360.mediawiki",
      "position": 57,
      "original_position": 51,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this is a good description of why revealing the public key to a mining pool only do not solve quantum attack exposure - Though this is a simplification as if the mining pool is in _open access_ given the block template has to be distributed to all pool miners as a job (— unless you assume a miner only gets a candidate header from the pool which is SPV-mining). A quantum attacker would just have to register to the mining pool to get a view of the public key.",
      "created_at": "2025-02-23T20:30:17Z",
      "updated_at": "2025-02-23T21:01:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1966877017",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966877017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 57,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966885340",
      "pull_request_review_id": 2635736658,
      "id": 1966885340,
      "node_id": "PRRC_kwDOAN28mc51PEnc",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>",
      "path": "bip-0360.mediawiki",
      "position": 76,
      "original_position": 68,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don’t think the distinction between _long-exposure_ and _short-exposure_ quantum attack in the bitcoin context is that relevant, for few reasons:\r\n\r\n1) Communicating bip-32 xpubs with all its standardized derivation paths is a reality for all kind of consumer and users wallets. If you give an xpub to a third-party, this third-party can know exploit it for a quantum attack, even if there is never a coin transfer to the derived address on the _public_ chain.\r\n\r\n2) This is seeing the “mempool” as a black box where in fact there is at least 2 major components: the _main_ memory buffer of transactions (i.e `CTxMempool` in bc) and the transaction-relay stack, where inv, getdata, tx messages are flowing among nodes. As soon as the tx message is outgoing from the orignal broadcasting node the hash-committed spending script (i.e `witnessScript` or `redeemScript` ) can be discovered either by a network listener (if no bip324 encryption respected on the link) or by the peer node, while the *transaction* might never get into the mempool (e.g too low fees, not standard, etc).\r\n\r\n3) As you’re pointing the _objective criteria_ by which to dissociate between short-term and long-term exposure appears to be the “block time” and this is one sounds more in the chain versus mempool one. In average block time is of ~600 seconds in bitcoin and while the exact hashrate existent during a retarget period cannot be measured (it’s a kind of random walk to find a block), the probabilistic measure of the network hashrate can be linked back to some energy consumption estimation that can be roughly analyzed _in equivalence_ to the energy consumed to run a quantum computer.\r\n\r\nSo I think a better long-exposure vs short-exposure kind of heuristic definition in the bitcoin world would be better grounded on the computational difficulty to mine a block according to the consensus rules.",
      "created_at": "2025-02-23T20:55:45Z",
      "updated_at": "2025-02-23T21:01:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1966885340",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966885340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966887043",
      "pull_request_review_id": 2635753763,
      "id": 1966887043,
      "node_id": "PRRC_kwDOAN28mc51PFCD",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 20x larger than Schnorr signatures.\n+FALCON has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. This means, to maintain present transaction throughput, an\n+increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit\n+BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these three cryptosystems: SPHINCS+, CRYSTALS-Dilithium, and FALCON have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures.\n+\n+The reason multiple cryptosystems are included is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems, called libbitcoinpqc.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output: one key that makes use of classical cryptography, and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section below.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending SegWit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte. Consequently, the correct\n+signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the\n+attestation stack. Multiple signatures can be included in order to support multisig applications, and also for spending\n+multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a [https://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki BIP-114] Taproot\n+Merkelized Alternative Script Tree (MAST) merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot transactions.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.",
      "path": "bip-0360.mediawiki",
      "position": 423,
      "original_position": 398,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": 1963707362,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@jonasnick The point of using a merkle tree was to make it so that it is sufficient to reveal only the leaf hashes. However, without committing to multisig semantics in the output, there is a flaw in the security here. So, I think I'll need to add quorum and total bytes to the hash as well. One question is, will this also need to include a byte for the key type so that multisigs can be committed to separately based on which signature algorithm is used.\r\n\r\n@mraksoll4 I don't think we'll need to go back to using wallet.dat. Keys can be deterministically generated from the seed and then provided to libbitcoinpqc. There won't be full BIP-32 compatibility, but partial support.",
      "created_at": "2025-02-23T21:04:12Z",
      "updated_at": "2025-02-23T21:04:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1966887043",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966887043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 420,
      "original_start_line": 395,
      "start_side": "RIGHT",
      "line": 423,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966893885",
      "pull_request_review_id": 2635763258,
      "id": 1966893885,
      "node_id": "PRRC_kwDOAN28mc51PGs9",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.",
      "path": "bip-0360.mediawiki",
      "position": 57,
      "original_position": 51,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": 1966877017,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agreed. I'll also include a section on how block reorg attacks also don't make this a secure solution.",
      "created_at": "2025-02-23T21:28:49Z",
      "updated_at": "2025-02-23T21:28:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1966893885",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966893885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 57,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966895415",
      "pull_request_review_id": 2635765400,
      "id": 1966895415,
      "node_id": "PRRC_kwDOAN28mc51PHE3",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>",
      "path": "bip-0360.mediawiki",
      "position": 76,
      "original_position": 68,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": 1966885340,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hmm. I'm not sure I understand the point you're making. The separation of long-exposure and short-exposure was developed to highlight that keys exposed for a long time are more vulnerable, and additionally, a more powerful quantum computer is required to effect short range attacks, as explained in the \"short-exposure\" ref. This is also address a point in several papers I've seen that assume that a quantum attacker must be able to solve the key within minutes or hours, when in fact there are many keys already exposed.",
      "created_at": "2025-02-23T21:34:30Z",
      "updated_at": "2025-02-23T21:34:30Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1966895415",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1966895415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967302480",
      "pull_request_review_id": 2636481452,
      "id": 1967302480,
      "node_id": "PRRC_kwDOAN28mc51QqdQ",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 20x larger than Schnorr signatures.\n+FALCON has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. This means, to maintain present transaction throughput, an\n+increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit\n+BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these three cryptosystems: SPHINCS+, CRYSTALS-Dilithium, and FALCON have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures.\n+\n+The reason multiple cryptosystems are included is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems, called libbitcoinpqc.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output: one key that makes use of classical cryptography, and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section below.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending SegWit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte. Consequently, the correct\n+signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the\n+attestation stack. Multiple signatures can be included in order to support multisig applications, and also for spending\n+multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a [https://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki BIP-114] Taproot\n+Merkelized Alternative Script Tree (MAST) merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot transactions.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.",
      "path": "bip-0360.mediawiki",
      "position": 423,
      "original_position": 398,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": 1963707362,
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we still need to cache keys, for classic descriptors on ecc we cache them, also we need to store seed ​​somewhere...",
      "created_at": "2025-02-24T09:47:02Z",
      "updated_at": "2025-02-24T09:47:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1967302480",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967302480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 420,
      "original_start_line": 395,
      "start_side": "RIGHT",
      "line": 423,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967705277",
      "pull_request_review_id": 2637208271,
      "id": 1967705277,
      "node_id": "PRRC_kwDOAN28mc51SMy9",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 20x larger than Schnorr signatures.\n+FALCON has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. This means, to maintain present transaction throughput, an\n+increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit\n+BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these three cryptosystems: SPHINCS+, CRYSTALS-Dilithium, and FALCON have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures.\n+\n+The reason multiple cryptosystems are included is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems, called libbitcoinpqc.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output: one key that makes use of classical cryptography, and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section below.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending SegWit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte. Consequently, the correct\n+signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the\n+attestation stack. Multiple signatures can be included in order to support multisig applications, and also for spending\n+multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a [https://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki BIP-114] Taproot\n+Merkelized Alternative Script Tree (MAST) merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot transactions.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.",
      "path": "bip-0360.mediawiki",
      "position": 423,
      "original_position": 398,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": 1963707362,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ideally, there would be an algorithmic (pseudocode) description of the algorithm. Right now, it's not clear how exactly the Merkle tree is built. For example, the BIP appears to require revealing all leaves for the Merkle tree instead of using regular Merkle inclusion proofs whose size (for a single element proof) is only logarithmic in the number of elements.  Also, does the BIP support a number of public keys that's not a power of two?",
      "created_at": "2025-02-24T14:06:01Z",
      "updated_at": "2025-02-24T14:06:01Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1967705277",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967705277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 420,
      "original_start_line": 395,
      "start_side": "RIGHT",
      "line": 423,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967707053",
      "pull_request_review_id": 2637211529,
      "id": 1967707053,
      "node_id": "PRRC_kwDOAN28mc51SNOt",
      "diff_hunk": "@@ -0,0 +1,617 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs)<ref name=\"CRQC\">\n+A Cryptoanalytically-Relevant Quantum Computer is an ''object'' which is only loosely defined by ''characteristics'' in quantum physics as of today. It could be understood in the context of this BIP and in bitcoin that it's a ''hardware-agnostic'' computer supposed to have the architecture to keep ''coherent'' a sufficient number of logical qubits to be able to run the Shor algorithm in an efficient fashion.</ref>\n+is their potential to break the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses<ref name=\"address-vulnerability\">A vulnerable Bitcoin address is any\n+''scriptPubKey'' type that exposes an elliptic curve public key as ''raw bytes'' in a ''block'', making it susceptible\n+to private key derivation through Shor's algorithm. This includes P2PK outputs and any script that contains an\n+unprotected public key.</ref> is detailed in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://web.archive.org/web/20220531184542/https://twitter.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid. It also doesn't account for block reorg attacks, which would\n+reveal public keys in blocks that were once mined but are now orphaned and must be mined again. Additionally,\n+it depends on the mining pool whether they reveal their block template to either the public or to miners.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 20x larger than Schnorr signatures.\n+FALCON has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. This means, to maintain present transaction throughput, an\n+increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit\n+BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 206,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "32c0a3d81645e63e59305f280186bb192869c3e8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nimplementation to three additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\r\n```\r\n\r\nIt's three now, right?",
      "created_at": "2025-02-24T14:07:08Z",
      "updated_at": "2025-02-24T14:28:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1967707053",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967707053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967707439",
      "pull_request_review_id": 2637211529,
      "id": 1967707439,
      "node_id": "PRRC_kwDOAN28mc51SNUv",
      "diff_hunk": "@@ -0,0 +1,617 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs)<ref name=\"CRQC\">\n+A Cryptoanalytically-Relevant Quantum Computer is an ''object'' which is only loosely defined by ''characteristics'' in quantum physics as of today. It could be understood in the context of this BIP and in bitcoin that it's a ''hardware-agnostic'' computer supposed to have the architecture to keep ''coherent'' a sufficient number of logical qubits to be able to run the Shor algorithm in an efficient fashion.</ref>\n+is their potential to break the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses<ref name=\"address-vulnerability\">A vulnerable Bitcoin address is any\n+''scriptPubKey'' type that exposes an elliptic curve public key as ''raw bytes'' in a ''block'', making it susceptible\n+to private key derivation through Shor's algorithm. This includes P2PK outputs and any script that contains an\n+unprotected public key.</ref> is detailed in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://web.archive.org/web/20220531184542/https://twitter.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid. It also doesn't account for block reorg attacks, which would\n+reveal public keys in blocks that were once mined but are now orphaned and must be mined again. Additionally,\n+it depends on the mining pool whether they reveal their block template to either the public or to miners.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 20x larger than Schnorr signatures.\n+FALCON has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. This means, to maintain present transaction throughput, an\n+increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit\n+BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these three cryptosystems: SPHINCS+, CRYSTALS-Dilithium, and FALCON have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures.\n+\n+The reason multiple cryptosystems are included is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems, called libbitcoinpqc.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output: one key that makes use of classical cryptography, and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the Hash Computation section below.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending SegWit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte. Consequently, the correct\n+signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the\n+attestation stack. Multiple signatures can be included in order to support multisig applications, and also for spending\n+multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a [https://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki BIP-114] Taproot\n+Merkelized Alternative Script Tree (MAST) merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot transactions.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithms ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. Public keys that are not needed can be excluded by including their hash in the attestation accompanied\n+with an empty signature. This includes classical Schnorr signatures.\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> as specified in the Hash Computation section.\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security, and is supported by\n+the implementation.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 493,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "32c0a3d81645e63e59305f280186bb192869c3e8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nIntroducing three quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\r\n```",
      "created_at": "2025-02-24T14:07:22Z",
      "updated_at": "2025-02-24T14:28:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1967707439",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967707439"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 493,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967712486",
      "pull_request_review_id": 2637211529,
      "id": 1967712486,
      "node_id": "PRRC_kwDOAN28mc51SOjm",
      "diff_hunk": "@@ -0,0 +1,617 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs)<ref name=\"CRQC\">\n+A Cryptoanalytically-Relevant Quantum Computer is an ''object'' which is only loosely defined by ''characteristics'' in quantum physics as of today. It could be understood in the context of this BIP and in bitcoin that it's a ''hardware-agnostic'' computer supposed to have the architecture to keep ''coherent'' a sufficient number of logical qubits to be able to run the Shor algorithm in an efficient fashion.</ref>\n+is their potential to break the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 34,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "32c0a3d81645e63e59305f280186bb192869c3e8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I tried to look up \"quantum key decryption\" because it struck me as a very confusing term, but I didn't find any references.",
      "created_at": "2025-02-24T14:10:18Z",
      "updated_at": "2025-02-24T14:28:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1967712486",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967712486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967716860",
      "pull_request_review_id": 2637211529,
      "id": 1967716860,
      "node_id": "PRRC_kwDOAN28mc51SPn8",
      "diff_hunk": "@@ -0,0 +1,617 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs)<ref name=\"CRQC\">\n+A Cryptoanalytically-Relevant Quantum Computer is an ''object'' which is only loosely defined by ''characteristics'' in quantum physics as of today. It could be understood in the context of this BIP and in bitcoin that it's a ''hardware-agnostic'' computer supposed to have the architecture to keep ''coherent'' a sufficient number of logical qubits to be able to run the Shor algorithm in an efficient fashion.</ref>\n+is their potential to break the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses<ref name=\"address-vulnerability\">A vulnerable Bitcoin address is any\n+''scriptPubKey'' type that exposes an elliptic curve public key as ''raw bytes'' in a ''block'', making it susceptible\n+to private key derivation through Shor's algorithm. This includes P2PK outputs and any script that contains an\n+unprotected public key.</ref> is detailed in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://web.archive.org/web/20220531184542/https://twitter.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid. It also doesn't account for block reorg attacks, which would\n+reveal public keys in blocks that were once mined but are now orphaned and must be mined again. Additionally,\n+it depends on the mining pool whether they reveal their block template to either the public or to miners.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 20x larger than Schnorr signatures.\n+FALCON has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. This means, to maintain present transaction throughput, an\n+increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit\n+BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these three cryptosystems: SPHINCS+, CRYSTALS-Dilithium, and FALCON have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures.\n+\n+The reason multiple cryptosystems are included is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems, called libbitcoinpqc.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 228,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "32c0a3d81645e63e59305f280186bb192869c3e8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I'd remove that paragraph because it's highly speculative and doesn't affect the design of this BIP as far as I can tell.",
      "created_at": "2025-02-24T14:12:50Z",
      "updated_at": "2025-02-24T14:28:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1967716860",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967716860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 222,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967720868",
      "pull_request_review_id": 2637211529,
      "id": 1967720868,
      "node_id": "PRRC_kwDOAN28mc51SQmk",
      "diff_hunk": "@@ -0,0 +1,617 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs)<ref name=\"CRQC\">\n+A Cryptoanalytically-Relevant Quantum Computer is an ''object'' which is only loosely defined by ''characteristics'' in quantum physics as of today. It could be understood in the context of this BIP and in bitcoin that it's a ''hardware-agnostic'' computer supposed to have the architecture to keep ''coherent'' a sufficient number of logical qubits to be able to run the Shor algorithm in an efficient fashion.</ref>\n+is their potential to break the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses<ref name=\"address-vulnerability\">A vulnerable Bitcoin address is any\n+''scriptPubKey'' type that exposes an elliptic curve public key as ''raw bytes'' in a ''block'', making it susceptible\n+to private key derivation through Shor's algorithm. This includes P2PK outputs and any script that contains an\n+unprotected public key.</ref> is detailed in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://web.archive.org/web/20220531184542/https://twitter.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid. It also doesn't account for block reorg attacks, which would\n+reveal public keys in blocks that were once mined but are now orphaned and must be mined again. Additionally,\n+it depends on the mining pool whether they reveal their block template to either the public or to miners.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and",
      "path": "bip-0360.mediawiki",
      "position": 185,
      "original_position": 178,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "32c0a3d81645e63e59305f280186bb192869c3e8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there a rationale for double SHA-256?",
      "created_at": "2025-02-24T14:15:07Z",
      "updated_at": "2025-02-24T14:28:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1967720868",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967720868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 185,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967750597",
      "pull_request_review_id": 2637211529,
      "id": 1967750597,
      "node_id": "PRRC_kwDOAN28mc51SX3F",
      "diff_hunk": "@@ -0,0 +1,617 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs)<ref name=\"CRQC\">\n+A Cryptoanalytically-Relevant Quantum Computer is an ''object'' which is only loosely defined by ''characteristics'' in quantum physics as of today. It could be understood in the context of this BIP and in bitcoin that it's a ''hardware-agnostic'' computer supposed to have the architecture to keep ''coherent'' a sufficient number of logical qubits to be able to run the Shor algorithm in an efficient fashion.</ref>\n+is their potential to break the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses<ref name=\"address-vulnerability\">A vulnerable Bitcoin address is any\n+''scriptPubKey'' type that exposes an elliptic curve public key as ''raw bytes'' in a ''block'', making it susceptible\n+to private key derivation through Shor's algorithm. This includes P2PK outputs and any script that contains an\n+unprotected public key.</ref> is detailed in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://web.archive.org/web/20220531184542/https://twitter.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid. It also doesn't account for block reorg attacks, which would\n+reveal public keys in blocks that were once mined but are now orphaned and must be mined again. Additionally,\n+it depends on the mining pool whether they reveal their block template to either the public or to miners.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 115,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "32c0a3d81645e63e59305f280186bb192869c3e8",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is a bit unclear to me. Do you mean \"private key *corresponding to* an extended public key\" (and not the parent *of* the public key)?\r\n\r\nAnd such an attack not only allows recovering the extended private key (which is trivial, as it's the same as the private key of the extended public key + the chaincode), but more importantly, it allows computing any of the *child* private keys.",
      "created_at": "2025-02-24T14:28:24Z",
      "updated_at": "2025-02-24T14:28:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1967750597",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1967750597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 114,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1968006089",
      "pull_request_review_id": 2637747344,
      "id": 1968006089,
      "node_id": "PRRC_kwDOAN28mc51TWPJ",
      "diff_hunk": "@@ -0,0 +1,617 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs)<ref name=\"CRQC\">\n+A Cryptoanalytically-Relevant Quantum Computer is an ''object'' which is only loosely defined by ''characteristics'' in quantum physics as of today. It could be understood in the context of this BIP and in bitcoin that it's a ''hardware-agnostic'' computer supposed to have the architecture to keep ''coherent'' a sufficient number of logical qubits to be able to run the Shor algorithm in an efficient fashion.</ref>\n+is their potential to break the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 34,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "32c0a3d81645e63e59305f280186bb192869c3e8",
      "in_reply_to_id": 1967712486,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'll change it to, \"a process referred to **here**\"",
      "created_at": "2025-02-24T16:32:40Z",
      "updated_at": "2025-02-24T16:32:41Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1968006089",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1968006089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1968024461",
      "pull_request_review_id": 2637779623,
      "id": 1968024461,
      "node_id": "PRRC_kwDOAN28mc51TauN",
      "diff_hunk": "@@ -0,0 +1,617 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs)<ref name=\"CRQC\">\n+A Cryptoanalytically-Relevant Quantum Computer is an ''object'' which is only loosely defined by ''characteristics'' in quantum physics as of today. It could be understood in the context of this BIP and in bitcoin that it's a ''hardware-agnostic'' computer supposed to have the architecture to keep ''coherent'' a sufficient number of logical qubits to be able to run the Shor algorithm in an efficient fashion.</ref>\n+is their potential to break the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses<ref name=\"address-vulnerability\">A vulnerable Bitcoin address is any\n+''scriptPubKey'' type that exposes an elliptic curve public key as ''raw bytes'' in a ''block'', making it susceptible\n+to private key derivation through Shor's algorithm. This includes P2PK outputs and any script that contains an\n+unprotected public key.</ref> is detailed in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://web.archive.org/web/20220531184542/https://twitter.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid. It also doesn't account for block reorg attacks, which would\n+reveal public keys in blocks that were once mined but are now orphaned and must be mined again. Additionally,\n+it depends on the mining pool whether they reveal their block template to either the public or to miners.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and",
      "path": "bip-0360.mediawiki",
      "position": 185,
      "original_position": 178,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "32c0a3d81645e63e59305f280186bb192869c3e8",
      "in_reply_to_id": 1967720868,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm just assuming it could increase the difficulty of running Grover's algorithm. It's hard to know whether that assumption would hold up in practice since solving Grover's for SHA-256 in a quantum circuit is still theoretical. I figured it also couldn't hurt to use the same function as is used for PoW. It just might make things more secure in ways we can't foresee.",
      "created_at": "2025-02-24T16:42:58Z",
      "updated_at": "2025-02-24T16:42:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1968024461",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1968024461"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 185,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1968024738",
      "pull_request_review_id": 2637780058,
      "id": 1968024738,
      "node_id": "PRRC_kwDOAN28mc51Tayi",
      "diff_hunk": "@@ -0,0 +1,617 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs)<ref name=\"CRQC\">\n+A Cryptoanalytically-Relevant Quantum Computer is an ''object'' which is only loosely defined by ''characteristics'' in quantum physics as of today. It could be understood in the context of this BIP and in bitcoin that it's a ''hardware-agnostic'' computer supposed to have the architecture to keep ''coherent'' a sufficient number of logical qubits to be able to run the Shor algorithm in an efficient fashion.</ref>\n+is their potential to break the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses<ref name=\"address-vulnerability\">A vulnerable Bitcoin address is any\n+''scriptPubKey'' type that exposes an elliptic curve public key as ''raw bytes'' in a ''block'', making it susceptible\n+to private key derivation through Shor's algorithm. This includes P2PK outputs and any script that contains an\n+unprotected public key.</ref> is detailed in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://web.archive.org/web/20220531184542/https://twitter.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid. It also doesn't account for block reorg attacks, which would\n+reveal public keys in blocks that were once mined but are now orphaned and must be mined again. Additionally,\n+it depends on the mining pool whether they reveal their block template to either the public or to miners.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 20x larger than Schnorr signatures.\n+FALCON has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. This means, to maintain present transaction throughput, an\n+increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit\n+BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 206,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "32c0a3d81645e63e59305f280186bb192869c3e8",
      "in_reply_to_id": 1967707053,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is, thanks.",
      "created_at": "2025-02-24T16:43:08Z",
      "updated_at": "2025-02-24T16:43:08Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1968024738",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1968024738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1968029317",
      "pull_request_review_id": 2637787571,
      "id": 1968029317,
      "node_id": "PRRC_kwDOAN28mc51Tb6F",
      "diff_hunk": "@@ -0,0 +1,617 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs)<ref name=\"CRQC\">\n+A Cryptoanalytically-Relevant Quantum Computer is an ''object'' which is only loosely defined by ''characteristics'' in quantum physics as of today. It could be understood in the context of this BIP and in bitcoin that it's a ''hardware-agnostic'' computer supposed to have the architecture to keep ''coherent'' a sufficient number of logical qubits to be able to run the Shor algorithm in an efficient fashion.</ref>\n+is their potential to break the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses<ref name=\"address-vulnerability\">A vulnerable Bitcoin address is any\n+''scriptPubKey'' type that exposes an elliptic curve public key as ''raw bytes'' in a ''block'', making it susceptible\n+to private key derivation through Shor's algorithm. This includes P2PK outputs and any script that contains an\n+unprotected public key.</ref> is detailed in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://web.archive.org/web/20220531184542/https://twitter.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid. It also doesn't account for block reorg attacks, which would\n+reveal public keys in blocks that were once mined but are now orphaned and must be mined again. Additionally,\n+it depends on the mining pool whether they reveal their block template to either the public or to miners.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 20x larger than Schnorr signatures.\n+FALCON has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. This means, to maintain present transaction throughput, an\n+increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit\n+BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these three cryptosystems: SPHINCS+, CRYSTALS-Dilithium, and FALCON have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures.\n+\n+The reason multiple cryptosystems are included is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems, called libbitcoinpqc.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 228,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "32c0a3d81645e63e59305f280186bb192869c3e8",
      "in_reply_to_id": 1967716860,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I might argue it just needs an update, to capture discussions here and on the mailing list. I'd like to add a rationale for why this is an imperfect solution, and why it doesn't need to be perfect. Signature aggregation for example can be added in a separate BIP and output type.",
      "created_at": "2025-02-24T16:45:58Z",
      "updated_at": "2025-02-24T16:45:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1968029317",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1968029317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 222,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1968042679",
      "pull_request_review_id": 2637811679,
      "id": 1968042679,
      "node_id": "PRRC_kwDOAN28mc51TfK3",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 20x larger than Schnorr signatures.\n+FALCON has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. This means, to maintain present transaction throughput, an\n+increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit\n+BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these three cryptosystems: SPHINCS+, CRYSTALS-Dilithium, and FALCON have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures.\n+\n+The reason multiple cryptosystems are included is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems, called libbitcoinpqc.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output: one key that makes use of classical cryptography, and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section below.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending SegWit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte. Consequently, the correct\n+signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the\n+attestation stack. Multiple signatures can be included in order to support multisig applications, and also for spending\n+multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a [https://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki BIP-114] Taproot\n+Merkelized Alternative Script Tree (MAST) merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot transactions.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.",
      "path": "bip-0360.mediawiki",
      "position": 423,
      "original_position": 398,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": 1963707362,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> does the BIP support a number of public keys that's not a power of two?\r\n\r\nThat's a good point. The BIP doesn't specify how NPOT merkle trees should be treated. That will be one scenario I'd want to think through when working on the test vectors. Do you have a suggestion on how that should be handled?\r\n\r\n> the BIP appears to require revealing all leaves for the Merkle tree instead of using regular Merkle inclusion proofs whose size (for a single element proof) is only logarithmic in the number of elements.\r\n\r\nI'm not sure I understand this. The public keys don't need to be revealed, only the hash of the public key.",
      "created_at": "2025-02-24T16:52:26Z",
      "updated_at": "2025-02-24T16:52:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1968042679",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1968042679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 420,
      "original_start_line": 395,
      "start_side": "RIGHT",
      "line": 423,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1969542643",
      "pull_request_review_id": 2640634520,
      "id": 1969542643,
      "node_id": "PRRC_kwDOAN28mc51ZNXz",
      "diff_hunk": "@@ -0,0 +1,617 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs)<ref name=\"CRQC\">\n+A Cryptoanalytically-Relevant Quantum Computer is an ''object'' which is only loosely defined by ''characteristics'' in quantum physics as of today. It could be understood in the context of this BIP and in bitcoin that it's a ''hardware-agnostic'' computer supposed to have the architecture to keep ''coherent'' a sufficient number of logical qubits to be able to run the Shor algorithm in an efficient fashion.</ref>\n+is their potential to break the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses<ref name=\"address-vulnerability\">A vulnerable Bitcoin address is any\n+''scriptPubKey'' type that exposes an elliptic curve public key as ''raw bytes'' in a ''block'', making it susceptible\n+to private key derivation through Shor's algorithm. This includes P2PK outputs and any script that contains an\n+unprotected public key.</ref> is detailed in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://web.archive.org/web/20220531184542/https://twitter.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid. It also doesn't account for block reorg attacks, which would\n+reveal public keys in blocks that were once mined but are now orphaned and must be mined again. Additionally,\n+it depends on the mining pool whether they reveal their block template to either the public or to miners.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and",
      "path": "bip-0360.mediawiki",
      "position": 185,
      "original_position": 178,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "32c0a3d81645e63e59305f280186bb192869c3e8",
      "in_reply_to_id": 1967720868,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't see how it would make a difference. It would just result in running SHA256 twice per Grover iteration instead of once. Why not hash 10 times then.\r\n\r\nAnyway, in my experience, you will get the same questions about various design choices (like this one) over and over. The best way I know to deal with this to document them early and thoroughly, for example using footnotes as in BIP 341 or BIP 327.",
      "created_at": "2025-02-25T11:01:55Z",
      "updated_at": "2025-02-25T11:01:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1969542643",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1969542643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 185,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1969552556",
      "pull_request_review_id": 2640651309,
      "id": 1969552556,
      "node_id": "PRRC_kwDOAN28mc51ZPys",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 20x larger than Schnorr signatures.\n+FALCON has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. This means, to maintain present transaction throughput, an\n+increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit\n+BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these three cryptosystems: SPHINCS+, CRYSTALS-Dilithium, and FALCON have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures.\n+\n+The reason multiple cryptosystems are included is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems, called libbitcoinpqc.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output: one key that makes use of classical cryptography, and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section below.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending SegWit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte. Consequently, the correct\n+signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the\n+attestation stack. Multiple signatures can be included in order to support multisig applications, and also for spending\n+multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a [https://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki BIP-114] Taproot\n+Merkelized Alternative Script Tree (MAST) merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot transactions.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.",
      "path": "bip-0360.mediawiki",
      "position": 423,
      "original_position": 398,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": 1963707362,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I'm not sure I understand this. The public keys don't need to be revealed, only the hash of the public key.\r\n\r\nExample:\r\n\r\n```\r\n              H(H(A,B), H(C,D))\r\n               /              \\\r\n          H(A,B)              H(C,D)\r\n         /      \\            /      \\\r\n        A        B          C        D\r\n```\r\n\r\nI'm saying that, with the BIP as currently written, proving inclusion of `D` (be it a hash or any other element) requires revealing `A`, `B`, `C`. However, the point of Merkle trees is that an inclusion proof for `D` only requires `C` and `H(A,B)`.",
      "created_at": "2025-02-25T11:09:00Z",
      "updated_at": "2025-02-25T11:09:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1969552556",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1969552556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 420,
      "original_start_line": 395,
      "start_side": "RIGHT",
      "line": 423,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1969909894",
      "pull_request_review_id": 2641320532,
      "id": 1969909894,
      "node_id": "PRRC_kwDOAN28mc51anCG",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+<pre>\n+  BIP: 360\n+  Title: QuBit: SegWit v3 spending rules (P2QRH)\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+==== Long Range and Short Range Quantum Attacks ====\n+\n+Long Range Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* Early addresses (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short Range Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it gets mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+* Unhardened BIP-32 HD wallet keys\n+\n+Short-range attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-range attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. The majority of these have a\n+block reward of 50 coins each, and there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins\n+can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve\n+to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+The hash is computed as a merkle tree of public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a Taproot MAST merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''",
      "path": "bip-0360.mediawiki",
      "position": null,
      "original_position": 357,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "in_reply_to_id": 1890963516,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Somehow you've reviewed an older version of this BIP. SQIsign has been removed.",
      "created_at": "2025-02-25T14:35:08Z",
      "updated_at": "2025-02-25T14:35:08Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1969909894",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1969909894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 357,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1969913898",
      "pull_request_review_id": 2641329337,
      "id": 1969913898,
      "node_id": "PRRC_kwDOAN28mc51aoAq",
      "diff_hunk": "@@ -0,0 +1,617 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs)<ref name=\"CRQC\">\n+A Cryptoanalytically-Relevant Quantum Computer is an ''object'' which is only loosely defined by ''characteristics'' in quantum physics as of today. It could be understood in the context of this BIP and in bitcoin that it's a ''hardware-agnostic'' computer supposed to have the architecture to keep ''coherent'' a sufficient number of logical qubits to be able to run the Shor algorithm in an efficient fashion.</ref>\n+is their potential to break the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses<ref name=\"address-vulnerability\">A vulnerable Bitcoin address is any\n+''scriptPubKey'' type that exposes an elliptic curve public key as ''raw bytes'' in a ''block'', making it susceptible\n+to private key derivation through Shor's algorithm. This includes P2PK outputs and any script that contains an\n+unprotected public key.</ref> is detailed in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://web.archive.org/web/20220531184542/https://twitter.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid. It also doesn't account for block reorg attacks, which would\n+reveal public keys in blocks that were once mined but are now orphaned and must be mined again. Additionally,\n+it depends on the mining pool whether they reveal their block template to either the public or to miners.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and",
      "path": "bip-0360.mediawiki",
      "position": 185,
      "original_position": 178,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "32c0a3d81645e63e59305f280186bb192869c3e8",
      "in_reply_to_id": 1967720868,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I've updated the BIP based on your feedback like so:\r\n\r\n```\r\nP2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\r\nalso to increase security by not having the public key available on-chain. While HASH256 uses double SHA-256 like\r\nBitcoin's Proof of Work, this does not meaningfully increase quantum resistance compared to single SHA-256, as both\r\nprovide approximately 2^128 security against Grover's algorithm. The practical impact of quantum attacks on SHA-256\r\nremains theoretical since quantum circuits for SHA-256 are still theoretical, but using the same hash function as\r\nProof of Work maintains consistency with Bitcoin's existing security model. \r\n```",
      "created_at": "2025-02-25T14:37:17Z",
      "updated_at": "2025-02-25T14:37:17Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1969913898",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1969913898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 185,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1969926865",
      "pull_request_review_id": 2641350071,
      "id": 1969926865,
      "node_id": "PRRC_kwDOAN28mc51arLR",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 20x larger than Schnorr signatures.\n+FALCON has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. This means, to maintain present transaction throughput, an\n+increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit\n+BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these three cryptosystems: SPHINCS+, CRYSTALS-Dilithium, and FALCON have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures.\n+\n+The reason multiple cryptosystems are included is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems, called libbitcoinpqc.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output: one key that makes use of classical cryptography, and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section below.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending SegWit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte. Consequently, the correct\n+signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the\n+attestation stack. Multiple signatures can be included in order to support multisig applications, and also for spending\n+multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a [https://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki BIP-114] Taproot\n+Merkelized Alternative Script Tree (MAST) merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot transactions.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.",
      "path": "bip-0360.mediawiki",
      "position": 423,
      "original_position": 398,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": 1963707362,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for clarifying. First, this is skipping the step of H(A), H(B), etc. Then, only H(A,B), H(C), and D need to be revealed if only spending D. This behavior is defined in this paragraph:\r\n\r\n```\r\nWhen spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\r\ndirectly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\r\nkeys from the transaction while still proving they were part of the original commitment.\r\n```\r\n\r\nDoes that address your point?",
      "created_at": "2025-02-25T14:43:37Z",
      "updated_at": "2025-02-25T14:43:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1969926865",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1969926865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 420,
      "original_start_line": 395,
      "start_side": "RIGHT",
      "line": 423,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1970171127",
      "pull_request_review_id": 2641793524,
      "id": 1970171127,
      "node_id": "PRRC_kwDOAN28mc51bmz3",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 20x larger than Schnorr signatures.\n+FALCON has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. This means, to maintain present transaction throughput, an\n+increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit\n+BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these three cryptosystems: SPHINCS+, CRYSTALS-Dilithium, and FALCON have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures.\n+\n+The reason multiple cryptosystems are included is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems, called libbitcoinpqc.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output: one key that makes use of classical cryptography, and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section below.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending SegWit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte. Consequently, the correct\n+signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the\n+attestation stack. Multiple signatures can be included in order to support multisig applications, and also for spending\n+multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a [https://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki BIP-114] Taproot\n+Merkelized Alternative Script Tree (MAST) merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot transactions.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.",
      "path": "bip-0360.mediawiki",
      "position": 423,
      "original_position": 398,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": 1963707362,
      "user": {
        "login": "mraksoll4",
        "id": 32709596,
        "node_id": "MDQ6VXNlcjMyNzA5NTk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/32709596?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mraksoll4",
        "html_url": "https://github.com/mraksoll4",
        "followers_url": "https://api.github.com/users/mraksoll4/followers",
        "following_url": "https://api.github.com/users/mraksoll4/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mraksoll4/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mraksoll4/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mraksoll4/subscriptions",
        "organizations_url": "https://api.github.com/users/mraksoll4/orgs",
        "repos_url": "https://api.github.com/users/mraksoll4/repos",
        "events_url": "https://api.github.com/users/mraksoll4/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mraksoll4/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "need to do a hardened key derevation on the KMAC function (using shake256), no manupulation with public keys is possible at all, so it cannot be non-hardened derevation.\r\n\r\nIt is possible to manipulate the seed.\r\n\r\nFor speed, the keys will have to be cached, watch only wallets will not work with tree, only with single public keys.\r\n\r\nIn fact, we have an initializing seed, then we build child keys from it. Since we almost always get keys in pairs from the seed, we clear the extra ones from memory, a lot of mem cleans is needed even in the library itself ( example pqclean don't have them , liboqs also not add them , as they use pqclear solutions as base )\r\n\r\nbut adding any key derivation automatically removes the possibility of talking about NIST certification\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/issues/2032",
      "created_at": "2025-02-25T16:49:03Z",
      "updated_at": "2025-02-25T16:49:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1970171127",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1970171127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 420,
      "original_start_line": 395,
      "start_side": "RIGHT",
      "line": 423,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1970506078",
      "pull_request_review_id": 2642402009,
      "id": 1970506078,
      "node_id": "PRRC_kwDOAN28mc51c4le",
      "diff_hunk": "@@ -0,0 +1,611 @@\n+<pre>\n+  BIP: 360\n+  Title: Pay to Quantum Resistant Hash\n+  Layer: Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0360\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-12-18\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of\n+private keys from public keys—a process referred to as quantum key decryption. Importantly, simply doubling the public\n+key length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard,\n+offering insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) output type that\n+relies on PQC signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report].\n+The report estimates that in 2020 approximately 25% of the Bitcoin supply is held within addresses vulnerable to\n+quantum attack. As of the time of writing, that number is now closer to 20%. Independently, Bitcoin developer Pieter\n+Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more addresses might be vulnerable, representing\n+5M to 10M bitcoin.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-exposure CRQC attack\" recovering\n+the key behind high-value addresses. A long-exposure quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-exposure quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs.<ref name=\"short-exposure\">\n+In the paper\n+[https://arxiv.org/pdf/2306.08585 How to compute a 256-bit elliptic curve private key with only 50 million Toffoli gates]\n+the authors estimate that a CRQC with 28 million superconducting physical qubits would take 8.3 seconds to calculate a\n+256-bit key, while a CRQC with 6.9 million physical qubits would take 58 seconds. This implies that a CRQC with 4x as\n+many qubits would be roughly 7 times faster.\n+</ref>\n+\n+As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as\n+possible. Once the transaction is mined, it makes useless the public key revealed by spending a UTXO, so long as it is\n+never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) output type that relies on a PQC signature\n+algorithm. This new output type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is intended to inform the average Bitcoin user whether their bitcoin is vulnerable to a long-exposure\n+quantum attack:\n+\n+{| class=\"wikitable\"\n+|+ Output types vulnerable to long-exposure attacks on unspent addresses\n+|-\n+! Type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || Varies || 2103203b768951584fe9af6d9d9e6ff26a5f76e453212f19ba163774182ab8057f3eac\n+|-\n+| P2PKH || No¹ || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2MS || Yes || Varies || 52410496ec45f878b62c46c4be8e336dff7cc58df9b502178cc240e...\n+|-\n+| P2SH || No¹ || 3 || 3FkhZo7sGNue153xhgqPBcUaBsYvJW6tTx\n+|-\n+| P2WPKH || No¹ || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2WSH || No¹ || bc1q || bc1qvhu3557twysq2ldn6dut6rmaj3qk04p60h9l79wk4lzgy0ca8mfsnffz65\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|-\n+| P2QRH || No || bc1r || bc1r8rt68aze8tek87cnz4ndnvfzk6tk93jv39n4lmpu5a4yw453rcpszsft3z\n+|}\n+\n+¹ Funds in P2PKH, P2SH, P2WPKH, and P2WSH outputs become vulnerable to long-exposure quantum attacks when their input script is revealed. An address is no longer safe against long-exposure quantum attacks after funds from it have been spent.\n+\n+It should be noted that Taproot outputs are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If the parent private key of an extended public key (xpub) is recovered by a CRQC, the attacker also recovers\n+the entire extended private key, whether it uses hardened or unhardened derivation.\n+\n+==== Long Exposure and Short Exposure Quantum Attacks ====\n+\n+A Long Exposure Quantum Attack is an attack in which the public key has been exposed on the blockchain for an extended\n+period of time, giving an attacker ample opportunity to break the cryptography. This affects:\n+\n+* P2PK outputs (Satoshi's coins, CPU miners, starts with 04)\n+* Reused addresses (any type, except P2QRH)\n+* Taproot addresses (starts with bc1p)\n+* Extended public keys, commonly known as \"xpubs\"\n+* Wallet descriptors\n+\n+A Short Exposure Quantum Attack is an attack that must be executed quickly while a transaction is still in the mempool,\n+before it is mined into a block. This affects:\n+\n+* Any transaction in the mempool (except for P2QRH)\n+\n+Short-exposure attacks require much larger, more expensive CRQCs since they must be executed within the short window\n+before a transaction is mined. Long-exposure attacks can be executed over a longer timeframe since the public key remains\n+exposed on the blockchain indefinitely.\n+\n+Coinbase outputs to P2PK keys go as far as block 200,000, so there are, at the time of writing, 1,723,848 coins that\n+are vulnerable from the first epoch in P2PK outputs alone. The majority of these have a block reward of 50 coins each,\n+and there are roughly 34,000 distinct P2PK scripts that are vulnerable. These coins can be considered\n+\"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered\n+cryptoeconomically incentive incompatible to capture until all of these are mined, and these addresses serve to provide\n+time to transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Independently, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although the main threat posed by CRQCs is to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash\n+algorithms. In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]\n+to gain a quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful\n+CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on\n+HASH160 <ref name=\"hash160\">Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref>\n+using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses. This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over) of the public key to reduce the size of new outputs and\n+also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic\n+commitment to a public key in the style of a\n+[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Witness_program BIP-141 witness program].\n+Because it goes into the scriptPubKey, it does not receive a witness or attestation discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 20x larger than Schnorr signatures.\n+FALCON has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. This means, to maintain present transaction throughput, an\n+increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit\n+BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a PQC signature is not\n+known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these three cryptosystems: SPHINCS+, CRYSTALS-Dilithium, and FALCON have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures.\n+\n+The reason multiple cryptosystems are included is in the interest of supporting hybrid cryptography, especially for\n+high value outputs, such as cold wallets used by exchanges. To improve the viability of the activation client, and\n+adoption by wallets and libraries, a library akin to libsecp256k1 will be developed to support the new PQC\n+cryptosystems, called libbitcoinpqc.\n+\n+In the distant future, following the implementation of the P2QRH output type in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. A distinction is made between cryptography that's merely resistant\n+to quantum attack, and cryptography that's secured by specialized quantum hardware. P2QRH is resistant to quantum\n+attack, while P2QS is quantum secure. These will require specialized quantum hardware for signing, while still\n+[https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means].\n+Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending. At a minimum,\n+there should be two public keys in a P2QRH output: one key that makes use of classical cryptography, and one that makes use\n+of a PQC algorithm chosen within the wallet.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the merkle root of a tree of public key hashes, as defined in the\n+Hash Computation section below.\n+\n+=== Output Mechanics ===\n+\n+To prevent storage of arbitrary data using P2QRH (QuBit) outputs,\n+the witness stack for inputs spending SegWit v3 outputs is limited to the fixed-size signatures necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte. Consequently, the correct\n+signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the\n+attestation stack. Multiple signatures can be included in order to support multisig applications, and also for spending\n+multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+==== Hash Computation ====\n+\n+If there is only a single public key, the hash is computed as the HASH256 of the public key, as if it were a\n+merkle root.\n+\n+In order to support multiple keys, as in the context of multisig or singlesig hybrid cryptography, the hash is\n+computed as a merkle tree of multiple public key hashes:\n+\n+1. For each public key, compute its HASH256\n+2. Pair the hashes and compute HASH256 of their concatenation\n+3. Continue pairing and hashing until reaching a single root hash\n+4. The final hash is the merkle root\n+\n+For example with 4 public keys:\n+\n+  h1 = HASH256(pubkey1)\n+  h2 = HASH256(pubkey2)\n+  h3 = HASH256(pubkey3)\n+  h4 = HASH256(pubkey4)\n+\n+  h12 = HASH256(h1 <nowiki>||</nowiki> h2)\n+  h34 = HASH256(h3 <nowiki>||</nowiki> h4)\n+\n+  root = HASH256(h12 <nowiki>||</nowiki> h34)\n+\n+When spending, if a public key hash is provided in the attestation with an empty signature, that hash will be used\n+directly in the merkle tree computation rather than hashing the full public key. This allows excluding unused public\n+keys from the transaction while still proving they were part of the original commitment.\n+\n+This merkle tree construction creates an efficient cryptographic commitment to multiple public keys while enabling\n+selective disclosure.\n+\n+This allows for inclusion of a [https://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki BIP-114] Taproot\n+Merkelized Alternative Script Tree (MAST) merkle root in the attestation, which makes P2QRH a quantum-resistant\n+version of Taproot transactions.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, a new transaction serialization format is introduced to include an attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>:\n+\n+** <code>0x02</code> (indicates the presence of attestation data only)\n+** <code>0x03</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Transaction ID ===\n+\n+The transaction ID is computed as the HASH256 of the serialized transaction, including the attestation and witness\n+(if a witness is present). When decoded, this is called the qtxid, which will differ from the txid and wtxid if an\n+attestation is present.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys ([https://learnmeabitcoin.com/technical/general/compact-size/ compact size]).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: compact size length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (compact size).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: compact size length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported PQC algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+If a new algorithm is added, and one of the byte sizes overlaps, then an additional byte should be prepended to the\n+new algorithm's public key length that indicates the specific algorithm used.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.",
      "path": "bip-0360.mediawiki",
      "position": 423,
      "original_position": 398,
      "commit_id": "5a1459bb179acc259db41fc6d7965f830f22e147",
      "original_commit_id": "8c0f7982932e180a32539120445a629077072b40",
      "in_reply_to_id": 1963707362,
      "user": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@cryptoquick I don't think it addresses my point. My overall point is that the script validation section should have a clear algorithmic specification.\r\n\r\nMoreover, the script validation section clearly says \r\n\r\n> 2. The attestation must include:\r\n> The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <hash> in the `scriptpubkey`\r\n\r\nThis means, if read literally, that `<hash> = H(H(pk1), ..., H(pkn))`. There's no mention of the Merkle tree computation.\r\n\r\nAlso, I don't understand how the paragraph you quote would permit a regular Merkle proof. It clearly says \"a public key hash is provided in the attestation\", which, in my example, would be A, B, C and D, but not H(A, B) (note that in the example, A, B, C, and D are public key hashes). H(A, B) is not a public key hash; it can be referred to as an \"inner node\" for example.",
      "created_at": "2025-02-25T20:35:28Z",
      "updated_at": "2025-02-25T20:35:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1970506078",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1970506078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": 420,
      "original_start_line": 395,
      "start_side": "RIGHT",
      "line": 423,
      "original_line": 398,
      "side": "RIGHT"
    }
  ]
}