{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1483",
    "id": 1473076467,
    "node_id": "PR_kwDOAN28mc5XzVzz",
    "html_url": "https://github.com/bitcoin/bips/pull/1483",
    "diff_url": "https://github.com/bitcoin/bips/pull/1483.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1483.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1483/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/9f4624e6d11577c403c3b6d003d99be9f124b372",
    "number": 1483,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "BIP 77: Payjoin Version 2: Serverless Payjoin",
    "user": {
      "login": "DanGould",
      "id": 8525467,
      "node_id": "MDQ6VXNlcjg1MjU0Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DanGould",
      "html_url": "https://github.com/DanGould",
      "followers_url": "https://api.github.com/users/DanGould/followers",
      "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
      "organizations_url": "https://api.github.com/users/DanGould/orgs",
      "repos_url": "https://api.github.com/users/DanGould/repos",
      "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/DanGould/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This document proposes a backwards-compatible second version of the payjoin protocol described in [BIP 78](bip-0078.mediawiki), allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party relay and streaming clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. It was originally proposed to the mailing list here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-January/021364.html\r\n\r\nThe protocol has received many rounds of review and an earlier version of this proposal has also been sent to the mailing list: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-August/021868.html\r\n\r\nFeedback from that list post has been incorporated into this draft.\r\n\r\nProposing this as an Standards Track BIP to ensure wallets across the ecosystem can come to rough consensus on a single serverless payjoin standard and correctly implement it.\r\n\r\nA few decisions have yet to reach rough consensus:\r\n\r\n- How should the receiver pubkeys be encoded in the BIP 21 URI? Both base64uri and [Blockchain Commons UR](https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md) have been proposed, with the former having more available libraries and the latter better suited for QR encoding.\r\n\r\nThe bip does contain some reference implementations based on earlier versions of this spec, but they must evolve based on the decisions we come to here.",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2023-08-12T21:10:05Z",
    "updated_at": "2024-05-03T03:14:38Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merge_commit_sha": "0d7ada8bb1910b27b34a9cf14ac53a9efdd30349",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "DanGould:pjv2",
      "ref": "pjv2",
      "sha": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 477538160,
        "node_id": "R_kgDOHHancA",
        "name": "bips",
        "full_name": "DanGould/bips",
        "owner": {
          "login": "DanGould",
          "id": 8525467,
          "node_id": "MDQ6VXNlcjg1MjU0Njc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/DanGould",
          "html_url": "https://github.com/DanGould",
          "followers_url": "https://api.github.com/users/DanGould/followers",
          "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
          "organizations_url": "https://api.github.com/users/DanGould/orgs",
          "repos_url": "https://api.github.com/users/DanGould/repos",
          "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/DanGould/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/DanGould/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/DanGould/bips",
        "archive_url": "https://api.github.com/repos/DanGould/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/DanGould/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/DanGould/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/DanGould/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/DanGould/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/DanGould/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/DanGould/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/DanGould/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/DanGould/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/DanGould/bips/contributors",
        "deployments_url": "https://api.github.com/repos/DanGould/bips/deployments",
        "downloads_url": "https://api.github.com/repos/DanGould/bips/downloads",
        "events_url": "https://api.github.com/repos/DanGould/bips/events",
        "forks_url": "https://api.github.com/repos/DanGould/bips/forks",
        "git_commits_url": "https://api.github.com/repos/DanGould/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/DanGould/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/DanGould/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/DanGould/bips.git",
        "issue_comment_url": "https://api.github.com/repos/DanGould/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/DanGould/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/DanGould/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/DanGould/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/DanGould/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/DanGould/bips/languages",
        "merges_url": "https://api.github.com/repos/DanGould/bips/merges",
        "milestones_url": "https://api.github.com/repos/DanGould/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/DanGould/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/DanGould/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/DanGould/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:DanGould/bips.git",
        "stargazers_url": "https://api.github.com/repos/DanGould/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/DanGould/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/DanGould/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/DanGould/bips/subscription",
        "tags_url": "https://api.github.com/repos/DanGould/bips/tags",
        "teams_url": "https://api.github.com/repos/DanGould/bips/teams",
        "trees_url": "https://api.github.com/repos/DanGould/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/DanGould/bips.git",
        "hooks_url": "https://api.github.com/repos/DanGould/bips/hooks",
        "svn_url": "https://github.com/DanGould/bips",
        "homepage": "",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 14146,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-03T03:13:16Z",
        "created_at": "2022-04-04T03:35:06Z",
        "updated_at": "2022-04-03T20:34:01Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "24a15a6ae37b20d5d9c6fed9dc41d3a63d007ad2",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5238,
        "stargazers_count": 8961,
        "watchers_count": 8961,
        "size": 14970,
        "default_branch": "master",
        "open_issues_count": 68,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-03T03:13:18Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2024-05-02T21:00:33Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
      }
    },
    "author_association": "NONE",
    "draft": true,
    "additions": 243,
    "deletions": 0,
    "changed_files": 2,
    "commits": 14,
    "review_comments": 17,
    "comments": 3
  },
  "events": [
    {
      "event": "subscribed",
      "id": 10079823582,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAAJYzebe",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10079823582",
      "actor": {
        "login": "ubbabeck",
        "id": 36157890,
        "node_id": "MDQ6VXNlcjM2MTU3ODkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/36157890?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ubbabeck",
        "html_url": "https://github.com/ubbabeck",
        "followers_url": "https://api.github.com/users/ubbabeck/followers",
        "following_url": "https://api.github.com/users/ubbabeck/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ubbabeck/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ubbabeck/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ubbabeck/subscriptions",
        "organizations_url": "https://api.github.com/users/ubbabeck/orgs",
        "repos_url": "https://api.github.com/users/ubbabeck/repos",
        "events_url": "https://api.github.com/users/ubbabeck/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ubbabeck/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-13T12:40:36Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-19T21:06:44Z",
      "updated_at": "2023-08-19T21:06:44Z",
      "source": {
        "issue": {
          "id": 1857874561,
          "node_id": "PR_kwDOHm_Cb85YTzqU",
          "url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/101",
          "repository_url": "https://api.github.com/repos/payjoin/rust-payjoin",
          "labels_url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/101/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/101/comments",
          "events_url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/101/events",
          "html_url": "https://github.com/payjoin/rust-payjoin/pull/101",
          "number": 101,
          "state": "closed",
          "state_reason": null,
          "title": "Implement Serverless Payjoin BIP",
          "body": "The latest spec: https://github.com/bitcoin/bips/pull/1483\r\n\r\nOngoing design discussion: https://delvingbitcoin.org/t/serverless-payjoin-protocol-design/96\r\n\r\n- [x] Communicate payjoin asynchronously via HTTP Polling(single buffer)\r\n- [x] Multiple Buffers, BIP21 identification & allocation\r\n- [x] Base64Url (☐ or Blockchain Commons UR) encoding in BIP21\r\n- [x] e2ee + authentication\r\n- [x] Message Padding\r\n- [x] OHTTP (☐ with 🆕 draft standard secp256k1 HPKE)\r\n\r\n## Refactors for better production quality\r\n\r\n- [x] Simplify message protocol\r\n- [x] Make message AEAD part of message packing in send/receive APIs\r\n- [x] Make OHTTP enc/decapsulation part of send/receive APIs\r\n- [x] Handle Errors\r\n- [x] Enable backwards compatibility (☐ pass v1 params, ☐ pjos by default))\r\n- [x] implement example session management\r\n- [ ] Prefer HPKE to own-rolled cryptosystem\r\n- [ ] Prefer Redis over Postgres since we only need key/value store, not relations\r\n- [ ] Use PSBTv2\r\n- [x] Use released OHTTP lib vs one with ergonomic changes\r\n- ~[ ] Remove workspace (used to simplify testing & features)~\r\n- [ ] Use cryptographic hash fn to mark subdirectory instead of concatenating key (which has a header)\r\n\r\n## Prior Attempts:\r\n\r\n- Noise NNpsk0 cryptosystem: https://github.com/payjoin/rust-payjoin/pull/21\r\n- Backwards compatible demo: https://github.com/payjoin/rust-payjoin/pull/78\r\n- WebSockets w/ custom crypto ~Noise NN/HPKI: https://github.com/dangould/rust-payjoin/tree/serverless-payjoin-sockets\r\n- WebTransport w/ custom crypto ~Noise NN/HPKI: https://github.com/dangould/rust-payjoin/tree/serverless-payjoin-webtransport\r\n\r\n",
          "user": {
            "login": "DanGould",
            "id": 8525467,
            "node_id": "MDQ6VXNlcjg1MjU0Njc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/DanGould",
            "html_url": "https://github.com/DanGould",
            "followers_url": "https://api.github.com/users/DanGould/followers",
            "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
            "organizations_url": "https://api.github.com/users/DanGould/orgs",
            "repos_url": "https://api.github.com/users/DanGould/repos",
            "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/DanGould/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 4297805329,
              "node_id": "LA_kwDOHm_Cb88AAAABACtOEQ",
              "url": "https://api.github.com/repos/payjoin/rust-payjoin/labels/enhancement",
              "name": "enhancement",
              "description": "New feature or request",
              "color": "a2eeef",
              "default": true
            },
            {
              "id": 5473028604,
              "node_id": "LA_kwDOHm_Cb88AAAABRjfJ_A",
              "url": "https://api.github.com/repos/payjoin/rust-payjoin/labels/payjoin-cli",
              "name": "payjoin-cli",
              "description": "",
              "color": "A60063",
              "default": false
            },
            {
              "id": 5552889451,
              "node_id": "LA_kwDOHm_Cb88AAAABSvpeaw",
              "url": "https://api.github.com/repos/payjoin/rust-payjoin/labels/receive",
              "name": "receive",
              "description": "receiving payjoin",
              "color": "5694DE",
              "default": false
            },
            {
              "id": 5552890092,
              "node_id": "LA_kwDOHm_Cb88AAAABSvpg7A",
              "url": "https://api.github.com/repos/payjoin/rust-payjoin/labels/send",
              "name": "send",
              "description": "sending payjoin",
              "color": "971426",
              "default": false
            },
            {
              "id": 5552891045,
              "node_id": "LA_kwDOHm_Cb88AAAABSvpkpQ",
              "url": "https://api.github.com/repos/payjoin/rust-payjoin/labels/relay",
              "name": "relay",
              "description": "payjoin networking over a third-party relay",
              "color": "9C2FF1",
              "default": false
            },
            {
              "id": 5706987892,
              "node_id": "LA_kwDOHm_Cb88AAAABVCm5dA",
              "url": "https://api.github.com/repos/payjoin/rust-payjoin/labels/api",
              "name": "api",
              "description": "",
              "color": "4CEF5E",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/payjoin/rust-payjoin/pulls/101",
            "html_url": "https://github.com/payjoin/rust-payjoin/pull/101",
            "diff_url": "https://github.com/payjoin/rust-payjoin/pull/101.diff",
            "patch_url": "https://github.com/payjoin/rust-payjoin/pull/101.patch"
          },
          "closed_at": "2023-12-11T15:50:22Z",
          "created_at": "2023-08-19T21:06:44Z",
          "updated_at": "2023-12-11T16:12:22Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11242576509,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAKeHBp9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11242576509",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T02:23:16Z"
    },
    {
      "event": "ready_for_review",
      "id": 11242607479,
      "node_id": "RFRE_lADOAN28mc5uKfAvzwAAAAKeHJN3",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11242607479",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T02:30:04Z"
    },
    {
      "event": "labeled",
      "id": 11340766832,
      "node_id": "LE_lADOAN28mc5uKfAvzwAAAAKj9l5w",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11340766832",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-26T19:03:19Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 1869727203,
      "node_id": "IC_kwDOAN28mc5vccXj",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1869727203",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-26T19:14:47Z",
      "updated_at": "2023-12-26T19:14:47Z",
      "author_association": "MEMBER",
      "body": "Let's call this BIP 77",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-1869727203",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "renamed",
      "id": 11340807520,
      "node_id": "RTE_lADOAN28mc5uKfAvzwAAAAKj9v1g",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11340807520",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-26T19:16:05Z",
      "rename": {
        "from": "BIP for Payjoin Version 2: Serverless Payjoin",
        "to": "BIP 77: Payjoin Version 2: Serverless Payjoin"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "kristapsk",
        "id": 4500994,
        "node_id": "MDQ6VXNlcjQ1MDA5OTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4500994?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kristapsk",
        "html_url": "https://github.com/kristapsk",
        "followers_url": "https://api.github.com/users/kristapsk/followers",
        "following_url": "https://api.github.com/users/kristapsk/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kristapsk/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kristapsk/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kristapsk/subscriptions",
        "organizations_url": "https://api.github.com/users/kristapsk/orgs",
        "repos_url": "https://api.github.com/users/kristapsk/repos",
        "events_url": "https://api.github.com/users/kristapsk/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kristapsk/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-27T17:16:09Z",
      "updated_at": "2023-12-27T17:16:09Z",
      "source": {
        "issue": {
          "id": 2057607741,
          "node_id": "I_kwDOEEET9c56pJo9",
          "url": "https://api.github.com/repos/bitcoin-core/gui/issues/784",
          "repository_url": "https://api.github.com/repos/bitcoin-core/gui",
          "labels_url": "https://api.github.com/repos/bitcoin-core/gui/issues/784/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin-core/gui/issues/784/comments",
          "events_url": "https://api.github.com/repos/bitcoin-core/gui/issues/784/events",
          "html_url": "https://github.com/bitcoin-core/gui/issues/784",
          "number": 784,
          "state": "open",
          "state_reason": null,
          "title": "\"Open bitcoin URI\" dialog could give more feedback on what's wrong with BIP21 URI",
          "body": "### Please describe the feature you'd like to see added.\r\n\r\nCurrently, when trying to open URI, if it's invalid, clicking \"OK\" will just colour it red, instead of giving any feedback, what's exactly wrong with URI.\r\n\r\n![image](https://github.com/bitcoin-core/gui/assets/4500994/e4bed178-9fc2-4436-affe-7cc2a5695f7c)\r\n\r\nIn my test I added unknown required paramter `req-test=1`. Feedback on that would be useful for user, for example, [BIP77 Payjoin v2 draft](https://github.com/bitcoin/bips/pull/1483) adds `req-pj` parameter, where receiver specifies that it require sender to do payjoin instead of simple send, but Bitcoin Core GUI doesn't know how to handle payjoins currently.\r\n\r\n### Is your feature related to a problem, if so please describe it.\r\n\r\n_No response_\r\n\r\n### Describe the solution you'd like\r\n\r\n_No response_\r\n\r\n### Describe any alternatives you've considered\r\n\r\n_No response_\r\n\r\n### Please leave any additional context\r\n\r\n_No response_",
          "user": {
            "login": "kristapsk",
            "id": 4500994,
            "node_id": "MDQ6VXNlcjQ1MDA5OTQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4500994?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kristapsk",
            "html_url": "https://github.com/kristapsk",
            "followers_url": "https://api.github.com/users/kristapsk/followers",
            "following_url": "https://api.github.com/users/kristapsk/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/kristapsk/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/kristapsk/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/kristapsk/subscriptions",
            "organizations_url": "https://api.github.com/users/kristapsk/orgs",
            "repos_url": "https://api.github.com/users/kristapsk/repos",
            "events_url": "https://api.github.com/users/kristapsk/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/kristapsk/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 2147693884,
              "node_id": "MDU6TGFiZWwyMTQ3NjkzODg0",
              "url": "https://api.github.com/repos/bitcoin-core/gui/labels/Feature",
              "name": "Feature",
              "description": "",
              "color": "8fe567",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 0,
          "created_at": "2023-12-27T17:16:08Z",
          "updated_at": "2023-12-27T17:21:40Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "kristapsk",
        "id": 4500994,
        "node_id": "MDQ6VXNlcjQ1MDA5OTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4500994?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kristapsk",
        "html_url": "https://github.com/kristapsk",
        "followers_url": "https://api.github.com/users/kristapsk/followers",
        "following_url": "https://api.github.com/users/kristapsk/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kristapsk/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kristapsk/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kristapsk/subscriptions",
        "organizations_url": "https://api.github.com/users/kristapsk/orgs",
        "repos_url": "https://api.github.com/users/kristapsk/repos",
        "events_url": "https://api.github.com/users/kristapsk/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kristapsk/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-27T20:44:11Z",
      "updated_at": "2023-12-27T20:44:11Z",
      "source": {
        "issue": {
          "id": 2057760467,
          "node_id": "I_kwDOAFB9Ds56pu7T",
          "url": "https://api.github.com/repos/spesmilo/electrum/issues/8781",
          "repository_url": "https://api.github.com/repos/spesmilo/electrum",
          "labels_url": "https://api.github.com/repos/spesmilo/electrum/issues/8781/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/spesmilo/electrum/issues/8781/comments",
          "events_url": "https://api.github.com/repos/spesmilo/electrum/issues/8781/events",
          "html_url": "https://github.com/spesmilo/electrum/issues/8781",
          "number": 8781,
          "state": "closed",
          "state_reason": "completed",
          "title": "Electrum doesn't consider BIP21 URI invalid when it contains unknown required parameters",
          "body": "[BIP21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki) says:\r\n\r\n> Variables which are prefixed with a req- are considered required. If a client does not implement any variables which are prefixed with req-, it MUST consider the entire URI invalid. Any other variables which are not implemented, but which are not prefixed with a req-, can be safely ignored.\r\n\r\nElectrum seems to be ignoring that. With test URI `bitcoin:TB1QXJ6KVTE6URY2MX695METFTFT7LR5HYK4M3VT5F?amount=0.00100000&label=test&req-test=1` instead of giving error to the user (note `req-test=1` parameter), it is parsed successfully.\r\n\r\n![image](https://github.com/spesmilo/electrum/assets/4500994/84ac859d-1d13-4ab1-8c52-e52e0b4f8753)\r\n\r\nIn comparsion - Bitcoin Core GUI, Wasabi Wallet, JoinMarket and others will give error.\r\n\r\nCurrent [BIP77 Payjoin v2 draft](https://github.com/bitcoin/bips/pull/1483) specifies new parameter `req-pj` where receiver signals that he is ok receiving only payjoins, not simple sends. Electrum would silently ignore that.",
          "user": {
            "login": "kristapsk",
            "id": 4500994,
            "node_id": "MDQ6VXNlcjQ1MDA5OTQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4500994?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kristapsk",
            "html_url": "https://github.com/kristapsk",
            "followers_url": "https://api.github.com/users/kristapsk/followers",
            "following_url": "https://api.github.com/users/kristapsk/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/kristapsk/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/kristapsk/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/kristapsk/subscriptions",
            "organizations_url": "https://api.github.com/users/kristapsk/orgs",
            "repos_url": "https://api.github.com/users/kristapsk/repos",
            "events_url": "https://api.github.com/users/kristapsk/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/kristapsk/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 10740358,
              "node_id": "MDU6TGFiZWwxMDc0MDM1OA==",
              "url": "https://api.github.com/repos/spesmilo/electrum/labels/bug%20%F0%9F%90%9E",
              "name": "bug 🐞",
              "description": "",
              "color": "b60205",
              "default": false
            },
            {
              "id": 1088049067,
              "node_id": "MDU6TGFiZWwxMDg4MDQ5MDY3",
              "url": "https://api.github.com/repos/spesmilo/electrum/labels/topic-invoice-payreq",
              "name": "topic-invoice-payreq",
              "description": "invoices and payment requests",
              "color": "cca32a",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "NONE",
          "milestone": {
            "url": "https://api.github.com/repos/spesmilo/electrum/milestones/40",
            "html_url": "https://github.com/spesmilo/electrum/milestone/40",
            "labels_url": "https://api.github.com/repos/spesmilo/electrum/milestones/40/labels",
            "id": 9303002,
            "node_id": "MI_kwDOAFB9Ds4AjfPa",
            "number": 40,
            "state": "closed",
            "title": "4.5.0",
            "description": "",
            "creator": {
              "login": "SomberNight",
              "id": 29142493,
              "node_id": "MDQ6VXNlcjI5MTQyNDkz",
              "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/SomberNight",
              "html_url": "https://github.com/SomberNight",
              "followers_url": "https://api.github.com/users/SomberNight/followers",
              "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
              "organizations_url": "https://api.github.com/users/SomberNight/orgs",
              "repos_url": "https://api.github.com/users/SomberNight/repos",
              "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/SomberNight/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 38,
            "created_at": "2023-04-19T14:35:29Z",
            "updated_at": "2024-02-04T07:07:45Z",
            "closed_at": "2024-01-11T17:36:29Z"
          },
          "locked": false,
          "comments": 1,
          "closed_at": "2024-01-04T16:10:56Z",
          "created_at": "2023-12-27T20:44:10Z",
          "updated_at": "2024-01-04T16:11:11Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-13T22:26:04Z",
      "updated_at": "2024-01-13T22:26:04Z",
      "source": {
        "issue": {
          "id": 2069236104,
          "node_id": "PR_kwDOIc-zc85jaRpM",
          "url": "https://api.github.com/repos/GaloyMoney/bria/issues/445",
          "repository_url": "https://api.github.com/repos/GaloyMoney/bria",
          "labels_url": "https://api.github.com/repos/GaloyMoney/bria/issues/445/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/GaloyMoney/bria/issues/445/comments",
          "events_url": "https://api.github.com/repos/GaloyMoney/bria/issues/445/events",
          "html_url": "https://github.com/GaloyMoney/bria/pull/445",
          "number": 445,
          "state": "open",
          "state_reason": null,
          "title": "feat: receive payjoin",
          "body": "This is my hacking around trying to copy `admin` mod into a `payjoin` server that could trigger payouts when it senses a payjoin incoming. It does not build yet.\r\n\r\nI'm going to have to link Bria & Payjoin services because payjoin needs utxos and access to a wallet. I think it makes sense for `bria` to be a dependency of the `payjoin` service that hosts the endpoint rather than vice-versa and I'll be digging into it to find out.\r\n\r\nTotally possible I'm going down the wrong path, but I figure I've got to start somewhere to get a server running based on our conversation in #266",
          "user": {
            "login": "DanGould",
            "id": 8525467,
            "node_id": "MDQ6VXNlcjg1MjU0Njc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/DanGould",
            "html_url": "https://github.com/DanGould",
            "followers_url": "https://api.github.com/users/DanGould/followers",
            "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
            "organizations_url": "https://api.github.com/users/DanGould/orgs",
            "repos_url": "https://api.github.com/users/DanGould/repos",
            "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/DanGould/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 8,
          "pull_request": {
            "url": "https://api.github.com/repos/GaloyMoney/bria/pulls/445",
            "html_url": "https://github.com/GaloyMoney/bria/pull/445",
            "diff_url": "https://github.com/GaloyMoney/bria/pull/445.diff",
            "patch_url": "https://github.com/GaloyMoney/bria/pull/445.patch"
          },
          "created_at": "2024-01-07T18:18:59Z",
          "updated_at": "2024-04-03T00:23:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-15T18:31:58Z",
      "updated_at": "2024-01-15T18:31:58Z",
      "source": {
        "issue": {
          "id": 1966712813,
          "node_id": "I_kwDOH4val851Oaft",
          "url": "https://api.github.com/repos/lightningdevkit/ldk-node/issues/177",
          "repository_url": "https://api.github.com/repos/lightningdevkit/ldk-node",
          "labels_url": "https://api.github.com/repos/lightningdevkit/ldk-node/issues/177/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/lightningdevkit/ldk-node/issues/177/comments",
          "events_url": "https://api.github.com/repos/lightningdevkit/ldk-node/issues/177/events",
          "html_url": "https://github.com/lightningdevkit/ldk-node/issues/177",
          "number": 177,
          "state": "open",
          "state_reason": null,
          "title": "Explore integration of Payjoin/PDK",
          "body": "There is an opportunity to use Payjoin to make deposits into LDK Node use 1 txn instead of 2 when an on-chain txn funds a LN wallet/channel. Mutiny is doing this. We should explore it on LDK Node (probably medium priority behind LSP client, VSS, Electrum support).\r\n",
          "user": {
            "login": "moneyball",
            "id": 326147,
            "node_id": "MDQ6VXNlcjMyNjE0Nw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/326147?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/moneyball",
            "html_url": "https://github.com/moneyball",
            "followers_url": "https://api.github.com/users/moneyball/followers",
            "following_url": "https://api.github.com/users/moneyball/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/moneyball/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/moneyball/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/moneyball/subscriptions",
            "organizations_url": "https://api.github.com/users/moneyball/orgs",
            "repos_url": "https://api.github.com/users/moneyball/repos",
            "events_url": "https://api.github.com/users/moneyball/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/moneyball/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "NONE",
          "locked": false,
          "comments": 6,
          "created_at": "2023-10-28T19:23:26Z",
          "updated_at": "2024-01-18T02:12:34Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-15T18:37:21Z",
      "updated_at": "2024-01-15T18:37:21Z",
      "source": {
        "issue": {
          "id": 629577888,
          "node_id": "MDU6SXNzdWU2Mjk1Nzc4ODg=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19148",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19148/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19148/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19148/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/19148",
          "number": 19148,
          "state": "open",
          "state_reason": null,
          "title": "Implement PayJoin / Pay-to-EndPoint",
          "body": "PayJoin (also called pay-to-end-point or P2EP) is a special type of CoinJoin between two parties where one party pays the other. This coinjoin type has different (probably better) privacy properties. The transaction then doesn't have the distinctive multiple outputs with the same value, and so is not obviously visible as an equal-output CoinJoin. \r\n\r\nAn overview of PayJoin with additional information and links can be found here https://en.bitcoin.it/wiki/PayJoin\r\n\r\nImplementing PayJoin would potentially need OpenSSL to communicate with the PayJoin server (unless I am misunderstanding how PayJoin works) as such, implementing this would have similar objections to BIP 70.\r\n\r\nLooking forward to hearing thoughts.",
          "user": {
            "login": "PastaPastaPasta",
            "id": 6443210,
            "node_id": "MDQ6VXNlcjY0NDMyMTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/PastaPastaPasta",
            "html_url": "https://github.com/PastaPastaPasta",
            "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
            "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
            "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
            "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
            "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 9,
          "created_at": "2020-06-02T23:23:20Z",
          "updated_at": "2024-01-16T13:07:30Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-28T16:07:22Z",
      "updated_at": "2024-02-28T16:07:22Z",
      "source": {
        "issue": {
          "id": 2147347896,
          "node_id": "PR_kwDOH4val85njika",
          "url": "https://api.github.com/repos/lightningdevkit/ldk-node/issues/257",
          "repository_url": "https://api.github.com/repos/lightningdevkit/ldk-node",
          "labels_url": "https://api.github.com/repos/lightningdevkit/ldk-node/issues/257/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/lightningdevkit/ldk-node/issues/257/comments",
          "events_url": "https://api.github.com/repos/lightningdevkit/ldk-node/issues/257/events",
          "html_url": "https://github.com/lightningdevkit/ldk-node/pull/257",
          "number": 257,
          "state": "open",
          "state_reason": null,
          "title": "Payjoin integration",
          "body": "**April 18 Update:**\r\n\r\n This pull request adds two new features:\r\n 1) Allowing the node to accept payjoin transactions to its bitcoin wallet.\r\n 2) Allowing the node to open a channel from funds received in a  payjoin transaction, saving the user an additional on-chain transaction.\r\n\r\n* The first 3 commits are about adding the new `lightning_payjoin` crate and will be moved to a different repo once the code is approved. \r\n\r\n* Added new crate `lightning_payjoin` responsible for gluing together  `ldk-node` and `rust-payjoin` . The library exports a `Receiver` trait and a `LightningPayjoin` struct which gives the ability to handle payjoin transactions.\r\nThe main code is basically living in this crate including the code for accepting normal payjoin transactions, handling lightning channel opening from payjoin transaction, validating transactions and other http stuff.\r\n\r\n* The current flow for opening a channel with payjoin transaction:\r\n  1. Node runner calls `open_payjoin_channel` function\r\n     `open_payjoin_channel` will:\r\n     1.1 Add new channel to scheduler\r\n     1.2 The channel manager will open a new channel and stop after `ChannelAccepted` msg because its part of the    `ChannelScheduler`\r\n     1.3 Function will return BIP21 for the user to pay\r\n   2. Node runner  scan BIP21 with a wallet supporting payjoin\r\n   3. Node will accept the payment on the `payjoin_server_port` its listening on\r\n   4. Look for scheduled channel from `ChannelScheduler` and change the `output_script` to the funding tx multisig\r\n   5. Call `channel_manager.funding_generation_ready`\r\n   6. Return response to payjoin sender after `FundingSigned` received from counterparty node\r\n\r\n  We could change the order so when the user calls `open_payjoin_channel` its only adding a new channel to the `ChannelScheduler` and when the payments comes in we could start the channel opening and finalize it before we return a response. It would require exposing a bit more functionality to the `PayjoinHandler` like `PeerManager` and probably the `Logger`.  there will be some duplicate code if we change it as the channel opening defined in `lib` would also be in `payjoin_handler`. I dont have a strong feeling about either.\r\n\r\n* The current implementation is following Payjoin V1 which requires the receiver to run an http server where in Payjoin V2 its possible to only have an http client. IMO its worth first supporting v1 as thats whats currently widely used by wallets and using v2 now could limit the usage of this feature. as all of the http code is setting in `lightning-payjoin` I think its a good choice for now to go with v1.\r\n\r\n-----\r\nOriginal\r\n\r\nThe main goal of this pull request is to allow users to create channel with funds outside the node.\r\n\r\nFlow that should be covered:\r\n1) Alice run Node A enabling \"payjoin\" and acting as a \"payjoin receiver\"\r\n2) Alice generates payjoin uri\r\n3) Alice receives a request for payjoin payment from Charlie\r\n4) Alice want to use the funds from the payjoin payment to open a channel with a single transaction.\r\n5) Alice negotiates channel opening with Bob(using the psbt it received in step 3)\r\n6) Alice get `FundingSigned` from Bob\r\n7) Alice send the finalized psbt to Charlie\r\n8) Charlie broadcast the tx\r\n\r\n** This PR should cover Alice part **\r\n\r\nThere are few tricky points, mainly around 6 and 7. Currently transactions are immediately  broadcasted after `FundingSigned`, that wont work with payjoin because the transaction wont be valid.\r\n\r\nThe channel opened is Outbound channel from Alice -> Bob but it will be broadcasted by Charlie, so we need to add some functionality to let Alice node know that its an Outbound channel. \r\n\r\nsome reference for payjoin integration with lnd \r\nhttps://github.com/payjoin/nolooking",
          "user": {
            "login": "jbesraa",
            "id": 21229375,
            "node_id": "MDQ6VXNlcjIxMjI5Mzc1",
            "avatar_url": "https://avatars.githubusercontent.com/u/21229375?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jbesraa",
            "html_url": "https://github.com/jbesraa",
            "followers_url": "https://api.github.com/users/jbesraa/followers",
            "following_url": "https://api.github.com/users/jbesraa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jbesraa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jbesraa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jbesraa/subscriptions",
            "organizations_url": "https://api.github.com/users/jbesraa/orgs",
            "repos_url": "https://api.github.com/users/jbesraa/repos",
            "events_url": "https://api.github.com/users/jbesraa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jbesraa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 9,
          "pull_request": {
            "url": "https://api.github.com/repos/lightningdevkit/ldk-node/pulls/257",
            "html_url": "https://github.com/lightningdevkit/ldk-node/pull/257",
            "diff_url": "https://github.com/lightningdevkit/ldk-node/pull/257.diff",
            "patch_url": "https://github.com/lightningdevkit/ldk-node/pull/257.patch"
          },
          "created_at": "2024-02-21T17:46:39Z",
          "updated_at": "2024-04-22T14:21:32Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12030454087,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAALNEilH",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12030454087",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-06T16:29:52Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-19T17:21:27Z",
      "updated_at": "2024-03-19T17:21:27Z",
      "source": {
        "issue": {
          "id": 2195549442,
          "node_id": "I_kwDOHm_Cb86C3W0C",
          "url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/216",
          "repository_url": "https://api.github.com/repos/payjoin/rust-payjoin",
          "labels_url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/216/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/216/comments",
          "events_url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/216/events",
          "html_url": "https://github.com/payjoin/rust-payjoin/issues/216",
          "number": 216,
          "state": "open",
          "state_reason": null,
          "title": "Stabilize Payjoin V2 Implementation for `payjoin-cli` Beta",
          "body": "Payjoin v2 [BIP 77 spec](https://github.com/bitcoin/bips/pull/1483) employs [RFC 9180 Hybrid Public Key Encryption](https://www.rfc-editor.org/rfc/rfc9180.html) (HPKE) for both Oblivious HTTP and end-to-end authenticated encryption between senders and receivers.\r\n\r\nThe BIP specified cryptographic dependencies are [secp256k1-based DHKEM for HPKE](https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html), [RFC 8439 ChaCha20Poly1305 AEAD](https://www.rfc-editor.org/rfc/rfc8439], and HKDF-SHA256 since their cryptographic dependencies are already utilized by bitcoin software.\r\n\r\nThe existing [`hpke` crate](https://crates.io/crates/hpke) used for OHTTP uses other cryptographic primitives. The payjoin v2 implementation in this crate uses a secp256k1 hpke implementation defined here rather than the `hpke` crate for sender-receiver AEAD.\r\n\r\nThat's because the [`ohttp`](https://github.com/martinthomson/ohttp) crate does not yet support secp256k1 DHKEM. Since payjoin is designed for bitcoin settings, using secp256k1 and especially the common [`libsecp256k1`](https://docs.rs/libsecp256k1/latest/libsecp256k1/) crate would allow us to reduce dependency burden downstream.\r\n\r\nStabilizing the protocol implementation will require 3 steps\r\n\r\n## 1. Enable Secp256k1 DHKEM and ChaCha20Poly1305 AEAD in the `hpke` crate for `ohttp`\r\n\r\nThis is being tracked by https://github.com/payjoin/rust-payjoin/issues/126\r\n\r\nThe underlying `hpke` change is https://github.com/rozbb/rust-hpke/pull/52\r\n\r\n## 2. Replace our HPKE implementation with the more standard `hpke` crate's.\r\n\r\nDeploying a standard HPKE protocol will allow the crate and implementation to be interoperable with other implementations which may crop up even if the underlying implementations of cryptographic primitives change.\r\n\r\nAnother option would be to write many tests showing that our protocol conforms with HPKE standards, but it would make more sense to combine our efforts with the better-reviewed-for-that-specific-purpose `hpke` crate.\r\n\r\n#125 Can take place in parallel to #126. \r\n\r\n## 3. Replace RustCrypto dependencies with those shared in the rust-bitcoin ecosystem, like the [`secp256k1`](https://crates.io/crates/secp256k1) libsecp256k1 bindings crate.\r\n\r\nVirtually all downstream bitcoin software uses libsecp256k1 library. It makes sense for us to try to either have that supported in the `hpke` crate or create a fork that relies on libsecp256k1. It may also make sense to use the same chacha20poly1305 rust implementation from `rust-bitcoin` or allow for a crypto provider since some operating systems now support it. Sha256 could come from [`bitcoin-hashes`](https://crates.io/crates/bitcoin_hashes). Using common dependencies allows downstream software to reduce the size  of their dependency tree for both for faster and smaller binary delivery and compile times as well as a reduced attack surface.\r\n\r\n## 4. Decide on a URI encoding for payjoin params `pj` subdirectory and `ohttp`\r\n\r\nBase64Uri encoding, which we use as of now for these parameters, uses both upper and lowercase letters. Because of this it doubles the density of QR codes representing them. We could use another encoding like UR, since both are already properly serialized secp256k1 pubkey and OhttpKey configuration data blobs. Lightning invoices use bech32, but we don't have multiple fields to serialize in that format. In any case we need to finalize the encoding. It would also be wise to confirm that the way we're issuing subdirectories at the payjoin-directory server will not result in collisions.\r\n\r\n@jbesraa",
          "user": {
            "login": "DanGould",
            "id": 8525467,
            "node_id": "MDQ6VXNlcjg1MjU0Njc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/DanGould",
            "html_url": "https://github.com/DanGould",
            "followers_url": "https://api.github.com/users/DanGould/followers",
            "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
            "organizations_url": "https://api.github.com/users/DanGould/orgs",
            "repos_url": "https://api.github.com/users/DanGould/repos",
            "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/DanGould/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 0,
          "created_at": "2024-03-19T17:21:27Z",
          "updated_at": "2024-03-27T16:07:52Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T16:41:55Z",
      "updated_at": "2024-03-20T16:41:55Z",
      "source": {
        "issue": {
          "id": 2197863254,
          "node_id": "PR_kwDOHm_Cb85qPUjK",
          "url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/220",
          "repository_url": "https://api.github.com/repos/payjoin/rust-payjoin",
          "labels_url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/220/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/220/comments",
          "events_url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/220/events",
          "html_url": "https://github.com/payjoin/rust-payjoin/pull/220",
          "number": 220,
          "state": "closed",
          "state_reason": null,
          "title": "Start `payjoin-io`",
          "body": "#211 ",
          "user": {
            "login": "jbesraa",
            "id": 21229375,
            "node_id": "MDQ6VXNlcjIxMjI5Mzc1",
            "avatar_url": "https://avatars.githubusercontent.com/u/21229375?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jbesraa",
            "html_url": "https://github.com/jbesraa",
            "followers_url": "https://api.github.com/users/jbesraa/followers",
            "following_url": "https://api.github.com/users/jbesraa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/jbesraa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/jbesraa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/jbesraa/subscriptions",
            "organizations_url": "https://api.github.com/users/jbesraa/orgs",
            "repos_url": "https://api.github.com/users/jbesraa/repos",
            "events_url": "https://api.github.com/users/jbesraa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/jbesraa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "COLLABORATOR",
          "locked": false,
          "comments": 14,
          "pull_request": {
            "url": "https://api.github.com/repos/payjoin/rust-payjoin/pulls/220",
            "html_url": "https://github.com/payjoin/rust-payjoin/pull/220",
            "diff_url": "https://github.com/payjoin/rust-payjoin/pull/220.diff",
            "patch_url": "https://github.com/payjoin/rust-payjoin/pull/220.patch"
          },
          "closed_at": "2024-04-11T23:37:33Z",
          "created_at": "2024-03-20T15:40:07Z",
          "updated_at": "2024-04-11T23:37:33Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-27T04:53:17Z",
      "updated_at": "2024-03-27T04:53:17Z",
      "source": {
        "issue": {
          "id": 2209845466,
          "node_id": "PR_kwDOHm_Cb85q4JgC",
          "url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/226",
          "repository_url": "https://api.github.com/repos/payjoin/rust-payjoin",
          "labels_url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/226/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/226/comments",
          "events_url": "https://api.github.com/repos/payjoin/rust-payjoin/issues/226/events",
          "html_url": "https://github.com/payjoin/rust-payjoin/pull/226",
          "number": 226,
          "state": "closed",
          "state_reason": null,
          "title": "Encode payjoin 2 subdirectory pubkey and `ohttp=` param in ur::bytewords",
          "body": "base64Url encoding's character set require upper lowercasing characters, doubling the density of QRs which display their data. The only reason it was used was because it was readily available in the bitcoin crate and produced a String.\r\n\r\n@ChristopherA [suggested to use the UR encoding instead](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-August/021882.html) when a BIP for payjoin v2 was initially proposed. Neither the subdirectory public key identifier nore the ohttp param are themselves URIs, but they can still take advantage of the [ur::bytewords](https://docs.rs/ur/latest/ur/bytewords/index.html) encoding [scheme](https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-012-bytewords.md) in minimal style for QR compression benefits. Now that [BIP 77](https://github.com/bitcoin/bips/pull/1483) is finalizing we should seriously consider which encoding is best for the long haul.\r\n\r\nUR's bytewords should result in smaller QR codes. I'll want to do some tests with actual QR codes but the idea is simple enough to implement thanks to @dspicher's library",
          "user": {
            "login": "DanGould",
            "id": 8525467,
            "node_id": "MDQ6VXNlcjg1MjU0Njc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/DanGould",
            "html_url": "https://github.com/DanGould",
            "followers_url": "https://api.github.com/users/DanGould/followers",
            "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
            "organizations_url": "https://api.github.com/users/DanGould/orgs",
            "repos_url": "https://api.github.com/users/DanGould/repos",
            "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/DanGould/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/payjoin/rust-payjoin/pulls/226",
            "html_url": "https://github.com/payjoin/rust-payjoin/pull/226",
            "diff_url": "https://github.com/payjoin/rust-payjoin/pull/226.diff",
            "patch_url": "https://github.com/payjoin/rust-payjoin/pull/226.patch"
          },
          "closed_at": "2024-03-28T23:24:10Z",
          "created_at": "2024-03-27T04:46:56Z",
          "updated_at": "2024-03-28T23:24:17Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-10T12:57:35Z",
      "updated_at": "2024-04-10T12:57:35Z",
      "source": {
        "issue": {
          "id": 1681662218,
          "node_id": "I_kwDOBwBYl85kPCEK",
          "url": "https://api.github.com/repos/BlueWallet/BlueWallet/issues/5483",
          "repository_url": "https://api.github.com/repos/BlueWallet/BlueWallet",
          "labels_url": "https://api.github.com/repos/BlueWallet/BlueWallet/issues/5483/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/BlueWallet/BlueWallet/issues/5483/comments",
          "events_url": "https://api.github.com/repos/BlueWallet/BlueWallet/issues/5483/events",
          "html_url": "https://github.com/BlueWallet/BlueWallet/issues/5483",
          "number": 5483,
          "state": "open",
          "state_reason": null,
          "title": "Scan payjoin bip21 from Wallets overview gives no option to payjoin",
          "body": "## Reporting a Bug in BlueWallet\r\n\r\n-  ver 6.4.1 (build 1682197699 master)\r\n-  iOS 16.4.1 (device redacted)\r\n- self test passes\r\n- Unique ID: userId:45DF301F-004D-4648-840C-8FFEFF9B7BDF\r\n\r\nWhile scanning the bip21 URI detects payjoin from within an HD SegWit wallet, if I just hit Scan from the Wallets page with the below bip21 encoded, I get no toggle to payjoin.\r\n\r\nBIP 21 URI: `bitcoin:BC1QYLH3U67J673H6Y6ALV70M0PL2YZ53TZHVXGG7U?amount=0.00001&label=sbddesign%3A%20For%20lunch%20Tuesday&message=For%20lunch%20Tuesday&lightning=LNBC10U1P3PJ257PP5YZTKWJCZ5FTL5LAXKAV23ZMZEKAW37ZK6KMV80PK4XAEV5QHTZ7QDPDWD3XGER9WD5KWM36YPRX7U3QD36KUCMGYP282ETNV3SHJCQZPGXQYZ5VQSP5USYC4LK9CHSFP53KVCNVQ456GANH60D89REYKDNGSMTJ6YW3NHVQ9QYYSSQJCEWM5CJWZ4A6RFJX77C490YCED6PEMK0UPKXHY89CMM7SCT66K8GNEANWYKZGDRWRFJE69H9U5U0W57RRCSYSAS7GADWMZXC8C6T0SPJAZUP6&pj=https://do.payjoin.org`\r\n\r\nTo reproduce, from logged in Wallets page hit Scan, scan the following QR encoded URI, select HD SegWit wallet, hit Next, and see that no payjoin toggle is available. If you try the same thing from within the HD SegWit wallet page, there will be a toggle available.\r\n\r\n![canvas](https://user-images.githubusercontent.com/8525467/234060669-84683398-1f66-4f83-9fb5-0240b4ee7336.png)\r\n",
          "user": {
            "login": "DanGould",
            "id": 8525467,
            "node_id": "MDQ6VXNlcjg1MjU0Njc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/DanGould",
            "html_url": "https://github.com/DanGould",
            "followers_url": "https://api.github.com/users/DanGould/followers",
            "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
            "organizations_url": "https://api.github.com/users/DanGould/orgs",
            "repos_url": "https://api.github.com/users/DanGould/repos",
            "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/DanGould/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignee": {
            "login": "limpbrains",
            "id": 155891,
            "node_id": "MDQ6VXNlcjE1NTg5MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/155891?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/limpbrains",
            "html_url": "https://github.com/limpbrains",
            "followers_url": "https://api.github.com/users/limpbrains/followers",
            "following_url": "https://api.github.com/users/limpbrains/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/limpbrains/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/limpbrains/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/limpbrains/subscriptions",
            "organizations_url": "https://api.github.com/users/limpbrains/orgs",
            "repos_url": "https://api.github.com/users/limpbrains/repos",
            "events_url": "https://api.github.com/users/limpbrains/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/limpbrains/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "limpbrains",
              "id": 155891,
              "node_id": "MDQ6VXNlcjE1NTg5MQ==",
              "avatar_url": "https://avatars.githubusercontent.com/u/155891?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/limpbrains",
              "html_url": "https://github.com/limpbrains",
              "followers_url": "https://api.github.com/users/limpbrains/followers",
              "following_url": "https://api.github.com/users/limpbrains/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/limpbrains/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/limpbrains/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/limpbrains/subscriptions",
              "organizations_url": "https://api.github.com/users/limpbrains/orgs",
              "repos_url": "https://api.github.com/users/limpbrains/repos",
              "events_url": "https://api.github.com/users/limpbrains/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/limpbrains/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 5,
          "created_at": "2023-04-24T16:40:42Z",
          "updated_at": "2024-04-10T13:10:56Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "commented",
      "id": 2088916537,
      "node_id": "IC_kwDOAN28mc58glY5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2088916537",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T18:50:09Z",
      "updated_at": "2024-05-01T18:50:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hi @DanGould, the first comment on this PR seems to indicate that this proposal is still WIP. Is that an accurate understanding? If this PR is not yet ready to be merged, perhaps it should be changed to \"Draft\". If I misunderstood the status of this PR, please respond below so someone may review to assess whether this is ready for merge.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2088916537",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 12673599205,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAALzZ8bl",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12673599205",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T18:50:10Z"
    },
    {
      "event": "subscribed",
      "id": 12673599217,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAALzZ8bx",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12673599217",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T18:50:10Z"
    },
    {
      "event": "reviewed",
      "id": 2036951404,
      "node_id": "PRR_kwDOAN28mc55aWls",
      "url": null,
      "actor": null,
      "commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2036951404",
      "submitted_at": "2024-05-02T22:23:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2037072195,
      "node_id": "PRR_kwDOAN28mc55a0FD",
      "url": null,
      "actor": null,
      "commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2037072195",
      "submitted_at": "2024-05-02T22:30:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "convert_to_draft",
      "id": 12691191699,
      "node_id": "CTDE_lADOAN28mc5uKfAvzwAAAAL0dDeT",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12691191699",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T02:50:35Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDVlMmYyYWFkMWMyZTNhMmMxMTE5NWRmZTI1NGI0YTllYjBkOTQyM2U",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5e2f2aad1c2e3a2c11195dfe254b4a9eb0d9423e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5e2f2aad1c2e3a2c11195dfe254b4a9eb0d9423e",
      "tree": {
        "sha": "9767b27b965cf7de03916b026075414e68566f8b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9767b27b965cf7de03916b026075414e68566f8b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9767b27b965cf7de03916b026075414e68566f8b\nparent 24a15a6ae37b20d5d9c6fed9dc41d3a63d007ad2\nauthor DanGould <d@ngould.dev> 1685832633 -0400\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nDraft payjoin v2 BIP\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWfARAP0Q5SQ5aDAttpltYieIniDrZRMcBaYM9SAR8mpS8INU9gD+IGHBm0IEHzro\ngz62ZUyaj28ckdWITm4DMF6uJ6no2wE=\n=VvhW\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/24a15a6ae37b20d5d9c6fed9dc41d3a63d007ad2",
          "sha": "24a15a6ae37b20d5d9c6fed9dc41d3a63d007ad2",
          "html_url": "https://github.com/bitcoin/bips/commit/24a15a6ae37b20d5d9c6fed9dc41d3a63d007ad2"
        }
      ],
      "message": "Draft payjoin v2 BIP",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-06-03T22:50:33Z"
      },
      "sha": "5e2f2aad1c2e3a2c11195dfe254b4a9eb0d9423e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDNkZjNmNTFiZjJlOTE0NWVkZTZjZjc1MWY0NWJkZTk1ZjA4M2JlZTk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3df3f51bf2e9145ede6cf751f45bde95f083bee9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3df3f51bf2e9145ede6cf751f45bde95f083bee9",
      "tree": {
        "sha": "9c0f5521cd881655d76e55f130fa9a5df1cfc09e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9c0f5521cd881655d76e55f130fa9a5df1cfc09e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9c0f5521cd881655d76e55f130fa9a5df1cfc09e\nparent 5e2f2aad1c2e3a2c11195dfe254b4a9eb0d9423e\nauthor DanGould <d@ngould.dev> 1691873345 -0400\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nInclude mailing list feedback\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWWfuAP9L0sZwayoE6yIfQNzBUeH1PSuBCtRPBUSzQAKre/HNcgEAhdcrV3LpVHBO\n4lMezx3uM6mEhpWiU0d2xSVAAhMCngg=\n=A9Er\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5e2f2aad1c2e3a2c11195dfe254b4a9eb0d9423e",
          "sha": "5e2f2aad1c2e3a2c11195dfe254b4a9eb0d9423e",
          "html_url": "https://github.com/bitcoin/bips/commit/5e2f2aad1c2e3a2c11195dfe254b4a9eb0d9423e"
        }
      ],
      "message": "Include mailing list feedback",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-08-12T20:49:05Z"
      },
      "sha": "3df3f51bf2e9145ede6cf751f45bde95f083bee9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDkzNmQwZTdmZDk5ZjU0ZmRhZTBjMWU3OTJiYjI1NjM0OGQzZGNiOTk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/936d0e7fd99f54fdae0c1e792bb256348d3dcb99",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/936d0e7fd99f54fdae0c1e792bb256348d3dcb99",
      "tree": {
        "sha": "60d8fe155585baf4d6915e8963a24793919b8c3a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/60d8fe155585baf4d6915e8963a24793919b8c3a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 60d8fe155585baf4d6915e8963a24793919b8c3a\nparent 3df3f51bf2e9145ede6cf751f45bde95f083bee9\nauthor DanGould <d@ngould.dev> 1698869139 -0400\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nInclude TABConf feedback\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWS50AP9S+7XBzjuaawr+EYAo9/gbKHlxDGSAqXogSmJQoNUqrwEA/O1syU5yWdxc\nwGods2dZxJIBL58kmVh8uhCAqURcrAc=\n=d2k1\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3df3f51bf2e9145ede6cf751f45bde95f083bee9",
          "sha": "3df3f51bf2e9145ede6cf751f45bde95f083bee9",
          "html_url": "https://github.com/bitcoin/bips/commit/3df3f51bf2e9145ede6cf751f45bde95f083bee9"
        }
      ],
      "message": "Include TABConf feedback",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-11-01T20:05:39Z"
      },
      "sha": "936d0e7fd99f54fdae0c1e792bb256348d3dcb99"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDQwNjlkYjUxYmEyNTg5ZmFmNzljZjczODljNjhjMWQwOTRkZDhjNjQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4069db51ba2589faf79cf7389c68c1d094dd8c64",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4069db51ba2589faf79cf7389c68c1d094dd8c64",
      "tree": {
        "sha": "da62e12eeff2a1d8b321cd97a3f05a616a24e231",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/da62e12eeff2a1d8b321cd97a3f05a616a24e231"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree da62e12eeff2a1d8b321cd97a3f05a616a24e231\nparent 936d0e7fd99f54fdae0c1e792bb256348d3dcb99\nauthor DanGould <d@ngould.dev> 1702520982 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nInclude padding\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWbduAP9i+7ki37NdEr7KFwQM2d1DzpwmtHl1XF5CTYtSi77WigD/RxmzavQXebBd\nXjnen28yNemwkeNNQnEMB+SpCG35cAc=\n=s71m\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/936d0e7fd99f54fdae0c1e792bb256348d3dcb99",
          "sha": "936d0e7fd99f54fdae0c1e792bb256348d3dcb99",
          "html_url": "https://github.com/bitcoin/bips/commit/936d0e7fd99f54fdae0c1e792bb256348d3dcb99"
        }
      ],
      "message": "Include padding",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-12-14T02:29:42Z"
      },
      "sha": "4069db51ba2589faf79cf7389c68c1d094dd8c64"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDQ1ZGFlZDRlZjFjNjRiNDgwNTNkMzIzNDI4OTZkM2JkYjEyMGUxMGQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/45daed4ef1c64b48053d32342896d3bdb120e10d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/45daed4ef1c64b48053d32342896d3bdb120e10d",
      "tree": {
        "sha": "2b002e0ae43a6c5e3b05ca54318eff4c4a2a5475",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2b002e0ae43a6c5e3b05ca54318eff4c4a2a5475"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2b002e0ae43a6c5e3b05ca54318eff4c4a2a5475\nparent 4069db51ba2589faf79cf7389c68c1d094dd8c64\nauthor DanGould <d@ngould.dev> 1702667376 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nInclude production reference implementation\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWUvOAP4tPTEZKb67kwBasUVLsFLXHCFkjzoTRTVt6VBbmGNcJQEA7Rz/OT1uLwxr\nneS/tl4RgvEqt/u1Pv5KNKflhrlrhwE=\n=mAh5\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4069db51ba2589faf79cf7389c68c1d094dd8c64",
          "sha": "4069db51ba2589faf79cf7389c68c1d094dd8c64",
          "html_url": "https://github.com/bitcoin/bips/commit/4069db51ba2589faf79cf7389c68c1d094dd8c64"
        }
      ],
      "message": "Include production reference implementation",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-12-15T19:09:36Z"
      },
      "sha": "45daed4ef1c64b48053d32342896d3bdb120e10d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI1OTNjNDU3YzliZGE1YTQ3YWQyZjkxZjk2NTg1MTc4MDU4NjY5ZTg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b593c457c9bda5a47ad2f91f96585178058669e8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b593c457c9bda5a47ad2f91f96585178058669e8",
      "tree": {
        "sha": "fc639bc4ce976119f9f12fd6257b509b8dc78d8c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/fc639bc4ce976119f9f12fd6257b509b8dc78d8c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fc639bc4ce976119f9f12fd6257b509b8dc78d8c\nparent 45daed4ef1c64b48053d32342896d3bdb120e10d\nauthor DanGould <d@ngould.dev> 1703692789 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nAdopt BIP-77 for payjoin v2\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWVKeAP9E6+kDlNsLNEKJu1Igr2WmzHVGj9QAoRcYJS0mbmAvWQD8C+l0qzbKS83c\nYP66TGOnGetgl5HQKgY2S4ljhrDCuQs=\n=Pb7P\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/45daed4ef1c64b48053d32342896d3bdb120e10d",
          "sha": "45daed4ef1c64b48053d32342896d3bdb120e10d",
          "html_url": "https://github.com/bitcoin/bips/commit/45daed4ef1c64b48053d32342896d3bdb120e10d"
        }
      ],
      "message": "Adopt BIP-77 for payjoin v2",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-12-27T15:59:49Z"
      },
      "sha": "b593c457c9bda5a47ad2f91f96585178058669e8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDZiZWNiMzRhNWUxMzQyNDZmNTM3NjUxNWMyMjFiZWE3YjY4ODZhMGQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6becb34a5e134246f5376515c221bea7b6886a0d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6becb34a5e134246f5376515c221bea7b6886a0d",
      "tree": {
        "sha": "01e8014e11919dd5bc3f4d44f6db5a5166d1333e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/01e8014e11919dd5bc3f4d44f6db5a5166d1333e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 01e8014e11919dd5bc3f4d44f6db5a5166d1333e\nparent b593c457c9bda5a47ad2f91f96585178058669e8\nauthor DanGould <d@ngould.dev> 1709740506 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nDistinguish payjoin directory from OHTTP Relay\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWSeGAP0W77mNjzdWsyqRuN9DD/6DfU0njNjNmR6Xcal6mXF1sAEA/nBhRVixSNs7\nnR4PciFC4KPEzzLQhm/sUy+IY25ZZgo=\n=Yh7m\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b593c457c9bda5a47ad2f91f96585178058669e8",
          "sha": "b593c457c9bda5a47ad2f91f96585178058669e8",
          "html_url": "https://github.com/bitcoin/bips/commit/b593c457c9bda5a47ad2f91f96585178058669e8"
        }
      ],
      "message": "Distinguish payjoin directory from OHTTP Relay",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-06T15:55:06Z"
      },
      "sha": "6becb34a5e134246f5376515c221bea7b6886a0d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDc1NGUyODdkNDYyYTA3NGRlMTY5ZTM5NDNjNjlhNmZjMTMxYTU1MDA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/754e287d462a074de169e3943c69a6fc131a5500",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/754e287d462a074de169e3943c69a6fc131a5500",
      "tree": {
        "sha": "3c4e204d33d564e4ea04a565c03960fa3eee539d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3c4e204d33d564e4ea04a565c03960fa3eee539d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3c4e204d33d564e4ea04a565c03960fa3eee539d\nparent 6becb34a5e134246f5376515c221bea7b6886a0d\nauthor DanGould <d@ngould.dev> 1709741847 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nDetail OHTTP Key Configuration mechanism\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWXRpAQDUtDF1fntGnt3/53w4bLHogwpdzBwLQ99i4Tv+SSkkWQEA6t9qS5BJFxT+\nIA1I5uXp70d4EG6EcNlPX4PeYnCajAU=\n=3TT9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6becb34a5e134246f5376515c221bea7b6886a0d",
          "sha": "6becb34a5e134246f5376515c221bea7b6886a0d",
          "html_url": "https://github.com/bitcoin/bips/commit/6becb34a5e134246f5376515c221bea7b6886a0d"
        }
      ],
      "message": "Detail OHTTP Key Configuration mechanism",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-06T16:17:27Z"
      },
      "sha": "754e287d462a074de169e3943c69a6fc131a5500"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDgwYjhiYWNmZDAyMTUyYWM3OTYxMDkwYjZjNzRiMzhhNmZkOTYyZDI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/80b8bacfd02152ac7961090b6c74b38a6fd962d2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/80b8bacfd02152ac7961090b6c74b38a6fd962d2",
      "tree": {
        "sha": "1f6e03e176ac365ce9046b28b93e2ab3c0e1e950",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1f6e03e176ac365ce9046b28b93e2ab3c0e1e950"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1f6e03e176ac365ce9046b28b93e2ab3c0e1e950\nparent 754e287d462a074de169e3943c69a6fc131a5500\nauthor DanGould <d@ngould.dev> 1709741941 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nFix punctuation\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWRp8AQDfU2yQxa3AWIjB0D4FvSN5dasUu1NIwLJxXcdvyMPF6gD/WGnmyBKnu4X8\npnBAMGHs07TnKVF/q63yUfrOF+9KDgs=\n=+JJY\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/754e287d462a074de169e3943c69a6fc131a5500",
          "sha": "754e287d462a074de169e3943c69a6fc131a5500",
          "html_url": "https://github.com/bitcoin/bips/commit/754e287d462a074de169e3943c69a6fc131a5500"
        }
      ],
      "message": "Fix punctuation",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-06T16:19:01Z"
      },
      "sha": "80b8bacfd02152ac7961090b6c74b38a6fd962d2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI1MzUzYjU5YjA3YjY5NGMyMWNhNWVmOTc3ZTQ0NTNlYTIzZDczNzU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b5353b59b07b694c21ca5ef977e4453ea23d7375",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b5353b59b07b694c21ca5ef977e4453ea23d7375",
      "tree": {
        "sha": "6b2419e881557f2d97d8b5f2e12bd2063a70c9d0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6b2419e881557f2d97d8b5f2e12bd2063a70c9d0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6b2419e881557f2d97d8b5f2e12bd2063a70c9d0\nparent 80b8bacfd02152ac7961090b6c74b38a6fd962d2\nauthor DanGould <d@ngould.dev> 1709742448 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nMake base64URL references consistent\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWTOGAP9vomdt2qzMtD1p9mcaMJgR9qhQEpUlSpW8DwRF1zRHFgEAyc+y61K7SdAp\nLT/KMKIbyaHMmyUpie90ERMvA+Cbkwo=\n=qhO7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/80b8bacfd02152ac7961090b6c74b38a6fd962d2",
          "sha": "80b8bacfd02152ac7961090b6c74b38a6fd962d2",
          "html_url": "https://github.com/bitcoin/bips/commit/80b8bacfd02152ac7961090b6c74b38a6fd962d2"
        }
      ],
      "message": "Make base64URL references consistent",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-06T16:27:28Z"
      },
      "sha": "b5353b59b07b694c21ca5ef977e4453ea23d7375"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDllOGI0ZDdlZTc1NWJiNzJhMDM4OWEzYmNlNDQ3MzFkMTMxZWNhZDE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9e8b4d7ee755bb72a0389a3bce44731d131ecad1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9e8b4d7ee755bb72a0389a3bce44731d131ecad1",
      "tree": {
        "sha": "4774d0e66fc67cd164eab3fe01f3351bdab6437e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4774d0e66fc67cd164eab3fe01f3351bdab6437e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4774d0e66fc67cd164eab3fe01f3351bdab6437e\nparent b5353b59b07b694c21ca5ef977e4453ea23d7375\nauthor DanGould <d@ngould.dev> 1709742582 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nReference standardized Secp256k1 DHKEM for HPKE\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWZPmAP9uyyeB4n/RXgfMs3HBNjAkai9LDcpUsgipdrdgyxFNYAD/SDZJEWr74qHb\nVn9zjzplLG0DAHprFQIuLZB9dF6yVg0=\n=0OCm\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b5353b59b07b694c21ca5ef977e4453ea23d7375",
          "sha": "b5353b59b07b694c21ca5ef977e4453ea23d7375",
          "html_url": "https://github.com/bitcoin/bips/commit/b5353b59b07b694c21ca5ef977e4453ea23d7375"
        }
      ],
      "message": "Reference standardized Secp256k1 DHKEM for HPKE",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-06T16:29:42Z"
      },
      "sha": "9e8b4d7ee755bb72a0389a3bce44731d131ecad1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDNjMTYyOWJiMjM2MWFhMjI5YWRiZGUzNjUyN2I3ZTFiYzU5MTM4ZGM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3c1629bb2361aa229adbde36527b7e1bc59138dc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3c1629bb2361aa229adbde36527b7e1bc59138dc",
      "tree": {
        "sha": "e35c87294c9a01f8add0eb844f4bcec57aa29e0a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e35c87294c9a01f8add0eb844f4bcec57aa29e0a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e35c87294c9a01f8add0eb844f4bcec57aa29e0a\nparent 9e8b4d7ee755bb72a0389a3bce44731d131ecad1\nauthor DanGould <d@ngould.dev> 1711511148 -0400\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nAdd Comments-URI\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWd1SAP0Q9KWir8gJcZ5Iao7PoT8IFk3GMGAo4uwgcnfkAdlmywD/bxnRWxNL0hGW\nEoYJiJwt7k4qbyZ5KBT60Sb2nTmFuQU=\n=33pI\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9e8b4d7ee755bb72a0389a3bce44731d131ecad1",
          "sha": "9e8b4d7ee755bb72a0389a3bce44731d131ecad1",
          "html_url": "https://github.com/bitcoin/bips/commit/9e8b4d7ee755bb72a0389a3bce44731d131ecad1"
        }
      ],
      "message": "Add Comments-URI",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-27T03:45:48Z"
      },
      "sha": "3c1629bb2361aa229adbde36527b7e1bc59138dc"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12691236404,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAL0dOY0",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12691236404",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T03:04:08Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGYzNWI1ZDExNWYzNzFiNDVkNDA2YWY5MDc2OTkyZDIwODVmNzcwM2Q",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f35b5d115f371b45d406af9076992d2085f7703d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f35b5d115f371b45d406af9076992d2085f7703d",
      "tree": {
        "sha": "5e505054d04e74ac142e284654bb9383b302d470",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5e505054d04e74ac142e284654bb9383b302d470"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5e505054d04e74ac142e284654bb9383b302d470\nparent 3c1629bb2361aa229adbde36527b7e1bc59138dc\nauthor DanGould <d@ngould.dev> 1714705162 -0400\ncommitter DanGould <d@ngould.dev> 1714705961 -0400\n\nfixup: Format and spell check\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRWKQAKCRA4cTNWCSIP\nWTv6AQDRkyYwD/ypz/9GZ9saDgOguCvLSe+rSkcqqYkCtgfC1gEAnrseVCBS0Hk1\nuvzy5pnVLuzXDXWZOV2egavT0fXJ6wY=\n=/VSN\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3c1629bb2361aa229adbde36527b7e1bc59138dc",
          "sha": "3c1629bb2361aa229adbde36527b7e1bc59138dc",
          "html_url": "https://github.com/bitcoin/bips/commit/3c1629bb2361aa229adbde36527b7e1bc59138dc"
        }
      ],
      "message": "fixup: Format and spell check",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:12:41Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T02:59:22Z"
      },
      "sha": "f35b5d115f371b45d406af9076992d2085f7703d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDlmNDYyNGU2ZDExNTc3YzQwM2MzYjZkMDAzZDk5YmU5ZjEyNGIzNzI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9f4624e6d11577c403c3b6d003d99be9f124b372",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9f4624e6d11577c403c3b6d003d99be9f124b372",
      "tree": {
        "sha": "28977d760b427b4199d346b4af723849b1dee19d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/28977d760b427b4199d346b4af723849b1dee19d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 28977d760b427b4199d346b4af723849b1dee19d\nparent f35b5d115f371b45d406af9076992d2085f7703d\nauthor DanGould <d@ngould.dev> 1714705684 -0400\ncommitter DanGould <d@ngould.dev> 1714705961 -0400\n\nAdd BIP 77 to README\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRWKQAKCRA4cTNWCSIP\nWZC6APkBPzxt/P7cucd9y5jPbqnYjiA5IyaBnlDx4ngT/aktnwEA4uRhwixLczIb\neLwHYsvBaMjxCW3byNiyr+mk0T3jows=\n=Ne/o\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f35b5d115f371b45d406af9076992d2085f7703d",
          "sha": "f35b5d115f371b45d406af9076992d2085f7703d",
          "html_url": "https://github.com/bitcoin/bips/commit/f35b5d115f371b45d406af9076992d2085f7703d"
        }
      ],
      "message": "Add BIP 77 to README",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:12:41Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:08:04Z"
      },
      "sha": "9f4624e6d11577c403c3b6d003d99be9f124b372"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12691275864,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAL0dYBY",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12691275864",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T03:13:18Z"
    },
    {
      "event": "commented",
      "id": 2092055828,
      "node_id": "IC_kwDOAN28mc58sj0U",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2092055828",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T03:14:37Z",
      "updated_at": "2024-05-03T03:14:37Z",
      "author_association": "NONE",
      "body": "Converted to draft until we have some more experience with the implementations in the wild.\r\n\r\nStill seeking review especially on the soundness of the network privacy, choice of cryptosystem, and bip21 parameter encoding.",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2092055828",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588415643",
      "pull_request_review_id": 2036951404,
      "id": 1588415643,
      "node_id": "PRRC_kwDOAN28mc5erUyb",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 26,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nVersion 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\r\n```",
      "created_at": "2024-05-02T21:21:55Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588415643",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588415643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588418927",
      "pull_request_review_id": 2036951404,
      "id": 1588418927,
      "node_id": "PRRC_kwDOAN28mc5erVlv",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 34,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\r\n```",
      "created_at": "2024-05-02T21:23:42Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588418927",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588418927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588420870",
      "pull_request_review_id": 2036951404,
      "id": 1588420870,
      "node_id": "PRRC_kwDOAN28mc5erWEG",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 42,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\r\n```",
      "created_at": "2024-05-02T21:24:57Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588420870",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588420870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588421358",
      "pull_request_review_id": 2036951404,
      "id": 1588421358,
      "node_id": "PRRC_kwDOAN28mc5erWLu",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 48,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nPayjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\r\n```",
      "created_at": "2024-05-02T21:25:16Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588421358",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588421358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588448910",
      "pull_request_review_id": 2036951404,
      "id": 1588448910,
      "node_id": "PRRC_kwDOAN28mc5erc6O",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 74,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For some reason these Markdown lists aren't rendering properly on the GitHub file view.\r\n\r\n<img width=\"1010\" alt=\"Screenshot 2024-05-02 at 17 40 26\" src=\"https://github.com/bitcoin/bips/assets/144076611/3acaf8f2-e1a5-4d8e-a925-9d2d0c07a5a9\">\r\n\r\n```suggestion\r\n* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\r\n* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\r\n* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\r\n* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\r\n* The request is stored in the subdirectory.\r\n* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\r\n* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\r\n* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\r\n* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\r\n```",
      "created_at": "2024-05-02T21:41:19Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588448910",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588448910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 66,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588449650",
      "pull_request_review_id": 2036951404,
      "id": 1588449650,
      "node_id": "PRRC_kwDOAN28mc5erdFy",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 82,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Include complete UTXO data.\r\n* Be signed.\r\n* Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\r\n* Set input and output Transaction Modifiable Flags to 1\r\n* Be broadcastable.\r\n```",
      "created_at": "2024-05-02T21:41:47Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588449650",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588449650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 78,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588450458",
      "pull_request_review_id": 2036951404,
      "id": 1588450458,
      "node_id": "PRRC_kwDOAN28mc5erdSa",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 87,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Include outputs unrelated to the sender-receiver transfer for batching purposes.\r\n* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\r\n```",
      "created_at": "2024-05-02T21:42:23Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588450458",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588450458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 86,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451222",
      "pull_request_review_id": 2036951404,
      "id": 1588451222,
      "node_id": "PRRC_kwDOAN28mc5erdeW",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 93,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Include all inputs from the Original PSBT.\r\n* Include all outputs which do not belong to the receiver from the Original PSBT.\r\n* Include complete UTXO data.\r\n```",
      "created_at": "2024-05-02T21:43:01Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588451222",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451222"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 91,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451382",
      "pull_request_review_id": 2036951404,
      "id": 1588451382,
      "node_id": "PRRC_kwDOAN28mc5erdg2",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 97,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\r\n```",
      "created_at": "2024-05-02T21:43:08Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588451382",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451790",
      "pull_request_review_id": 2036951404,
      "id": 1588451790,
      "node_id": "PRRC_kwDOAN28mc5erdnO",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 102,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\r\n* Decrease the absolute fee of the original transaction.\r\n```",
      "created_at": "2024-05-02T21:43:29Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588451790",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588458495",
      "pull_request_review_id": 2036951404,
      "id": 1588458495,
      "node_id": "PRRC_kwDOAN28mc5erfP_",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. ",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 106,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This sentence seems malformed. Did you mean \"to *get* a subdirectory allocated\"?",
      "created_at": "2024-05-02T21:49:22Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588458495",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588458495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588468349",
      "pull_request_review_id": 2036951404,
      "id": 1588468349,
      "node_id": "PRRC_kwDOAN28mc5erhp9",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. \n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory on the directory server has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21 URI]] parameters:\n+\n+- <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+- <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 151,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\r\n* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchronous execution of the protocol, like automated payment processors.\r\n```",
      "created_at": "2024-05-02T22:02:10Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588468349",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588468349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 150,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588468857",
      "pull_request_review_id": 2036951404,
      "id": 1588468857,
      "node_id": "PRRC_kwDOAN28mc5erhx5",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. \n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory on the directory server has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21 URI]] parameters:\n+\n+- <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+- <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+- <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 157,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\r\n```",
      "created_at": "2024-05-02T22:02:49Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588468857",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588468857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588472886",
      "pull_request_review_id": 2036951404,
      "id": 1588472886,
      "node_id": "PRRC_kwDOAN28mc5eriw2",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. \n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory on the directory server has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21 URI]] parameters:\n+\n+- <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+- <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+- <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naïve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints which may be vulnerable to probing attacks. It can cover this tradeoff by demanding  Original PSBT from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URI can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP is eligible to enjoy metadata protection from Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with a specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 appication specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 185,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nHybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\r\n```",
      "created_at": "2024-05-02T22:08:44Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588472886",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588472886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588476142",
      "pull_request_review_id": 2036951404,
      "id": 1588476142,
      "node_id": "PRRC_kwDOAN28mc5erjju",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. \n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory on the directory server has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21 URI]] parameters:\n+\n+- <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+- <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+- <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naïve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints which may be vulnerable to probing attacks. It can cover this tradeoff by demanding  Original PSBT from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URI can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP is eligible to enjoy metadata protection from Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with a specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 appication specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols|zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html|Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/|IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5|base64URL]] encoding as a subdirectory of the directory server in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html|Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305|algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439|RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki|BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy=== \n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may aditionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory with without OHTTP.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 217,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nUnlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory with without OHTTP.\r\n```",
      "created_at": "2024-05-02T22:13:33Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588476142",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588476142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588495570",
      "pull_request_review_id": 2037072195,
      "id": 1588495570,
      "node_id": "PRRC_kwDOAN28mc5eroTS",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 8,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "grizznaut",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grizznaut",
        "html_url": "https://github.com/grizznaut",
        "followers_url": "https://api.github.com/users/grizznaut/followers",
        "following_url": "https://api.github.com/users/grizznaut/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/grizznaut/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/grizznaut/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/grizznaut/subscriptions",
        "organizations_url": "https://api.github.com/users/grizznaut/orgs",
        "repos_url": "https://api.github.com/users/grizznaut/repos",
        "events_url": "https://api.github.com/users/grizznaut/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/grizznaut/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this really replaces BIP78 since it's intended to be backwards-compatible?",
      "created_at": "2024-05-02T22:30:15Z",
      "updated_at": "2024-05-02T22:30:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588495570",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588495570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588624994",
      "pull_request_review_id": 2037262652,
      "id": 1588624994,
      "node_id": "PRRC_kwDOAN28mc5esH5i",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. ",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 106,
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": 1588458495,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes.",
      "created_at": "2024-05-03T03:09:43Z",
      "updated_at": "2024-05-03T03:09:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588624994",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588624994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    }
  ]
}