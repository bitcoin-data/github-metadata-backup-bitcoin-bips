{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1760",
    "id": 2327222099,
    "node_id": "PR_kwDOAN28mc6KtpdT",
    "html_url": "https://github.com/bitcoin/bips/pull/1760",
    "diff_url": "https://github.com/bitcoin/bips/pull/1760.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1760.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1760/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/73991aea51f251c69a4009766bdfa1e88e2bbd63",
    "number": 1760,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "BIP 53: Disallow 64-byte transactions",
    "user": {
      "login": "Christewart",
      "id": 3514957,
      "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Christewart",
      "html_url": "https://github.com/Christewart",
      "followers_url": "https://api.github.com/users/Christewart/followers",
      "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
      "organizations_url": "https://api.github.com/users/Christewart/orgs",
      "repos_url": "https://api.github.com/users/Christewart/repos",
      "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Christewart/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This BIP makes 64 byte bitcoin transactions serialized without the witness consensus invalid\r\n\r\nMailing list post: https://groups.google.com/g/bitcoindev/c/rf3QOlzg230/m/eOOC8pkOAgAJ\r\n\r\nDelving discussion: https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710\r\n\r\nSide note, wasn't sure how to best handle the 2-Bitcoin-Merkle.pdf as it isn't hosted anywhere easily accessible AFAICT? For now I just added it into the git repo. Lmk if you have other suggestions",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 6924377447,
        "node_id": "LA_kwDOAN28mc8AAAABnLmdZw",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/PR%20Author%20action%20required",
        "name": "PR Author action required",
        "description": "Needs updates, has unaddressed review comments, or is otherwise waiting for PR author",
        "color": "e99695",
        "default": false
      }
    ],
    "created_at": "2025-02-10T21:29:52Z",
    "updated_at": "2025-05-21T23:32:00Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merged": false,
    "merge_commit_sha": "853e91b3e61c1911b286af502edf234ce93f8268",
    "assignee": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "assignees": [
      {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "Christewart:2024-12-20-64bytetxs",
      "ref": "2024-12-20-64bytetxs",
      "sha": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 59213269,
        "node_id": "MDEwOlJlcG9zaXRvcnk1OTIxMzI2OQ==",
        "name": "bips",
        "full_name": "Christewart/bips",
        "owner": {
          "login": "Christewart",
          "id": 3514957,
          "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Christewart",
          "html_url": "https://github.com/Christewart",
          "followers_url": "https://api.github.com/users/Christewart/followers",
          "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
          "organizations_url": "https://api.github.com/users/Christewart/orgs",
          "repos_url": "https://api.github.com/users/Christewart/repos",
          "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Christewart/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/Christewart/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/Christewart/bips",
        "archive_url": "https://api.github.com/repos/Christewart/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Christewart/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Christewart/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Christewart/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Christewart/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Christewart/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Christewart/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Christewart/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Christewart/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Christewart/bips/contributors",
        "deployments_url": "https://api.github.com/repos/Christewart/bips/deployments",
        "downloads_url": "https://api.github.com/repos/Christewart/bips/downloads",
        "events_url": "https://api.github.com/repos/Christewart/bips/events",
        "forks_url": "https://api.github.com/repos/Christewart/bips/forks",
        "git_commits_url": "https://api.github.com/repos/Christewart/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Christewart/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Christewart/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Christewart/bips.git",
        "issue_comment_url": "https://api.github.com/repos/Christewart/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Christewart/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Christewart/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Christewart/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Christewart/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Christewart/bips/languages",
        "merges_url": "https://api.github.com/repos/Christewart/bips/merges",
        "milestones_url": "https://api.github.com/repos/Christewart/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Christewart/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Christewart/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Christewart/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:Christewart/bips.git",
        "stargazers_url": "https://api.github.com/repos/Christewart/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/Christewart/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Christewart/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/Christewart/bips/subscription",
        "tags_url": "https://api.github.com/repos/Christewart/bips/tags",
        "teams_url": "https://api.github.com/repos/Christewart/bips/teams",
        "trees_url": "https://api.github.com/repos/Christewart/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Christewart/bips.git",
        "hooks_url": "https://api.github.com/repos/Christewart/bips/hooks",
        "svn_url": "https://github.com/Christewart/bips",
        "homepage": "bitcoin.org",
        "language": "Wikitext",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 16358,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-21T23:31:58Z",
        "created_at": "2016-05-19T14:20:20Z",
        "updated_at": "2025-02-04T16:35:55Z",
        "allow_forking": true
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "fd413c162d05b8382d1ebdfb407791936d03d236",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5606,
        "stargazers_count": 9937,
        "watchers_count": 9937,
        "size": 16226,
        "default_branch": "master",
        "open_issues_count": 36,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-21T20:59:48Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2025-05-21T20:59:59Z",
        "allow_forking": true
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 178,
    "deletions": 0,
    "changed_files": 5,
    "commits": 2,
    "review_comments": 75,
    "comments": 21
  },
  "events": [
    {
      "event": "labeled",
      "id": 16255503282,
      "node_id": "LE_lADOAN28mc6pf3FgzwAAAAPI50uy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16255503282",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-10T21:56:12Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 2609834968,
      "node_id": "PRR_kwDOAN28mc6bjuvY",
      "url": null,
      "actor": null,
      "commit_id": "b08c7a116ae46306622a9806dec719e6e56e0e1f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I am a little surprised at this pull request, given the [frequent coverage](https://bitcoinops.org/en/topics/consensus-cleanup-soft-fork/) of Antoine’s [ongoing research](https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/5) on reviving the Great Consensus Cleanup that includes a similar fix. \r\nIt seems better to me to package all four fixes in one soft fork. Was it overlooked that this work is being duplicated, or are you disagreeing with the direction of Antoine’s work and want to put forward an alternative? Could you elaborate why you decided to submit this?",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2609834968",
      "submitted_at": "2025-02-11T19:36:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
    },
    {
      "event": "commented",
      "id": 2651963862,
      "node_id": "IC_kwDOAN28mc6eEcHW",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2651963862",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-11T20:11:23Z",
      "updated_at": "2025-02-11T20:11:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I am a little surprised at this pull request, given the [frequent coverage](https://bitcoinops.org/en/topics/consensus-cleanup-soft-fork/) of Antoine’s [ongoing research](https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/5) on reviving the Great Consensus Cleanup that includes a similar fix. It seems better to me to package all four fixes in one soft fork. Was it overlooked that this work is being duplicated, or are you disagreeing with the direction of Antoine’s work and want to put forward an alternative? Could you elaborate why you decided to submit this?\r\n\r\nHI Murch! \r\n\r\n>Great Consensus Cleanup\r\n\r\nWhile the GCC is a great name for a disjoint set of bitcoin protocol security fixes, that doesn't mean they all need to be bundled into one BIP and deployed at the same time.\r\n\r\n>It seems better to me to package all four fixes in one soft fork.\r\n\r\nThis document takes no opinion on how this enhancement is deployed.\r\n\r\nPreviously we have deployed multiple consensus changes in a single soft fork that contained multiple BIPs. The 2017 Segwit soft fork had [BIP141](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki), [BIP143](https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki). The Taproot soft fork had [BIP341](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki) and [BIP342](https://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki).\r\n\r\n>Was it overlooked that this work is being duplicated, \r\n\r\nI was recommended that this was a piece of work that was easily to peel off from the rest of GCC and propose a fix for. Its relatively simple and straight forward, and has been known about for a long time.\r\n\r\n> Antoine's on going research.\r\n\r\nI think Antoine's research is great, but just because he is researching the topic doesn't mean he gets to monopolize the vulnerabilities. The 64 byte transaction vulnerability has been known since at least 2012 - yet no one has taken the time to write up a BIP to fix it 😬 . I've put forth the first BIP draft in the 13 years since this vulnerability has been known. I encourage Antoine to write up his proposal (hopefully sooner rather than later) as he doesn't seem to be interested in working with me. \r\n\r\nOther vulnerabilities in GCC have also been known about for a long time - such as worse case block validation time. Antoine has done a lot of novel research there and I think his work product has been excellent on delving. \r\n\r\nThere is plenty of meat left on the GCC bone, this was a small piece I decided to carve off.",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2651963862",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "reviewed",
      "id": 2610178483,
      "node_id": "PRR_kwDOAN28mc6blCmz",
      "url": null,
      "actor": null,
      "commit_id": "b08c7a116ae46306622a9806dec719e6e56e0e1f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "This does seem like a reasonable start for a BIP. A few parts of the content could perhaps be organized a bit differently, and some sections could be expanded. Especially the Specification could be a bit more precise in what an implementation should do to be compliance with this BIP. I left you a few editorial nits that you could perhaps take a look at.\r\n\r\nIt seems likely to me that this submission may be duplicating some effort on all of our ends, assuming that the other anticipated BIP gets submitted near-term, but fair enough, we have not received another BIP on this topic. I guess I can’t fault multiple people for being interested in the same topic.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2610178483",
      "submitted_at": "2025-02-11T23:30:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
    },
    {
      "event": "labeled",
      "id": 16283998553,
      "node_id": "LE_lADOAN28mc6pf3FgzwAAAAPKmhlZ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16283998553",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T16:37:27Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "unlabeled",
      "id": 16502153743,
      "node_id": "UNLE_lADOAN28mc6pf3FgzwAAAAPXmuIP",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16502153743",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-27T19:30:12Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16522755756,
      "node_id": "HRFPE_lADOAN28mc6pf3FgzwAAAAPY1T6s",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16522755756",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "87ecfc4d6274ea77876124db9ef5a9466e1bdae6",
      "commit_url": "https://api.github.com/repos/Christewart/bips/commits/87ecfc4d6274ea77876124db9ef5a9466e1bdae6",
      "created_at": "2025-03-01T16:36:46Z"
    },
    {
      "event": "review_requested",
      "id": 16522759637,
      "node_id": "RRE_lADOAN28mc6pf3FgzwAAAAPY1U3V",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16522759637",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-01T16:38:18Z",
      "requested_reviewer": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16522760897,
      "node_id": "HRFPE_lADOAN28mc6pf3FgzwAAAAPY1VLB",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16522760897",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9f670fadf6524db7ab705aa6fbf09e011fe66f29",
      "commit_url": "https://api.github.com/repos/Christewart/bips/commits/9f670fadf6524db7ab705aa6fbf09e011fe66f29",
      "created_at": "2025-03-01T16:38:47Z"
    },
    {
      "event": "commented",
      "id": 2692311466,
      "node_id": "IC_kwDOAN28mc6geWmq",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2692311466",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-01T16:39:38Z",
      "updated_at": "2025-03-01T16:39:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "I believe the CI failure is unrelated to me?",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2692311466",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "reviewed",
      "id": 2668384087,
      "node_id": "PRR_kwDOAN28mc6fDE9X",
      "url": null,
      "actor": null,
      "commit_id": "8a75ee8f382ca22bc7bf6184e88f566456c54947",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks quite good. A few minor suggestions follow. Suggest rebasing to current master for a green CI if you repush.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2668384087",
      "submitted_at": "2025-03-07T21:36:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16657253877,
      "node_id": "HRFPE_lADOAN28mc6pf3FgzwAAAAPg2YX1",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16657253877",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c675f663168a40a5be1f4dcc3838e802d5b2ff45",
      "commit_url": "https://api.github.com/repos/Christewart/bips/commits/c675f663168a40a5be1f4dcc3838e802d5b2ff45",
      "created_at": "2025-03-10T15:39:30Z"
    },
    {
      "event": "review_requested",
      "id": 16657543176,
      "node_id": "RRE_lADOAN28mc6pf3FgzwAAAAPg3fAI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16657543176",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-10T15:56:38Z",
      "requested_reviewer": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2671850780,
      "node_id": "PRR_kwDOAN28mc6fQTUc",
      "url": null,
      "actor": null,
      "commit_id": "c6bcc0019dc075438987314fdbdafdfa469c81a2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2671850780",
      "submitted_at": "2025-03-10T18:21:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
    },
    {
      "event": "reviewed",
      "id": 2671864502,
      "node_id": "PRR_kwDOAN28mc6fQWq2",
      "url": null,
      "actor": null,
      "commit_id": "c6bcc0019dc075438987314fdbdafdfa469c81a2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2671864502",
      "submitted_at": "2025-03-10T18:28:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
    },
    {
      "event": "reviewed",
      "id": 2671893285,
      "node_id": "PRR_kwDOAN28mc6fQdsl",
      "url": null,
      "actor": null,
      "commit_id": "c6bcc0019dc075438987314fdbdafdfa469c81a2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2671893285",
      "submitted_at": "2025-03-10T18:40:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
    },
    {
      "event": "reviewed",
      "id": 2671894023,
      "node_id": "PRR_kwDOAN28mc6fQd4H",
      "url": null,
      "actor": null,
      "commit_id": "c6bcc0019dc075438987314fdbdafdfa469c81a2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2671894023",
      "submitted_at": "2025-03-10T18:40:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
    },
    {
      "event": "mentioned",
      "id": 16684821607,
      "node_id": "MEE_lADOAN28mc6pf3FgzwAAAAPifixn",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16684821607",
      "actor": {
        "login": "alicia",
        "id": 159570,
        "node_id": "MDQ6VXNlcjE1OTU3MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/159570?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alicia",
        "html_url": "https://github.com/alicia",
        "followers_url": "https://api.github.com/users/alicia/followers",
        "following_url": "https://api.github.com/users/alicia/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/alicia/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/alicia/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/alicia/subscriptions",
        "organizations_url": "https://api.github.com/users/alicia/orgs",
        "repos_url": "https://api.github.com/users/alicia/repos",
        "events_url": "https://api.github.com/users/alicia/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/alicia/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-11T12:57:13Z"
    },
    {
      "event": "subscribed",
      "id": 16684821682,
      "node_id": "SE_lADOAN28mc6pf3FgzwAAAAPifiyy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16684821682",
      "actor": {
        "login": "alicia",
        "id": 159570,
        "node_id": "MDQ6VXNlcjE1OTU3MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/159570?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alicia",
        "html_url": "https://github.com/alicia",
        "followers_url": "https://api.github.com/users/alicia/followers",
        "following_url": "https://api.github.com/users/alicia/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/alicia/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/alicia/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/alicia/subscriptions",
        "organizations_url": "https://api.github.com/users/alicia/orgs",
        "repos_url": "https://api.github.com/users/alicia/repos",
        "events_url": "https://api.github.com/users/alicia/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/alicia/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-11T12:57:13Z"
    },
    {
      "event": "comment_deleted",
      "id": 16687084643,
      "node_id": "CDE_lADOAN28mc6pf3FgzwAAAAPioLRj",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16687084643",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-11T13:49:13Z"
    },
    {
      "event": "commented",
      "id": 2719146585,
      "node_id": "IC_kwDOAN28mc6iEuJZ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2719146585",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-12T21:13:59Z",
      "updated_at": "2025-03-12T21:13:59Z",
      "author_association": "MEMBER",
      "body": "Would be good to have some more eyes on this, otherwise seems close to ready as a draft for a number assignment.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2719146585",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "commented",
      "id": 2755682432,
      "node_id": "IC_kwDOAN28mc6kQGCA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2755682432",
      "actor": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-26T20:31:50Z",
      "updated_at": "2025-03-26T20:31:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Christewart Antoine just opened a pull request for the Consensus Cleanup which includes the 64-byte transaction fix: #1800\r\n\r\nIf you don't feel too strongly about this being a separate BIP, I think it would be better to withdraw it, otherwise it'll just be duplicating effort with no obvious benefit.",
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2755682432",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "mentioned",
      "id": 16999791928,
      "node_id": "MEE_lADOAN28mc6pf3FgzwAAAAP1RD04",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16999791928",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-26T20:31:51Z"
    },
    {
      "event": "subscribed",
      "id": 16999791944,
      "node_id": "SE_lADOAN28mc6pf3FgzwAAAAP1RD1I",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16999791944",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-26T20:31:52Z"
    },
    {
      "event": "commented",
      "id": 2760985515,
      "node_id": "IC_kwDOAN28mc6kkUur",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2760985515",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T10:54:51Z",
      "updated_at": "2025-03-28T10:54:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hi @vostrnad,\r\n\r\nAs of [this commit](https://github.com/bitcoin/bips/pull/1800/commits/098894f04f41494b0329a3e0479e27f33f841812), PR #1800 does not provide as much detail as this document in defining the problem with 64-byte transactions, explaining the proposed solution, and demonstrating why it does not pose a confiscatory risk.\r\n\r\nI hope the author of #1800 will consider expanding the BIP with more detail or breaking it into separate proposals for each consensus change. However, based on [this email](https://groups.google.com/g/bitcoindev/c/0tSvml90Qcw/m/2GAFUCRmBgAJ), it seems they believe the current content is sufficient and only requires minor edits.\r\n\r\nAt this time, I believe my document is of higher quality. I will not be voluntarily closing my BIP until I feel #1800 reaches parity.",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2760985515",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "mentioned",
      "id": 17030319702,
      "node_id": "MEE_lADOAN28mc6pf3FgzwAAAAP3Fg5W",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17030319702",
      "actor": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T10:54:52Z"
    },
    {
      "event": "subscribed",
      "id": 17030319715,
      "node_id": "SE_lADOAN28mc6pf3FgzwAAAAP3Fg5j",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17030319715",
      "actor": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T10:54:53Z"
    },
    {
      "event": "commented",
      "id": 2798431962,
      "node_id": "IC_kwDOAN28mc6mzK7a",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2798431962",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-12T03:40:03Z",
      "updated_at": "2025-04-12T03:40:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "Let’s call this BIP 53. Please update the table entry preamble and title correspondingly.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2798431962",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "renamed",
      "id": 17233111785,
      "node_id": "RTE_lADOAN28mc6pf3FgzwAAAAQDLGrp",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17233111785",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-12T03:43:51Z",
      "rename": {
        "from": "BIP Draft: Disallow 64 byte transactions",
        "to": "BIP 53: Disallow 64 byte transactions"
      }
    },
    {
      "event": "labeled",
      "id": 17275123624,
      "node_id": "LE_lADOAN28mc6pf3FgzwAAAAQFrXeo",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17275123624",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-15T19:17:36Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "commented",
      "id": 2818943368,
      "node_id": "IC_kwDOAN28mc6oBamI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2818943368",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T16:26:04Z",
      "updated_at": "2025-04-21T16:26:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Let’s call this BIP 53. Please update the table entry preamble and title correspondingly.\r\n\r\nDone in 23e01bf",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2818943368",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "reviewed",
      "id": 2782410373,
      "node_id": "PRR_kwDOAN28mc6l2DaF",
      "url": null,
      "actor": null,
      "commit_id": "23e01bf1876c2667eda1c8fd6bd235c8fdf42ef1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "The document seems fairly complete content-wise, but the presentation could use more attention. Capitalization is a bit random: some acronyms are capitalized (\"SPV\"), but others are uncapitalized (e.g. \"utxos\") and proper nouns are sometimes capitalized (Merkle, Bitcoin Core), sometimes not (merkle, bitcoin). Please either retitle one of the two Rationale sections or combine them.\r\n\r\nIt would be good if the proposal got more commentary or review from other contributors, but otherwise seems close to ready for a merge.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2782410373",
      "submitted_at": "2025-04-22T00:27:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
    },
    {
      "event": "renamed",
      "id": 17345073214,
      "node_id": "RTE_lADOAN28mc6pf3FgzwAAAAQJ2NA-",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17345073214",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-22T00:34:29Z",
      "rename": {
        "from": "BIP 53: Disallow 64 byte transactions",
        "to": "BIP 53: Disallow 64-byte transactions"
      }
    },
    {
      "event": "commented",
      "id": 2819775213,
      "node_id": "IC_kwDOAN28mc6oElrt",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2819775213",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-22T00:35:13Z",
      "updated_at": "2025-04-22T00:35:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "Please also add the table entry to the README.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2819775213",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "reviewed",
      "id": 2784772967,
      "node_id": "PRR_kwDOAN28mc6l_ENn",
      "url": null,
      "actor": null,
      "commit_id": "13c98f84c4e869258e00227ac7caefe2c2780cca",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I assume you are still working on my other suggestions, so I’ll take another look later.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2784772967",
      "submitted_at": "2025-04-22T17:11:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
    },
    {
      "event": "commented",
      "id": 2821977122,
      "node_id": "IC_kwDOAN28mc6oM_Qi",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2821977122",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-22T17:14:21Z",
      "updated_at": "2025-04-22T17:14:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Yes I am. Child nap time only allows for so many things to get done at 1\r\ntime 😅. I’ll try to address the rest later today\r\n\r\nOn Tue, Apr 22, 2025 at 12:12 PM murchandamus ***@***.***>\r\nwrote:\r\n\r\n> ***@***.**** commented on this pull request.\r\n>\r\n> I assume you are still working on my other suggestions, so I’ll take\r\n> another look later.\r\n> ------------------------------\r\n>\r\n> In bip-0053.mediawiki\r\n> <https://github.com/bitcoin/bips/pull/1760#discussion_r2054517864>:\r\n>\r\n> > @@ -6,7 +6,7 @@\r\n>    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\r\n>    Status: Draft\r\n>    Type: Standards Track\r\n> -  Created: ?\r\n> +  Created: 2024-12-20\r\n>\r\n> According to BIP2\r\n> <https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki#bip-header-preamble>,\r\n> the \"Created\" header records the date a proposal was assigned a number,\r\n> which is why I suggested 2025-04-11.\r\n>\r\n> image.png (view on web)\r\n> <https://github.com/user-attachments/assets/5ac62de5-00b6-455e-940f-f22c88d228e1>\r\n>\r\n> —\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2784772967>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AA22ETNRE5UYZ32HHFCPFTD22ZZ6DAVCNFSM6AAAAABW3SF3JSVHI2DSMVQWIX3LMV43YUDVNRWFEZLROVSXG5CSMV3GSZLXHMZDOOBUG43TEOJWG4>\r\n> .\r\n> You are receiving this because you were mentioned.Message ID:\r\n> ***@***.***>\r\n>\r\n",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2821977122",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "commented",
      "id": 2822250966,
      "node_id": "IC_kwDOAN28mc6oOCHW",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2822250966",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-22T19:15:02Z",
      "updated_at": "2025-04-22T19:23:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "> The document seems fairly complete content-wise, but the presentation could use more attention. Capitalization is a bit random: some acronyms are capitalized (\"SPV\"), but others are uncapitalized (e.g. \"utxos\") and proper nouns are sometimes capitalized (Merkle, Bitcoin Core), sometimes not (merkle, bitcoin). \r\n\r\nOk think this is addressed in [f797b9f](https://github.com/bitcoin/bips/pull/1760/commits/f797b9f5ef2ed7f0ef91985cf8a4f7c0970e2119), [bd815e9](https://github.com/bitcoin/bips/pull/1760/commits/bd815e97e7fb9741596e8bfdd4320c80ec1e487e), [acda401](https://github.com/bitcoin/bips/pull/1760/commits/acda401f9c4bd150dfb082e1356e4d6c646f6433)\r\n\r\n>Please either retitle one of the two Rationale sections or combine them.\r\n\r\n~Sorry this was a bit unclear could you be more specific of what you would like to see?~\r\n\r\nApologies, I see what you are talking about now and this is fixed in 5a89036. \r\n\r\nAlso I missed some code review due to github.com collapsing some comments, hopefully everything is addressed now with 5a89036\r\n\r\n\r\n",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2822250966",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "commented",
      "id": 2822409973,
      "node_id": "IC_kwDOAN28mc6oOo71",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2822409973",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-22T20:28:54Z",
      "updated_at": "2025-04-22T20:28:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Also I missed some code review due to github.com collapsing some comments, hopefully everything is addressed now with [5a89036](https://github.com/bitcoin/bips/commit/5a890366db2f8cf4a3a2a4c38e1c65590d45e6ef)\r\n\r\nYeah, I think I see what happened: when you started by moving the file, it marked all of my review comments as outdated, because they had been left on the old file. ;)",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2822409973",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "reviewed",
      "id": 2785718040,
      "node_id": "PRR_kwDOAN28mc6mCq8Y",
      "url": null,
      "actor": null,
      "commit_id": "5a890366db2f8cf4a3a2a4c38e1c65590d45e6ef",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed the changes, looks much better, thanks. :)\r\n\r\nWhat’s your plan for this proposal? Do you see it as a standalone soft fork that can be merged as is on its own, or are you working on additional parts? What is the intended deployment strategy?",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2785718040",
      "submitted_at": "2025-04-23T01:13:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
    },
    {
      "event": "commented",
      "id": 2824706772,
      "node_id": "IC_kwDOAN28mc6oXZrU",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2824706772",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-23T15:32:46Z",
      "updated_at": "2025-04-23T15:32:46Z",
      "author_association": "CONTRIBUTOR",
      "body": ">Do you see it as a standalone soft fork that can be merged as is on its own\r\n\r\nThis is possible if the community wants to do this.\r\n\r\n>or are you working on additional parts? \r\n\r\nI am not at this time.\r\n\r\n>What is the intended deployment strategy?\r\n\r\nI don't have one at this time. Recent precedent with [BIP148](https://github.com/bitcoin/bips/blob/master/bip-0148.mediawiki) and [BIP343](https://github.com/bitcoin/bips/blob/master/bip-0343.mediawiki) details activating the last 2 soft forks that contained a variety of BIPs. \r\n\r\nThese activation BIPs were written by a different set of people than the BIP authors for taproot and segwit. I assume something like this will have to happen again as it seems like there isn't really another realistic path to deploying soft forks IMO.\r\n\r\n",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2824706772",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "reviewed",
      "id": 2788312490,
      "node_id": "PRR_kwDOAN28mc6mMkWq",
      "url": null,
      "actor": null,
      "commit_id": "5a890366db2f8cf4a3a2a4c38e1c65590d45e6ef",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Okay, is there anything else that is missing from your perspective before this can be merged?",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2788312490",
      "submitted_at": "2025-04-23T18:17:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
    },
    {
      "event": "commented",
      "id": 2825166246,
      "node_id": "IC_kwDOAN28mc6oZJ2m",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2825166246",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-23T18:31:13Z",
      "updated_at": "2025-04-23T18:34:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Okay, is there anything else that is missing from your perspective before this can be merged?\r\n\r\nI thought about this a bit more, there are 2 things that could potentially be addressed. I would like to hear your opinion.\r\n\r\nHow BIP3 defines the `Rationale` section:\r\n\r\n>The rationale should record relevant objections or important concerns that were raised and addressed as this proposal was developed.\r\n\r\nOne concern that was raised on the [mailing list by Jeremy Rubin](https://groups.google.com/g/bitcoindev/c/0tSvml90Qcw/m/M8NRIlFqBgAJ?utm_medium=email&utm_source=footer) and agreed by Eric Voskuil was that disallowing 64 byte transaction \r\n\r\n>\"might integrate very poorly with this kind of edge condition\"\r\n\r\nDo you think this is adequately addressed by [this](https://github.com/bitcoin/bips/blob/fd3bc98ba467ffbdb6e1df463a3cf9e64d0781bf/bip-0053.mediawiki#user-content-Segwit_64byte_transactions) section of the BIP? I'm on the fence. \r\n\r\nOne other concern shared on the [delving thread by Antoine Poinsot](https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/84?u=chris_stewart_5) was sidechains may be vulnerable to the same merkle tree weakeness that SPV clients are. I haven't investigated this further, but it could potentially merit a section the `Motivation`.\r\n\r\nThis currently isn't at the top of my bitcoin research priorities, so if you think these things should be done I'll address them next week.\r\n",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2825166246",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "unlabeled",
      "id": 17379117000,
      "node_id": "UNLE_lADOAN28mc6pf3FgzwAAAAQL4EfI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17379117000",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-23T22:39:43Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "assigned",
      "id": 17463631397,
      "node_id": "AE_lADOAN28mc6pf3FgzwAAAAQQ6d4l",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17463631397",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-29T22:42:04Z",
      "assignee": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2859376148,
      "node_id": "IC_kwDOAN28mc6qbp4U",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2859376148",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-07T17:04:32Z",
      "updated_at": "2025-05-07T17:04:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "If you feel that they are open points that came up in the evaluation of the idea this proposal is based on, then it would be appropriate to cover them here. If you don’t have the bandwidth to do so now, we can also merge this PR as a draft and you can continue to iterate on it as you move it toward \"Proposed\".",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2859376148",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17582472702,
      "node_id": "HRFPE_lADOAN28mc6pf3FgzwAAAAQX_z3-",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17582472702",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d938c295c32c9c8bd03c481039a3b1fa52e09a3c",
      "commit_url": "https://api.github.com/repos/Christewart/bips/commits/d938c295c32c9c8bd03c481039a3b1fa52e09a3c",
      "created_at": "2025-05-09T00:19:53Z"
    },
    {
      "event": "commented",
      "id": 2864760450,
      "node_id": "IC_kwDOAN28mc6qwMaC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2864760450",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-09T00:23:39Z",
      "updated_at": "2025-05-09T00:23:39Z",
      "author_association": "CONTRIBUTOR",
      "body": ">  we can also merge this PR as a draft and you can continue to iterate on it as you move it toward \"Proposed\".\r\n\r\nLets do that. I rebased the PR to get rid of conflicts. Would you like me to squash everything into 1 commit as well?\r\n\r\n",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2864760450",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "commented",
      "id": 2874666369,
      "node_id": "IC_kwDOAN28mc6rV-2B",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2874666369",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T00:38:05Z",
      "updated_at": "2025-05-13T00:38:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Christewart: Yeah, I think it would make sense to squash it. Thanks.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2874666369",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "mentioned",
      "id": 17626273572,
      "node_id": "MEE_lADOAN28mc6pf3FgzwAAAAQam5ck",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17626273572",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T00:38:06Z"
    },
    {
      "event": "subscribed",
      "id": 17626273583,
      "node_id": "SE_lADOAN28mc6pf3FgzwAAAAQam5cv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17626273583",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T00:38:06Z"
    },
    {
      "event": "reviewed",
      "id": 2834997670,
      "node_id": "PRR_kwDOAN28mc6o-qGm",
      "url": null,
      "actor": null,
      "commit_id": "d938c295c32c9c8bd03c481039a3b1fa52e09a3c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2834997670",
      "submitted_at": "2025-05-13T00:43:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
    },
    {
      "event": "unsubscribed",
      "id": 17637381200,
      "node_id": "UE_lADOAN28mc6pf3FgzwAAAAQbRRRQ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17637381200",
      "actor": {
        "login": "0xf0xx0",
        "id": 33764485,
        "node_id": "MDQ6VXNlcjMzNzY0NDg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/33764485?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xf0xx0",
        "html_url": "https://github.com/0xf0xx0",
        "followers_url": "https://api.github.com/users/0xf0xx0/followers",
        "following_url": "https://api.github.com/users/0xf0xx0/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xf0xx0/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xf0xx0/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xf0xx0/subscriptions",
        "organizations_url": "https://api.github.com/users/0xf0xx0/orgs",
        "repos_url": "https://api.github.com/users/0xf0xx0/repos",
        "events_url": "https://api.github.com/users/0xf0xx0/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xf0xx0/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T14:54:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17644192433,
      "node_id": "HRFPE_lADOAN28mc6pf3FgzwAAAAQbrQKx",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17644192433",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "commit_url": "https://api.github.com/repos/Christewart/bips/commits/c07e507da9021a603f9933f88f221fef4986b518",
      "created_at": "2025-05-14T00:09:20Z"
    },
    {
      "event": "commented",
      "id": 2878231588,
      "node_id": "IC_kwDOAN28mc6rjlQk",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2878231588",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-14T00:09:51Z",
      "updated_at": "2025-05-14T00:09:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @Christewart: Yeah, I think it would make sense to squash it. Thanks.\r\n\r\nDone in c07e507",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2878231588",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "mentioned",
      "id": 17644203340,
      "node_id": "MEE_lADOAN28mc6pf3FgzwAAAAQbrS1M",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17644203340",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-14T00:09:52Z"
    },
    {
      "event": "subscribed",
      "id": 17644203350,
      "node_id": "SE_lADOAN28mc6pf3FgzwAAAAQbrS1W",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17644203350",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-14T00:09:52Z"
    },
    {
      "event": "reviewed",
      "id": 2843903880,
      "node_id": "PRR_kwDOAN28mc6pgoeI",
      "url": null,
      "actor": null,
      "commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks complete, modulo a number of broken links (if I'm not confused) and some fixups and text suggestions.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2843903880",
      "submitted_at": "2025-05-15T15:25:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
    },
    {
      "event": "labeled",
      "id": 17720292722,
      "node_id": "LE_lADOAN28mc6pf3FgzwAAAAQgNjVy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17720292722",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-19T18:35:51Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "commented",
      "id": 2895870503,
      "node_id": "IC_kwDOAN28mc6sm3on",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2895870503",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-20T21:25:07Z",
      "updated_at": "2025-05-20T21:25:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jonatack I believe every non-nit comment has been addressed",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2895870503",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "mentioned",
      "id": 17741999623,
      "node_id": "MEE_lADOAN28mc6pf3FgzwAAAAQhgW4H",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17741999623",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-20T21:25:08Z"
    },
    {
      "event": "subscribed",
      "id": 17741999638,
      "node_id": "SE_lADOAN28mc6pf3FgzwAAAAQhgW4W",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17741999638",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-20T21:25:08Z"
    },
    {
      "event": "reviewed",
      "id": 2855684028,
      "node_id": "PRR_kwDOAN28mc6qNke8",
      "url": null,
      "actor": null,
      "commit_id": "c41fa0b5572a59512267b1ec947fef04f42480de",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Most of these changes look good, but it seems better to use a relative link for the accompanying files than a external link to the current version of the draft.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2855684028",
      "submitted_at": "2025-05-20T21:57:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
    },
    {
      "event": "commented",
      "id": 2896118460,
      "node_id": "IC_kwDOAN28mc6sn0K8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2896118460",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T00:21:47Z",
      "updated_at": "2025-05-21T00:23:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Most of these changes look good, but it seems better to use a relative link for the accompanying files than a external link to the current version of the draft.\r\n\r\nUnfortunately this doesn't seem to work? I've accepted one of your commits you suggested ( bc9afbc ) and here is the result: https://github.com/bitcoin/bips/blob/bc9afbca79d484970756aa92659d246c049fbb55/bip-0053.mediawiki#cite_note-7\r\n\r\nI think the best path forward may be merging this PR, and immediately submitting a follow up PR correcting the links to the official bips repo? 🤷‍♂️ ",
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2896118460",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "reviewed",
      "id": 2859269867,
      "node_id": "PRR_kwDOAN28mc6qbP7r",
      "url": null,
      "actor": null,
      "commit_id": "bc9afbca79d484970756aa92659d246c049fbb55",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Sorry, for the incorrect suggestions. You will want to use [internal link formatting](https://www.mediawiki.org/wiki/Help:Links#Internal_links), which separates link and text with a pipe and encloses in double brackets:",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#pullrequestreview-2859269867",
      "submitted_at": "2025-05-21T22:31:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17761979068,
      "node_id": "HRFPE_lADOAN28mc6pf3FgzwAAAAQiskq8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17761979068",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c72607f11529208ef08f0bacf5b640c9eaba5e6b",
      "commit_url": "https://api.github.com/repos/Christewart/bips/commits/c72607f11529208ef08f0bacf5b640c9eaba5e6b",
      "created_at": "2025-05-21T22:40:14Z"
    },
    {
      "event": "commented",
      "id": 2899438859,
      "node_id": "IC_kwDOAN28mc6s0e0L",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2899438859",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T22:48:52Z",
      "updated_at": "2025-05-21T22:48:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "I realized that after figuring out the fix for the links, I might as well commit it. All the links to the documents shipping with the BIP are now internal relative links, and I tested that they work. :)",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2899438859",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17762378188,
      "node_id": "HRFPE_lADOAN28mc6pf3FgzwAAAAQiuGHM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17762378188",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6a7245375f489a0563720373304dc8d9d0e65500",
      "commit_url": "https://api.github.com/repos/Christewart/bips/commits/6a7245375f489a0563720373304dc8d9d0e65500",
      "created_at": "2025-05-21T23:29:43Z"
    },
    {
      "event": "commented",
      "id": 2899498711,
      "node_id": "IC_kwDOAN28mc6s0tbX",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2899498711",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T23:30:58Z",
      "updated_at": "2025-05-21T23:30:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "Squashed per request of @Christewart.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1760#issuecomment-2899498711",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1760"
    },
    {
      "event": "mentioned",
      "id": 17762387363,
      "node_id": "MEE_lADOAN28mc6pf3FgzwAAAAQiuIWj",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17762387363",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T23:30:59Z"
    },
    {
      "event": "subscribed",
      "id": 17762387376,
      "node_id": "SE_lADOAN28mc6pf3FgzwAAAAQiuIWw",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17762387376",
      "actor": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T23:30:59Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGNkNWRlNDkxYzAyYjYyMTVjNmY2OTNjNTlhM2NkNWZhOWUyYzhmMTE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cd5de491c02b6215c6f693c59a3cd5fa9e2c8f11",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/cd5de491c02b6215c6f693c59a3cd5fa9e2c8f11",
      "tree": {
        "sha": "119acd9149145101373f67ace6e59faba4c862d7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/119acd9149145101373f67ace6e59faba4c862d7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 119acd9149145101373f67ace6e59faba4c862d7\nparent 60ac0e8feccb07f891fd984e4ed76105d2898609\nauthor Chris Stewart <stewart.chris1234@gmail.com> 1734735442 -0600\ncommitter Murch <murch@murch.one> 1747870296 -0700\n\nBIP53: Disallow 64-byte transactions\n\nCo-authored-by: Mark \"Murch\" Erhardt <murch@murch.one>\n\nCo-authored-by: Jon Atack <jon@atack.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmguYmEQHG11cmNoQG11\ncmNoLm9uZQAKCRB7oDXKW5AXE0f9EADSJWyf8Xtn/VzMvHrETfvyy8nzSC8bAm8u\nNTSxrFnJuCtnllI1uSAs5aUam+suktJ0DkT5MXTFa5zLsLInnGg19zD02st7G5eh\naZVBp3lok3TgoMnzUPIA9417HuA8+LT2atl0lRl0k3XM4ffz187Ib7Ma+yAsKcCI\nalLx7lricSfF6Uae2PxOBIr6XIIdkSVKmmo84Bfh583sb6pSzfeH4q4agU1deXCL\nbXkSHjzXvKYbLGk0a9V+nAyf9nkEA8+YISLsbQagYRzTnFyHE//UQUzKFZed7q8W\nkw5XdxgclI49c40K/mq/yxpdEkW9JhJ16uVUGsfZhHlinsM/ZNCgequPOAm0rxiJ\neUuxrZK7EIKAM1yrpAmmHTzrBgZEkj12145puGi1fMXiitBtxDEM2zm5oeEDQpMc\nzbrjpiqCVrrWDQC4aoGH/t0fuKx40orB7cDDjXTfVIqkv1xGbWDkzpMkR7xZiFcB\n8937XDOpF6OiOd3BaiMYPFPM2zrvAAwxpbUcN/OzESxrBy85JcEAfGQqUklaC1Lw\nTCoW4yCLmmgCzoLoKmG7v3YnFU+N8zeGyA+dcz3ujVbxueVWvyfiP/T/YHQNdWRv\nsuojsAwlq32PXEZEv2BrGXEMQHy+5TrFS+1S7qY94Xpv5ljbq+NQgFAwsz3D2VZ7\njKFlWJJnvQ==\n=BN0e\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/60ac0e8feccb07f891fd984e4ed76105d2898609",
          "sha": "60ac0e8feccb07f891fd984e4ed76105d2898609",
          "html_url": "https://github.com/bitcoin/bips/commit/60ac0e8feccb07f891fd984e4ed76105d2898609"
        }
      ],
      "message": "BIP53: Disallow 64-byte transactions\n\nCo-authored-by: Mark \"Murch\" Erhardt <murch@murch.one>\n\nCo-authored-by: Jon Atack <jon@atack.com>",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2025-05-21T23:31:36Z"
      },
      "author": {
        "name": "Chris Stewart",
        "email": "stewart.chris1234@gmail.com",
        "date": "2024-12-20T22:57:22Z"
      },
      "sha": "cd5de491c02b6215c6f693c59a3cd5fa9e2c8f11"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDczOTkxYWVhNTFmMjUxYzY5YTQwMDk3NjZiZGZhMWU4OGUyYmJkNjM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "tree": {
        "sha": "0bfc0c4dae752fd897b500e436141b7d331010e3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/0bfc0c4dae752fd897b500e436141b7d331010e3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0bfc0c4dae752fd897b500e436141b7d331010e3\nparent cd5de491c02b6215c6f693c59a3cd5fa9e2c8f11\nauthor Mark \"Murch\" Erhardt <murch@murch.one> 1747866760 -0700\ncommitter Murch <murch@murch.one> 1747870308 -0700\n\nBIP53: Use internal relative links\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmguYmQQHG11cmNoQG11\ncmNoLm9uZQAKCRB7oDXKW5AXE1lyD/0Y/OZlmuemA9BhYzVkO8rUwz9Y1rYWd/+K\nmIdAxEiDI/Bt/sdedNlrglI1q7gjflT7ldgE83/viRaqu9gXBeobLriWnXqcs28X\n3Bev5ZAzB2jOPvUFp+XbT8Cl7BwyOopxlquLGgopxVHbPyL6J8xkf0SHq7U94Ws5\nkBMyA3HsWWJ3neAS3xO5HwG/J0yHqlaTi3rOP98JRtXBrptXRrDj9ZbHKxVJw6Pr\naKQPXnZJ4wOHSbtNzFwL2ELHti6ISkmu6CPN95o6IafCN8OI3ZwEngZ45A5AaRWK\ntpoC32AvXfml9I0HManW3JNe/szCj9e+lTWQKo1e2qAY6dHt1SZ4cxrfYKmGcXwZ\nNcxNNq0PdiseK8cH+Z4c8ftcaQPVv8RyB83NxMfgBVGpZZWb0OjcKXnGqMbv8vx/\n8Sma6o6n9O00MPrg133UJAT45uRrkx3uEACODCBRfGcqw0mqWhnPvhC8Z5KSKjR2\nCFYBo+ytadrZ4179z0sxo+mLfyoR8XSO1jUWPInJ74oowRuWy+EWjQbPGkqBOKhx\nj4pnFo52E7oG8TCNKQWlCoxd6dGnfxqyLd4WjZ2SsW0FJMDLaxl9uB6SKaBVjkvL\nlIz/zZXVSPSZCsAx6I1btyzmhcnkdOKq6zjipRSq5nlxmitbtx4i3j23IB8Pf1YT\nweFYXNxFmw==\n=Gt7z\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cd5de491c02b6215c6f693c59a3cd5fa9e2c8f11",
          "sha": "cd5de491c02b6215c6f693c59a3cd5fa9e2c8f11",
          "html_url": "https://github.com/bitcoin/bips/commit/cd5de491c02b6215c6f693c59a3cd5fa9e2c8f11"
        }
      ],
      "message": "BIP53: Use internal relative links",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2025-05-21T23:31:48Z"
      },
      "author": {
        "name": "Mark \"Murch\" Erhardt",
        "email": "murch@murch.one",
        "date": "2025-05-21T22:32:40Z"
      },
      "sha": "73991aea51f251c69a4009766bdfa1e88e2bbd63"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17762394745,
      "node_id": "HRFPE_lADOAN28mc6pf3FgzwAAAAQiuKJ5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17762394745",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "commit_url": "https://api.github.com/repos/Christewart/bips/commits/73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "created_at": "2025-05-21T23:32:00Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951684817",
      "pull_request_review_id": 2610178483,
      "id": 1951684817,
      "node_id": "PRRC_kwDOAN28mc50VFjR",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64 byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Status: Draft\n+  Type: Specification\n+  License: BSD-3-Clause\n+  Created: ?\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction id’s",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 20,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "b08c7a116ae46306622a9806dec719e6e56e0e1f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nblock, which is implemented by constructing a Merkle tree of transaction ids\r\n```",
      "created_at": "2025-02-11T22:16:18Z",
      "updated_at": "2025-02-11T23:30:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1951684817",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951684817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951686541",
      "pull_request_review_id": 2610178483,
      "id": 1951686541,
      "node_id": "PRRC_kwDOAN28mc50VF-N",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64 byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Status: Draft\n+  Type: Specification\n+  License: BSD-3-Clause\n+  Created: ?\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction id’s\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64 byte transactions in bitcoin core relay]</ref>",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "b08c7a116ae46306622a9806dec719e6e56e0e1f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Bitcoin Core is a proper noun:\r\n\r\n```suggestion\r\nThis has been prevented by relay policy since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay]</ref>\r\n```",
      "created_at": "2025-02-11T22:18:11Z",
      "updated_at": "2025-02-11T23:30:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1951686541",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951686541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951686858",
      "pull_request_review_id": 2610178483,
      "id": 1951686858,
      "node_id": "PRRC_kwDOAN28mc50VGDK",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64 byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Status: Draft\n+  Type: Specification\n+  License: BSD-3-Clause\n+  Created: ?\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction id’s\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64 byte transactions in bitcoin core relay]</ref>\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without it's witness.",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "b08c7a116ae46306622a9806dec719e6e56e0e1f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThis BIP disallows bitcoin transactions that are serialized to 64 bytes in length without its witness.\r\n```",
      "created_at": "2025-02-11T22:18:29Z",
      "updated_at": "2025-02-11T23:30:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1951686858",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951686858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951702242",
      "pull_request_review_id": 2610178483,
      "id": 1951702242,
      "node_id": "PRRC_kwDOAN28mc50VJzi",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64 byte transactions",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 4,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "b08c7a116ae46306622a9806dec719e6e56e0e1f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Here and in the following, when used as an adjective, \"64-byte\" is commonly hyphenated.\r\n\r\n```suggestion\r\n  Title: Disallow 64-byte transactions\r\n```",
      "created_at": "2025-02-11T22:35:03Z",
      "updated_at": "2025-02-11T23:30:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1951702242",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951702242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951702454",
      "pull_request_review_id": 2610178483,
      "id": 1951702454,
      "node_id": "PRRC_kwDOAN28mc50VJ22",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64 byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Status: Draft\n+  Type: Specification\n+  License: BSD-3-Clause\n+  Created: ?",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 9,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "b08c7a116ae46306622a9806dec719e6e56e0e1f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n  Created: ?\r\n  License: BSD-3-Clause\r\n```",
      "created_at": "2025-02-11T22:35:18Z",
      "updated_at": "2025-02-11T23:30:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1951702454",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951702454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": 8,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951702600",
      "pull_request_review_id": 2610178483,
      "id": 1951702600,
      "node_id": "PRRC_kwDOAN28mc50VJ5I",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64 byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Status: Draft\n+  Type: Specification",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 7,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "b08c7a116ae46306622a9806dec719e6e56e0e1f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n  Type: Standards Track\r\n```",
      "created_at": "2025-02-11T22:35:27Z",
      "updated_at": "2025-02-11T23:30:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1951702600",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951702600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951702849",
      "pull_request_review_id": 2610178483,
      "id": 1951702849,
      "node_id": "PRRC_kwDOAN28mc50VJ9B",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64 byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 5,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "b08c7a116ae46306622a9806dec719e6e56e0e1f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I’m afraid that BIP 2 is still Active, and BIP 3 is not yet:\r\n\r\n```suggestion\r\n  Author: Chris Stewart <stewart.chris1234@gmail.com>\r\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\r\n```",
      "created_at": "2025-02-11T22:35:45Z",
      "updated_at": "2025-02-11T23:30:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1951702849",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951702849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951711997",
      "pull_request_review_id": 2610178483,
      "id": 1951711997,
      "node_id": "PRRC_kwDOAN28mc50VML9",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64 byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Status: Draft\n+  Type: Specification\n+  License: BSD-3-Clause\n+  Created: ?\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction id’s\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64 byte transactions in bitcoin core relay]</ref>\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without it's witness.\n+\n+==Rationale==\n+\n+=== Block malleability ===\n+\n+64 byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64 byte\n+transactions that have the same serialization as the concatenation of 2 nodes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it - T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64 byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub> \n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision approximately 22 bits worth of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of bitcoin core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consesnsus",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 67,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "b08c7a116ae46306622a9806dec719e6e56e0e1f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nProducing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\r\n```",
      "created_at": "2025-02-11T22:46:10Z",
      "updated_at": "2025-02-11T23:30:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1951711997",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951711997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951730617",
      "pull_request_review_id": 2610178483,
      "id": 1951730617,
      "node_id": "PRRC_kwDOAN28mc50VQu5",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64 byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Status: Draft\n+  Type: Specification\n+  License: BSD-3-Clause\n+  Created: ?\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction id’s\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64 byte transactions in bitcoin core relay]</ref>\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without it's witness.\n+\n+==Rationale==\n+\n+=== Block malleability ===\n+\n+64 byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64 byte\n+transactions that have the same serialization as the concatenation of 2 nodes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it - T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64 byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub> \n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision approximately 22 bits worth of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of bitcoin core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consesnsus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+This could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase transaction could mitigate this attack.",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "b08c7a116ae46306622a9806dec719e6e56e0e1f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The area around \"both the coinbase transaction\" seems to be missing something",
      "created_at": "2025-02-11T23:05:34Z",
      "updated_at": "2025-02-11T23:30:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1951730617",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951730617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951733277",
      "pull_request_review_id": 2610178483,
      "id": 1951733277,
      "node_id": "PRRC_kwDOAN28mc50VRYd",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64 byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Status: Draft\n+  Type: Specification\n+  License: BSD-3-Clause\n+  Created: ?\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction id’s\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64 byte transactions in bitcoin core relay]</ref>\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without it's witness.",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "b08c7a116ae46306622a9806dec719e6e56e0e1f",
      "in_reply_to_id": 1951686858,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could you explain the exact semantics of how and where such transactions are disallowed?\r\n\r\nDo you mean e.g., that a block including a 64-byte transaction must be rejected as invalid?",
      "created_at": "2025-02-11T23:08:59Z",
      "updated_at": "2025-02-11T23:30:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1951733277",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951733277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951734276",
      "pull_request_review_id": 2610178483,
      "id": 1951734276,
      "node_id": "PRRC_kwDOAN28mc50VRoE",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64 byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Status: Draft\n+  Type: Specification\n+  License: BSD-3-Clause\n+  Created: ?\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction id’s\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64 byte transactions in bitcoin core relay]</ref>\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without it's witness.\n+\n+==Rationale==\n+\n+=== Block malleability ===\n+\n+64 byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64 byte\n+transactions that have the same serialization as the concatenation of 2 nodes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it - T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64 byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub> \n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision approximately 22 bits worth of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of bitcoin core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consesnsus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+This could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible.\n+\n+==Backward compatibility==\n+\n+There have been 5 64 byte transactions that have occcurred in the bitcoin blockchain as of this",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 96,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "b08c7a116ae46306622a9806dec719e6e56e0e1f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could you expand on how you are suggesting that implementers should mitigate this incompatibility? What about the potential existence of a pre-signed transaction that serializes to 64 bytes?",
      "created_at": "2025-02-11T23:10:14Z",
      "updated_at": "2025-02-11T23:30:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1951734276",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951734276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951738355",
      "pull_request_review_id": 2610178483,
      "id": 1951738355,
      "node_id": "PRRC_kwDOAN28mc50VSnz",
      "diff_hunk": "@@ -0,0 +1,140 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64 byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Status: Draft\n+  Type: Specification\n+  License: BSD-3-Clause\n+  Created: ?\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction id’s\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64 byte transactions in bitcoin core relay]</ref>\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without it's witness.\n+\n+==Rationale==",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 35,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "b08c7a116ae46306622a9806dec719e6e56e0e1f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A lot of the content of this section would maybe fit better under Motivation. Rationale usually explores the design decisions, alternate designs, and related work. For example you could expand on the approach of tracking the height of the Merkle branch to the coinbase transaction in the Rationale.",
      "created_at": "2025-02-11T23:15:13Z",
      "updated_at": "2025-02-11T23:30:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1951738355",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1951738355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985711344",
      "pull_request_review_id": 2668384087,
      "id": 1985711344,
      "node_id": "PRRC_kwDOAN28mc52W4zw",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 16,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "8a75ee8f382ca22bc7bf6184e88f566456c54947",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nWe describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\r\n```\r\n\r\n(Suggest using consistent capitalization of \"merkle\" in this document, here and for the other instances)",
      "created_at": "2025-03-07T21:06:05Z",
      "updated_at": "2025-03-07T21:36:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1985711344",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985711344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985712119",
      "pull_request_review_id": 2668384087,
      "id": 1985712119,
      "node_id": "PRRC_kwDOAN28mc52W4_3",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without its witness.",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 20,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "8a75ee8f382ca22bc7bf6184e88f566456c54947",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "s/its/their/, or \"transaction\" in the singular form\r\n\r\n```suggestion\r\nThis BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\r\n```",
      "created_at": "2025-03-07T21:07:05Z",
      "updated_at": "2025-03-07T21:36:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1985712119",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985712119"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985713776",
      "pull_request_review_id": 2668384087,
      "id": 1985713776,
      "node_id": "PRRC_kwDOAN28mc52W5Zw",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without its witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy and RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 34,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "8a75ee8f382ca22bc7bf6184e88f566456c54947",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThis has been prevented by relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.\r\n```",
      "created_at": "2025-03-07T21:08:49Z",
      "updated_at": "2025-03-07T21:36:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1985713776",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985713776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985716781",
      "pull_request_review_id": 2668384087,
      "id": 1985716781,
      "node_id": "PRRC_kwDOAN28mc52W6It",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without its witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy and RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub> \n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+add the block to their blockchain. Peers that receive the invalid block before the valid block",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 52,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "8a75ee8f382ca22bc7bf6184e88f566456c54947",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "IIUC\r\n```suggestion\r\nand add the block to their blockchain. Peers that receive the invalid block before the valid block\r\n```",
      "created_at": "2025-03-07T21:11:58Z",
      "updated_at": "2025-03-07T21:36:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1985716781",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985716781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985720316",
      "pull_request_review_id": 2668384087,
      "id": 1985720316,
      "node_id": "PRRC_kwDOAN28mc52W6_8",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without its witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy and RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub> \n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision approximately 22 bits worth of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 54,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "8a75ee8f382ca22bc7bf6184e88f566456c54947",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"Finding this collision approximately 22 bits worth of work\" -> looks like a verb is missing here, or the sentence seems hard to follow",
      "created_at": "2025-03-07T21:15:58Z",
      "updated_at": "2025-03-07T21:36:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1985720316",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985720316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985727104",
      "pull_request_review_id": 2668384087,
      "id": 1985727104,
      "node_id": "PRRC_kwDOAN28mc52W8qA",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without its witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy and RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub> \n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision approximately 22 bits worth of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of bitcoin core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the bitcoin blockchain]</ref>\n+With the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre segwit 64-byte transactions====\n+\n+64-byte transactions cannot spend a utxo protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the bitcoin network, bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/nonstandard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 nonstandard hashlock utxos that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock utxos in the bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a nonstandard utxo that are inherently malleable<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>.\n+Policy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are policy rules - not consensus. If a user has a way to confirm an already non-standard\n+64-byte transaction - they can malleate the transaction by violating policy rules to change the size of the transaction to a size other than 64 bytes.\n+\n+====Segwit 64-byte transactions====\n+\n+This BIP disallows single-input single output segwit transactions that pay to a 2 byte witness program.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73#p-4382-future-segwit-versions-10 BIP141 says witness programs can be 2 bytes in size, which makes the scriptPubKey a total of 4 bytes]</ref>\n+The only known use case<ref>[https://bitcoin.stackexchange.com/a/110664 Why do we have 2 byte witness programs? The original rationale for the lower end of the range of valid witness program lengths is that 2 bytes is enough to guarantee no ambiguity of how the program would be pushed (some 1 byte values can - and according to standardness, must - be pushed with OP_n, and dealing with those would have complicated the matter).]</ref>\n+for this type of transaction is ephemeral anchor outputs<ref>[https://bitcoinops.org/en/topics/ephemeral-anchors/ What are ephemeral anchor outputs? This allows anyone on the network to use that output as the input to a child transaction. This allows anyone to create the fee-paying child, even if they don’t receive any of the other outputs from the parent transaction. This allows ephemeral anchors to function as fee sponsorship but without requiring any consensus changes.]</ref>",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 121,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "8a75ee8f382ca22bc7bf6184e88f566456c54947",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nfor this type of transaction is ephemeral anchor outputs.<ref>[https://bitcoinops.org/en/topics/ephemeral-anchors/ What are ephemeral anchor outputs? This allows anyone on the network to use that output as the input to a child transaction. This allows anyone to create the fee-paying child, even if they don’t receive any of the other outputs from the parent transaction. This allows ephemeral anchors to function as fee sponsorship but without requiring any consensus changes.]</ref>\r\n```",
      "created_at": "2025-03-07T21:21:39Z",
      "updated_at": "2025-03-07T21:36:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1985727104",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985727104"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985734917",
      "pull_request_review_id": 2668384087,
      "id": 1985734917,
      "node_id": "PRRC_kwDOAN28mc52W-kF",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without its witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy and RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub> \n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision approximately 22 bits worth of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of bitcoin core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the bitcoin blockchain]</ref>\n+With the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre segwit 64-byte transactions====\n+\n+64-byte transactions cannot spend a utxo protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the bitcoin network, bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/nonstandard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 nonstandard hashlock utxos that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock utxos in the bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a nonstandard utxo that are inherently malleable<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>.",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 113,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "8a75ee8f382ca22bc7bf6184e88f566456c54947",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nPre-segwit 64-byte transactions that spend a nonstandard utxo that are inherently malleable.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>\r\n```",
      "created_at": "2025-03-07T21:27:22Z",
      "updated_at": "2025-03-07T21:36:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1985734917",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985734917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985736160",
      "pull_request_review_id": 2668384087,
      "id": 1985736160,
      "node_id": "PRRC_kwDOAN28mc52W-3g",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without its witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy and RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub> \n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision approximately 22 bits worth of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of bitcoin core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the bitcoin blockchain]</ref>\n+With the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 102,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "8a75ee8f382ca22bc7bf6184e88f566456c54947",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nwith the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>\r\n```",
      "created_at": "2025-03-07T21:28:38Z",
      "updated_at": "2025-03-07T21:36:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1985736160",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985736160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985737271",
      "pull_request_review_id": 2668384087,
      "id": 1985737271,
      "node_id": "PRRC_kwDOAN28mc52W_I3",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without its witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy and RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub> \n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision approximately 22 bits worth of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of bitcoin core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the bitcoin blockchain]</ref>\n+With the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre segwit 64-byte transactions====\n+\n+64-byte transactions cannot spend a utxo protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the bitcoin network, bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/nonstandard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 nonstandard hashlock utxos that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock utxos in the bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a nonstandard utxo that are inherently malleable<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>.\n+Policy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are policy rules - not consensus. If a user has a way to confirm an already non-standard\n+64-byte transaction - they can malleate the transaction by violating policy rules to change the size of the transaction to a size other than 64 bytes.\n+\n+====Segwit 64-byte transactions====\n+\n+This BIP disallows single-input single output segwit transactions that pay to a 2 byte witness program.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73#p-4382-future-segwit-versions-10 BIP141 says witness programs can be 2 bytes in size, which makes the scriptPubKey a total of 4 bytes]</ref>\n+The only known use case<ref>[https://bitcoin.stackexchange.com/a/110664 Why do we have 2 byte witness programs? The original rationale for the lower end of the range of valid witness program lengths is that 2 bytes is enough to guarantee no ambiguity of how the program would be pushed (some 1 byte values can - and according to standardness, must - be pushed with OP_n, and dealing with those would have complicated the matter).]</ref>\n+for this type of transaction is ephemeral anchor outputs<ref>[https://bitcoinops.org/en/topics/ephemeral-anchors/ What are ephemeral anchor outputs? This allows anyone on the network to use that output as the input to a child transaction. This allows anyone to create the fee-paying child, even if they don’t receive any of the other outputs from the parent transaction. This allows ephemeral anchors to function as fee sponsorship but without requiring any consensus changes.]</ref>\n+\n+==Reference implementation==\n+\n+<source lang=\"cpp\">\n+/**\n+ * We want to enforce certain rules (specifically the 64-byte transaction check)\n+ * before we call CheckBlock to check the merkle root. This allows us to enforce\n+ * malleability checks which may interact with other CheckBlock checks.",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 129,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "8a75ee8f382ca22bc7bf6184e88f566456c54947",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n * malleability checks that may interact with other CheckBlock checks.\r\n```",
      "created_at": "2025-03-07T21:29:36Z",
      "updated_at": "2025-03-07T21:36:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1985737271",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985737271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985737719",
      "pull_request_review_id": 2668384087,
      "id": 1985737719,
      "node_id": "PRRC_kwDOAN28mc52W_P3",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without its witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy and RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub> \n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision approximately 22 bits worth of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of bitcoin core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the bitcoin blockchain]</ref>\n+With the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre segwit 64-byte transactions====\n+\n+64-byte transactions cannot spend a utxo protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the bitcoin network, bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/nonstandard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 nonstandard hashlock utxos that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock utxos in the bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a nonstandard utxo that are inherently malleable<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>.\n+Policy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are policy rules - not consensus. If a user has a way to confirm an already non-standard\n+64-byte transaction - they can malleate the transaction by violating policy rules to change the size of the transaction to a size other than 64 bytes.\n+\n+====Segwit 64-byte transactions====\n+\n+This BIP disallows single-input single output segwit transactions that pay to a 2 byte witness program.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73#p-4382-future-segwit-versions-10 BIP141 says witness programs can be 2 bytes in size, which makes the scriptPubKey a total of 4 bytes]</ref>\n+The only known use case<ref>[https://bitcoin.stackexchange.com/a/110664 Why do we have 2 byte witness programs? The original rationale for the lower end of the range of valid witness program lengths is that 2 bytes is enough to guarantee no ambiguity of how the program would be pushed (some 1 byte values can - and according to standardness, must - be pushed with OP_n, and dealing with those would have complicated the matter).]</ref>\n+for this type of transaction is ephemeral anchor outputs<ref>[https://bitcoinops.org/en/topics/ephemeral-anchors/ What are ephemeral anchor outputs? This allows anyone on the network to use that output as the input to a child transaction. This allows anyone to create the fee-paying child, even if they don’t receive any of the other outputs from the parent transaction. This allows ephemeral anchors to function as fee sponsorship but without requiring any consensus changes.]</ref>\n+\n+==Reference implementation==\n+\n+<source lang=\"cpp\">\n+/**\n+ * We want to enforce certain rules (specifically the 64-byte transaction check)\n+ * before we call CheckBlock to check the merkle root. This allows us to enforce\n+ * malleability checks which may interact with other CheckBlock checks.\n+ * This is currently called both in AcceptBlock prior to writing the block to\n+ * disk and in ConnectBlock.\n+ * Note that as this is called before merkle-tree checks so must never return a",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 132,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "8a75ee8f382ca22bc7bf6184e88f566456c54947",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n * Note that this is called before merkle-tree checks and so must never return a\r\n```",
      "created_at": "2025-03-07T21:30:03Z",
      "updated_at": "2025-03-07T21:36:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1985737719",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1985737719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987578520",
      "pull_request_review_id": 2671476786,
      "id": 1987578520,
      "node_id": "PRRC_kwDOAN28mc52eAqY",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without its witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy and RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub> \n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision approximately 22 bits worth of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of bitcoin core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the bitcoin blockchain]</ref>\n+With the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre segwit 64-byte transactions====\n+\n+64-byte transactions cannot spend a utxo protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the bitcoin network, bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/nonstandard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 nonstandard hashlock utxos that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock utxos in the bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a nonstandard utxo that are inherently malleable<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>.\n+Policy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are policy rules - not consensus. If a user has a way to confirm an already non-standard\n+64-byte transaction - they can malleate the transaction by violating policy rules to change the size of the transaction to a size other than 64 bytes.\n+\n+====Segwit 64-byte transactions====\n+\n+This BIP disallows single-input single output segwit transactions that pay to a 2 byte witness program.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73#p-4382-future-segwit-versions-10 BIP141 says witness programs can be 2 bytes in size, which makes the scriptPubKey a total of 4 bytes]</ref>\n+The only known use case<ref>[https://bitcoin.stackexchange.com/a/110664 Why do we have 2 byte witness programs? The original rationale for the lower end of the range of valid witness program lengths is that 2 bytes is enough to guarantee no ambiguity of how the program would be pushed (some 1 byte values can - and according to standardness, must - be pushed with OP_n, and dealing with those would have complicated the matter).]</ref>\n+for this type of transaction is ephemeral anchor outputs<ref>[https://bitcoinops.org/en/topics/ephemeral-anchors/ What are ephemeral anchor outputs? This allows anyone on the network to use that output as the input to a child transaction. This allows anyone to create the fee-paying child, even if they don’t receive any of the other outputs from the parent transaction. This allows ephemeral anchors to function as fee sponsorship but without requiring any consensus changes.]</ref>\n+\n+==Reference implementation==\n+\n+<source lang=\"cpp\">\n+/**\n+ * We want to enforce certain rules (specifically the 64-byte transaction check)\n+ * before we call CheckBlock to check the merkle root. This allows us to enforce\n+ * malleability checks which may interact with other CheckBlock checks.",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 129,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "8a75ee8f382ca22bc7bf6184e88f566456c54947",
      "in_reply_to_id": 1985737271,
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm going to avoid changing these nits unless they change in the reference implementation unless you have a super strong opinion on this.",
      "created_at": "2025-03-10T15:52:42Z",
      "updated_at": "2025-03-10T15:52:42Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1987578520",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987578520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987578748",
      "pull_request_review_id": 2671477160,
      "id": 1987578748,
      "node_id": "PRRC_kwDOAN28mc52eAt8",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without its witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy and RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub> \n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision approximately 22 bits worth of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of bitcoin core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the bitcoin blockchain]</ref>\n+With the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre segwit 64-byte transactions====\n+\n+64-byte transactions cannot spend a utxo protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the bitcoin network, bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/nonstandard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 nonstandard hashlock utxos that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock utxos in the bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a nonstandard utxo that are inherently malleable<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>.\n+Policy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are policy rules - not consensus. If a user has a way to confirm an already non-standard\n+64-byte transaction - they can malleate the transaction by violating policy rules to change the size of the transaction to a size other than 64 bytes.\n+\n+====Segwit 64-byte transactions====\n+\n+This BIP disallows single-input single output segwit transactions that pay to a 2 byte witness program.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73#p-4382-future-segwit-versions-10 BIP141 says witness programs can be 2 bytes in size, which makes the scriptPubKey a total of 4 bytes]</ref>\n+The only known use case<ref>[https://bitcoin.stackexchange.com/a/110664 Why do we have 2 byte witness programs? The original rationale for the lower end of the range of valid witness program lengths is that 2 bytes is enough to guarantee no ambiguity of how the program would be pushed (some 1 byte values can - and according to standardness, must - be pushed with OP_n, and dealing with those would have complicated the matter).]</ref>\n+for this type of transaction is ephemeral anchor outputs<ref>[https://bitcoinops.org/en/topics/ephemeral-anchors/ What are ephemeral anchor outputs? This allows anyone on the network to use that output as the input to a child transaction. This allows anyone to create the fee-paying child, even if they don’t receive any of the other outputs from the parent transaction. This allows ephemeral anchors to function as fee sponsorship but without requiring any consensus changes.]</ref>\n+\n+==Reference implementation==\n+\n+<source lang=\"cpp\">\n+/**\n+ * We want to enforce certain rules (specifically the 64-byte transaction check)\n+ * before we call CheckBlock to check the merkle root. This allows us to enforce\n+ * malleability checks which may interact with other CheckBlock checks.\n+ * This is currently called both in AcceptBlock prior to writing the block to\n+ * disk and in ConnectBlock.\n+ * Note that as this is called before merkle-tree checks so must never return a",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 132,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "8a75ee8f382ca22bc7bf6184e88f566456c54947",
      "in_reply_to_id": 1985737719,
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bips/pull/1760#discussion_r1987578520",
      "created_at": "2025-03-10T15:52:49Z",
      "updated_at": "2025-03-10T15:52:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1987578748",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987578748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987808071",
      "pull_request_review_id": 2671850780,
      "id": 1987808071,
      "node_id": "PRRC_kwDOAN28mc52e4tH",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub> \n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the bitcoin blockchain]</ref>\n+with the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre segwit 64-byte transactions====\n+\n+64-byte transactions cannot spend a utxo protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the bitcoin network, bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/nonstandard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 nonstandard hashlock utxos that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock utxos in the bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a nonstandard utxo that are inherently malleable.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>\n+Policy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are not consensus rules. If a user has a way to confirm an already non-standard\n+64-byte transaction - they can malleate the transaction by violating policy rules to change the size of the transaction to a size other than 64 bytes.\n+\n+====Segwit 64-byte transactions====\n+\n+This BIP disallows single-input single output segwit transactions that pay to a 2 byte witness program.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73#p-4382-future-segwit-versions-10 BIP141 says witness programs can be 2 bytes in size, which makes the scriptPubKey a total of 4 bytes]</ref>\n+The only known use case<ref>[https://bitcoin.stackexchange.com/a/110664 Why do we have 2 byte witness programs? The original rationale for the lower end of the range of valid witness program lengths is that 2 bytes is enough to guarantee no ambiguity of how the program would be pushed (some 1 byte values can - and according to standardness, must - be pushed with OP_n, and dealing with those would have complicated the matter).]</ref>\n+for this type of transaction is ephemeral anchor outputs.<ref>[https://bitcoinops.org/en/topics/ephemeral-anchors/ What are ephemeral anchor outputs? This allows anyone on the network to use that output as the input to a child transaction. This allows anyone to create the fee-paying child, even if they don’t receive any of the other outputs from the parent transaction. This allows ephemeral anchors to function as fee sponsorship but without requiring any consensus changes.]</ref>\n+\n+==Reference implementation==\n+\n+<source lang=\"cpp\">\n+/**\n+ * We want to enforce certain rules (specifically the 64-byte transaction check)\n+ * before we call CheckBlock to check the merkle root. This allows us to enforce\n+ * malleability checks which may interact with other CheckBlock checks.\n+ * This is currently called both in AcceptBlock prior to writing the block to\n+ * disk and in ConnectBlock.\n+ * Note that as this is called before merkle-tree checks so must never return a\n+ * non-malleable error condition.\n+ */\n+static bool ContextualBlockPreCheck(const CBlock& block, BlockValidationState& state, const ChainstateManager& chainman, const CBlockIndex* pindexPrev)\n+{\n+    if (DeploymentActiveAfter(pindexPrev, chainman, Consensus::DEPLOYMENT_64BYTETX)) {\n+      for (const auto& tx : block.vtx) {\n+            if (::GetSerializeSize(TX_NO_WITNESS(tx)) == 64) {\n+                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"64-byte-transaction\", strprintf(\"size of tx %s without witness is 64 bytes\", tx->GetHash().ToString()));\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+</source>\n+\n+https://github.com/bitcoin-inquisition/bitcoin/pull/24/files",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 149,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c6bcc0019dc075438987314fdbdafdfa469c81a2",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```diff\r\n+This sample implementation is currently an open pull request here:\r\n+\r\nhttps://github.com/bitcoin-inquisition/bitcoin/pull/24/files\r\n```\r\n",
      "created_at": "2025-03-10T18:21:49Z",
      "updated_at": "2025-03-11T13:49:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1987808071",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987808071"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987809237",
      "pull_request_review_id": 2671852767,
      "id": 1987809237,
      "node_id": "PRRC_kwDOAN28mc52e4_V",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the merkle tree included in bitcoin block headers, various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without its witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by relay policy and RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub> \n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision approximately 22 bits worth of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of bitcoin core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the bitcoin blockchain]</ref>\n+With the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre segwit 64-byte transactions====\n+\n+64-byte transactions cannot spend a utxo protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the bitcoin network, bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/nonstandard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 nonstandard hashlock utxos that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock utxos in the bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a nonstandard utxo that are inherently malleable<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>.\n+Policy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are policy rules - not consensus. If a user has a way to confirm an already non-standard\n+64-byte transaction - they can malleate the transaction by violating policy rules to change the size of the transaction to a size other than 64 bytes.\n+\n+====Segwit 64-byte transactions====\n+\n+This BIP disallows single-input single output segwit transactions that pay to a 2 byte witness program.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73#p-4382-future-segwit-versions-10 BIP141 says witness programs can be 2 bytes in size, which makes the scriptPubKey a total of 4 bytes]</ref>\n+The only known use case<ref>[https://bitcoin.stackexchange.com/a/110664 Why do we have 2 byte witness programs? The original rationale for the lower end of the range of valid witness program lengths is that 2 bytes is enough to guarantee no ambiguity of how the program would be pushed (some 1 byte values can - and according to standardness, must - be pushed with OP_n, and dealing with those would have complicated the matter).]</ref>\n+for this type of transaction is ephemeral anchor outputs<ref>[https://bitcoinops.org/en/topics/ephemeral-anchors/ What are ephemeral anchor outputs? This allows anyone on the network to use that output as the input to a child transaction. This allows anyone to create the fee-paying child, even if they don’t receive any of the other outputs from the parent transaction. This allows ephemeral anchors to function as fee sponsorship but without requiring any consensus changes.]</ref>\n+\n+==Reference implementation==\n+\n+<source lang=\"cpp\">\n+/**\n+ * We want to enforce certain rules (specifically the 64-byte transaction check)\n+ * before we call CheckBlock to check the merkle root. This allows us to enforce\n+ * malleability checks which may interact with other CheckBlock checks.",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 129,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "8a75ee8f382ca22bc7bf6184e88f566456c54947",
      "in_reply_to_id": 1985737271,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see. It wasn't clear to me that this is extracted from the open pull in bitcoin-inquisition.",
      "created_at": "2025-03-10T18:22:44Z",
      "updated_at": "2025-03-10T18:22:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1987809237",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987809237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987816838",
      "pull_request_review_id": 2671864502,
      "id": 1987816838,
      "node_id": "PRRC_kwDOAN28mc52e62G",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 34,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c6bcc0019dc075438987314fdbdafdfa469c81a2",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Now that \"Bitcoin Core's\" was added.\r\n\r\n```suggestion\r\nThis has been prevented by Bitcoin Core's relay policy and RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.\r\n```",
      "created_at": "2025-03-10T18:28:21Z",
      "updated_at": "2025-03-10T18:28:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1987816838",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987816838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987831640",
      "pull_request_review_id": 2671891588,
      "id": 1987831640,
      "node_id": "PRRC_kwDOAN28mc52e-dY",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 34,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c6bcc0019dc075438987314fdbdafdfa469c81a2",
      "in_reply_to_id": 1987816838,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Perhaps also mention https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 that updated this change",
      "created_at": "2025-03-10T18:39:19Z",
      "updated_at": "2025-03-10T18:41:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1987831640",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987831640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987832697",
      "pull_request_review_id": 2671893285,
      "id": 1987832697,
      "node_id": "PRRC_kwDOAN28mc52e-t5",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. ",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 15,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c6bcc0019dc075438987314fdbdafdfa469c81a2",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit, extra space at EOL\r\n```suggestion\r\nThis BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\r\n```",
      "created_at": "2025-03-10T18:40:10Z",
      "updated_at": "2025-03-10T18:40:11Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1987832697",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987832697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987833212",
      "pull_request_review_id": 2671894023,
      "id": 1987833212,
      "node_id": "PRRC_kwDOAN28mc52e-18",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness. \n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows 64-byte transactions in Bitcoin Core relay and RPC interface]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub> ",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 49,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c6bcc0019dc075438987314fdbdafdfa469c81a2",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit, extra space at EOL\r\n\r\n```suggestion\r\nThe peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\r\n```",
      "created_at": "2025-03-10T18:40:32Z",
      "updated_at": "2025-03-10T18:40:32Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r1987833212",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1987833212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053103946",
      "pull_request_review_id": 2782410373,
      "id": 2053103946,
      "node_id": "PRRC_kwDOAN28mc56X-FK",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-53\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 34,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "23e01bf1876c2667eda1c8fd6bd235c8fdf42ef1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Given that such transaction were still valid, just nonstandard, I’m not sure that \"prevented\" is the right term. How about mitigated?\r\n```suggestion\r\nThis has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\r\n```",
      "created_at": "2025-04-21T23:29:55Z",
      "updated_at": "2025-04-22T00:27:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2053103946",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053103946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053106305",
      "pull_request_review_id": 2782410373,
      "id": 2053106305,
      "node_id": "PRRC_kwDOAN28mc56X-qB",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-53\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 79,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "23e01bf1876c2667eda1c8fd6bd235c8fdf42ef1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nthat allows you to verify that your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\r\n```",
      "created_at": "2025-04-21T23:33:49Z",
      "updated_at": "2025-04-22T00:27:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2053106305",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053106305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053107728",
      "pull_request_review_id": 2782410373,
      "id": 2053107728,
      "node_id": "PRRC_kwDOAN28mc56X_AQ",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-53\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 87,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "23e01bf1876c2667eda1c8fd6bd235c8fdf42ef1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nto fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity for SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\r\n```",
      "created_at": "2025-04-21T23:35:48Z",
      "updated_at": "2025-04-22T00:27:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2053107728",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053107728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053109019",
      "pull_request_review_id": 2782410373,
      "id": 2053109019,
      "node_id": "PRRC_kwDOAN28mc56X_Ub",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-53\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the bitcoin blockchain]</ref>\n+with the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre segwit 64-byte transactions====\n+\n+64-byte transactions cannot spend a utxo protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the bitcoin network, bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 107,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "23e01bf1876c2667eda1c8fd6bd235c8fdf42ef1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nPre-segwit 64-byte transactions cannot spend a utxo protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the bitcoin network, bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\r\n```",
      "created_at": "2025-04-21T23:38:19Z",
      "updated_at": "2025-04-22T00:27:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2053109019",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053109019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053109124",
      "pull_request_review_id": 2782410373,
      "id": 2053109124,
      "node_id": "PRRC_kwDOAN28mc56X_WE",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-53\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the bitcoin blockchain]</ref>\n+with the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre segwit 64-byte transactions====\n+\n+64-byte transactions cannot spend a utxo protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the bitcoin network, bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 108,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "23e01bf1876c2667eda1c8fd6bd235c8fdf42ef1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe largest scriptSig a pre-segwit 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\r\n```",
      "created_at": "2025-04-21T23:38:31Z",
      "updated_at": "2025-04-22T00:27:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2053109124",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053109124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053123556",
      "pull_request_review_id": 2782410373,
      "id": 2053123556,
      "node_id": "PRRC_kwDOAN28mc56YC3k",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-53\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 9,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "23e01bf1876c2667eda1c8fd6bd235c8fdf42ef1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n  Created: 2025-04-11\r\n```",
      "created_at": "2025-04-21T23:52:09Z",
      "updated_at": "2025-04-22T00:27:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2053123556",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053123556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053124774",
      "pull_request_review_id": 2782410373,
      "id": 2053124774,
      "node_id": "PRRC_kwDOAN28mc56YDKm",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-53\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the bitcoin blockchain]</ref>\n+with the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre segwit 64-byte transactions====\n+\n+64-byte transactions cannot spend a utxo protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the bitcoin network, bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/nonstandard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 nonstandard hashlock utxos that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock utxos in the bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a nonstandard utxo that are inherently malleable.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>\n+Policy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are not consensus rules. If a user has a way to confirm an already non-standard\n+64-byte transaction - they can malleate the transaction by violating policy rules to change the size of the transaction to a size other than 64 bytes.\n+\n+====Segwit 64-byte transactions====\n+\n+This BIP disallows single-input single output segwit transactions that pay to a 2 byte witness program.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73#p-4382-future-segwit-versions-10 BIP141 says witness programs can be 2 bytes in size, which makes the scriptPubKey a total of 4 bytes]</ref>\n+The only known use case<ref>[https://bitcoin.stackexchange.com/a/110664 Why do we have 2 byte witness programs? The original rationale for the lower end of the range of valid witness program lengths is that 2 bytes is enough to guarantee no ambiguity of how the program would be pushed (some 1 byte values can - and according to standardness, must - be pushed with OP_n, and dealing with those would have complicated the matter).]</ref>\n+for this type of transaction is ephemeral anchor outputs.<ref>[https://bitcoinops.org/en/topics/ephemeral-anchors/ What are ephemeral anchor outputs? This allows anyone on the network to use that output as the input to a child transaction. This allows anyone to create the fee-paying child, even if they don’t receive any of the other outputs from the parent transaction. This allows ephemeral anchors to function as fee sponsorship but without requiring any consensus changes.]</ref>\n+\n+==Reference implementation==\n+\n+<source lang=\"cpp\">\n+/**\n+ * We want to enforce certain rules (specifically the 64-byte transaction check)\n+ * before we call CheckBlock to check the merkle root. This allows us to enforce\n+ * malleability checks which may interact with other CheckBlock checks.\n+ * This is currently called both in AcceptBlock prior to writing the block to\n+ * disk and in ConnectBlock.\n+ * Note that as this is called before merkle-tree checks so must never return a\n+ * non-malleable error condition.\n+ */\n+static bool ContextualBlockPreCheck(const CBlock& block, BlockValidationState& state, const ChainstateManager& chainman, const CBlockIndex* pindexPrev)\n+{\n+    if (DeploymentActiveAfter(pindexPrev, chainman, Consensus::DEPLOYMENT_64BYTETX)) {\n+      for (const auto& tx : block.vtx) {\n+            if (::GetSerializeSize(TX_NO_WITNESS(tx)) == 64) {\n+                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"64-byte-transaction\", strprintf(\"size of tx %s without witness is 64 bytes\", tx->GetHash().ToString()));\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+</source>\n+\n+The sample implementation is currently open here:\n+\n+https://github.com/bitcoin-inquisition/bitcoin/pull/24/files\n+\n+== Rationale ==",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 153,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "23e01bf1876c2667eda1c8fd6bd235c8fdf42ef1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This document has two \"Rationale\" sections.",
      "created_at": "2025-04-21T23:54:26Z",
      "updated_at": "2025-04-22T00:27:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2053124774",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053124774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053126813",
      "pull_request_review_id": 2782410373,
      "id": 2053126813,
      "node_id": "PRRC_kwDOAN28mc56YDqd",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-53\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 96,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "23e01bf1876c2667eda1c8fd6bd235c8fdf42ef1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nof SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80-byte header + 448-byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80-byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\r\n```",
      "created_at": "2025-04-21T23:57:48Z",
      "updated_at": "2025-04-22T00:27:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2053126813",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053126813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053127264",
      "pull_request_review_id": 2782410373,
      "id": 2053127264,
      "node_id": "PRRC_kwDOAN28mc56YDxg",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-53\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the bitcoin blockchain]</ref>\n+with the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre segwit 64-byte transactions====\n+\n+64-byte transactions cannot spend a utxo protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the bitcoin network, bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/nonstandard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 nonstandard hashlock utxos that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock utxos in the bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a nonstandard utxo that are inherently malleable.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>\n+Policy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are not consensus rules. If a user has a way to confirm an already non-standard\n+64-byte transaction - they can malleate the transaction by violating policy rules to change the size of the transaction to a size other than 64 bytes.\n+\n+====Segwit 64-byte transactions====\n+\n+This BIP disallows single-input single output segwit transactions that pay to a 2 byte witness program.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73#p-4382-future-segwit-versions-10 BIP141 says witness programs can be 2 bytes in size, which makes the scriptPubKey a total of 4 bytes]</ref>",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 119,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "23e01bf1876c2667eda1c8fd6bd235c8fdf42ef1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThis BIP disallows single-input single-output segwit transactions that pay to a 2-byte witness program.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73#p-4382-future-segwit-versions-10 BIP141 says witness programs can be 2 bytes in size, which makes the scriptPubKey a total of 4 bytes]</ref>\r\n```",
      "created_at": "2025-04-21T23:58:40Z",
      "updated_at": "2025-04-22T00:27:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2053127264",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053127264"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053127401",
      "pull_request_review_id": 2782410373,
      "id": 2053127401,
      "node_id": "PRRC_kwDOAN28mc56YDzp",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-53\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the bitcoin blockchain]</ref>\n+with the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre segwit 64-byte transactions====\n+\n+64-byte transactions cannot spend a utxo protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the bitcoin network, bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/nonstandard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 nonstandard hashlock utxos that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock utxos in the bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a nonstandard utxo that are inherently malleable.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>\n+Policy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are not consensus rules. If a user has a way to confirm an already non-standard\n+64-byte transaction - they can malleate the transaction by violating policy rules to change the size of the transaction to a size other than 64 bytes.\n+\n+====Segwit 64-byte transactions====\n+\n+This BIP disallows single-input single output segwit transactions that pay to a 2 byte witness program.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73#p-4382-future-segwit-versions-10 BIP141 says witness programs can be 2 bytes in size, which makes the scriptPubKey a total of 4 bytes]</ref>\n+The only known use case<ref>[https://bitcoin.stackexchange.com/a/110664 Why do we have 2 byte witness programs? The original rationale for the lower end of the range of valid witness program lengths is that 2 bytes is enough to guarantee no ambiguity of how the program would be pushed (some 1 byte values can - and according to standardness, must - be pushed with OP_n, and dealing with those would have complicated the matter).]</ref>",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 120,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "23e01bf1876c2667eda1c8fd6bd235c8fdf42ef1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe only known use case<ref>[https://bitcoin.stackexchange.com/a/110664 Why do we have 2-byte witness programs? The original rationale for the lower end of the range of valid witness program lengths is that 2 bytes is enough to guarantee no ambiguity of how the program would be pushed (some 1-byte values can — and according to standardness, must — be pushed with OP_n, and dealing with those would have complicated the matter).]</ref>\r\n```",
      "created_at": "2025-04-21T23:58:54Z",
      "updated_at": "2025-04-22T14:43:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2053127401",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053127401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053132844",
      "pull_request_review_id": 2782410373,
      "id": 2053132844,
      "node_id": "PRRC_kwDOAN28mc56YFIs",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-53\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify your bitcoin transaction is included in a merkle root embedded in a bitcoin block header.\n+Notably this format does not commit to the height of the merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity of SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80 byte header + 448 byte partial merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80 byte header + 416 bytes partial merkle tree for coinbase tx + 416 bytes partial merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the bitcoin blockchain]</ref>\n+with the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre segwit 64-byte transactions====\n+\n+64-byte transactions cannot spend a utxo protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the bitcoin network, bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/nonstandard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 nonstandard hashlock utxos that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock utxos in the bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a nonstandard utxo that are inherently malleable.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>\n+Policy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are not consensus rules. If a user has a way to confirm an already non-standard",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 114,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "23e01bf1876c2667eda1c8fd6bd235c8fdf42ef1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think \"non-standard\" is more common in the context of transactions. Could you use either \"non-standard\" or \"nonstandard\" throughout the document?\r\n\r\n```suggestion\r\nThere are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/nonstandard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 non-standard hashlock utxos that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\r\nnon-standard hashlock utxos in the bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\r\n\r\nPre-segwit 64-byte transactions that spend a non-standard utxo that are inherently malleable.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>\r\nPolicy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are not consensus rules. If a user has a way to confirm an already non-standard\r\n```",
      "created_at": "2025-04-22T00:08:38Z",
      "updated_at": "2025-04-22T00:27:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2053132844",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053132844"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": 110,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053133513",
      "pull_request_review_id": 2782410373,
      "id": 2053133513,
      "node_id": "PRRC_kwDOAN28mc56YFTJ",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-53\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 58,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "23e01bf1876c2667eda1c8fd6bd235c8fdf42ef1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\na workable second transaction which will hash to the second 32 bytes)—a very\r\n```",
      "created_at": "2025-04-22T00:09:43Z",
      "updated_at": "2025-04-22T00:28:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2053133513",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053133513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053136011",
      "pull_request_review_id": 2782410373,
      "id": 2053136011,
      "node_id": "PRRC_kwDOAN28mc56YF6L",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-53\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been prevented by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the merkle tree.\n+\n+Assume we have a valid bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes) – a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>",
      "path": "bip-XXXX.mediawiki",
      "position": null,
      "original_position": 78,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "23e01bf1876c2667eda1c8fd6bd235c8fdf42ef1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Consistency-nit: Please stick either to \"Merkle\" or to \"merkle\" throughout the document.",
      "created_at": "2025-04-22T00:14:03Z",
      "updated_at": "2025-04-22T00:28:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2053136011",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2053136011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": 73,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2054517864",
      "pull_request_review_id": 2784772967,
      "id": 2054517864,
      "node_id": "PRRC_kwDOAN28mc56dXRo",
      "diff_hunk": "@@ -6,7 +6,7 @@\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n   Status: Draft\n   Type: Standards Track\n-  Created: ?\n+  Created: 2024-12-20",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 5,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "13c98f84c4e869258e00227ac7caefe2c2780cca",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "According to [BIP2](https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki#bip-header-preamble), the \"Created\" header records the date a proposal was assigned a number, which is why I suggested 2025-04-11.\r\n\r\n![image](https://github.com/user-attachments/assets/5ac62de5-00b6-455e-940f-f22c88d228e1)",
      "created_at": "2025-04-22T17:08:18Z",
      "updated_at": "2025-04-22T17:11:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2054517864",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2054517864"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2056641785",
      "pull_request_review_id": 2788312490,
      "id": 2056641785,
      "node_id": "PRRC_kwDOAN28mc56ldz5",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial Merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify that your Bitcoin transaction is included in a Merkle root embedded in a Bitcoin block header.\n+Notably this format does not commit to the height of the Merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a Bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity for SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a Merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the Merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80-byte header + 448-byte partial Merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80-byte header + 416 bytes partial Merkle tree for coinbase tx + 416 bytes partial Merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the Bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the Bitcoin blockchain]</ref>\n+with the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the Bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre-segwit 64-byte transactions====\n+\n+Pre-segwit 64-byte transactions cannot spend a UTXO protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the Bitcoin network, Bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a pre-segwit 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/non-standard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 non-standard hashlock UTXOs that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock UTXOs in the Bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a non-standard UTXO that are inherently malleable.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>\n+Policy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are not consensus rules. If a user has a way to confirm an already non-standard\n+64-byte transaction - they can malleate the transaction by violating policy rules to change the size of the transaction to a size other than 64 bytes.\n+\n+====Segwit 64-byte transactions====\n+\n+This BIP disallows single-input single-output segwit transactions that pay to a 2-byte witness program.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73#p-4382-future-segwit-versions-10 BIP141 says witness programs can be 2 bytes in size, which makes the scriptPubKey a total of 4 bytes]</ref>\n+The only known use case<ref>[https://bitcoin.stackexchange.com/a/110664 Why do we have 2-byte witness programs? The original rationale for the lower end of the range of valid witness program lengths is that 2 bytes is enough to guarantee no ambiguity of how the program would be pushed (some 1-byte values can - and according to standardness, must - be pushed with OP_n, and dealing with those would have complicated the matter).]</ref>\n+for this type of transaction is ephemeral anchor outputs.<ref>[https://bitcoinops.org/en/topics/ephemeral-anchors/ What are ephemeral anchor outputs? This allows anyone on the network to use that output as the input to a child transaction. This allows anyone to create the fee-paying child, even if they don’t receive any of the other outputs from the parent transaction. This allows ephemeral anchors to function as fee sponsorship but without requiring any consensus changes.]</ref>\n+\n+==Reference implementation==\n+\n+<source lang=\"cpp\">\n+/**\n+ * We want to enforce certain rules (specifically the 64-byte transaction check)\n+ * before we call CheckBlock to check the Merkle root. This allows us to enforce\n+ * malleability checks which may interact with other CheckBlock checks.\n+ * This is currently called both in AcceptBlock prior to writing the block to\n+ * disk and in ConnectBlock.\n+ * Note that as this is called before merkle-tree checks so must never return a\n+ * non-malleable error condition.\n+ */\n+static bool ContextualBlockPreCheck(const CBlock& block, BlockValidationState& state, const ChainstateManager& chainman, const CBlockIndex* pindexPrev)\n+{\n+    if (DeploymentActiveAfter(pindexPrev, chainman, Consensus::DEPLOYMENT_64BYTETX)) {\n+      for (const auto& tx : block.vtx) {\n+            if (::GetSerializeSize(TX_NO_WITNESS(tx)) == 64) {\n+                return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"64-byte-transaction\", strprintf(\"size of tx %s without witness is 64 bytes\", tx->GetHash().ToString()));\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+</source>\n+\n+The sample implementation is currently open here:\n+\n+https://github.com/bitcoin-inquisition/bitcoin/pull/24/files\n+\n+<references />\n+\n+==Copyright==\n+This BIP is licensed under the [https://opensource.org/license/BSD-3-Clause BSD-3-Clause License].\n+\n+==Acknowledgements==\n+\n+Suhas Daftuar, AJ Towns, Sergio Demian Lerner, Greg Maxwell, Matt Corallo, Antoine Poinsont, Dave Harding and Erik Voskuil",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 160,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "5a890366db2f8cf4a3a2a4c38e1c65590d45e6ef",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nSuhas Daftuar, AJ Towns, Sergio Demian Lerner, Greg Maxwell, Matt Corallo, Antoine Poinsot, Dave Harding and Eric Voskuil\r\n```",
      "created_at": "2025-04-23T18:10:55Z",
      "updated_at": "2025-04-23T18:17:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2056641785",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2056641785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2085732013",
      "pull_request_review_id": 2834997670,
      "id": 2085732013,
      "node_id": "PRRC_kwDOAN28mc58Ub6t",
      "diff_hunk": "@@ -301,6 +301,14 @@ Those proposing changes should consider that ultimately consent may rest with th\n | Standard\n | Draft\n |-\n+| [[bip-0053.mediawiki|53]]\n+| Consensus (soft fork)\n+| Disallow 64-byte transactions\n+| Chris Stewart\n+| Standard\n+| Draft\n+<!-- 50 series reserved for a group of post-mortems -->",
      "path": "README.mediawiki",
      "position": null,
      "original_position": 10,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "d938c295c32c9c8bd03c481039a3b1fa52e09a3c",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this line seems outdated and if anywhere, it should be after BIP 50 or after BIP 54.\r\n\r\n```suggestion\r\n```",
      "created_at": "2025-05-13T00:41:27Z",
      "updated_at": "2025-05-13T00:43:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2085732013",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2085732013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091302390",
      "pull_request_review_id": 2843903880,
      "id": 2091302390,
      "node_id": "PRRC_kwDOAN28mc58pr32",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.",
      "path": "bip-0053.mediawiki",
      "position": 34,
      "original_position": 34,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the second URL should be either `https://github.com/bitcoin/bitcoin/pull/26265` (or `https://github.com/bitcoin/bitcoin/pull/26265/commits/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108` but prefer the first one) to be able to readily see the pull request.",
      "created_at": "2025-05-15T14:23:56Z",
      "updated_at": "2025-05-15T15:25:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091302390",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091302390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091321482",
      "pull_request_review_id": 2843903880,
      "id": 2091321482,
      "node_id": "PRRC_kwDOAN28mc58pwiK",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 44,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As written, there is possible ambiguity whether the \"A user\" and \"malicious user\" are the same, though the intent looks to be that they are the same. Perhaps \"A malicious user\" and \"that user\".",
      "created_at": "2025-05-15T14:28:55Z",
      "updated_at": "2025-05-15T15:25:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091321482",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091321482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091324160",
      "pull_request_review_id": 2843903880,
      "id": 2091324160,
      "node_id": "PRRC_kwDOAN28mc58pxMA",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 49,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe peer receiving the malicious block marks the block as invalid, as T<sub>m</sub>\r\n```",
      "created_at": "2025-05-15T14:29:22Z",
      "updated_at": "2025-05-15T15:25:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091324160",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091324160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091332783",
      "pull_request_review_id": 2843903880,
      "id": 2091332783,
      "node_id": "PRRC_kwDOAN28mc58pzSv",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 54,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "404, URL needs updating?",
      "created_at": "2025-05-15T14:32:15Z",
      "updated_at": "2025-05-15T15:25:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091332783",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091332783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091337472",
      "pull_request_review_id": 2843903880,
      "id": 2091337472,
      "node_id": "PRRC_kwDOAN28mc58p0cA",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 58,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\na workable second transaction that will hash to the second 32 bytes)– a very\r\n```",
      "created_at": "2025-05-15T14:33:35Z",
      "updated_at": "2025-05-15T15:25:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091337472",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091337472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091339758",
      "pull_request_review_id": 2843903880,
      "id": 2091339758,
      "node_id": "PRRC_kwDOAN28mc58p0_u",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"that has a Merkle root which\" -> \"having a Merkle root that\"",
      "created_at": "2025-05-15T14:34:34Z",
      "updated_at": "2025-05-15T15:25:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091339758",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091339758"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091341403",
      "pull_request_review_id": 2843903880,
      "id": 2091341403,
      "node_id": "PRRC_kwDOAN28mc58p1Zb",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in",
      "path": "bip-0053.mediawiki",
      "position": 61,
      "original_position": 61,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit, suggest moving \"Bitcoin Core\" from the end of the sentence to before the first reference.\r\n\r\n```suggestion\r\nThis attack vector was fixed in Bitcoin Core 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\r\n```",
      "created_at": "2025-05-15T14:35:21Z",
      "updated_at": "2025-05-15T15:26:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091341403",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091341403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091390352",
      "pull_request_review_id": 2843903880,
      "id": 2091390352,
      "node_id": "PRRC_kwDOAN28mc58qBWQ",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 67,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "URL needs updating?",
      "created_at": "2025-05-15T14:56:29Z",
      "updated_at": "2025-05-15T15:25:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091390352",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091390352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091399956",
      "pull_request_review_id": 2843903880,
      "id": 2091399956,
      "node_id": "PRRC_kwDOAN28mc58qDsU",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial Merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 78,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "unsure if this matters\r\n\r\n```suggestion\r\nBIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial Merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#partial-merkle-branch-format Partial Merkle Tree Format]</ref>\r\n```",
      "created_at": "2025-05-15T15:00:15Z",
      "updated_at": "2025-05-15T15:26:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091399956",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091399956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091407065",
      "pull_request_review_id": 2843903880,
      "id": 2091407065,
      "node_id": "PRRC_kwDOAN28mc58qFbZ",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial Merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify that your Bitcoin transaction is included in a Merkle root embedded in a Bitcoin block header.\n+Notably this format does not commit to the height of the Merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a Bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 85,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Link is 404",
      "created_at": "2025-05-15T15:03:37Z",
      "updated_at": "2025-05-15T15:25:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091407065",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091407065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091411817",
      "pull_request_review_id": 2843903880,
      "id": 2091411817,
      "node_id": "PRRC_kwDOAN28mc58qGlp",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial Merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify that your Bitcoin transaction is included in a Merkle root embedded in a Bitcoin block header.\n+Notably this format does not commit to the height of the Merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a Bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity for SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a Merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the Merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 95,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "computationally",
      "created_at": "2025-05-15T15:06:08Z",
      "updated_at": "2025-05-15T15:25:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091411817",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091411817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091414362",
      "pull_request_review_id": 2843903880,
      "id": 2091414362,
      "node_id": "PRRC_kwDOAN28mc58qHNa",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial Merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify that your Bitcoin transaction is included in a Merkle root embedded in a Bitcoin block header.\n+Notably this format does not commit to the height of the Merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a Bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity for SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a Merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the Merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80-byte header + 448-byte partial Merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80-byte header + 416 bytes partial Merkle tree for coinbase tx + 416 bytes partial Merkle tree for tx = 912 bytes.]</ref>",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 96,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nof SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29 Base proof: 80-byte header + 448-byte partial Merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80-byte header + 416 bytes partial Merkle tree for coinbase tx + 416 bytes partial Merkle tree for tx = 912 bytes.]</ref>\r\n```",
      "created_at": "2025-05-15T15:07:22Z",
      "updated_at": "2025-05-15T15:25:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091414362",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091414362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091415061",
      "pull_request_review_id": 2843903880,
      "id": 2091415061,
      "node_id": "PRRC_kwDOAN28mc58qHYV",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial Merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify that your Bitcoin transaction is included in a Merkle root embedded in a Bitcoin block header.\n+Notably this format does not commit to the height of the Merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a Bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity for SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a Merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the Merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80-byte header + 448-byte partial Merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80-byte header + 416 bytes partial Merkle tree for coinbase tx + 416 bytes partial Merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the Bitcoin blockchain as of this",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 100,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "occurred",
      "created_at": "2025-05-15T15:07:42Z",
      "updated_at": "2025-05-15T15:25:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091415061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091415061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091415807",
      "pull_request_review_id": 2843903880,
      "id": 2091415807,
      "node_id": "PRRC_kwDOAN28mc58qHj_",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial Merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify that your Bitcoin transaction is included in a Merkle root embedded in a Bitcoin block header.\n+Notably this format does not commit to the height of the Merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a Bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity for SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a Merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the Merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80-byte header + 448-byte partial Merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80-byte header + 416 bytes partial Merkle tree for coinbase tx + 416 bytes partial Merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the Bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the Bitcoin blockchain]</ref>",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 101,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "404?",
      "created_at": "2025-05-15T15:08:05Z",
      "updated_at": "2025-05-15T15:25:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091415807",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091415807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091419406",
      "pull_request_review_id": 2843903880,
      "id": 2091419406,
      "node_id": "PRRC_kwDOAN28mc58qIcO",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial Merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify that your Bitcoin transaction is included in a Merkle root embedded in a Bitcoin block header.\n+Notably this format does not commit to the height of the Merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a Bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity for SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a Merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the Merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80-byte header + 448-byte partial Merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80-byte header + 416 bytes partial Merkle tree for coinbase tx + 416 bytes partial Merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the Bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the Bitcoin blockchain]</ref>\n+with the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the Bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre-segwit 64-byte transactions====\n+\n+Pre-segwit 64-byte transactions cannot spend a UTXO protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the Bitcoin network, Bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a pre-segwit 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/non-standard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 non-standard hashlock UTXOs that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 110,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "404",
      "created_at": "2025-05-15T15:09:52Z",
      "updated_at": "2025-05-15T15:25:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091419406",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091419406"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091425559",
      "pull_request_review_id": 2843903880,
      "id": 2091425559,
      "node_id": "PRRC_kwDOAN28mc58qJ8X",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial Merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify that your Bitcoin transaction is included in a Merkle root embedded in a Bitcoin block header.\n+Notably this format does not commit to the height of the Merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a Bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity for SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a Merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the Merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80-byte header + 448-byte partial Merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80-byte header + 416 bytes partial Merkle tree for coinbase tx + 416 bytes partial Merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the Bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the Bitcoin blockchain]</ref>\n+with the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the Bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre-segwit 64-byte transactions====\n+\n+Pre-segwit 64-byte transactions cannot spend a UTXO protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the Bitcoin network, Bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a pre-segwit 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/non-standard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 non-standard hashlock UTXOs that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock UTXOs in the Bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a non-standard UTXO that are inherently malleable.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>\n+Policy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are not consensus rules. If a user has a way to confirm an already non-standard\n+64-byte transaction - they can malleate the transaction by violating policy rules to change the size of the transaction to a size other than 64 bytes.\n+\n+====Segwit 64-byte transactions====\n+\n+This BIP disallows single-input single-output segwit transactions that pay to a 2-byte witness program.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73#p-4382-future-segwit-versions-10 BIP141 says witness programs can be 2 bytes in size, which makes the scriptPubKey a total of 4 bytes]</ref>\n+The only known use case<ref>[https://bitcoin.stackexchange.com/a/110664 Why do we have 2-byte witness programs? The original rationale for the lower end of the range of valid witness program lengths is that 2 bytes is enough to guarantee no ambiguity of how the program would be pushed (some 1-byte values can - and according to standardness, must - be pushed with OP_n, and dealing with those would have complicated the matter).]</ref>\n+for this type of transaction is ephemeral anchor outputs.<ref>[https://bitcoinops.org/en/topics/ephemeral-anchors/ What are ephemeral anchor outputs? This allows anyone on the network to use that output as the input to a child transaction. This allows anyone to create the fee-paying child, even if they don’t receive any of the other outputs from the parent transaction. This allows ephemeral anchors to function as fee sponsorship but without requiring any consensus changes.]</ref>\n+\n+==Reference implementation==\n+\n+<source lang=\"cpp\">\n+/**\n+ * We want to enforce certain rules (specifically the 64-byte transaction check)\n+ * before we call CheckBlock to check the Merkle root. This allows us to enforce\n+ * malleability checks which may interact with other CheckBlock checks.\n+ * This is currently called both in AcceptBlock prior to writing the block to",
      "path": "bip-0053.mediawiki",
      "position": 130,
      "original_position": 130,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "- Ambiguous \"This\" here (perhaps \"This function\" instead?), following \"This\" in the preceding sentence that appears to refer to a different subject\r\n\r\n- Suggest specifying the implementation (presumably Bitcoin Core) and version along with \"currently\"",
      "created_at": "2025-05-15T15:12:59Z",
      "updated_at": "2025-05-15T15:27:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091425559",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091425559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091431197",
      "pull_request_review_id": 2843903880,
      "id": 2091431197,
      "node_id": "PRRC_kwDOAN28mc58qLUd",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial Merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify that your Bitcoin transaction is included in a Merkle root embedded in a Bitcoin block header.\n+Notably this format does not commit to the height of the Merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a Bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity for SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a Merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the Merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80-byte header + 448-byte partial Merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80-byte header + 416 bytes partial Merkle tree for coinbase tx + 416 bytes partial Merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the Bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the Bitcoin blockchain]</ref>\n+with the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the Bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre-segwit 64-byte transactions====\n+\n+Pre-segwit 64-byte transactions cannot spend a UTXO protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the Bitcoin network, Bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a pre-segwit 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/non-standard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 non-standard hashlock UTXOs that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock UTXOs in the Bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a non-standard UTXO that are inherently malleable.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>\n+Policy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are not consensus rules. If a user has a way to confirm an already non-standard\n+64-byte transaction - they can malleate the transaction by violating policy rules to change the size of the transaction to a size other than 64 bytes.\n+\n+====Segwit 64-byte transactions====\n+\n+This BIP disallows single-input single-output segwit transactions that pay to a 2-byte witness program.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73#p-4382-future-segwit-versions-10 BIP141 says witness programs can be 2 bytes in size, which makes the scriptPubKey a total of 4 bytes]</ref>\n+The only known use case<ref>[https://bitcoin.stackexchange.com/a/110664 Why do we have 2-byte witness programs? The original rationale for the lower end of the range of valid witness program lengths is that 2 bytes is enough to guarantee no ambiguity of how the program would be pushed (some 1-byte values can - and according to standardness, must - be pushed with OP_n, and dealing with those would have complicated the matter).]</ref>\n+for this type of transaction is ephemeral anchor outputs.<ref>[https://bitcoinops.org/en/topics/ephemeral-anchors/ What are ephemeral anchor outputs? This allows anyone on the network to use that output as the input to a child transaction. This allows anyone to create the fee-paying child, even if they don’t receive any of the other outputs from the parent transaction. This allows ephemeral anchors to function as fee sponsorship but without requiring any consensus changes.]</ref>\n+\n+==Reference implementation==\n+\n+<source lang=\"cpp\">\n+/**\n+ * We want to enforce certain rules (specifically the 64-byte transaction check)\n+ * before we call CheckBlock to check the Merkle root. This allows us to enforce\n+ * malleability checks which may interact with other CheckBlock checks.\n+ * This is currently called both in AcceptBlock prior to writing the block to\n+ * disk and in ConnectBlock.\n+ * Note that as this is called before merkle-tree checks so must never return a",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 132,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n * Note that as this function is called before merkle-tree checks, it must never return a\r\n```",
      "created_at": "2025-05-15T15:15:57Z",
      "updated_at": "2025-05-15T15:25:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2091431197",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2091431197"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098703014",
      "pull_request_review_id": 2855337274,
      "id": 2098703014,
      "node_id": "PRRC_kwDOAN28mc59F6qm",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.",
      "path": "bip-0053.mediawiki",
      "position": 34,
      "original_position": 34,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": 2091302390,
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think [#26265](https://github.com/bitcoin/bitcoin/pull/26265) got merged so it doesn't really make sense to link to it?",
      "created_at": "2025-05-20T19:21:38Z",
      "updated_at": "2025-05-20T19:21:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2098703014",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098703014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098871219",
      "pull_request_review_id": 2855586829,
      "id": 2098871219,
      "node_id": "PRRC_kwDOAN28mc59Gjuz",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 67,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": 2091390352,
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "How should i be linking these? These are the 2 options I see\r\n\r\n1. Its my understanding I cannot use relative paths inside of mediawiki (i.e. `../bip-0053/2-BitcoinMerkle.pdf`\r\n2. If I link to a commit, the commit will likely be squashed and no longer exist after the rebase.",
      "created_at": "2025-05-20T21:02:41Z",
      "updated_at": "2025-05-20T21:02:41Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2098871219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098871219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098876698",
      "pull_request_review_id": 2855595284,
      "id": 2098876698,
      "node_id": "PRRC_kwDOAN28mc59GlEa",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial Merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#user-content-Partial_Merkle_branch_format Partial Merkle Tree Format]</ref>\n+that allows you to verify that your Bitcoin transaction is included in a Merkle root embedded in a Bitcoin block header.\n+Notably this format does not commit to the height of the Merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a Bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity for SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a Merkle proof for a transaction is secure.]</ref>.\n+\n+==Rationale==\n+\n+===SPV clients===\n+\n+Attacks on SPV clients could be mitigated by knowing the depth of the Merkle tree. Requiring SPV clients to request both the coinbase and payment transaction could mitigate this attack.\n+To produce a valid coinbase transaction at the same depth that our fake transaction F occurs at would require 224 bits of work.\n+As mentioned above, this is computionally and financially expensive, but theoretically possible. This design would increase the size\n+of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/29?u=chris_stewart_5  Base proof: 80-byte header + 448-byte partial Merkle tree = 528 bytes. Proof with coinbase tx, assuming the coinbase tx is in the left half of the tree and the tx to prove is in the right half of the tree: 80-byte header + 416 bytes partial Merkle tree for coinbase tx + 416 bytes partial Merkle tree for tx = 912 bytes.]</ref>\n+\n+==Backward compatibility==\n+\n+There have been 5 64-byte transactions that have occcurred in the Bitcoin blockchain as of this\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the Bitcoin blockchain]</ref>\n+with the last transaction 7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612<ref>[https://mempool.space/tx/7f2efc6546011ad3227b2da678be0d30c7f4b08e2ce57b5edadd437f9e27a612 Last 64-byte transaction in the Bitcoin blockchain]</ref>\n+occurring at block height 419,606<ref>[https://mempool.space/block/000000000000000000308f1efc24419f34a3bafcc2b53c32dd57e4502865fd84 Block 419,606]</ref>.\n+\n+====Pre-segwit 64-byte transactions====\n+\n+Pre-segwit 64-byte transactions cannot spend a UTXO protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the Bitcoin network, Bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n+The largest scriptSig a pre-segwit 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n+\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/non-standard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 non-standard hashlock UTXOs that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+non standard hashlock UTXOs in the Bitcoin blockchain. None of them have a 0-3 byte pre-image. This means they cannot be spent by a 64-byte transaction.\n+\n+Pre-segwit 64-byte transactions that spend a non-standard UTXO that are inherently malleable.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#trust-free-unconfirmed-transaction-dependency-chain Details on how to malleate a pre-segwit transaction]</ref>\n+Policy rules such as CLEANSTACK, MINIMALDATA, PUSHONLY are not consensus rules. If a user has a way to confirm an already non-standard\n+64-byte transaction - they can malleate the transaction by violating policy rules to change the size of the transaction to a size other than 64 bytes.\n+\n+====Segwit 64-byte transactions====\n+\n+This BIP disallows single-input single-output segwit transactions that pay to a 2-byte witness program.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73#p-4382-future-segwit-versions-10 BIP141 says witness programs can be 2 bytes in size, which makes the scriptPubKey a total of 4 bytes]</ref>\n+The only known use case<ref>[https://bitcoin.stackexchange.com/a/110664 Why do we have 2-byte witness programs? The original rationale for the lower end of the range of valid witness program lengths is that 2 bytes is enough to guarantee no ambiguity of how the program would be pushed (some 1-byte values can - and according to standardness, must - be pushed with OP_n, and dealing with those would have complicated the matter).]</ref>\n+for this type of transaction is ephemeral anchor outputs.<ref>[https://bitcoinops.org/en/topics/ephemeral-anchors/ What are ephemeral anchor outputs? This allows anyone on the network to use that output as the input to a child transaction. This allows anyone to create the fee-paying child, even if they don’t receive any of the other outputs from the parent transaction. This allows ephemeral anchors to function as fee sponsorship but without requiring any consensus changes.]</ref>\n+\n+==Reference implementation==\n+\n+<source lang=\"cpp\">\n+/**\n+ * We want to enforce certain rules (specifically the 64-byte transaction check)\n+ * before we call CheckBlock to check the Merkle root. This allows us to enforce\n+ * malleability checks which may interact with other CheckBlock checks.\n+ * This is currently called both in AcceptBlock prior to writing the block to",
      "path": "bip-0053.mediawiki",
      "position": 130,
      "original_position": 130,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": 2091425559,
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same response as here: https://github.com/bitcoin/bips/pull/1760#discussion_r1987578520",
      "created_at": "2025-05-20T21:06:23Z",
      "updated_at": "2025-05-20T21:06:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2098876698",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098876698"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098886581",
      "pull_request_review_id": 2855610199,
      "id": 2098886581,
      "node_id": "PRRC_kwDOAN28mc59Gne1",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A user could find a malicious 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next the malicious user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block that has a Merkle\n+root which is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction which will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 67,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "c07e507da9021a603f9933f88f221fef4986b518",
      "in_reply_to_id": 2091390352,
      "user": {
        "login": "Christewart",
        "id": 3514957,
        "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Christewart",
        "html_url": "https://github.com/Christewart",
        "followers_url": "https://api.github.com/users/Christewart/followers",
        "following_url": "https://api.github.com/users/Christewart/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Christewart/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Christewart/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
        "organizations_url": "https://api.github.com/users/Christewart/orgs",
        "repos_url": "https://api.github.com/users/Christewart/repos",
        "events_url": "https://api.github.com/users/Christewart/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Christewart/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I fixed them by just using this link, seems like the problem occurred when we renamed from bip-xxxx -> bip-0053\r\n\r\nhttps://github.com/Christewart/bips/tree/2024-12-20-64bytetxs/bip-0053",
      "created_at": "2025-05-20T21:12:52Z",
      "updated_at": "2025-05-20T21:12:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2098886581",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098886581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098936652",
      "pull_request_review_id": 2855684028,
      "id": 2098936652,
      "node_id": "PRRC_kwDOAN28mc59GztM",
      "diff_hunk": "@@ -64,7 +64,7 @@ This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-\n ==== Block malleability with consensus VALID transactions ====\n \n Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n-rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+rules requires 224 bits of work<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-0053/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 14,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "1b75553deb2a790e11fcb6dce95ecff93808dd15",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nrules requires 224 bits of work<ref>[bip-0053/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\r\n```\r\n",
      "created_at": "2025-05-20T21:54:18Z",
      "updated_at": "2025-05-20T21:57:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2098936652",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098936652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098936706",
      "pull_request_review_id": 2855684028,
      "id": 2098936706,
      "node_id": "PRRC_kwDOAN28mc59GzuC",
      "diff_hunk": "@@ -51,7 +51,7 @@ is not a valid transaction according to network consensus rules.\n Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n and add the block to their blockchain. Peers that receive the invalid block before the valid block\n will never come to consensus with their peers due to the malicious user finding a collision\n-within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX/2-BitcoinMerkle.pdf to produce a block having a Merkle root that\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-0053/2-BitcoinMerkle.pdf to produce a block having a Merkle root that",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 5,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "1b75553deb2a790e11fcb6dce95ecff93808dd15",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "While those links work at the time, a relative link would make more sense to me, because it would work now, and still link to the correct document if it gets updated later.\r\n\r\n```suggestion\r\nwithin the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[bip-0053/2-BitcoinMerkle.pdf to produce a block having a Merkle root that\r\n```",
      "created_at": "2025-05-20T21:54:20Z",
      "updated_at": "2025-05-20T21:57:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2098936706",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098936706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098938615",
      "pull_request_review_id": 2855684028,
      "id": 2098938615,
      "node_id": "PRRC_kwDOAN28mc59G0L3",
      "diff_hunk": "@@ -98,7 +98,7 @@ of SPV proofs by 70%.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-\n ==Backward compatibility==\n \n There have been 5 64-byte transactions that have occurred in the Bitcoin blockchain as of this\n-writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/64byte-tx-mainnet.txt 64-byte transactions in the Bitcoin blockchain]</ref>\n+writing <ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-0053/64byte-tx-mainnet.txt 64-byte transactions in the Bitcoin blockchain]</ref>",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 32,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "1b75553deb2a790e11fcb6dce95ecff93808dd15",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nwriting <ref>[[bip-0053/64byte-tx-mainnet.txt|64-byte transactions in the Bitcoin blockchain]]</ref>",
      "created_at": "2025-05-20T21:56:04Z",
      "updated_at": "2025-05-21T22:27:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2098938615",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098938615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098939490",
      "pull_request_review_id": 2855684028,
      "id": 2098939490,
      "node_id": "PRRC_kwDOAN28mc59G0Zi",
      "diff_hunk": "@@ -107,7 +107,7 @@ occurring at block height 419,606<ref>[https://mempool.space/block/0000000000000\n Pre-segwit 64-byte transactions cannot spend a UTXO protected by a digital signature.<ref>[https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki After BIP66 was activated on the Bitcoin network, Bitcoin transactions cannot have a digital signature smaller than 9 bytes.]</ref>\n The largest scriptSig a pre-segwit 64-byte transaction can have is 4 bytes.<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73]</ref>\n \n-There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/non-standard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 non-standard hashlock UTXOs that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>\n+There are 6<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-0053/non-standard-hashlock-utxos.txt As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 non-standard hashlock UTXOs that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]</ref>",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 41,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "1b75553deb2a790e11fcb6dce95ecff93808dd15",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThere are 6<ref>[[bip-0053/non-standard-hashlock-utxos.txt|As of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7` there exist 6 non-standard hashlock UTXOs that could theoretically have a 0-3 byte pre-image. None of them have a 0-3 byte pre-image.]]</ref>\r\n```",
      "created_at": "2025-05-20T21:56:55Z",
      "updated_at": "2025-05-21T22:27:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2098939490",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2098939490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2101272453",
      "pull_request_review_id": 2859269867,
      "id": 2101272453,
      "node_id": "PRRC_kwDOAN28mc59Pt-F",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A malicious user could find a 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next that user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid, as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-0053/2-BitcoinMerkle.pdf to produce a block having a Merkle root that\n+is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction that will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[bip-0053/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 73,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "bc9afbca79d484970756aa92659d246c049fbb55",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nrules requires 224 bits of work<ref>[[bip-0053/2-BitcoinMerkle.pdf|Note that the first transaction in a block must be a coinbase, and as discussed\r\nabove, that largely constrains the first 32 bytes of the first transaction: only\r\nthe 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\r\nof work to find the first node in a given row of the tree that would match the\r\nfirst half of a coinbase, in addition to the amount of work required to grind the\r\nsecond half of the transaction to something meaningful (which is much easier –\r\nonly 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]]</ref>.\r\n```\r\n\r\nI tested that, and it works: \r\n![image](https://github.com/user-attachments/assets/3b15b7db-99c6-4e15-9685-bbe508da2f17)\r\n",
      "created_at": "2025-05-21T22:25:25Z",
      "updated_at": "2025-05-21T22:47:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2101272453",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2101272453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2101280571",
      "pull_request_review_id": 2859269867,
      "id": 2101280571,
      "node_id": "PRRC_kwDOAN28mc59Pv87",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A malicious user could find a 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next that user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid, as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-0053/2-BitcoinMerkle.pdf to produce a block having a Merkle root that\n+is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction that will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[bip-0053/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.\n+This is computationally and financially expensive but theoretically possible. This can lead to a persistent chain split on the network.\n+\n+=== Attack on SPV clients ===\n+\n+BIP37<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki BIP37]</ref>provides a partial Merkle tree format<ref>[https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#partial-merkle-branch-format Partial Merkle Tree Format]</ref>\n+that allows you to verify that your Bitcoin transaction is included in a Merkle root embedded in a Bitcoin block header.\n+Notably this format does not commit to the height of the Merkle tree.\n+\n+Suppose a (valid) 64-byte transaction T is included in a block with the property that the second 32 bytes (which\n+are less constrained than the first 32 bytes) are constructed so that they collide\n+with the hash of some other fake, invalid transaction F. The attacker can fool the SPV client into believing that F\n+was included in a Bitcoin block rather than T with 81 bits<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-0053/2-BitcoinMerkle.pdf An attacker who can do 81 bits of work (followed by another 40 bits of work, to\n+construct the funding transaction whose coins will be spent by this one) is able\n+to fool an SPV client in this way.]</ref> of work. This also reduces implementation complexity for SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a Merkle proof for a transaction is secure.]</ref>.",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 87,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "bc9afbca79d484970756aa92659d246c049fbb55",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nwas included in a Bitcoin block rather than T with 81 bits<ref>[[bip-0053/2-BitcoinMerkle.pdf|An attacker who can do 81 bits of work (followed by another 40 bits of work, to\r\nconstruct the funding transaction whose coins will be spent by this one) is able\r\nto fool an SPV client in this way.]]</ref> of work. This also reduces implementation complexity for SPV wallets<ref>[https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/43 The steps needed to make sure a Merkle proof for a transaction is secure.]</ref>.\r\n```",
      "created_at": "2025-05-21T22:28:30Z",
      "updated_at": "2025-05-21T22:31:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2101280571",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2101280571"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": 85,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2101284813",
      "pull_request_review_id": 2859269867,
      "id": 2101284813,
      "node_id": "PRRC_kwDOAN28mc59Pw_N",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A malicious user could find a 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next that user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid, as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-0053/2-BitcoinMerkle.pdf to produce a block having a Merkle root that\n+is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction that will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 59,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "bc9afbca79d484970756aa92659d246c049fbb55",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nwithin the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[[bip-0053/2-BitcoinMerkle.pdf|to produce a block having a Merkle root that\r\nis a hash of a 64-byte quantity that deserializes validly, it’s enough\r\nto just do 8 bits of work to find a workable coinbase (which will hash to the first\r\n32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\r\na workable second transaction that will hash to the second 32 bytes)– a very\r\nsmall amount of computation.]]</ref>\r\n```",
      "created_at": "2025-05-21T22:30:05Z",
      "updated_at": "2025-05-21T22:31:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2101284813",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2101284813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": 54,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2101311052",
      "pull_request_review_id": 2859323349,
      "id": 2101311052,
      "node_id": "PRRC_kwDOAN28mc59P3ZM",
      "diff_hunk": "@@ -0,0 +1,160 @@\n+<pre>\n+  BIP: 53\n+  Layer: Consensus (soft fork)\n+  Title: Disallow 64-byte transactions\n+  Author: Chris Stewart <stewart.chris1234@gmail.com>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0053\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-04-11\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP describes the rationale for disallowing transactions that are serialized to 64 bytes without the transaction's witness.\n+We describe the weaknesses to the Merkle tree included in Bitcoin block headers, and various exploits for those weaknesses.\n+\n+==Specification==\n+\n+This BIP disallows Bitcoin transactions that are serialized to 64 bytes in length without their witness.\n+\n+==Motivation==\n+\n+Bitcoin block headers include a commitment to the set of transactions in a given\n+block, which is implemented by constructing a Merkle tree of transaction ids\n+(double-SHA256 hash of a transaction) and including the root of the tree in the\n+block header. This in turn allows for proving to a Bitcoin light client that a\n+given transaction is in a given block by providing a path through the tree to the\n+transaction. However, Bitcoin’s particular construction of the Merkle tree has\n+several security weaknesses, including at least two forms of block malleability\n+that have an impact on the consensus logic of Bitcoin Core, and an attack on\n+light clients, where an invalid transaction could be ”proven” to appear in a block\n+by doing substantially less work than a SHA256 hash collision would require.\n+This has been mitigated by Bitcoin Core's relay policy and the RPC interface since 2018<ref>[https://github.com/bitcoin/bitcoin/pull/11423/commits/7485488e907e236133a016ba7064c89bf9ab6da3 PR #11423 disallows transactions that are less than 82 bytes in size from Bitcoin Core relay and RPC interface]</ref><ref>[https://github.com/bitcoin/bitcoin/commit/8c5b3646b5afe8a61f5c66478d8e11f0d2ce5108 Reduces the minimum transaction size required for a transaction to be considered standard from 82 bytes to 65 bytes]</ref>.\n+\n+=== Block malleability ===\n+\n+64-byte transactions introduce block malleability. Malicious peers can construct consensus valid and invalid 64-byte\n+transactions that have the same serialization as the concatenation of 2 hashes in the Merkle tree.\n+\n+Assume we have a valid Bitcoin block with 2 transactions in it that have transaction ids of T<sub>0</sub> and T<sub>1</sub>.\n+The Merkle root for this block is H(T<sub>0</sub>||T<sub>1</sub>).\n+A malicious user could find a 64-byte transaction T<sub>m</sub> that serializes to T<sub>0</sub>||T<sub>1</sub>.\n+Next that user relays the block containing the malicious T<sub>m</sub> rather than the\n+valid Bitcoin transactions that correspond with T<sub>0</sub> and T<sub>1</sub>.\n+\n+==== Block malleability with consensus INVALID transactions ====\n+\n+The peer receiving the malicious block marks the block as invalid, as T<sub>m</sub>\n+is not a valid transaction according to network consensus rules.\n+Other peers on the network receive the valid block containing T<sub>0</sub> and T<sub>1</sub>\n+and add the block to their blockchain. Peers that receive the invalid block before the valid block\n+will never come to consensus with their peers due to the malicious user finding a collision\n+within the block's Merkle root. Finding this collision is approximately 22 bits worth of work.<ref>[https://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-0053/2-BitcoinMerkle.pdf to produce a block having a Merkle root that\n+is a hash of a 64-byte quantity that deserializes validly, it’s enough\n+to just do 8 bits of work to find a workable coinbase (which will hash to the first\n+32 bytes), plus another ≈22 bits of work ((1/5) ∗224, so slightly less) to find\n+a workable second transaction that will hash to the second 32 bytes)– a very\n+small amount of computation.]</ref>\n+\n+This attack vector was fixed in 0.6.2<ref>[https://bitcoin.org/en/alert/2012-05-14-dos#risks CVE-2012-2459]</ref>, re-introduced in 0.13.x<ref>[https://github.com/bitcoin/bitcoin/pull/7225 #7225]</ref> and patched again in\n+0.14<ref>[https://github.com/bitcoin/bitcoin/pull/9765 #9765]</ref> of Bitcoin Core.\n+\n+==== Block malleability with consensus VALID transactions ====\n+\n+Producing a valid Bitcoin transaction T<sub>m</sub> that adheres to network consensus\n+rules requires 224 bits of work<ref>[bip-0053/2-BitcoinMerkle.pdf Note that the first transaction in a block must be a coinbase, and as discussed\n+above, that largely constrains the first 32 bytes of the first transaction: only\n+the 4 version bytes are unconstrained. So it would take at least 28*8= 224 bits\n+of work to find the first node in a given row of the tree that would match the\n+first half of a coinbase, in addition to the amount of work required to grind the\n+second half of the transaction to something meaningful (which is much easier –\n+only 16 bytes or so are constrained, so approximately 128 bits of work to find a collision). Of course, any of the rows in the Merkle tree could be used, but it nevertheless seems clear that this should be computationally infeasible.]</ref>.",
      "path": "bip-0053.mediawiki",
      "position": null,
      "original_position": 73,
      "commit_id": "73991aea51f251c69a4009766bdfa1e88e2bbd63",
      "original_commit_id": "bc9afbca79d484970756aa92659d246c049fbb55",
      "in_reply_to_id": 2101272453,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I realized that after figuring out the fix, I might as well just commit it. ;)\r\nI tested it, it works. :)",
      "created_at": "2025-05-21T22:45:40Z",
      "updated_at": "2025-05-21T22:45:41Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1760#discussion_r2101311052",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2101311052"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1760"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    }
  ]
}