{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/642",
    "id": 166991505,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTY2OTkxNTA1",
    "html_url": "https://github.com/bitcoin/bips/pull/642",
    "diff_url": "https://github.com/bitcoin/bips/pull/642.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/642.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/642/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/642/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/642/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
    "number": 642,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "BIP 300: Hashrate Escrows (Consensus layer)",
    "user": {
      "login": "psztorc",
      "id": 3165891,
      "node_id": "MDQ6VXNlcjMxNjU4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/psztorc",
      "html_url": "https://github.com/psztorc",
      "followers_url": "https://api.github.com/users/psztorc/followers",
      "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
      "organizations_url": "https://api.github.com/users/psztorc/orgs",
      "repos_url": "https://api.github.com/users/psztorc/repos",
      "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/psztorc/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is my draft of the hashrate escrows bip, the first of two drivechain bips.",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2018-02-04T02:33:59Z",
    "updated_at": "2023-07-26T19:18:43Z",
    "closed_at": "2019-09-20T17:59:19Z",
    "mergeable_state": "unknown",
    "merged_at": "2019-09-20T17:59:19Z",
    "merge_commit_sha": "b5723035e23896d05548caf7412a358e28c38024",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "psztorc:master",
      "ref": "master",
      "sha": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "7e9fab150f2e4b33c6195d2734e38f9e51721ea0",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5531,
        "stargazers_count": 8212,
        "watchers_count": 8212,
        "size": 13787,
        "default_branch": "master",
        "open_issues_count": 111,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-07-23T05:25:35Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2023-07-26T19:14:11Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 361,
    "deletions": 0,
    "changed_files": 5,
    "commits": 8,
    "review_comments": 67,
    "comments": 28
  },
  "events": [
    {
      "event": "labeled",
      "id": 1457195784,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE0NTcxOTU3ODQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1457195784",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-05T04:30:56Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 363312567,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzMxMjU2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/363312567",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-06T05:08:34Z",
      "updated_at": "2018-02-06T05:08:34Z",
      "author_association": "MEMBER",
      "body": "This seems to have the wrong files...?",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-363312567",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 364681148,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDY4MTE0OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/364681148",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-10T19:05:04Z",
      "updated_at": "2018-02-10T19:05:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "> This seems to have the wrong files...?\r\n\r\nIt does, my mistake! Fixed now",
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-364681148",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 364698607,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDY5ODYwNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/364698607",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-10T22:03:30Z",
      "updated_at": "2018-02-10T22:03:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "Ok, this one appears to have survived the transition to .mediawiki format.",
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-364698607",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 366487558,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjQ4NzU1OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/366487558",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-18T02:26:27Z",
      "updated_at": "2018-02-18T02:26:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "> written partially by some Blockstream co-founders.\r\n\r\nwhy do the bip readers care about who wrote it?\r\n\r\n> A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners\r\n\r\nThis is not true for sidechains using spv 2wp. If you want to make that analogy, at most it would be with the sidechain miners, not with bitcoin miners. Remember merged mining is only an option. Sidechains could even use different proof of work than bitcoin.\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-366487558",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 366488267,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjQ4ODI2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/366488267",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-18T02:45:19Z",
      "updated_at": "2018-02-18T02:45:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "Also, wouldn't it be better to rebase the implementation on top of master rather than backport changes from master to it? How are we supposed to find out which commits are relevant to the implementation of this BIP?\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-366488267",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 366533737,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjUzMzczNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/366533737",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-18T17:52:47Z",
      "updated_at": "2018-02-18T17:53:27Z",
      "author_association": "CONTRIBUTOR",
      "body": ">> written partially by some Blockstream co-founders.\r\n\r\n> why do the bip readers care about who wrote it?\r\n\r\nIt is cursory background information. Often, the easiest way to explain something is to link it to an existing thing that the audience may already be familiar with.\r\n\r\n>> A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners\r\n\r\n> This is not true for sidechains using spv 2wp.\r\n\r\nActually, it is true. Even if the sidechain uses a different PoW, since 51% mainchain hashrate can control the contents of the mainchain entirely, they can \"steal\" from the sidechain.\r\n\r\nAnd here it is doubly true because the SPV proof here always proves mainchain work, not sidechain work.",
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-366533737",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 366534605,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjUzNDYwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/366534605",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-18T18:04:50Z",
      "updated_at": "2018-02-18T18:04:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Also, wouldn't it be better to rebase the implementation on top of master rather than backport changes from master to it? How are we supposed to find out which commits are relevant to the implementation of this BIP?\r\n\r\nAre you talking about the BIP text? Because the code is in a branch called \"mainchainBMM\" as seen here https://github.com/drivechain-project/bitcoin/tree/mainchainBMM  .",
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-366534605",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 366542602,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjU0MjYwMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/366542602",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-18T19:56:22Z",
      "updated_at": "2018-02-18T19:56:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Actually, it is true. Even if the sidechain uses a different PoW, since 51% mainchain hashrate can control the contents of the mainchain entirely, they can \"steal\" from the sidechain.\r\n\r\nNo, all they can do is censor the pegouts, but they cannot keep the coins for themselves without providing an spv proof with work from the sidechain.\r\nIn spv 2wp, the pegin tx in the sidechain presents work from the mainchain, and the pegout tx on the mainchain presents work from the sidechain.\r\n\r\n> Are you talking about the BIP text? Because the code is in a branch called \"mainchainBMM\" as seen here https://github.com/drivechain-project/bitcoin/tree/mainchainBMM .\r\n\r\nI'm talking about that branch, it seems to have commits recently backported from master apart from the necessary changes. Don't you have a branch that contains only the changes that would be necessary (done against current master or against some other previous version of master)?\r\nThat would be more convenient for review. Perhaps you can point out thecommits on that branch that are relevant for this BIP?\r\n\r\nFor example, commit https://github.com/drivechain-project/bitcoin/commit/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c in your branch is clearly not relevant to the implementation of this BIP.\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-366542602",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 366554935,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjU1NDkzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/366554935",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-18T22:43:41Z",
      "updated_at": "2018-02-18T22:43:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > Actually, it is true. Even if the sidechain uses a different PoW, since 51% mainchain hashrate can control the contents of the mainchain entirely, they can \"steal\" from the sidechain.\r\n\r\n> No, all they can do is censor the pegouts, but they cannot keep the coins for themselves without providing an spv proof with work from the sidechain.\r\n> In spv 2wp, the pegin tx in the sidechain presents work from the mainchain, and the pegout tx on the mainchain presents work from the sidechain.\r\n\r\nThat is [a mistake which it was very important to fix](https://www.youtube.com/watch?v=xGu0o8HH10U&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4&index=1). You are 1.5 years behind on the latest sidechain theory.\r\n\r\n> Don't you have a branch that contains only the changes that would be necessary (done against current master or against some other previous version of master)?\r\n\r\nDo you mean this??? https://github.com/bitcoin/bitcoin/compare/master...drivechain-project:mainchainBMM",
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-366554935",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 366566862,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjU2Njg2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/366566862",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-19T01:17:14Z",
      "updated_at": "2018-02-19T01:22:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Do you mean this??? bitcoin/bitcoin@master...drivechain-project:mainchainBMM\r\n\r\nSorry, yes! I meant that. Thank you.\r\n\r\n> That is a mistake which it was very important to fix. You are 1.5 years behind on the latest sidechain theory.\r\n\r\nI haven't watched the video, but, ok, I guess...never too late to catch up!\r\n\r\nStill, *with spv 2wp, all bitcoin miners can do is censor the pegouts, but they cannot keep the coins for themselves without providing an spv proof with work from the sidechain*.\r\n\r\nSo I think the part of the BIP that contradicts this (ie \"A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners\") should be corrected.\r\nAnother possibility - if that is a necessary part of the definition of a \"Hashrate Escrow\" is to exclude sidechains (or at least the spv 2wp) from its definition, since it doesn't have the same properties.\r\n\r\nOtherwise one could get confused thinking that \"An spv 2wp resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners\", which is not true.\r\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-366566862",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 380335003,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDMzNTAwMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/380335003",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-11T05:49:03Z",
      "updated_at": "2018-04-11T05:49:18Z",
      "author_association": "CONTRIBUTOR",
      "body": ">> I haven't watched the video, but, ok, I guess...never too late to catch up!\r\n>> Still, with spv 2wp, all bitcoin miners can do is censor the pegouts, but they cannot keep the coins for themselves without providing an spv proof with work from the sidechain.\r\n\r\n> So I think the part of the BIP that contradicts this (ie \"A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners\") should be corrected.\r\n\r\nThe video makes the case for the set of miners being the same. Ie \"spv proof with work from the sidechain\" would be the same as \"dynamic-membership set of Bitcoin Miners\".\r\n\r\nSo it is correct as-is.\r\n\r\nYour other comments are just the same error repeated.",
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-380335003",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 380358537,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDM1ODUzNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/380358537",
      "actor": {
        "login": "gusbjerpe",
        "id": 25723625,
        "node_id": "MDQ6VXNlcjI1NzIzNjI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/25723625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gusbjerpe",
        "html_url": "https://github.com/gusbjerpe",
        "followers_url": "https://api.github.com/users/gusbjerpe/followers",
        "following_url": "https://api.github.com/users/gusbjerpe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gusbjerpe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gusbjerpe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gusbjerpe/subscriptions",
        "organizations_url": "https://api.github.com/users/gusbjerpe/orgs",
        "repos_url": "https://api.github.com/users/gusbjerpe/repos",
        "events_url": "https://api.github.com/users/gusbjerpe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gusbjerpe/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-11T07:41:21Z",
      "updated_at": "2018-04-11T07:41:21Z",
      "author_association": "NONE",
      "body": "May I ask why this isn't getting assigned a BIP#? ",
      "user": {
        "login": "gusbjerpe",
        "id": 25723625,
        "node_id": "MDQ6VXNlcjI1NzIzNjI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/25723625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gusbjerpe",
        "html_url": "https://github.com/gusbjerpe",
        "followers_url": "https://api.github.com/users/gusbjerpe/followers",
        "following_url": "https://api.github.com/users/gusbjerpe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gusbjerpe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gusbjerpe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gusbjerpe/subscriptions",
        "organizations_url": "https://api.github.com/users/gusbjerpe/orgs",
        "repos_url": "https://api.github.com/users/gusbjerpe/repos",
        "events_url": "https://api.github.com/users/gusbjerpe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gusbjerpe/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-380358537",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 385123832,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTEyMzgzMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/385123832",
      "actor": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-28T00:16:43Z",
      "updated_at": "2018-04-28T00:16:43Z",
      "author_association": "NONE",
      "body": "@gusbjerpe I believe that Luke-jr who maintains this repository is simply a very busy man. ",
      "user": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-385123832",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "mentioned",
      "id": 1599841892,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU5OTg0MTg5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1599841892",
      "actor": {
        "login": "gusbjerpe",
        "id": 25723625,
        "node_id": "MDQ6VXNlcjI1NzIzNjI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/25723625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gusbjerpe",
        "html_url": "https://github.com/gusbjerpe",
        "followers_url": "https://api.github.com/users/gusbjerpe/followers",
        "following_url": "https://api.github.com/users/gusbjerpe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gusbjerpe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gusbjerpe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gusbjerpe/subscriptions",
        "organizations_url": "https://api.github.com/users/gusbjerpe/orgs",
        "repos_url": "https://api.github.com/users/gusbjerpe/repos",
        "events_url": "https://api.github.com/users/gusbjerpe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gusbjerpe/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-28T00:16:43Z"
    },
    {
      "event": "subscribed",
      "id": 1599841893,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1OTk4NDE4OTM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1599841893",
      "actor": {
        "login": "gusbjerpe",
        "id": 25723625,
        "node_id": "MDQ6VXNlcjI1NzIzNjI1",
        "avatar_url": "https://avatars.githubusercontent.com/u/25723625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gusbjerpe",
        "html_url": "https://github.com/gusbjerpe",
        "followers_url": "https://api.github.com/users/gusbjerpe/followers",
        "following_url": "https://api.github.com/users/gusbjerpe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gusbjerpe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gusbjerpe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gusbjerpe/subscriptions",
        "organizations_url": "https://api.github.com/users/gusbjerpe/orgs",
        "repos_url": "https://api.github.com/users/gusbjerpe/repos",
        "events_url": "https://api.github.com/users/gusbjerpe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gusbjerpe/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-28T00:16:43Z"
    },
    {
      "event": "reviewed",
      "id": 124398098,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI0Mzk4MDk4",
      "url": null,
      "actor": null,
      "commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#pullrequestreview-124398098",
      "submitted_at": "2018-05-30T13:38:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/642"
    },
    {
      "event": "mentioned",
      "id": 1654505606,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTY1NDUwNTYwNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1654505606",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-30T20:20:07Z"
    },
    {
      "event": "subscribed",
      "id": 1654505607,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2NTQ1MDU2MDc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1654505607",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-30T20:20:08Z"
    },
    {
      "event": "mentioned",
      "id": 1654653910,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTY1NDY1MzkxMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1654653910",
      "actor": {
        "login": "pennersr",
        "id": 201022,
        "node_id": "MDQ6VXNlcjIwMTAyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/201022?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pennersr",
        "html_url": "https://github.com/pennersr",
        "followers_url": "https://api.github.com/users/pennersr/followers",
        "following_url": "https://api.github.com/users/pennersr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pennersr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pennersr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pennersr/subscriptions",
        "organizations_url": "https://api.github.com/users/pennersr/orgs",
        "repos_url": "https://api.github.com/users/pennersr/repos",
        "events_url": "https://api.github.com/users/pennersr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pennersr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-30T21:35:05Z"
    },
    {
      "event": "subscribed",
      "id": 1654653913,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2NTQ2NTM5MTM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1654653913",
      "actor": {
        "login": "pennersr",
        "id": 201022,
        "node_id": "MDQ6VXNlcjIwMTAyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/201022?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pennersr",
        "html_url": "https://github.com/pennersr",
        "followers_url": "https://api.github.com/users/pennersr/followers",
        "following_url": "https://api.github.com/users/pennersr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pennersr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pennersr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pennersr/subscriptions",
        "organizations_url": "https://api.github.com/users/pennersr/orgs",
        "repos_url": "https://api.github.com/users/pennersr/repos",
        "events_url": "https://api.github.com/users/pennersr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pennersr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-30T21:35:05Z"
    },
    {
      "event": "mentioned",
      "id": 1659811946,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTY1OTgxMTk0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1659811946",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-03T00:02:27Z"
    },
    {
      "event": "subscribed",
      "id": 1659811947,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2NTk4MTE5NDc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1659811947",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-03T00:02:27Z"
    },
    {
      "event": "commented",
      "id": 477883997,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Nzg4Mzk5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/477883997",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-29T06:26:41Z",
      "updated_at": "2019-03-29T06:26:41Z",
      "author_association": "MEMBER",
      "body": "I'm unsure what the status is of this one...",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-477883997",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "reviewed",
      "id": 222252646,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjIyMjUyNjQ2",
      "url": null,
      "actor": null,
      "commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "rex4539",
        "id": 227442,
        "node_id": "MDQ6VXNlcjIyNzQ0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/227442?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rex4539",
        "html_url": "https://github.com/rex4539",
        "followers_url": "https://api.github.com/users/rex4539/followers",
        "following_url": "https://api.github.com/users/rex4539/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rex4539/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rex4539/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rex4539/subscriptions",
        "organizations_url": "https://api.github.com/users/rex4539/orgs",
        "repos_url": "https://api.github.com/users/rex4539/repos",
        "events_url": "https://api.github.com/users/rex4539/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rex4539/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#pullrequestreview-222252646",
      "submitted_at": "2019-04-03T14:40:16Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/642"
    },
    {
      "event": "commented",
      "id": 480102496,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDEwMjQ5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/480102496",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-04T23:49:45Z",
      "updated_at": "2019-04-04T23:49:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "@luke-jr the BIP was a little outdated, and the code improved away from it. But now it is much shorter, more accurate, and clearer. And it has links to working ~basically stable code. So please consider it resubmitted.",
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-480102496",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "mentioned",
      "id": 2254476462,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjI1NDQ3NjQ2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2254476462",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-04T23:49:45Z"
    },
    {
      "event": "subscribed",
      "id": 2254476463,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIyNTQ0NzY0NjM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2254476463",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-04T23:49:45Z"
    },
    {
      "event": "reviewed",
      "id": 223099984,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjIzMDk5OTg0",
      "url": null,
      "actor": null,
      "commit_id": "dd6a747cb34721d2ee1a762956bb8c5dc2613704",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "rex4539",
        "id": 227442,
        "node_id": "MDQ6VXNlcjIyNzQ0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/227442?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rex4539",
        "html_url": "https://github.com/rex4539",
        "followers_url": "https://api.github.com/users/rex4539/followers",
        "following_url": "https://api.github.com/users/rex4539/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rex4539/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rex4539/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rex4539/subscriptions",
        "organizations_url": "https://api.github.com/users/rex4539/orgs",
        "repos_url": "https://api.github.com/users/rex4539/repos",
        "events_url": "https://api.github.com/users/rex4539/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rex4539/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#pullrequestreview-223099984",
      "submitted_at": "2019-04-05T05:12:47Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/642"
    },
    {
      "event": "commented",
      "id": 480364666,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDM2NDY2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/480364666",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-05T17:49:25Z",
      "updated_at": "2019-04-05T17:49:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > > I haven't watched the video, but, ok, I guess...never too late to catch up!\r\n> > > Still, with spv 2wp, all bitcoin miners can do is censor the pegouts, but they cannot keep the coins for themselves without providing an spv proof with work from the sidechain.\r\n> \r\n> > So I think the part of the BIP that contradicts this (ie \"A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners\") should be corrected.\r\n> \r\n> The video makes the case for the set of miners being the same. Ie \"spv proof with work from the sidechain\" would be the same as \"dynamic-membership set of Bitcoin Miners\".\r\n\r\nThat assumption is not justified. That doesn't need to be the case for spv 2wp, merged mining is not a requirement for spv 2wp.\r\n\r\n> So it is correct as-is.\r\n>\r\n> Your other comments are just the same error repeated.\r\n\r\n...",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-480364666",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 480373534,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDM3MzUzNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/480373534",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-05T18:15:45Z",
      "updated_at": "2019-04-05T18:15:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "> That assumption is not justified. That doesn't need to be the case for spv 2wp, merged mining is not a requirement for spv 2wp.\r\n\r\nThis BIP does not require MM and supports 2wp that are not MM. But I personally assume that MM will be the equilibrium behavior, and the BIP focuses on that.\r\n\r\nAnd even though MM is not a literal requirement (for spv 2wp), in practice some kind of ongoing majority hashrate endorsement *is* required. Because 51% hashrate can filter out anything they dislike from the mainchain.",
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-480373534",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "reviewed",
      "id": 223414617,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjIzNDE0NjE3",
      "url": null,
      "actor": null,
      "commit_id": "d504f5f9b5f9c83f4d0a493df2965bfd8d9716c0",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "rex4539",
        "id": 227442,
        "node_id": "MDQ6VXNlcjIyNzQ0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/227442?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rex4539",
        "html_url": "https://github.com/rex4539",
        "followers_url": "https://api.github.com/users/rex4539/followers",
        "following_url": "https://api.github.com/users/rex4539/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rex4539/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rex4539/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rex4539/subscriptions",
        "organizations_url": "https://api.github.com/users/rex4539/orgs",
        "repos_url": "https://api.github.com/users/rex4539/repos",
        "events_url": "https://api.github.com/users/rex4539/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rex4539/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#pullrequestreview-223414617",
      "submitted_at": "2019-04-05T18:18:48Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/642"
    },
    {
      "event": "commented",
      "id": 480387876,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDM4Nzg3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/480387876",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-05T19:02:06Z",
      "updated_at": "2019-04-05T19:02:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Your claim that drivechains are equivalent in security to to spv sidechains is based (among other things), on the false assumption that the miners of the mainchain and the sidechain are going to be the same.\r\nYou said it yourself here:\r\n\r\n> makes the case for the set of miners being the same. Ie \"spv proof with work from the sidechain\" would be the same as \"dynamic-membership set of Bitcoin Miners\".\r\n\r\n> So it is correct as-is.\r\n\r\nNo, this is not correct, as is, or in any other way.",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-480387876",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 480389573,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDM4OTU3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/480389573",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-05T19:08:15Z",
      "updated_at": "2019-04-05T19:08:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jtimon I still don't see the problem. Why don't you suggest a rewording?",
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-480389573",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "mentioned",
      "id": 2256689391,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjI1NjY4OTM5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2256689391",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-05T19:08:16Z"
    },
    {
      "event": "subscribed",
      "id": 2256689393,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIyNTY2ODkzOTM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2256689393",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-05T19:08:16Z"
    },
    {
      "event": "commented",
      "id": 480414182,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDQxNDE4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/480414182",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-05T20:37:08Z",
      "updated_at": "2019-04-05T20:37:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Not sure, I think I would reword many things...\r\nperhaps \"the dynamic-membership set of Sidechain Miners\" instead of \"the dynamic-membership set of Bitcoin Miners\"?\r\nAlso, not saying anything along the lines of the security assumptions of spv sidechains being the same as drivechain's security assumptions, since they are clearly not.",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-480414182",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 480425930,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDQyNTkzMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/480425930",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-05T21:21:13Z",
      "updated_at": "2019-04-05T21:21:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jtimon Well why don't you get back to us when you are sure",
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-480425930",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "mentioned",
      "id": 2256962215,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjI1Njk2MjIxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2256962215",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-05T21:21:13Z"
    },
    {
      "event": "subscribed",
      "id": 2256962216,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIyNTY5NjIyMTY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2256962216",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-05T21:21:13Z"
    },
    {
      "event": "commented",
      "id": 480456418,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDQ1NjQxOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/480456418",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-06T00:08:57Z",
      "updated_at": "2019-04-06T00:08:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Well, what I'm sure about is what you have is wrong. But since you don't seem interested in addressing my feedback and you seem more interested in simply responding to it, don't worry, I won't give you any more of it.",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-480456418",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 514501238,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNDUwMTIzOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/514501238",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-24T06:38:25Z",
      "updated_at": "2019-07-24T06:38:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "@luke-jr What about this one?\r\n\r\n(I hope it is obvious that Timon's comments are ignorant troll nonsense. And from what I heard, since making the above comments he was fired from Blockstream for technical incompetence anyway.)",
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-514501238",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "mentioned",
      "id": 2505248275,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjUwNTI0ODI3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2505248275",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-24T06:38:25Z"
    },
    {
      "event": "subscribed",
      "id": 2505248276,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1MDUyNDgyNzY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2505248276",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-24T06:38:25Z"
    },
    {
      "event": "commented",
      "id": 515674697,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTY3NDY5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/515674697",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-27T10:44:58Z",
      "updated_at": "2019-07-27T10:44:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "> (I hope it is obvious that Timon's comments are ignorant troll nonsense.\n> And from what I heard, since making the above comments he was fired from\n> Blockstream for technical incompetence anyway.)\n>\n\nI think the fact that you talk about me being trolling while you say this\nsays much more about you than it says about me.\nI hope you get ad much more feedback on this flawed proposal as you\ndeserve. That is, none. I hope bobody gives you any more feedback on this.\nCertainly I won't.\nHave a nice day...\n",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-515674697",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 528542462,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyODU0MjQ2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/528542462",
      "actor": {
        "login": "ysangkok",
        "id": 284023,
        "node_id": "MDQ6VXNlcjI4NDAyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ysangkok",
        "html_url": "https://github.com/ysangkok",
        "followers_url": "https://api.github.com/users/ysangkok/followers",
        "following_url": "https://api.github.com/users/ysangkok/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ysangkok/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ysangkok/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
        "organizations_url": "https://api.github.com/users/ysangkok/orgs",
        "repos_url": "https://api.github.com/users/ysangkok/repos",
        "events_url": "https://api.github.com/users/ysangkok/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ysangkok/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-05T19:26:50Z",
      "updated_at": "2019-09-05T19:26:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "On the \"files changed\" tab, I see changes to statuses of BIPs 155, 156, 178 and 197. Why are these changes part of this PR?",
      "user": {
        "login": "ysangkok",
        "id": 284023,
        "node_id": "MDQ6VXNlcjI4NDAyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ysangkok",
        "html_url": "https://github.com/ysangkok",
        "followers_url": "https://api.github.com/users/ysangkok/followers",
        "following_url": "https://api.github.com/users/ysangkok/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ysangkok/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ysangkok/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
        "organizations_url": "https://api.github.com/users/ysangkok/orgs",
        "repos_url": "https://api.github.com/users/ysangkok/repos",
        "events_url": "https://api.github.com/users/ysangkok/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ysangkok/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-528542462",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "commented",
      "id": 528546383,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyODU0NjM4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/528546383",
      "actor": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-05T19:38:31Z",
      "updated_at": "2019-09-05T19:38:31Z",
      "author_association": "NONE",
      "body": "> On the \"files changed\" tab, I see changes to statuses of BIPs 155, 156, 178 and 197. Why are these changes part of this PR?\r\n\r\nThe changes to README.mediawiki appear to just be differences between the point the BIP repo was forked and when this PR was opened. ",
      "user": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-528546383",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "renamed",
      "id": 2648509987,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjY0ODUwOTk4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2648509987",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-19T21:47:10Z",
      "rename": {
        "from": "new bip for hashrate escrows",
        "to": "BIP 300: Hashrate Escrows (Consensus layer)"
      }
    },
    {
      "event": "commented",
      "id": 533322545,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzMyMjU0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/533322545",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-19T21:51:09Z",
      "updated_at": "2019-09-19T21:51:09Z",
      "author_association": "MEMBER",
      "body": "There's something very broken with this branch. Let me know when it's fixed for merging...",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-533322545",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZGQwMmZmNGMwNzczNmY0ZTk1YjlmNjk4NjZhY2RiMTc0MjhjZGYyZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/dd02ff4c07736f4e95b9f69866acdb17428cdf2e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/dd02ff4c07736f4e95b9f69866acdb17428cdf2e",
      "tree": {
        "sha": "c1cd99dd6b50ea4681003c9d795bb92f354ffa91",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c1cd99dd6b50ea4681003c9d795bb92f354ffa91"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7e9fab150f2e4b33c6195d2734e38f9e51721ea0",
          "sha": "7e9fab150f2e4b33c6195d2734e38f9e51721ea0",
          "html_url": "https://github.com/bitcoin/bips/commit/7e9fab150f2e4b33c6195d2734e38f9e51721ea0"
        }
      ],
      "message": "edit and shorten slightly",
      "committer": {
        "name": "Paul Sztorc",
        "email": "psztorc01@gmail.com",
        "date": "2019-09-20T17:19:46Z"
      },
      "author": {
        "name": "Paul Sztorc",
        "email": "psztorc01@gmail.com",
        "date": "2018-04-23T23:13:45Z"
      },
      "sha": "dd02ff4c07736f4e95b9f69866acdb17428cdf2e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MzIwMWIyMzExOTUxNjUyMDIwZTFkOTQ4MzYyYzI0ZmNjMDZkNjcwOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3201b2311951652020e1d948362c24fcc06d6708",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3201b2311951652020e1d948362c24fcc06d6708",
      "tree": {
        "sha": "f4fc4a90ef6441fa8a04a0842b9e682fa387d219",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f4fc4a90ef6441fa8a04a0842b9e682fa387d219"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/dd02ff4c07736f4e95b9f69866acdb17428cdf2e",
          "sha": "dd02ff4c07736f4e95b9f69866acdb17428cdf2e",
          "html_url": "https://github.com/bitcoin/bips/commit/dd02ff4c07736f4e95b9f69866acdb17428cdf2e"
        }
      ],
      "message": "typo",
      "committer": {
        "name": "Paul Sztorc",
        "email": "psztorc01@gmail.com",
        "date": "2019-09-20T17:19:46Z"
      },
      "author": {
        "name": "Paul Sztorc",
        "email": "psztorc01@gmail.com",
        "date": "2018-04-23T23:15:13Z"
      },
      "sha": "3201b2311951652020e1d948362c24fcc06d6708"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OTllNTdiMDg2YWE5YjJiYmJhNDg1Mzg2OTkyODE4ZDQ5NzJmOTlkMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/99e57b086aa9b2bbba485386992818d4972f99d2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/99e57b086aa9b2bbba485386992818d4972f99d2",
      "tree": {
        "sha": "e8eb6343591d6e2567631508b5e80f65d19d264e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e8eb6343591d6e2567631508b5e80f65d19d264e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3201b2311951652020e1d948362c24fcc06d6708",
          "sha": "3201b2311951652020e1d948362c24fcc06d6708",
          "html_url": "https://github.com/bitcoin/bips/commit/3201b2311951652020e1d948362c24fcc06d6708"
        }
      ],
      "message": "compress\n\nWe were able to dramatically shorten the BIP, by deleting superfluous explanations/justifications. Instead it just focuses on what the messages are.",
      "committer": {
        "name": "Paul Sztorc",
        "email": "psztorc01@gmail.com",
        "date": "2019-09-20T17:19:46Z"
      },
      "author": {
        "name": "Paul Sztorc",
        "email": "psztorc01@gmail.com",
        "date": "2019-04-04T23:30:43Z"
      },
      "sha": "99e57b086aa9b2bbba485386992818d4972f99d2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YzZkYTk5MDE4ZDdjZmZiNGY5OTdhYjU4ZDQ3MWUyYmRjZGJkYzNlNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c6da99018d7cffb4f997ab58d471e2bdcdbdc3e5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c6da99018d7cffb4f997ab58d471e2bdcdbdc3e5",
      "tree": {
        "sha": "7d7f6e67a0a8bf858352203fdb43a4d3931ebee0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7d7f6e67a0a8bf858352203fdb43a4d3931ebee0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/99e57b086aa9b2bbba485386992818d4972f99d2",
          "sha": "99e57b086aa9b2bbba485386992818d4972f99d2",
          "html_url": "https://github.com/bitcoin/bips/commit/99e57b086aa9b2bbba485386992818d4972f99d2"
        }
      ],
      "message": "typos",
      "committer": {
        "name": "Paul Sztorc",
        "email": "psztorc01@gmail.com",
        "date": "2019-09-20T17:19:46Z"
      },
      "author": {
        "name": "Paul Sztorc",
        "email": "psztorc01@gmail.com",
        "date": "2019-04-04T23:47:04Z"
      },
      "sha": "c6da99018d7cffb4f997ab58d471e2bdcdbdc3e5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YTliMGJjNTkzYTQ5YjVmMjQzM2ZkYzZmYTA4YTQ5NjRlNDY4Nzg4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a9b0bc593a49b5f2433fdc6fa08a4964e4687887",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a9b0bc593a49b5f2433fdc6fa08a4964e4687887",
      "tree": {
        "sha": "445f0a6b7ed79fd3daefd89fb1b9b8738be8a93b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/445f0a6b7ed79fd3daefd89fb1b9b8738be8a93b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c6da99018d7cffb4f997ab58d471e2bdcdbdc3e5",
          "sha": "c6da99018d7cffb4f997ab58d471e2bdcdbdc3e5",
          "html_url": "https://github.com/bitcoin/bips/commit/c6da99018d7cffb4f997ab58d471e2bdcdbdc3e5"
        }
      ],
      "message": "spellcheck",
      "committer": {
        "name": "Paul Sztorc",
        "email": "psztorc01@gmail.com",
        "date": "2019-09-20T17:19:46Z"
      },
      "author": {
        "name": "Paul Sztorc",
        "email": "psztorc01@gmail.com",
        "date": "2019-04-05T16:59:18Z"
      },
      "sha": "a9b0bc593a49b5f2433fdc6fa08a4964e4687887"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZWNjMDA4MDVjMjgzMTkzNTI1NTUyYTdiZTcxNmUxMTcxMGNhNGQzYw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ecc00805c283193525552a7be716e11710ca4d3c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ecc00805c283193525552a7be716e11710ca4d3c",
      "tree": {
        "sha": "c9b41806a3acc1438b3c16d358ee7201509984cd",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c9b41806a3acc1438b3c16d358ee7201509984cd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a9b0bc593a49b5f2433fdc6fa08a4964e4687887",
          "sha": "a9b0bc593a49b5f2433fdc6fa08a4964e4687887",
          "html_url": "https://github.com/bitcoin/bips/commit/a9b0bc593a49b5f2433fdc6fa08a4964e4687887"
        }
      ],
      "message": "clarify + specific M4 example",
      "committer": {
        "name": "Paul Sztorc",
        "email": "psztorc01@gmail.com",
        "date": "2019-09-20T17:19:47Z"
      },
      "author": {
        "name": "Paul Sztorc",
        "email": "psztorc01@gmail.com",
        "date": "2019-04-05T18:03:26Z"
      },
      "sha": "ecc00805c283193525552a7be716e11710ca4d3c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6Yzc4NzY2YzM2MDIxOGRmNTA0Y2Q1NmE0YmI0NGY3NWY1OThjMTE4Yg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c78766c360218df504cd56a4bb44f75f598c118b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c78766c360218df504cd56a4bb44f75f598c118b",
      "tree": {
        "sha": "1c27f00a0f8104f4246efc45471f75f723fc4ba6",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1c27f00a0f8104f4246efc45471f75f723fc4ba6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ecc00805c283193525552a7be716e11710ca4d3c",
          "sha": "ecc00805c283193525552a7be716e11710ca4d3c",
          "html_url": "https://github.com/bitcoin/bips/commit/ecc00805c283193525552a7be716e11710ca4d3c"
        }
      ],
      "message": "add number 300 and update README",
      "committer": {
        "name": "Paul Sztorc",
        "email": "psztorc01@gmail.com",
        "date": "2019-09-20T17:25:26Z"
      },
      "author": {
        "name": "Paul Sztorc",
        "email": "psztorc01@gmail.com",
        "date": "2019-07-26T23:13:20Z"
      },
      "sha": "c78766c360218df504cd56a4bb44f75f598c118b"
    },
    {
      "event": "commented",
      "id": 533645653,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzY0NTY1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/533645653",
      "actor": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-20T17:37:10Z",
      "updated_at": "2019-09-20T17:37:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "@luke-jr OK I rebased it -- everything seems to be fully updated",
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/642#issuecomment-533645653",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/642"
    },
    {
      "event": "mentioned",
      "id": 2651048813,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjY1MTA0ODgxMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2651048813",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-20T17:37:10Z"
    },
    {
      "event": "subscribed",
      "id": 2651048816,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI2NTEwNDg4MTY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2651048816",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-20T17:37:10Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MzRmMGZlNWIyYWY0ZjdjODJmYmU2ZWQwNzA2YmJiM2ZlZWY5NGFjZg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "tree": {
        "sha": "8469718eaa7efd8f3e71f9fae091c843e75deb6d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8469718eaa7efd8f3e71f9fae091c843e75deb6d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c78766c360218df504cd56a4bb44f75f598c118b",
          "sha": "c78766c360218df504cd56a4bb44f75f598c118b",
          "html_url": "https://github.com/bitcoin/bips/commit/c78766c360218df504cd56a4bb44f75f598c118b"
        }
      ],
      "message": "BIP 300: Fix preamble",
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-09-20T17:50:14Z"
      },
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-09-20T17:50:14Z"
      },
      "sha": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf"
    },
    {
      "event": "merged",
      "id": 2651103758,
      "node_id": "MDExOk1lcmdlZEV2ZW50MjY1MTEwMzc1OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2651103758",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b5723035e23896d05548caf7412a358e28c38024",
      "commit_url": "https://api.github.com/repos/bitcoin/bips/commits/b5723035e23896d05548caf7412a358e28c38024",
      "created_at": "2019-09-20T17:59:19Z"
    },
    {
      "event": "closed",
      "id": 2651103760,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjY1MTEwMzc2MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2651103760",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-20T17:59:19Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191763262",
      "pull_request_review_id": 124398098,
      "id": 191763262,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTc2MzI2Mg==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 2,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please drop the empty lines here",
      "created_at": "2018-05-30T13:18:53Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191763262",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191763262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191763527",
      "pull_request_review_id": 124398098,
      "id": 191763527,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTc2MzUyNw==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 20,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The end looks like it belongs in the Credits section, rather than Abstract.",
      "created_at": "2018-05-30T13:19:40Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191763527",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191763527"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191764361",
      "pull_request_review_id": 124398098,
      "id": 191764361,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTc2NDM2MQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 67,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This does not seem to logically follow. The existing databases are not being apparently reduced in size to compensate, so it is strictly adding requirements here, no?\r\n\r\nI think it may be appropriate to increase the block weight when these new databases are affected.",
      "created_at": "2018-05-30T13:21:57Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191764361",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191764361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191764868",
      "pull_request_review_id": 124398098,
      "id": 191764868,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTc2NDg2OA==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 78,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not have optional overrides? I'm not sure it's a good idea to hardcode these.",
      "created_at": "2018-05-30T13:23:20Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191764868",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191764868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191765225",
      "pull_request_review_id": 124398098,
      "id": 191765225,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTc2NTIyNQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 103,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A UUID or hash seems like a better option here. Human-readable stuff doesn't really belong on-chain.",
      "created_at": "2018-05-30T13:24:18Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191765225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191765225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191765510",
      "pull_request_review_id": 124398098,
      "id": 191765510,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTc2NTUxMA==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 109,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What architecture? Compiled with what options? Why is there such a thing as reference software in the first place?\r\n\r\nI don't think this field makes sense...",
      "created_at": "2018-05-30T13:25:06Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191765510",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191765510"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191765997",
      "pull_request_review_id": 124398098,
      "id": 191765997,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTc2NTk5Nw==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 115,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How it's stored seems like it's an implementation-specific detail?\r\n\r\nNot sure what the point is of this field...",
      "created_at": "2018-05-30T13:26:30Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191765997",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191765997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191766725",
      "pull_request_review_id": 124398098,
      "id": 191766725,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTc2NjcyNQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 148,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These requirements are subjective and cannot be imposed.\r\n\r\nAs it stands, I think this may be a technical unsoundness. (impediment to a BIP number assignment) :(",
      "created_at": "2018-05-30T13:28:31Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191766725",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191766725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191767468",
      "pull_request_review_id": 124398098,
      "id": 191767468,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTc2NzQ2OA==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 154,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The rules against invalid or double-spent txns are exactly identical to the rules against exceeding the block weight limit. I'm not sure what distinction you are implying exists here...",
      "created_at": "2018-05-30T13:30:27Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191767468",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191767468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191767831",
      "pull_request_review_id": 124398098,
      "id": 191767831,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTc2NzgzMQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 156,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think equating undesirable transactions to \"aggression\" makes sense here. It also seems out of place.",
      "created_at": "2018-05-30T13:31:16Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191767831",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191767831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191768376",
      "pull_request_review_id": 124398098,
      "id": 191768376,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTc2ODM3Ng==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 171,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If it doesn't do anything, it shouldn't exist at all...",
      "created_at": "2018-05-30T13:32:41Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191768376",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191768376"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191769871",
      "pull_request_review_id": 124398098,
      "id": 191769871,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTc2OTg3MQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.\n+\n+\n+( The following messages were modeled on SegWit -- https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 157 bytes (0x9d)\n+    4-byte - Commitment header (0x53707243)\n+    153-byte - the critical bytes mentioned above (fields #1, #3, and #4, to populate a new D1 entry)\n+\n+\n+==== New Block Validation Rules ====\n+\n+# If the network detects a properly-formatted M1, it must add an entry to D1, into the very next block, with the following initial values:\n+## Field #5 will be calculated as per [https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses version 1 Bitcoin addresses], but with a prefix of \"4\" instead of \"1\".\n+## Field #9 will be derived from #7 and #8 using math.\n+## The initial values of Fields #10, #11, and #12 are set to zero.\n+# Only one M1 (of any kind) can be added into a block at a time.\n+\n+==== Notes on M1 ====\n+\n+The escrow will \"reuse\" the same address over and over. But notice that there is no privacy loss due to address reuse, because the address in question does not \"belong\" to any specific individual. Furthermore, the transactions in question could already be linked by just watching the Hashrate Escrow for deposits ...this, in fact, is exactly what a sidechain must do in order to make main-to-side transfers.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 29 bytes (0x1D)\n+    4-byte - Commitment header (0x53616343)\n+    25-byte - Commitment hash: RIPMD-160 of Sha256 of a given M1 (above)\n+\n+==== New Block Validation Rules ====\n+\n+1. An entry will be removed from D1, unless that block contains an M2 supporting it (this will increment field #2), or the entry has accumulated 4032 M2s. Therefore, each entry needs to have 4032 *consecutive* M2s supporting it, else it will be removed from D1 and must start over. This requires all miners to agree to \"soft fork\" the sidechain into existence. This makes it easier to curate the list of active sidechains, and prevents destructive interference (see above) among contradictory sidechains.\n+2. Once the entry has 4032 M2s, then a miner must make a 0 btc payment to the Critical Address, thus activating the chain. This payment becomes the first \"critical (TxID, index) pair\" (or \"CTIP\").\n+3. It is possible to \"overwrite\" a D1 slot -- this destroys the sidechain that is there, and replaces it with a new one. This is defined as requiring 6 months (26298 blocks) of M2s, instead of 4 weeks (4032). This possibility does not change the security assumptions, because we already assume that users have access to \"magically true\" bandwidth at a rate of 1 bit per ACK-cycle. (This is why the voting cycles should be large, 1 month Waiting, 2+ months Voting).\n+\n+\n+\n+=== Adding Withdrawal-Attempts and Tracking Their Success (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+The table below enumerates the database fields, their size (in bytes), type and purpose.\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^\n+| 32\n+| hex\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs*\n+| 2\n+| uInt\n+| The current total number of \"votes\", this starts at 0 and remains there throughout the waiting period.\n+|-\n+| 4\n+| Age*\n+| 3\n+| uInt\n+| Total duration of time, in blocks, that this WT^ has been inside of D2.\n+|-\n+| 5\n+| Waiting Period*\n+| 2\n+| uInt\n+| Total duration of time, in blocks, that this entry must sit idle, before it can begin to accumulate ACKs/NACKs. Pulled from D1's field #6.\n+|-\n+| 6\n+| Max Age*\n+| 3\n+| uInt\n+| Determined by summing (D1's field #6) and (D1's field #7).\n+|-\n+| 7\n+| Threshold*\n+| 2\n+| uInt\n+| Total ACKs needed, this is pulled from D1's field #9.\n+|-\n+| 8\n+| Approved*\n+| 1\n+| boolean\n+| True while ACKs > Threshold, False otherwise.\n+|}\n+\n+\\* Denotes a \"convenience field\" (see above).\n+\n+Withdrawal_DB requires 46 bytes [1+32+2+3+2+3+2+1] per entry. Of these, 13 bytes ([2+3+2+3+2+1], all fields except #1 and #2) can be generated locally, leaving 33 critical bytes [1+32].\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# In each block, a hash commitment to D2 must always exist (even if D2 is blank).\n+# D2 must always be sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, every entry's \"Age\" field must increase by exactly 1.\n+# From one block to the next, entries are only removed from D2 (in the very next block) if:\n+## \"Age\" = \"MaxAge\".\n+## If the block contains a txn who's blinded txID matches WT^. {{ This might be unnecessary, and a lot of work. }}\n+# In addition, there are special rules for the allowed values in the \"ACKs\" field (field #3). See M4 below.\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 37 bytes (0x25)\n+    4-byte - Commitment header (0xD45AA943)\n+    33-byte - the critical bytes mentioned above (fields #1 and #2, to populate a new D2 entry)\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+==== Very Little Info, Probably Calculable in Advance ====\n+\n+M4 is exceptional (in comparison to the other M's) in a few ways. First, its content is not stored anywhere, only the *hash* of its *effect* is stored (in a leaf of a merkle tree who's root is inserted into a mainchain coinbase). M4 alters the contents of D2 -- the *contents* of D2 are consensus critical, but M4 (the process by which nodes reach a new valid D2) can be anything.\n+\n+In fact, M4 can also be *nothing*. In other words, it may be optional. This is precisely because, from one block to the next, we have constrained D2 such that it is only allowed to change in a few ways. Therefore, the exhaustive set of \"candidate D2s\" can be precomputed by full nodes in advance.\n+\n+The following sections assume a maximum of one sucessful withdrawal per sidechain at a time (see [/bip-hashrate-escrows/appendix-1.txt appendix 1]).\n+\n+==== How Hard is it to Guess M4? ====\n+\n+If there are n Escrows and m Withdrawals-per-escrow<sup>1</sup>, then there are (m+2)^n total candidates for the next D2. This is because, [per block per escrow], one of three things can happen: (1) one of the m withdrawal-candidates can be \"ACK\"ed (or \"upvoted\" or \"promoted\"), which automatically downvotes the others; or (2) all withdrawal-candidates can be downvoted, or finally (3) the miners can abstain from voting on the escrow's withdrawals altogether, leaving the tallies the same.\n+\n+First, for nodes which validate all sidechains (assuming these escrows are sidechains), this simplifies to 2^n -- these nodes only have to choose between the single honest choice (on one hand) or an abstention (on the other). Second, even for nodes that don't validate any sidechains, the number of candidates might be reduced from m^n to 3^n, by making a simplifying assumption: whichever withdrawal was most recently added/upvoted, is likely to be the one which is upvoted next.\n+\n+Of course, that is still O(k^n) for n sidechains, which isn't great<sup>2</sup>. If the \"D2 update\" cannot be guessed, it must be transmitted in some way.\n+\n+==== Giving Up and Getting M4 the Old Fashioned Way ====\n+\n+Two examples for transmitting it are below:\n+\n+\"Short Form\" (Assumes there are no more than 254 active withdrawal-attempts per account)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    N-byte - N is the total number of active accounts (\"sidechains\"), each byte specifies the position of the single WT that was \"upvoted\". A value of 0 indicates \"downvote everything\", a value of 255 indicates abstention.\n+\n+\"Long Form\" (Makes no assumptions about anything)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    1-byte - Length (in bytes) of this message; total number of withdrawal attempts; y = ceiling( sum_i(m_i +2)/8 ). Nodes should already know what length to expect, because they know the sequence of M3s and therefore the vector of WT^s.\n+    Y-byte - stream of bits (not bytes), with a 1 indicating the position of the chosen action [downvote all, abstain, upvote1, upvote2, ...]\n+\n+\n+If the message is very very large, then nodes may not want to broadcast it. This opens up an \"exhaustion attack\"<sup>2</sup>, in which many miners create bad WT^s, vote on these randomly, and then refuse to broadcast their votes. Fortunately, even for a worst-case scenario of 200 sidechains and 1,000 withdrawal-attempts per sidechain, honest nodes can communicate a long form M4 with each other by using just 25,056 bytes per block [4+1+1+(200\\*(1000+1+1)/8)].\n+\n+Today's pre-drivechain miners can already carry out a similar attack, by creating and including txns and then not broadcasting that part of the block to anyone. This is often characterized as a  [https://petertodd.org/2016/block-publication-incentives-for-miners \"block publication incentive\"], because in that case the prospect of exhaustively computing all possible transactions (to uncover the missing ones) is completely out of the question.\n+\n+However, message M4 is different from a withheld-txn, because M4 operates outside of the block's mandated information-processing limits (ie, outside the infamous 1 MB nonwitness blocksize limit). So we should examine the conditions under which M4 grows and shrinks, to ensure that we are not smuggling in a tremendous burden on full nodes.\n+\n+Under adversarial conditions, to lengthen a long-form M4 by one bit per block, for C blocks, the attacker must pay 312 bits (39 bytes) one time (to embed a new M3 message). The value C is the length of the sidechain's voting period, which varies but which I expect to be approximately 8,064 (and which could theoretically be as high as 65,536). Thus the attacker can burden nodes disproportionately, if (s)he wishes.\n+\n+Fortunately, the attack in question has no motivation (as far as I can tell). If the miner's goal is to trick rivals into mining on top of invalid blocks, he can already do this much more effectively with the unpublished-txn method (above). If instead he is just trying to harass nodes, then nodes may freely \"downgrade\" to earlier versions of the protocol, and simply ignore all drivechain-related messages. It seems that the attack could best be used in order to: make a large D2, make D2 confusing, sneak in votes for evil WT^ lurking in D2. Thus, the attack disables the transparency of the drivechain system, to some extent. The cost of the attack is forgone transaction fees, due to block space wasted on useless M3s.\n+\n+In practice, n is already capped, and miners may impose [on each other] a \"soft cap\" on m for their mutual protection. Thus, n and m might never get above 10 and 30, respectfully. In this case, the [Short Form, this time] M4 can never require more than 15 bytes per block, no matter what the attacker tries.\n+\n+In practice, m should always be 1 or 2, else something fishy is going on; and m can only inch up by 1 unit per block. So the system as a whole is still quite transparent, in that users are warned appropriately and well in advance. Attackers must invest upfront and they face an uphill climb, in order to eventually make things more expensive for a few others; defenders can wait-and-see if the attack looks like it will ever amount to anything before lifting a finger.\n+\n+\n+===== New Block Validation Rules (for D2 and, by implication, M4) =====\n+\n+From one block to the next, D2 can only be edited in a few strict ways:\n+\n+* Entries can only be added/removed from D2 if they meet the criteria above (in M3, and implicitly M1 and M2).\n+* The ACK-counter of any individual entry can only change by (-1,0,+1) relative to its previous entry.\n+* Within a sidechain group, upvoting one withdrawal (ACK=ACK+1) requires you to downvote all other withdrawals in that group. However, the minimum ACK value is zero (and, therefore, downvotes cannot reduce it below zero).\n+\n+===== Footnotes for M4 =====\n+\n+<sup>1</sup> This represents the worst-case scenario is one where all the Withdrawals are spread evenly over each Sidechain. Under normal operations, there is no reason to expect the all sidechains will have the same number of withdrawals at any given time. In fact, under normal operations, the very *concept* of counting the withdrawals-per-sidechain should be a purposeless one, because there should only be *one* withdrawal at a time. Nonetheless we consider the worst case scenario here.\n+\n+<sup>2</sup> Guessing becomes more computationally intensive in a highly adversarial situation where the \"limited range\" is intentionally expanded. In such a scenario, [a] there are many sidechains, and [b] miners voluntarily sacrifice their scarce block-space by creating a high number of (mutually-exclusive, and hence ultimately invalid) withdrawal attempts and putting these into coinbase transactions; and then agree to all [c] vote on these randomly (guaranteeing that all withdrawals fail, including any true withdrawals) and [d] successfully withhold their random voting strategies from nodes (even including spy-miner-nodes). Under this bizarre scenario, nodes may require computing resources which increase near-exponentially with the number of withdrawals, and it may take a long time for an ignorant node to exhaustively work out the underlying state of Withdrawal_DB. In this case, nodes may decide to temporarily stop validating such transactions (as if they had not yet upgraded to support this soft fork).\n+\n+\n+\n+=== Depositing and Withdrawing (M5, M6) ===\n+\n+\n+Both M5 and M6 are regular Bitcoin txns. They are identified by meeting an important criteria: they select a one of the Critical TxID-index Pairs (a \"CTIP\") as one of their inputs. Deposits (\"M5\") are distinguished from withdrawals (\"M6\") by simply checking to see if money is \"going in\", or \"out\". In other words, we compare the BTC value of the original CTIP to that of new CTIP. If original <= new it is a deposit, if original > new then it is a withdrawal.\n+\n+The code that identifies sidechain withdrawal / deposit txns (by calculating how much value is being put into or taken out of a sidechain) can be seen here: https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L351-L386\n+\n+Such txns are forced (by consensus) to obey two additional criteria:\n+\n+# They must contain an output paying \"to\" the Critical Address [probably in TxOut0].\n+# They must be accompanied by an update to this sidechain's Critical TxID-index Pair (CTIP). The new CTIP must be \"this\" txn itself.\n+\n+These criteria are enforced [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L440-L473 here] by checking that a deposit is paying back to the sidechain more than it is taking out, and completely rejecting any withdrawal from the mempool. And [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L1747-L1757 here] we allow for a withdrawal only once it has attained sufficient work score (ACKs).\n+\n+The purpose of this is to have all of the escrow's money (ie all of the sidechain's money) in one TxID, so that depositors immediately undo any UTXO bloat they may cause. This simplifies the withdrawal process, as there is no need to worry about cleaning up \"dust deposits\" (...and such cleaning can often result in headaches, for example where a withdrawal-txn is larger than 1MB in size, or else may only withdraw an arbitrarily limited amount of BTC). Notice that, unless we assume that an account will last forever, all utxos which are deposited must eventually be withdrawn by someone. Therefore, the relevant design criterion is not \"efficiency\" (total network cost) but rather \"who should pay\" (allocation of costs).\n+\n+==== M5. \"Make a Deposit\" -- a transfer of BTC from-main-to-side ====\n+\n+As far as mainchain consensus is concerned, there are no additional requirements.\n+\n+However, in practice there *are* additional mainchain requirements...specified by the escrow account, (ie specified by the \"sidechain\" or \"virtual chain\"). These requirements are not part of mainchain consensus and are allowed to be anything. In other words, the sidechain is free to invent any way to credit depositor's money -- M5 is fully customizable.\n+\n+One method, is for mainchain depositors to append a zero-value OP Return to a Deposit txn, so that the sidechain knows how to credit funds. Mainchain users must upgrade their wallet software, of course, (on an individual basis) in order to become aware of and take advantage of new deposit-methods.\n+\n+===== Inconvenient Race Condition =====\n+\n+The requirement that each hashrate escrow be linked to a single TxID does create an interesting inconvenience for depositors. If a user is slow to sign a txn after constructing it (perhaps because the user employs an air-gapped computer, etc), then the signed txn may no longer be valid. This is because the input it selects, may no longer be the Critical TxID (as \"the\" Critical TxID changes with each deposit). **Only one user can deposit at a time** (although many can deposit per block). As a result, the transaction must fail, and the user would need to be prompted to remake and resign the txn. If this is problem is too frustrating, users can always make main-to-side transfers using atomic cross chain swaps (or, the LN, if they already have a channel open on both chains).\n+\n+Fortunately, it is already a part of mainchain consensus that no two txns can spend the same TxID. The only new issue here is the confusion it might create for the user (hence the need for error messages and alternative deposit-methods).\n+\n+\n+==== M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main ====\n+\n+We come, finally, to the critical matter: where users can take their money *out* of the escrow account, and return it to the \"regular\" UTXO set. As previously mentioned, this txn is one which (a) spends from a CTIP and (b) reduces the quantity of BTC in an account's CTIP. Most of the work has already been done by D1, M3, M4, and D2. Furthermore, existing Bitcoin tx-rules prevent the sidechain from ever withdrawing more money than has been placed into it.\n+\n+From there, we merely introduce two final concepts:\n+\n+# In each block, an entry in D2 is considered an \"approved candidate\" if the \"ACKs\" value is above 13140.\n+# A \"blinded TxID\" is way of hashing the txn, in which we first overwrite some parts of the txn with zeros. Specifically, the first 36 bytes of \"TxIn0\" (the first input, including TxOutHash and TxOutIndex), as well as the first 8 bytes of \"TxOut0\" (the first output).\n+\n+Blinding is necessary because we allow each sidechain only one UTXO at a time.\n+\n+of our restriction of the account to a single UTXO-member. Because of this, during the ACKing process the withdrawal-txn (which is currently being ACKed) may change in two ways: the CTIP (which changes with each deposit), and the total quantity of BTC stored in the account (which arbitrarily increases with each new deposit). In other words, a withdrawal-attempt is created via M3, but this takes place many blocks before the withdrawal is actually included via M6. During this time, a single new deposit to the account would change its CTIP and its value. So, what do we ACK? Well, we ACK a \"blinded\" version of the withdrawal. This blinded version is stable because the dynamic parts are always overwritten with zeros.\n+\n+While we ACK a blinded WT^, what is actually included in the blockchain (\"M6\") is an unblinded WT^. Since each blinded WT^ could correspond to many different unblinded WT^s, we need to impose further restrictions on those unblinded WT^s that are finally included. First, we will force the final unblinded WT^ to spend the entire sidechain balance (by forcing sum(input_values) to equal sum(output_values)). To avoid withdrawing the entire sidechain balance with every withdrawal, we will, secondly, force the unblinded WT^ to create a new output which is itself a deposit to the sidechain it withdrew from (which nodes can check using D1's CTIP field). Unfortunately, these requirements eliminate the possibility of including a transaction fee, as traditionally calculated. So, finally, to compensate for *that*, txn fees are encoded explicitly as a withdrawal to OP_TRUE (which the main:block's miner can immediately claim).\n+\n+With all of this in place, the only requirements for inclusion in a block are these:\n+\n+# \"Be ACKed\" -- The \"blinded TxID\" of this txn must be member of the \"approved candidate\" set in the D2 of this block.\n+# \"Return Change to Account\" -- TxOut0 must pay to the \"critical account\" (see D1) that corresponds to the CTIP that was selected as a TxIn.\n+# \"Return *all* Change to Account\" -- Sum of inputs must equal the sum of outputs. No traditional tx fee is possible.\n+\n+Finally, don't forget that M6 inherits the requirement (common to both M5 and M6) that the CTIP be selected as an input, and that the CTIP then be updated. In this case, we know that the critical index will be zero, so the new CTIP will be (\"this TxID\" (NOT blinded), 0). The TxID is NOT blinded because blinding is only for accumulating ACKs.\n+\n+As a result of these requirements, every single withdrawal-attempt will fail, unless an entry has been added to D2 and \"ACKed\" a sufficient number of times.\n+",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 426,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The above seems to be specifying extension blocks, not sidechains, which is a whole can of worms, and *should not* be considered acceptable to be done by miners at will.",
      "created_at": "2018-05-30T13:36:48Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191769871",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191769871"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 426,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191769979",
      "pull_request_review_id": 124398098,
      "id": 191769979,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTc2OTk3OQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.\n+\n+\n+( The following messages were modeled on SegWit -- https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 157 bytes (0x9d)\n+    4-byte - Commitment header (0x53707243)\n+    153-byte - the critical bytes mentioned above (fields #1, #3, and #4, to populate a new D1 entry)\n+\n+\n+==== New Block Validation Rules ====\n+\n+# If the network detects a properly-formatted M1, it must add an entry to D1, into the very next block, with the following initial values:\n+## Field #5 will be calculated as per [https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses version 1 Bitcoin addresses], but with a prefix of \"4\" instead of \"1\".\n+## Field #9 will be derived from #7 and #8 using math.\n+## The initial values of Fields #10, #11, and #12 are set to zero.\n+# Only one M1 (of any kind) can be added into a block at a time.\n+\n+==== Notes on M1 ====\n+\n+The escrow will \"reuse\" the same address over and over. But notice that there is no privacy loss due to address reuse, because the address in question does not \"belong\" to any specific individual. Furthermore, the transactions in question could already be linked by just watching the Hashrate Escrow for deposits ...this, in fact, is exactly what a sidechain must do in order to make main-to-side transfers.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 29 bytes (0x1D)\n+    4-byte - Commitment header (0x53616343)\n+    25-byte - Commitment hash: RIPMD-160 of Sha256 of a given M1 (above)\n+\n+==== New Block Validation Rules ====\n+\n+1. An entry will be removed from D1, unless that block contains an M2 supporting it (this will increment field #2), or the entry has accumulated 4032 M2s. Therefore, each entry needs to have 4032 *consecutive* M2s supporting it, else it will be removed from D1 and must start over. This requires all miners to agree to \"soft fork\" the sidechain into existence. This makes it easier to curate the list of active sidechains, and prevents destructive interference (see above) among contradictory sidechains.\n+2. Once the entry has 4032 M2s, then a miner must make a 0 btc payment to the Critical Address, thus activating the chain. This payment becomes the first \"critical (TxID, index) pair\" (or \"CTIP\").\n+3. It is possible to \"overwrite\" a D1 slot -- this destroys the sidechain that is there, and replaces it with a new one. This is defined as requiring 6 months (26298 blocks) of M2s, instead of 4 weeks (4032). This possibility does not change the security assumptions, because we already assume that users have access to \"magically true\" bandwidth at a rate of 1 bit per ACK-cycle. (This is why the voting cycles should be large, 1 month Waiting, 2+ months Voting).\n+\n+\n+\n+=== Adding Withdrawal-Attempts and Tracking Their Success (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+The table below enumerates the database fields, their size (in bytes), type and purpose.\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^\n+| 32\n+| hex\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs*\n+| 2\n+| uInt\n+| The current total number of \"votes\", this starts at 0 and remains there throughout the waiting period.\n+|-\n+| 4\n+| Age*\n+| 3\n+| uInt\n+| Total duration of time, in blocks, that this WT^ has been inside of D2.\n+|-\n+| 5\n+| Waiting Period*\n+| 2\n+| uInt\n+| Total duration of time, in blocks, that this entry must sit idle, before it can begin to accumulate ACKs/NACKs. Pulled from D1's field #6.\n+|-\n+| 6\n+| Max Age*\n+| 3\n+| uInt\n+| Determined by summing (D1's field #6) and (D1's field #7).\n+|-\n+| 7\n+| Threshold*\n+| 2\n+| uInt\n+| Total ACKs needed, this is pulled from D1's field #9.\n+|-\n+| 8\n+| Approved*\n+| 1\n+| boolean\n+| True while ACKs > Threshold, False otherwise.\n+|}\n+\n+\\* Denotes a \"convenience field\" (see above).\n+\n+Withdrawal_DB requires 46 bytes [1+32+2+3+2+3+2+1] per entry. Of these, 13 bytes ([2+3+2+3+2+1], all fields except #1 and #2) can be generated locally, leaving 33 critical bytes [1+32].\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# In each block, a hash commitment to D2 must always exist (even if D2 is blank).\n+# D2 must always be sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, every entry's \"Age\" field must increase by exactly 1.\n+# From one block to the next, entries are only removed from D2 (in the very next block) if:\n+## \"Age\" = \"MaxAge\".\n+## If the block contains a txn who's blinded txID matches WT^. {{ This might be unnecessary, and a lot of work. }}\n+# In addition, there are special rules for the allowed values in the \"ACKs\" field (field #3). See M4 below.\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 37 bytes (0x25)\n+    4-byte - Commitment header (0xD45AA943)\n+    33-byte - the critical bytes mentioned above (fields #1 and #2, to populate a new D2 entry)\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+==== Very Little Info, Probably Calculable in Advance ====\n+\n+M4 is exceptional (in comparison to the other M's) in a few ways. First, its content is not stored anywhere, only the *hash* of its *effect* is stored (in a leaf of a merkle tree who's root is inserted into a mainchain coinbase). M4 alters the contents of D2 -- the *contents* of D2 are consensus critical, but M4 (the process by which nodes reach a new valid D2) can be anything.\n+\n+In fact, M4 can also be *nothing*. In other words, it may be optional. This is precisely because, from one block to the next, we have constrained D2 such that it is only allowed to change in a few ways. Therefore, the exhaustive set of \"candidate D2s\" can be precomputed by full nodes in advance.\n+\n+The following sections assume a maximum of one sucessful withdrawal per sidechain at a time (see [/bip-hashrate-escrows/appendix-1.txt appendix 1]).\n+\n+==== How Hard is it to Guess M4? ====\n+\n+If there are n Escrows and m Withdrawals-per-escrow<sup>1</sup>, then there are (m+2)^n total candidates for the next D2. This is because, [per block per escrow], one of three things can happen: (1) one of the m withdrawal-candidates can be \"ACK\"ed (or \"upvoted\" or \"promoted\"), which automatically downvotes the others; or (2) all withdrawal-candidates can be downvoted, or finally (3) the miners can abstain from voting on the escrow's withdrawals altogether, leaving the tallies the same.\n+\n+First, for nodes which validate all sidechains (assuming these escrows are sidechains), this simplifies to 2^n -- these nodes only have to choose between the single honest choice (on one hand) or an abstention (on the other). Second, even for nodes that don't validate any sidechains, the number of candidates might be reduced from m^n to 3^n, by making a simplifying assumption: whichever withdrawal was most recently added/upvoted, is likely to be the one which is upvoted next.\n+\n+Of course, that is still O(k^n) for n sidechains, which isn't great<sup>2</sup>. If the \"D2 update\" cannot be guessed, it must be transmitted in some way.\n+\n+==== Giving Up and Getting M4 the Old Fashioned Way ====\n+\n+Two examples for transmitting it are below:\n+\n+\"Short Form\" (Assumes there are no more than 254 active withdrawal-attempts per account)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    N-byte - N is the total number of active accounts (\"sidechains\"), each byte specifies the position of the single WT that was \"upvoted\". A value of 0 indicates \"downvote everything\", a value of 255 indicates abstention.\n+\n+\"Long Form\" (Makes no assumptions about anything)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    1-byte - Length (in bytes) of this message; total number of withdrawal attempts; y = ceiling( sum_i(m_i +2)/8 ). Nodes should already know what length to expect, because they know the sequence of M3s and therefore the vector of WT^s.\n+    Y-byte - stream of bits (not bytes), with a 1 indicating the position of the chosen action [downvote all, abstain, upvote1, upvote2, ...]\n+\n+\n+If the message is very very large, then nodes may not want to broadcast it. This opens up an \"exhaustion attack\"<sup>2</sup>, in which many miners create bad WT^s, vote on these randomly, and then refuse to broadcast their votes. Fortunately, even for a worst-case scenario of 200 sidechains and 1,000 withdrawal-attempts per sidechain, honest nodes can communicate a long form M4 with each other by using just 25,056 bytes per block [4+1+1+(200\\*(1000+1+1)/8)].\n+\n+Today's pre-drivechain miners can already carry out a similar attack, by creating and including txns and then not broadcasting that part of the block to anyone. This is often characterized as a  [https://petertodd.org/2016/block-publication-incentives-for-miners \"block publication incentive\"], because in that case the prospect of exhaustively computing all possible transactions (to uncover the missing ones) is completely out of the question.\n+\n+However, message M4 is different from a withheld-txn, because M4 operates outside of the block's mandated information-processing limits (ie, outside the infamous 1 MB nonwitness blocksize limit). So we should examine the conditions under which M4 grows and shrinks, to ensure that we are not smuggling in a tremendous burden on full nodes.\n+\n+Under adversarial conditions, to lengthen a long-form M4 by one bit per block, for C blocks, the attacker must pay 312 bits (39 bytes) one time (to embed a new M3 message). The value C is the length of the sidechain's voting period, which varies but which I expect to be approximately 8,064 (and which could theoretically be as high as 65,536). Thus the attacker can burden nodes disproportionately, if (s)he wishes.\n+\n+Fortunately, the attack in question has no motivation (as far as I can tell). If the miner's goal is to trick rivals into mining on top of invalid blocks, he can already do this much more effectively with the unpublished-txn method (above). If instead he is just trying to harass nodes, then nodes may freely \"downgrade\" to earlier versions of the protocol, and simply ignore all drivechain-related messages. It seems that the attack could best be used in order to: make a large D2, make D2 confusing, sneak in votes for evil WT^ lurking in D2. Thus, the attack disables the transparency of the drivechain system, to some extent. The cost of the attack is forgone transaction fees, due to block space wasted on useless M3s.\n+\n+In practice, n is already capped, and miners may impose [on each other] a \"soft cap\" on m for their mutual protection. Thus, n and m might never get above 10 and 30, respectfully. In this case, the [Short Form, this time] M4 can never require more than 15 bytes per block, no matter what the attacker tries.\n+\n+In practice, m should always be 1 or 2, else something fishy is going on; and m can only inch up by 1 unit per block. So the system as a whole is still quite transparent, in that users are warned appropriately and well in advance. Attackers must invest upfront and they face an uphill climb, in order to eventually make things more expensive for a few others; defenders can wait-and-see if the attack looks like it will ever amount to anything before lifting a finger.\n+\n+\n+===== New Block Validation Rules (for D2 and, by implication, M4) =====\n+\n+From one block to the next, D2 can only be edited in a few strict ways:\n+\n+* Entries can only be added/removed from D2 if they meet the criteria above (in M3, and implicitly M1 and M2).\n+* The ACK-counter of any individual entry can only change by (-1,0,+1) relative to its previous entry.\n+* Within a sidechain group, upvoting one withdrawal (ACK=ACK+1) requires you to downvote all other withdrawals in that group. However, the minimum ACK value is zero (and, therefore, downvotes cannot reduce it below zero).\n+\n+===== Footnotes for M4 =====\n+\n+<sup>1</sup> This represents the worst-case scenario is one where all the Withdrawals are spread evenly over each Sidechain. Under normal operations, there is no reason to expect the all sidechains will have the same number of withdrawals at any given time. In fact, under normal operations, the very *concept* of counting the withdrawals-per-sidechain should be a purposeless one, because there should only be *one* withdrawal at a time. Nonetheless we consider the worst case scenario here.\n+\n+<sup>2</sup> Guessing becomes more computationally intensive in a highly adversarial situation where the \"limited range\" is intentionally expanded. In such a scenario, [a] there are many sidechains, and [b] miners voluntarily sacrifice their scarce block-space by creating a high number of (mutually-exclusive, and hence ultimately invalid) withdrawal attempts and putting these into coinbase transactions; and then agree to all [c] vote on these randomly (guaranteeing that all withdrawals fail, including any true withdrawals) and [d] successfully withhold their random voting strategies from nodes (even including spy-miner-nodes). Under this bizarre scenario, nodes may require computing resources which increase near-exponentially with the number of withdrawals, and it may take a long time for an ignorant node to exhaustively work out the underlying state of Withdrawal_DB. In this case, nodes may decide to temporarily stop validating such transactions (as if they had not yet upgraded to support this soft fork).\n+\n+\n+\n+=== Depositing and Withdrawing (M5, M6) ===\n+\n+\n+Both M5 and M6 are regular Bitcoin txns. They are identified by meeting an important criteria: they select a one of the Critical TxID-index Pairs (a \"CTIP\") as one of their inputs. Deposits (\"M5\") are distinguished from withdrawals (\"M6\") by simply checking to see if money is \"going in\", or \"out\". In other words, we compare the BTC value of the original CTIP to that of new CTIP. If original <= new it is a deposit, if original > new then it is a withdrawal.\n+\n+The code that identifies sidechain withdrawal / deposit txns (by calculating how much value is being put into or taken out of a sidechain) can be seen here: https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L351-L386\n+\n+Such txns are forced (by consensus) to obey two additional criteria:\n+\n+# They must contain an output paying \"to\" the Critical Address [probably in TxOut0].\n+# They must be accompanied by an update to this sidechain's Critical TxID-index Pair (CTIP). The new CTIP must be \"this\" txn itself.\n+\n+These criteria are enforced [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L440-L473 here] by checking that a deposit is paying back to the sidechain more than it is taking out, and completely rejecting any withdrawal from the mempool. And [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L1747-L1757 here] we allow for a withdrawal only once it has attained sufficient work score (ACKs).\n+\n+The purpose of this is to have all of the escrow's money (ie all of the sidechain's money) in one TxID, so that depositors immediately undo any UTXO bloat they may cause. This simplifies the withdrawal process, as there is no need to worry about cleaning up \"dust deposits\" (...and such cleaning can often result in headaches, for example where a withdrawal-txn is larger than 1MB in size, or else may only withdraw an arbitrarily limited amount of BTC). Notice that, unless we assume that an account will last forever, all utxos which are deposited must eventually be withdrawn by someone. Therefore, the relevant design criterion is not \"efficiency\" (total network cost) but rather \"who should pay\" (allocation of costs).\n+\n+==== M5. \"Make a Deposit\" -- a transfer of BTC from-main-to-side ====\n+\n+As far as mainchain consensus is concerned, there are no additional requirements.\n+\n+However, in practice there *are* additional mainchain requirements...specified by the escrow account, (ie specified by the \"sidechain\" or \"virtual chain\"). These requirements are not part of mainchain consensus and are allowed to be anything. In other words, the sidechain is free to invent any way to credit depositor's money -- M5 is fully customizable.\n+\n+One method, is for mainchain depositors to append a zero-value OP Return to a Deposit txn, so that the sidechain knows how to credit funds. Mainchain users must upgrade their wallet software, of course, (on an individual basis) in order to become aware of and take advantage of new deposit-methods.\n+\n+===== Inconvenient Race Condition =====\n+\n+The requirement that each hashrate escrow be linked to a single TxID does create an interesting inconvenience for depositors. If a user is slow to sign a txn after constructing it (perhaps because the user employs an air-gapped computer, etc), then the signed txn may no longer be valid. This is because the input it selects, may no longer be the Critical TxID (as \"the\" Critical TxID changes with each deposit). **Only one user can deposit at a time** (although many can deposit per block). As a result, the transaction must fail, and the user would need to be prompted to remake and resign the txn. If this is problem is too frustrating, users can always make main-to-side transfers using atomic cross chain swaps (or, the LN, if they already have a channel open on both chains).\n+\n+Fortunately, it is already a part of mainchain consensus that no two txns can spend the same TxID. The only new issue here is the confusion it might create for the user (hence the need for error messages and alternative deposit-methods).\n+\n+\n+==== M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main ====\n+\n+We come, finally, to the critical matter: where users can take their money *out* of the escrow account, and return it to the \"regular\" UTXO set. As previously mentioned, this txn is one which (a) spends from a CTIP and (b) reduces the quantity of BTC in an account's CTIP. Most of the work has already been done by D1, M3, M4, and D2. Furthermore, existing Bitcoin tx-rules prevent the sidechain from ever withdrawing more money than has been placed into it.\n+\n+From there, we merely introduce two final concepts:\n+\n+# In each block, an entry in D2 is considered an \"approved candidate\" if the \"ACKs\" value is above 13140.\n+# A \"blinded TxID\" is way of hashing the txn, in which we first overwrite some parts of the txn with zeros. Specifically, the first 36 bytes of \"TxIn0\" (the first input, including TxOutHash and TxOutIndex), as well as the first 8 bytes of \"TxOut0\" (the first output).\n+\n+Blinding is necessary because we allow each sidechain only one UTXO at a time.\n+\n+of our restriction of the account to a single UTXO-member. Because of this, during the ACKing process the withdrawal-txn (which is currently being ACKed) may change in two ways: the CTIP (which changes with each deposit), and the total quantity of BTC stored in the account (which arbitrarily increases with each new deposit). In other words, a withdrawal-attempt is created via M3, but this takes place many blocks before the withdrawal is actually included via M6. During this time, a single new deposit to the account would change its CTIP and its value. So, what do we ACK? Well, we ACK a \"blinded\" version of the withdrawal. This blinded version is stable because the dynamic parts are always overwritten with zeros.\n+\n+While we ACK a blinded WT^, what is actually included in the blockchain (\"M6\") is an unblinded WT^. Since each blinded WT^ could correspond to many different unblinded WT^s, we need to impose further restrictions on those unblinded WT^s that are finally included. First, we will force the final unblinded WT^ to spend the entire sidechain balance (by forcing sum(input_values) to equal sum(output_values)). To avoid withdrawing the entire sidechain balance with every withdrawal, we will, secondly, force the unblinded WT^ to create a new output which is itself a deposit to the sidechain it withdrew from (which nodes can check using D1's CTIP field). Unfortunately, these requirements eliminate the possibility of including a transaction fee, as traditionally calculated. So, finally, to compensate for *that*, txn fees are encoded explicitly as a withdrawal to OP_TRUE (which the main:block's miner can immediately claim).\n+\n+With all of this in place, the only requirements for inclusion in a block are these:\n+\n+# \"Be ACKed\" -- The \"blinded TxID\" of this txn must be member of the \"approved candidate\" set in the D2 of this block.\n+# \"Return Change to Account\" -- TxOut0 must pay to the \"critical account\" (see D1) that corresponds to the CTIP that was selected as a TxIn.\n+# \"Return *all* Change to Account\" -- Sum of inputs must equal the sum of outputs. No traditional tx fee is possible.\n+\n+Finally, don't forget that M6 inherits the requirement (common to both M5 and M6) that the CTIP be selected as an input, and that the CTIP then be updated. In this case, we know that the critical index will be zero, so the new CTIP will be (\"this TxID\" (NOT blinded), 0). The TxID is NOT blinded because blinding is only for accumulating ACKs.\n+\n+As a result of these requirements, every single withdrawal-attempt will fail, unless an entry has been added to D2 and \"ACKed\" a sufficient number of times.\n+\n+\n+\n+==Backward compatibility==\n+\n+\n+As a soft fork, older software will continue to operate without modification. Non-upgraded nodes will see a number of phenomena that they don't understand -- coinbase txns with non-txn data, value accumulating in anyone-can-spend UTXOs for months at a time, and then random amounts leaving the UTXO in single, infrequent bursts. However, this phenomena doesn't affect them or the validity of the money that they receive.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 432,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Extension blocks (see above) are not softforks.",
      "created_at": "2018-05-30T13:37:08Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191769979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191769979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191770212",
      "pull_request_review_id": 124398098,
      "id": 191770212,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTc3MDIxMg==",
      "diff_hunk": "@@ -0,0 +1,20 @@\n+",
      "path": "bip-hashrate-escrows/appendix-1.txt",
      "position": null,
      "original_position": 1,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why isn't this in the main BIP file?",
      "created_at": "2018-05-30T13:37:46Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191770212",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191770212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191891299",
      "pull_request_review_id": 124554560,
      "id": 191891299,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTg5MTI5OQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 2,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191763262,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok",
      "created_at": "2018-05-30T19:19:49Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191891299",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191891299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191891905",
      "pull_request_review_id": 124555268,
      "id": 191891905,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTg5MTkwNQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 20,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191763527,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't really think so",
      "created_at": "2018-05-30T19:21:52Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191891905",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191891905"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191894679",
      "pull_request_review_id": 124558701,
      "id": 191894679,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTg5NDY3OQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 67,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191764361,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suppose that you are right that the \"storage\" requirements would in some sense increase. But, as a soft fork, this would only be for users who upgrade.\r\n\r\nThis would also be true if, for example, the latest Bitcoin Core were larger in size, and so downloading and building the software required more disk space. Or it would be true for a release that required the upgrading users to track Segwit and nonSegwit outputs and sort among these (or even, CheckLocktimeVerify outputs and non-CLTV outputs). In such cases I would find it strange to decrease the block size/weight limits to offset this cost.\r\n\r\nBut nonetheless I think I could remove the \"and storage\" phrase from the last sentence.",
      "created_at": "2018-05-30T19:31:32Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191894679",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191894679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191896916",
      "pull_request_review_id": 124561295,
      "id": 191896916,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTg5NjkxNg==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 78,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191764868,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The justification is given: to remove ACK-count as a basis for discriminating against sidechains, and make them identical in this respect. It is also less complex (and safer). And it is slightly more byte-efficient, of course.\r\n\r\nUltimately the user is always in charge. But it is more convenient for the user if a design has safeguards in place to prevent errors. It is better for all sidechains if they share ACK-periods, but probably most users do not understand why.\r\n\r\nBut I suppose it could be optional.",
      "created_at": "2018-05-30T19:38:35Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191896916",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191896916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191897711",
      "pull_request_review_id": 124562238,
      "id": 191897711,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTg5NzcxMQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 103,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191765225,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These hashes that you keep talking about inserting are the mandatory extension blocks that you dislike!\r\n\r\nMiners and users will be looking for the underlying data. So the hash achieves nothing -- it is just a waste of 32 bytes. And moving this data off chain just obfuscates it.",
      "created_at": "2018-05-30T19:41:09Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191897711",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191897711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191898286",
      "pull_request_review_id": 124562935,
      "id": 191898286,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTg5ODI4Ng==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 171,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191768376,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As I said, the process as it stands does do something -- it allows tracking of the sidechain's balance.",
      "created_at": "2018-05-30T19:43:01Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191898286",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191898286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191899085",
      "pull_request_review_id": 124563840,
      "id": 191899085,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTg5OTA4NQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 156,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191767831,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "They are transactions that prevent other, more objectively valuable (in terms of txn fees, and consumer surplus) transactions from taking place. In that sense they really do resemble \"theft\" in modern society (which makes it difficult for society to produce anything worth stealing).\r\n\r\nHow would you explain it?",
      "created_at": "2018-05-30T19:45:31Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191899085",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191899085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191899172",
      "pull_request_review_id": 124563967,
      "id": 191899172,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTg5OTE3Mg==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 171,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191768376,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you have a better way of doing that, we will change it.",
      "created_at": "2018-05-30T19:45:46Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191899172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191899172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191900314",
      "pull_request_review_id": 124565393,
      "id": 191900314,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkwMDMxNA==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.\n+\n+\n+( The following messages were modeled on SegWit -- https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 157 bytes (0x9d)\n+    4-byte - Commitment header (0x53707243)\n+    153-byte - the critical bytes mentioned above (fields #1, #3, and #4, to populate a new D1 entry)\n+\n+\n+==== New Block Validation Rules ====\n+\n+# If the network detects a properly-formatted M1, it must add an entry to D1, into the very next block, with the following initial values:\n+## Field #5 will be calculated as per [https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses version 1 Bitcoin addresses], but with a prefix of \"4\" instead of \"1\".\n+## Field #9 will be derived from #7 and #8 using math.\n+## The initial values of Fields #10, #11, and #12 are set to zero.\n+# Only one M1 (of any kind) can be added into a block at a time.\n+\n+==== Notes on M1 ====\n+\n+The escrow will \"reuse\" the same address over and over. But notice that there is no privacy loss due to address reuse, because the address in question does not \"belong\" to any specific individual. Furthermore, the transactions in question could already be linked by just watching the Hashrate Escrow for deposits ...this, in fact, is exactly what a sidechain must do in order to make main-to-side transfers.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 29 bytes (0x1D)\n+    4-byte - Commitment header (0x53616343)\n+    25-byte - Commitment hash: RIPMD-160 of Sha256 of a given M1 (above)\n+\n+==== New Block Validation Rules ====\n+\n+1. An entry will be removed from D1, unless that block contains an M2 supporting it (this will increment field #2), or the entry has accumulated 4032 M2s. Therefore, each entry needs to have 4032 *consecutive* M2s supporting it, else it will be removed from D1 and must start over. This requires all miners to agree to \"soft fork\" the sidechain into existence. This makes it easier to curate the list of active sidechains, and prevents destructive interference (see above) among contradictory sidechains.\n+2. Once the entry has 4032 M2s, then a miner must make a 0 btc payment to the Critical Address, thus activating the chain. This payment becomes the first \"critical (TxID, index) pair\" (or \"CTIP\").\n+3. It is possible to \"overwrite\" a D1 slot -- this destroys the sidechain that is there, and replaces it with a new one. This is defined as requiring 6 months (26298 blocks) of M2s, instead of 4 weeks (4032). This possibility does not change the security assumptions, because we already assume that users have access to \"magically true\" bandwidth at a rate of 1 bit per ACK-cycle. (This is why the voting cycles should be large, 1 month Waiting, 2+ months Voting).\n+\n+\n+\n+=== Adding Withdrawal-Attempts and Tracking Their Success (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+The table below enumerates the database fields, their size (in bytes), type and purpose.\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^\n+| 32\n+| hex\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs*\n+| 2\n+| uInt\n+| The current total number of \"votes\", this starts at 0 and remains there throughout the waiting period.\n+|-\n+| 4\n+| Age*\n+| 3\n+| uInt\n+| Total duration of time, in blocks, that this WT^ has been inside of D2.\n+|-\n+| 5\n+| Waiting Period*\n+| 2\n+| uInt\n+| Total duration of time, in blocks, that this entry must sit idle, before it can begin to accumulate ACKs/NACKs. Pulled from D1's field #6.\n+|-\n+| 6\n+| Max Age*\n+| 3\n+| uInt\n+| Determined by summing (D1's field #6) and (D1's field #7).\n+|-\n+| 7\n+| Threshold*\n+| 2\n+| uInt\n+| Total ACKs needed, this is pulled from D1's field #9.\n+|-\n+| 8\n+| Approved*\n+| 1\n+| boolean\n+| True while ACKs > Threshold, False otherwise.\n+|}\n+\n+\\* Denotes a \"convenience field\" (see above).\n+\n+Withdrawal_DB requires 46 bytes [1+32+2+3+2+3+2+1] per entry. Of these, 13 bytes ([2+3+2+3+2+1], all fields except #1 and #2) can be generated locally, leaving 33 critical bytes [1+32].\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# In each block, a hash commitment to D2 must always exist (even if D2 is blank).\n+# D2 must always be sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, every entry's \"Age\" field must increase by exactly 1.\n+# From one block to the next, entries are only removed from D2 (in the very next block) if:\n+## \"Age\" = \"MaxAge\".\n+## If the block contains a txn who's blinded txID matches WT^. {{ This might be unnecessary, and a lot of work. }}\n+# In addition, there are special rules for the allowed values in the \"ACKs\" field (field #3). See M4 below.\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 37 bytes (0x25)\n+    4-byte - Commitment header (0xD45AA943)\n+    33-byte - the critical bytes mentioned above (fields #1 and #2, to populate a new D2 entry)\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+==== Very Little Info, Probably Calculable in Advance ====\n+\n+M4 is exceptional (in comparison to the other M's) in a few ways. First, its content is not stored anywhere, only the *hash* of its *effect* is stored (in a leaf of a merkle tree who's root is inserted into a mainchain coinbase). M4 alters the contents of D2 -- the *contents* of D2 are consensus critical, but M4 (the process by which nodes reach a new valid D2) can be anything.\n+\n+In fact, M4 can also be *nothing*. In other words, it may be optional. This is precisely because, from one block to the next, we have constrained D2 such that it is only allowed to change in a few ways. Therefore, the exhaustive set of \"candidate D2s\" can be precomputed by full nodes in advance.\n+\n+The following sections assume a maximum of one sucessful withdrawal per sidechain at a time (see [/bip-hashrate-escrows/appendix-1.txt appendix 1]).\n+\n+==== How Hard is it to Guess M4? ====\n+\n+If there are n Escrows and m Withdrawals-per-escrow<sup>1</sup>, then there are (m+2)^n total candidates for the next D2. This is because, [per block per escrow], one of three things can happen: (1) one of the m withdrawal-candidates can be \"ACK\"ed (or \"upvoted\" or \"promoted\"), which automatically downvotes the others; or (2) all withdrawal-candidates can be downvoted, or finally (3) the miners can abstain from voting on the escrow's withdrawals altogether, leaving the tallies the same.\n+\n+First, for nodes which validate all sidechains (assuming these escrows are sidechains), this simplifies to 2^n -- these nodes only have to choose between the single honest choice (on one hand) or an abstention (on the other). Second, even for nodes that don't validate any sidechains, the number of candidates might be reduced from m^n to 3^n, by making a simplifying assumption: whichever withdrawal was most recently added/upvoted, is likely to be the one which is upvoted next.\n+\n+Of course, that is still O(k^n) for n sidechains, which isn't great<sup>2</sup>. If the \"D2 update\" cannot be guessed, it must be transmitted in some way.\n+\n+==== Giving Up and Getting M4 the Old Fashioned Way ====\n+\n+Two examples for transmitting it are below:\n+\n+\"Short Form\" (Assumes there are no more than 254 active withdrawal-attempts per account)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    N-byte - N is the total number of active accounts (\"sidechains\"), each byte specifies the position of the single WT that was \"upvoted\". A value of 0 indicates \"downvote everything\", a value of 255 indicates abstention.\n+\n+\"Long Form\" (Makes no assumptions about anything)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    1-byte - Length (in bytes) of this message; total number of withdrawal attempts; y = ceiling( sum_i(m_i +2)/8 ). Nodes should already know what length to expect, because they know the sequence of M3s and therefore the vector of WT^s.\n+    Y-byte - stream of bits (not bytes), with a 1 indicating the position of the chosen action [downvote all, abstain, upvote1, upvote2, ...]\n+\n+\n+If the message is very very large, then nodes may not want to broadcast it. This opens up an \"exhaustion attack\"<sup>2</sup>, in which many miners create bad WT^s, vote on these randomly, and then refuse to broadcast their votes. Fortunately, even for a worst-case scenario of 200 sidechains and 1,000 withdrawal-attempts per sidechain, honest nodes can communicate a long form M4 with each other by using just 25,056 bytes per block [4+1+1+(200\\*(1000+1+1)/8)].\n+\n+Today's pre-drivechain miners can already carry out a similar attack, by creating and including txns and then not broadcasting that part of the block to anyone. This is often characterized as a  [https://petertodd.org/2016/block-publication-incentives-for-miners \"block publication incentive\"], because in that case the prospect of exhaustively computing all possible transactions (to uncover the missing ones) is completely out of the question.\n+\n+However, message M4 is different from a withheld-txn, because M4 operates outside of the block's mandated information-processing limits (ie, outside the infamous 1 MB nonwitness blocksize limit). So we should examine the conditions under which M4 grows and shrinks, to ensure that we are not smuggling in a tremendous burden on full nodes.\n+\n+Under adversarial conditions, to lengthen a long-form M4 by one bit per block, for C blocks, the attacker must pay 312 bits (39 bytes) one time (to embed a new M3 message). The value C is the length of the sidechain's voting period, which varies but which I expect to be approximately 8,064 (and which could theoretically be as high as 65,536). Thus the attacker can burden nodes disproportionately, if (s)he wishes.\n+\n+Fortunately, the attack in question has no motivation (as far as I can tell). If the miner's goal is to trick rivals into mining on top of invalid blocks, he can already do this much more effectively with the unpublished-txn method (above). If instead he is just trying to harass nodes, then nodes may freely \"downgrade\" to earlier versions of the protocol, and simply ignore all drivechain-related messages. It seems that the attack could best be used in order to: make a large D2, make D2 confusing, sneak in votes for evil WT^ lurking in D2. Thus, the attack disables the transparency of the drivechain system, to some extent. The cost of the attack is forgone transaction fees, due to block space wasted on useless M3s.\n+\n+In practice, n is already capped, and miners may impose [on each other] a \"soft cap\" on m for their mutual protection. Thus, n and m might never get above 10 and 30, respectfully. In this case, the [Short Form, this time] M4 can never require more than 15 bytes per block, no matter what the attacker tries.\n+\n+In practice, m should always be 1 or 2, else something fishy is going on; and m can only inch up by 1 unit per block. So the system as a whole is still quite transparent, in that users are warned appropriately and well in advance. Attackers must invest upfront and they face an uphill climb, in order to eventually make things more expensive for a few others; defenders can wait-and-see if the attack looks like it will ever amount to anything before lifting a finger.\n+\n+\n+===== New Block Validation Rules (for D2 and, by implication, M4) =====\n+\n+From one block to the next, D2 can only be edited in a few strict ways:\n+\n+* Entries can only be added/removed from D2 if they meet the criteria above (in M3, and implicitly M1 and M2).\n+* The ACK-counter of any individual entry can only change by (-1,0,+1) relative to its previous entry.\n+* Within a sidechain group, upvoting one withdrawal (ACK=ACK+1) requires you to downvote all other withdrawals in that group. However, the minimum ACK value is zero (and, therefore, downvotes cannot reduce it below zero).\n+\n+===== Footnotes for M4 =====\n+\n+<sup>1</sup> This represents the worst-case scenario is one where all the Withdrawals are spread evenly over each Sidechain. Under normal operations, there is no reason to expect the all sidechains will have the same number of withdrawals at any given time. In fact, under normal operations, the very *concept* of counting the withdrawals-per-sidechain should be a purposeless one, because there should only be *one* withdrawal at a time. Nonetheless we consider the worst case scenario here.\n+\n+<sup>2</sup> Guessing becomes more computationally intensive in a highly adversarial situation where the \"limited range\" is intentionally expanded. In such a scenario, [a] there are many sidechains, and [b] miners voluntarily sacrifice their scarce block-space by creating a high number of (mutually-exclusive, and hence ultimately invalid) withdrawal attempts and putting these into coinbase transactions; and then agree to all [c] vote on these randomly (guaranteeing that all withdrawals fail, including any true withdrawals) and [d] successfully withhold their random voting strategies from nodes (even including spy-miner-nodes). Under this bizarre scenario, nodes may require computing resources which increase near-exponentially with the number of withdrawals, and it may take a long time for an ignorant node to exhaustively work out the underlying state of Withdrawal_DB. In this case, nodes may decide to temporarily stop validating such transactions (as if they had not yet upgraded to support this soft fork).\n+\n+\n+\n+=== Depositing and Withdrawing (M5, M6) ===\n+\n+\n+Both M5 and M6 are regular Bitcoin txns. They are identified by meeting an important criteria: they select a one of the Critical TxID-index Pairs (a \"CTIP\") as one of their inputs. Deposits (\"M5\") are distinguished from withdrawals (\"M6\") by simply checking to see if money is \"going in\", or \"out\". In other words, we compare the BTC value of the original CTIP to that of new CTIP. If original <= new it is a deposit, if original > new then it is a withdrawal.\n+\n+The code that identifies sidechain withdrawal / deposit txns (by calculating how much value is being put into or taken out of a sidechain) can be seen here: https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L351-L386\n+\n+Such txns are forced (by consensus) to obey two additional criteria:\n+\n+# They must contain an output paying \"to\" the Critical Address [probably in TxOut0].\n+# They must be accompanied by an update to this sidechain's Critical TxID-index Pair (CTIP). The new CTIP must be \"this\" txn itself.\n+\n+These criteria are enforced [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L440-L473 here] by checking that a deposit is paying back to the sidechain more than it is taking out, and completely rejecting any withdrawal from the mempool. And [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L1747-L1757 here] we allow for a withdrawal only once it has attained sufficient work score (ACKs).\n+\n+The purpose of this is to have all of the escrow's money (ie all of the sidechain's money) in one TxID, so that depositors immediately undo any UTXO bloat they may cause. This simplifies the withdrawal process, as there is no need to worry about cleaning up \"dust deposits\" (...and such cleaning can often result in headaches, for example where a withdrawal-txn is larger than 1MB in size, or else may only withdraw an arbitrarily limited amount of BTC). Notice that, unless we assume that an account will last forever, all utxos which are deposited must eventually be withdrawn by someone. Therefore, the relevant design criterion is not \"efficiency\" (total network cost) but rather \"who should pay\" (allocation of costs).\n+\n+==== M5. \"Make a Deposit\" -- a transfer of BTC from-main-to-side ====\n+\n+As far as mainchain consensus is concerned, there are no additional requirements.\n+\n+However, in practice there *are* additional mainchain requirements...specified by the escrow account, (ie specified by the \"sidechain\" or \"virtual chain\"). These requirements are not part of mainchain consensus and are allowed to be anything. In other words, the sidechain is free to invent any way to credit depositor's money -- M5 is fully customizable.\n+\n+One method, is for mainchain depositors to append a zero-value OP Return to a Deposit txn, so that the sidechain knows how to credit funds. Mainchain users must upgrade their wallet software, of course, (on an individual basis) in order to become aware of and take advantage of new deposit-methods.\n+\n+===== Inconvenient Race Condition =====\n+\n+The requirement that each hashrate escrow be linked to a single TxID does create an interesting inconvenience for depositors. If a user is slow to sign a txn after constructing it (perhaps because the user employs an air-gapped computer, etc), then the signed txn may no longer be valid. This is because the input it selects, may no longer be the Critical TxID (as \"the\" Critical TxID changes with each deposit). **Only one user can deposit at a time** (although many can deposit per block). As a result, the transaction must fail, and the user would need to be prompted to remake and resign the txn. If this is problem is too frustrating, users can always make main-to-side transfers using atomic cross chain swaps (or, the LN, if they already have a channel open on both chains).\n+\n+Fortunately, it is already a part of mainchain consensus that no two txns can spend the same TxID. The only new issue here is the confusion it might create for the user (hence the need for error messages and alternative deposit-methods).\n+\n+\n+==== M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main ====\n+\n+We come, finally, to the critical matter: where users can take their money *out* of the escrow account, and return it to the \"regular\" UTXO set. As previously mentioned, this txn is one which (a) spends from a CTIP and (b) reduces the quantity of BTC in an account's CTIP. Most of the work has already been done by D1, M3, M4, and D2. Furthermore, existing Bitcoin tx-rules prevent the sidechain from ever withdrawing more money than has been placed into it.\n+\n+From there, we merely introduce two final concepts:\n+\n+# In each block, an entry in D2 is considered an \"approved candidate\" if the \"ACKs\" value is above 13140.\n+# A \"blinded TxID\" is way of hashing the txn, in which we first overwrite some parts of the txn with zeros. Specifically, the first 36 bytes of \"TxIn0\" (the first input, including TxOutHash and TxOutIndex), as well as the first 8 bytes of \"TxOut0\" (the first output).\n+\n+Blinding is necessary because we allow each sidechain only one UTXO at a time.\n+\n+of our restriction of the account to a single UTXO-member. Because of this, during the ACKing process the withdrawal-txn (which is currently being ACKed) may change in two ways: the CTIP (which changes with each deposit), and the total quantity of BTC stored in the account (which arbitrarily increases with each new deposit). In other words, a withdrawal-attempt is created via M3, but this takes place many blocks before the withdrawal is actually included via M6. During this time, a single new deposit to the account would change its CTIP and its value. So, what do we ACK? Well, we ACK a \"blinded\" version of the withdrawal. This blinded version is stable because the dynamic parts are always overwritten with zeros.\n+\n+While we ACK a blinded WT^, what is actually included in the blockchain (\"M6\") is an unblinded WT^. Since each blinded WT^ could correspond to many different unblinded WT^s, we need to impose further restrictions on those unblinded WT^s that are finally included. First, we will force the final unblinded WT^ to spend the entire sidechain balance (by forcing sum(input_values) to equal sum(output_values)). To avoid withdrawing the entire sidechain balance with every withdrawal, we will, secondly, force the unblinded WT^ to create a new output which is itself a deposit to the sidechain it withdrew from (which nodes can check using D1's CTIP field). Unfortunately, these requirements eliminate the possibility of including a transaction fee, as traditionally calculated. So, finally, to compensate for *that*, txn fees are encoded explicitly as a withdrawal to OP_TRUE (which the main:block's miner can immediately claim).\n+\n+With all of this in place, the only requirements for inclusion in a block are these:\n+\n+# \"Be ACKed\" -- The \"blinded TxID\" of this txn must be member of the \"approved candidate\" set in the D2 of this block.\n+# \"Return Change to Account\" -- TxOut0 must pay to the \"critical account\" (see D1) that corresponds to the CTIP that was selected as a TxIn.\n+# \"Return *all* Change to Account\" -- Sum of inputs must equal the sum of outputs. No traditional tx fee is possible.\n+\n+Finally, don't forget that M6 inherits the requirement (common to both M5 and M6) that the CTIP be selected as an input, and that the CTIP then be updated. In this case, we know that the critical index will be zero, so the new CTIP will be (\"this TxID\" (NOT blinded), 0). The TxID is NOT blinded because blinding is only for accumulating ACKs.\n+\n+As a result of these requirements, every single withdrawal-attempt will fail, unless an entry has been added to D2 and \"ACKed\" a sufficient number of times.\n+",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 426,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191769871,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In this proposal, since the sidechains are so asymmetric, a sidechain is considered to be equivalent to an optional extension block.\r\n\r\nAnd since they are optional, it makes no difference if anyone does them at will.\r\n\r\nAnd since one purpose of these sidechains is \"permissionless innovation\" (ie, to provide a way for Bitcoin to recover from errors in the dev process / BIP process), it is actually imperative that there be some way of adding new sidechains even if the BIP process doesn't want them.",
      "created_at": "2018-05-30T19:49:22Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191900314",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191900314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 426,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191901042",
      "pull_request_review_id": 124566330,
      "id": 191901042,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkwMTA0Mg==",
      "diff_hunk": "@@ -0,0 +1,20 @@\n+",
      "path": "bip-hashrate-escrows/appendix-1.txt",
      "position": null,
      "original_position": 1,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191770212,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "When describing anything, there is always a tradeoff between thoroughness and brevity.",
      "created_at": "2018-05-30T19:51:55Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191901042",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191901042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191901603",
      "pull_request_review_id": 124566969,
      "id": 191901603,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkwMTYwMw==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.\n+\n+\n+( The following messages were modeled on SegWit -- https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 157 bytes (0x9d)\n+    4-byte - Commitment header (0x53707243)\n+    153-byte - the critical bytes mentioned above (fields #1, #3, and #4, to populate a new D1 entry)\n+\n+\n+==== New Block Validation Rules ====\n+\n+# If the network detects a properly-formatted M1, it must add an entry to D1, into the very next block, with the following initial values:\n+## Field #5 will be calculated as per [https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses version 1 Bitcoin addresses], but with a prefix of \"4\" instead of \"1\".\n+## Field #9 will be derived from #7 and #8 using math.\n+## The initial values of Fields #10, #11, and #12 are set to zero.\n+# Only one M1 (of any kind) can be added into a block at a time.\n+\n+==== Notes on M1 ====\n+\n+The escrow will \"reuse\" the same address over and over. But notice that there is no privacy loss due to address reuse, because the address in question does not \"belong\" to any specific individual. Furthermore, the transactions in question could already be linked by just watching the Hashrate Escrow for deposits ...this, in fact, is exactly what a sidechain must do in order to make main-to-side transfers.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 29 bytes (0x1D)\n+    4-byte - Commitment header (0x53616343)\n+    25-byte - Commitment hash: RIPMD-160 of Sha256 of a given M1 (above)\n+\n+==== New Block Validation Rules ====\n+\n+1. An entry will be removed from D1, unless that block contains an M2 supporting it (this will increment field #2), or the entry has accumulated 4032 M2s. Therefore, each entry needs to have 4032 *consecutive* M2s supporting it, else it will be removed from D1 and must start over. This requires all miners to agree to \"soft fork\" the sidechain into existence. This makes it easier to curate the list of active sidechains, and prevents destructive interference (see above) among contradictory sidechains.\n+2. Once the entry has 4032 M2s, then a miner must make a 0 btc payment to the Critical Address, thus activating the chain. This payment becomes the first \"critical (TxID, index) pair\" (or \"CTIP\").\n+3. It is possible to \"overwrite\" a D1 slot -- this destroys the sidechain that is there, and replaces it with a new one. This is defined as requiring 6 months (26298 blocks) of M2s, instead of 4 weeks (4032). This possibility does not change the security assumptions, because we already assume that users have access to \"magically true\" bandwidth at a rate of 1 bit per ACK-cycle. (This is why the voting cycles should be large, 1 month Waiting, 2+ months Voting).\n+\n+\n+\n+=== Adding Withdrawal-Attempts and Tracking Their Success (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+The table below enumerates the database fields, their size (in bytes), type and purpose.\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^\n+| 32\n+| hex\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs*\n+| 2\n+| uInt\n+| The current total number of \"votes\", this starts at 0 and remains there throughout the waiting period.\n+|-\n+| 4\n+| Age*\n+| 3\n+| uInt\n+| Total duration of time, in blocks, that this WT^ has been inside of D2.\n+|-\n+| 5\n+| Waiting Period*\n+| 2\n+| uInt\n+| Total duration of time, in blocks, that this entry must sit idle, before it can begin to accumulate ACKs/NACKs. Pulled from D1's field #6.\n+|-\n+| 6\n+| Max Age*\n+| 3\n+| uInt\n+| Determined by summing (D1's field #6) and (D1's field #7).\n+|-\n+| 7\n+| Threshold*\n+| 2\n+| uInt\n+| Total ACKs needed, this is pulled from D1's field #9.\n+|-\n+| 8\n+| Approved*\n+| 1\n+| boolean\n+| True while ACKs > Threshold, False otherwise.\n+|}\n+\n+\\* Denotes a \"convenience field\" (see above).\n+\n+Withdrawal_DB requires 46 bytes [1+32+2+3+2+3+2+1] per entry. Of these, 13 bytes ([2+3+2+3+2+1], all fields except #1 and #2) can be generated locally, leaving 33 critical bytes [1+32].\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# In each block, a hash commitment to D2 must always exist (even if D2 is blank).\n+# D2 must always be sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, every entry's \"Age\" field must increase by exactly 1.\n+# From one block to the next, entries are only removed from D2 (in the very next block) if:\n+## \"Age\" = \"MaxAge\".\n+## If the block contains a txn who's blinded txID matches WT^. {{ This might be unnecessary, and a lot of work. }}\n+# In addition, there are special rules for the allowed values in the \"ACKs\" field (field #3). See M4 below.\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 37 bytes (0x25)\n+    4-byte - Commitment header (0xD45AA943)\n+    33-byte - the critical bytes mentioned above (fields #1 and #2, to populate a new D2 entry)\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+==== Very Little Info, Probably Calculable in Advance ====\n+\n+M4 is exceptional (in comparison to the other M's) in a few ways. First, its content is not stored anywhere, only the *hash* of its *effect* is stored (in a leaf of a merkle tree who's root is inserted into a mainchain coinbase). M4 alters the contents of D2 -- the *contents* of D2 are consensus critical, but M4 (the process by which nodes reach a new valid D2) can be anything.\n+\n+In fact, M4 can also be *nothing*. In other words, it may be optional. This is precisely because, from one block to the next, we have constrained D2 such that it is only allowed to change in a few ways. Therefore, the exhaustive set of \"candidate D2s\" can be precomputed by full nodes in advance.\n+\n+The following sections assume a maximum of one sucessful withdrawal per sidechain at a time (see [/bip-hashrate-escrows/appendix-1.txt appendix 1]).\n+\n+==== How Hard is it to Guess M4? ====\n+\n+If there are n Escrows and m Withdrawals-per-escrow<sup>1</sup>, then there are (m+2)^n total candidates for the next D2. This is because, [per block per escrow], one of three things can happen: (1) one of the m withdrawal-candidates can be \"ACK\"ed (or \"upvoted\" or \"promoted\"), which automatically downvotes the others; or (2) all withdrawal-candidates can be downvoted, or finally (3) the miners can abstain from voting on the escrow's withdrawals altogether, leaving the tallies the same.\n+\n+First, for nodes which validate all sidechains (assuming these escrows are sidechains), this simplifies to 2^n -- these nodes only have to choose between the single honest choice (on one hand) or an abstention (on the other). Second, even for nodes that don't validate any sidechains, the number of candidates might be reduced from m^n to 3^n, by making a simplifying assumption: whichever withdrawal was most recently added/upvoted, is likely to be the one which is upvoted next.\n+\n+Of course, that is still O(k^n) for n sidechains, which isn't great<sup>2</sup>. If the \"D2 update\" cannot be guessed, it must be transmitted in some way.\n+\n+==== Giving Up and Getting M4 the Old Fashioned Way ====\n+\n+Two examples for transmitting it are below:\n+\n+\"Short Form\" (Assumes there are no more than 254 active withdrawal-attempts per account)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    N-byte - N is the total number of active accounts (\"sidechains\"), each byte specifies the position of the single WT that was \"upvoted\". A value of 0 indicates \"downvote everything\", a value of 255 indicates abstention.\n+\n+\"Long Form\" (Makes no assumptions about anything)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    1-byte - Length (in bytes) of this message; total number of withdrawal attempts; y = ceiling( sum_i(m_i +2)/8 ). Nodes should already know what length to expect, because they know the sequence of M3s and therefore the vector of WT^s.\n+    Y-byte - stream of bits (not bytes), with a 1 indicating the position of the chosen action [downvote all, abstain, upvote1, upvote2, ...]\n+\n+\n+If the message is very very large, then nodes may not want to broadcast it. This opens up an \"exhaustion attack\"<sup>2</sup>, in which many miners create bad WT^s, vote on these randomly, and then refuse to broadcast their votes. Fortunately, even for a worst-case scenario of 200 sidechains and 1,000 withdrawal-attempts per sidechain, honest nodes can communicate a long form M4 with each other by using just 25,056 bytes per block [4+1+1+(200\\*(1000+1+1)/8)].\n+\n+Today's pre-drivechain miners can already carry out a similar attack, by creating and including txns and then not broadcasting that part of the block to anyone. This is often characterized as a  [https://petertodd.org/2016/block-publication-incentives-for-miners \"block publication incentive\"], because in that case the prospect of exhaustively computing all possible transactions (to uncover the missing ones) is completely out of the question.\n+\n+However, message M4 is different from a withheld-txn, because M4 operates outside of the block's mandated information-processing limits (ie, outside the infamous 1 MB nonwitness blocksize limit). So we should examine the conditions under which M4 grows and shrinks, to ensure that we are not smuggling in a tremendous burden on full nodes.\n+\n+Under adversarial conditions, to lengthen a long-form M4 by one bit per block, for C blocks, the attacker must pay 312 bits (39 bytes) one time (to embed a new M3 message). The value C is the length of the sidechain's voting period, which varies but which I expect to be approximately 8,064 (and which could theoretically be as high as 65,536). Thus the attacker can burden nodes disproportionately, if (s)he wishes.\n+\n+Fortunately, the attack in question has no motivation (as far as I can tell). If the miner's goal is to trick rivals into mining on top of invalid blocks, he can already do this much more effectively with the unpublished-txn method (above). If instead he is just trying to harass nodes, then nodes may freely \"downgrade\" to earlier versions of the protocol, and simply ignore all drivechain-related messages. It seems that the attack could best be used in order to: make a large D2, make D2 confusing, sneak in votes for evil WT^ lurking in D2. Thus, the attack disables the transparency of the drivechain system, to some extent. The cost of the attack is forgone transaction fees, due to block space wasted on useless M3s.\n+\n+In practice, n is already capped, and miners may impose [on each other] a \"soft cap\" on m for their mutual protection. Thus, n and m might never get above 10 and 30, respectfully. In this case, the [Short Form, this time] M4 can never require more than 15 bytes per block, no matter what the attacker tries.\n+\n+In practice, m should always be 1 or 2, else something fishy is going on; and m can only inch up by 1 unit per block. So the system as a whole is still quite transparent, in that users are warned appropriately and well in advance. Attackers must invest upfront and they face an uphill climb, in order to eventually make things more expensive for a few others; defenders can wait-and-see if the attack looks like it will ever amount to anything before lifting a finger.\n+\n+\n+===== New Block Validation Rules (for D2 and, by implication, M4) =====\n+\n+From one block to the next, D2 can only be edited in a few strict ways:\n+\n+* Entries can only be added/removed from D2 if they meet the criteria above (in M3, and implicitly M1 and M2).\n+* The ACK-counter of any individual entry can only change by (-1,0,+1) relative to its previous entry.\n+* Within a sidechain group, upvoting one withdrawal (ACK=ACK+1) requires you to downvote all other withdrawals in that group. However, the minimum ACK value is zero (and, therefore, downvotes cannot reduce it below zero).\n+\n+===== Footnotes for M4 =====\n+\n+<sup>1</sup> This represents the worst-case scenario is one where all the Withdrawals are spread evenly over each Sidechain. Under normal operations, there is no reason to expect the all sidechains will have the same number of withdrawals at any given time. In fact, under normal operations, the very *concept* of counting the withdrawals-per-sidechain should be a purposeless one, because there should only be *one* withdrawal at a time. Nonetheless we consider the worst case scenario here.\n+\n+<sup>2</sup> Guessing becomes more computationally intensive in a highly adversarial situation where the \"limited range\" is intentionally expanded. In such a scenario, [a] there are many sidechains, and [b] miners voluntarily sacrifice their scarce block-space by creating a high number of (mutually-exclusive, and hence ultimately invalid) withdrawal attempts and putting these into coinbase transactions; and then agree to all [c] vote on these randomly (guaranteeing that all withdrawals fail, including any true withdrawals) and [d] successfully withhold their random voting strategies from nodes (even including spy-miner-nodes). Under this bizarre scenario, nodes may require computing resources which increase near-exponentially with the number of withdrawals, and it may take a long time for an ignorant node to exhaustively work out the underlying state of Withdrawal_DB. In this case, nodes may decide to temporarily stop validating such transactions (as if they had not yet upgraded to support this soft fork).\n+\n+\n+\n+=== Depositing and Withdrawing (M5, M6) ===\n+\n+\n+Both M5 and M6 are regular Bitcoin txns. They are identified by meeting an important criteria: they select a one of the Critical TxID-index Pairs (a \"CTIP\") as one of their inputs. Deposits (\"M5\") are distinguished from withdrawals (\"M6\") by simply checking to see if money is \"going in\", or \"out\". In other words, we compare the BTC value of the original CTIP to that of new CTIP. If original <= new it is a deposit, if original > new then it is a withdrawal.\n+\n+The code that identifies sidechain withdrawal / deposit txns (by calculating how much value is being put into or taken out of a sidechain) can be seen here: https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L351-L386\n+\n+Such txns are forced (by consensus) to obey two additional criteria:\n+\n+# They must contain an output paying \"to\" the Critical Address [probably in TxOut0].\n+# They must be accompanied by an update to this sidechain's Critical TxID-index Pair (CTIP). The new CTIP must be \"this\" txn itself.\n+\n+These criteria are enforced [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L440-L473 here] by checking that a deposit is paying back to the sidechain more than it is taking out, and completely rejecting any withdrawal from the mempool. And [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L1747-L1757 here] we allow for a withdrawal only once it has attained sufficient work score (ACKs).\n+\n+The purpose of this is to have all of the escrow's money (ie all of the sidechain's money) in one TxID, so that depositors immediately undo any UTXO bloat they may cause. This simplifies the withdrawal process, as there is no need to worry about cleaning up \"dust deposits\" (...and such cleaning can often result in headaches, for example where a withdrawal-txn is larger than 1MB in size, or else may only withdraw an arbitrarily limited amount of BTC). Notice that, unless we assume that an account will last forever, all utxos which are deposited must eventually be withdrawn by someone. Therefore, the relevant design criterion is not \"efficiency\" (total network cost) but rather \"who should pay\" (allocation of costs).\n+\n+==== M5. \"Make a Deposit\" -- a transfer of BTC from-main-to-side ====\n+\n+As far as mainchain consensus is concerned, there are no additional requirements.\n+\n+However, in practice there *are* additional mainchain requirements...specified by the escrow account, (ie specified by the \"sidechain\" or \"virtual chain\"). These requirements are not part of mainchain consensus and are allowed to be anything. In other words, the sidechain is free to invent any way to credit depositor's money -- M5 is fully customizable.\n+\n+One method, is for mainchain depositors to append a zero-value OP Return to a Deposit txn, so that the sidechain knows how to credit funds. Mainchain users must upgrade their wallet software, of course, (on an individual basis) in order to become aware of and take advantage of new deposit-methods.\n+\n+===== Inconvenient Race Condition =====\n+\n+The requirement that each hashrate escrow be linked to a single TxID does create an interesting inconvenience for depositors. If a user is slow to sign a txn after constructing it (perhaps because the user employs an air-gapped computer, etc), then the signed txn may no longer be valid. This is because the input it selects, may no longer be the Critical TxID (as \"the\" Critical TxID changes with each deposit). **Only one user can deposit at a time** (although many can deposit per block). As a result, the transaction must fail, and the user would need to be prompted to remake and resign the txn. If this is problem is too frustrating, users can always make main-to-side transfers using atomic cross chain swaps (or, the LN, if they already have a channel open on both chains).\n+\n+Fortunately, it is already a part of mainchain consensus that no two txns can spend the same TxID. The only new issue here is the confusion it might create for the user (hence the need for error messages and alternative deposit-methods).\n+\n+\n+==== M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main ====\n+\n+We come, finally, to the critical matter: where users can take their money *out* of the escrow account, and return it to the \"regular\" UTXO set. As previously mentioned, this txn is one which (a) spends from a CTIP and (b) reduces the quantity of BTC in an account's CTIP. Most of the work has already been done by D1, M3, M4, and D2. Furthermore, existing Bitcoin tx-rules prevent the sidechain from ever withdrawing more money than has been placed into it.\n+\n+From there, we merely introduce two final concepts:\n+\n+# In each block, an entry in D2 is considered an \"approved candidate\" if the \"ACKs\" value is above 13140.\n+# A \"blinded TxID\" is way of hashing the txn, in which we first overwrite some parts of the txn with zeros. Specifically, the first 36 bytes of \"TxIn0\" (the first input, including TxOutHash and TxOutIndex), as well as the first 8 bytes of \"TxOut0\" (the first output).\n+\n+Blinding is necessary because we allow each sidechain only one UTXO at a time.\n+\n+of our restriction of the account to a single UTXO-member. Because of this, during the ACKing process the withdrawal-txn (which is currently being ACKed) may change in two ways: the CTIP (which changes with each deposit), and the total quantity of BTC stored in the account (which arbitrarily increases with each new deposit). In other words, a withdrawal-attempt is created via M3, but this takes place many blocks before the withdrawal is actually included via M6. During this time, a single new deposit to the account would change its CTIP and its value. So, what do we ACK? Well, we ACK a \"blinded\" version of the withdrawal. This blinded version is stable because the dynamic parts are always overwritten with zeros.\n+\n+While we ACK a blinded WT^, what is actually included in the blockchain (\"M6\") is an unblinded WT^. Since each blinded WT^ could correspond to many different unblinded WT^s, we need to impose further restrictions on those unblinded WT^s that are finally included. First, we will force the final unblinded WT^ to spend the entire sidechain balance (by forcing sum(input_values) to equal sum(output_values)). To avoid withdrawing the entire sidechain balance with every withdrawal, we will, secondly, force the unblinded WT^ to create a new output which is itself a deposit to the sidechain it withdrew from (which nodes can check using D1's CTIP field). Unfortunately, these requirements eliminate the possibility of including a transaction fee, as traditionally calculated. So, finally, to compensate for *that*, txn fees are encoded explicitly as a withdrawal to OP_TRUE (which the main:block's miner can immediately claim).\n+\n+With all of this in place, the only requirements for inclusion in a block are these:\n+\n+# \"Be ACKed\" -- The \"blinded TxID\" of this txn must be member of the \"approved candidate\" set in the D2 of this block.\n+# \"Return Change to Account\" -- TxOut0 must pay to the \"critical account\" (see D1) that corresponds to the CTIP that was selected as a TxIn.\n+# \"Return *all* Change to Account\" -- Sum of inputs must equal the sum of outputs. No traditional tx fee is possible.\n+\n+Finally, don't forget that M6 inherits the requirement (common to both M5 and M6) that the CTIP be selected as an input, and that the CTIP then be updated. In this case, we know that the critical index will be zero, so the new CTIP will be (\"this TxID\" (NOT blinded), 0). The TxID is NOT blinded because blinding is only for accumulating ACKs.\n+\n+As a result of these requirements, every single withdrawal-attempt will fail, unless an entry has been added to D2 and \"ACKed\" a sufficient number of times.\n+\n+\n+\n+==Backward compatibility==\n+\n+\n+As a soft fork, older software will continue to operate without modification. Non-upgraded nodes will see a number of phenomena that they don't understand -- coinbase txns with non-txn data, value accumulating in anyone-can-spend UTXOs for months at a time, and then random amounts leaving the UTXO in single, infrequent bursts. However, this phenomena doesn't affect them or the validity of the money that they receive.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 432,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191769979,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These are optional extension blocks, and the withdrawals from them will *not* depend on what happens \"in the x-block\". The withdrawals only depend on the ACK-ing process, all of which happens on the mainchain.\r\n\r\nSo they meet the definition of a soft fork. In fact they do so much more than the SegWit proposal did.",
      "created_at": "2018-05-30T19:53:35Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191901603",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191901603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191902886",
      "pull_request_review_id": 124568492,
      "id": 191902886,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkwMjg4Ng==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 109,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191765510,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It is helpful in cases where there is a disagreement over the definition of a sidechain. It prevents users from being misled over which software to download (if, for example, they want to run \"the zcash sidechain\" and someone is pretending to offer that software for download).\r\n\r\nIf a sidechain software has one \"reference software\", then it inherits the institution of the soft fork. This is great for users who like soft forks. And it is great for developers who want to resist being coerced into hardforking-in bad features into their sidechains.",
      "created_at": "2018-05-30T19:57:41Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191902886",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191902886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191903079",
      "pull_request_review_id": 124568734,
      "id": 191903079,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkwMzA3OQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 115,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191765997,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, the ones with asterisks are not fundamental.",
      "created_at": "2018-05-30T19:58:21Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191903079",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191903079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191904716",
      "pull_request_review_id": 124570677,
      "id": 191904716,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkwNDcxNg==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 148,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191766725,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The first requirement was an implied part of the SegWit UASF BIP.\r\n\r\nAnd both are really not that subjective -- knowledge about \"what will maximize profits\" does exist. And even if it exists imperfectly, then that is no different from any other kind of knowledge.\r\n\r\nAnd in the UASF case these \"requirements\" ended up being imposed, in practice.\r\n\r\nBut if you want to reject the BIP, arguing that it is technically unsound to require miners to maximize their profitability, I am fine with that.",
      "created_at": "2018-05-30T20:04:08Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191904716",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191904716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191905482",
      "pull_request_review_id": 124571622,
      "id": 191905482,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkwNTQ4Mg==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 154,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191767468,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It is a distinction about control, as I say.\r\n\r\nIf miners had the option to remove the block weight, they probably would. But if they had the option to allow invalid txns, they probably would not.",
      "created_at": "2018-05-30T20:06:42Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191905482",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191905482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191909313",
      "pull_request_review_id": 124576502,
      "id": 191909313,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkwOTMxMw==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 109,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191765510,
      "user": {
        "login": "pennersr",
        "id": 201022,
        "node_id": "MDQ6VXNlcjIwMTAyMg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/201022?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pennersr",
        "html_url": "https://github.com/pennersr",
        "followers_url": "https://api.github.com/users/pennersr/followers",
        "following_url": "https://api.github.com/users/pennersr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pennersr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pennersr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pennersr/subscriptions",
        "organizations_url": "https://api.github.com/users/pennersr/orgs",
        "repos_url": "https://api.github.com/users/pennersr/repos",
        "events_url": "https://api.github.com/users/pennersr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pennersr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@psztorc  You did not address the \"What architecture? Compiled with what options?\" part. Is it supposed to be a Linux/Mac/Windows binary...?",
      "created_at": "2018-05-30T20:20:07Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191909313",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191909313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191910280",
      "pull_request_review_id": 124577718,
      "id": 191910280,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkxMDI4MA==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 67,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191764361,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just because old node software is not broken by a softfork does not make it any less necessary for all users to upgrade. If it were just storage, it might be no big deal - but this affects size of the *state* as well.",
      "created_at": "2018-05-30T20:23:24Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191910280",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191910280"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191911500",
      "pull_request_review_id": 124579179,
      "id": 191911500,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkxMTUwMA==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 148,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191766725,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Profitability is subjective. For example, Evilsidechain could be offering a large bribe.\r\n\r\nI don't understand how you're trying to tie this to UASFs... maybe I'm missing something?",
      "created_at": "2018-05-30T20:27:15Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191911500",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191911500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191911728",
      "pull_request_review_id": 124579464,
      "id": 191911728,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkxMTcyOA==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 154,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191767468,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That seems unlikely. Miners could profit a lot if invalid transactions were allowed.",
      "created_at": "2018-05-30T20:27:59Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191911728",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191911728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191912014",
      "pull_request_review_id": 124579823,
      "id": 191912014,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkxMjAxNA==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 171,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191768376,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't see how this allows tracking the balance any more than without it.",
      "created_at": "2018-05-30T20:29:00Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191912014",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191912014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191912174",
      "pull_request_review_id": 124580025,
      "id": 191912174,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkxMjE3NA==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.\n+\n+\n+( The following messages were modeled on SegWit -- https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 157 bytes (0x9d)\n+    4-byte - Commitment header (0x53707243)\n+    153-byte - the critical bytes mentioned above (fields #1, #3, and #4, to populate a new D1 entry)\n+\n+\n+==== New Block Validation Rules ====\n+\n+# If the network detects a properly-formatted M1, it must add an entry to D1, into the very next block, with the following initial values:\n+## Field #5 will be calculated as per [https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses version 1 Bitcoin addresses], but with a prefix of \"4\" instead of \"1\".\n+## Field #9 will be derived from #7 and #8 using math.\n+## The initial values of Fields #10, #11, and #12 are set to zero.\n+# Only one M1 (of any kind) can be added into a block at a time.\n+\n+==== Notes on M1 ====\n+\n+The escrow will \"reuse\" the same address over and over. But notice that there is no privacy loss due to address reuse, because the address in question does not \"belong\" to any specific individual. Furthermore, the transactions in question could already be linked by just watching the Hashrate Escrow for deposits ...this, in fact, is exactly what a sidechain must do in order to make main-to-side transfers.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 29 bytes (0x1D)\n+    4-byte - Commitment header (0x53616343)\n+    25-byte - Commitment hash: RIPMD-160 of Sha256 of a given M1 (above)\n+\n+==== New Block Validation Rules ====\n+\n+1. An entry will be removed from D1, unless that block contains an M2 supporting it (this will increment field #2), or the entry has accumulated 4032 M2s. Therefore, each entry needs to have 4032 *consecutive* M2s supporting it, else it will be removed from D1 and must start over. This requires all miners to agree to \"soft fork\" the sidechain into existence. This makes it easier to curate the list of active sidechains, and prevents destructive interference (see above) among contradictory sidechains.\n+2. Once the entry has 4032 M2s, then a miner must make a 0 btc payment to the Critical Address, thus activating the chain. This payment becomes the first \"critical (TxID, index) pair\" (or \"CTIP\").\n+3. It is possible to \"overwrite\" a D1 slot -- this destroys the sidechain that is there, and replaces it with a new one. This is defined as requiring 6 months (26298 blocks) of M2s, instead of 4 weeks (4032). This possibility does not change the security assumptions, because we already assume that users have access to \"magically true\" bandwidth at a rate of 1 bit per ACK-cycle. (This is why the voting cycles should be large, 1 month Waiting, 2+ months Voting).\n+\n+\n+\n+=== Adding Withdrawal-Attempts and Tracking Their Success (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+The table below enumerates the database fields, their size (in bytes), type and purpose.\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^\n+| 32\n+| hex\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs*\n+| 2\n+| uInt\n+| The current total number of \"votes\", this starts at 0 and remains there throughout the waiting period.\n+|-\n+| 4\n+| Age*\n+| 3\n+| uInt\n+| Total duration of time, in blocks, that this WT^ has been inside of D2.\n+|-\n+| 5\n+| Waiting Period*\n+| 2\n+| uInt\n+| Total duration of time, in blocks, that this entry must sit idle, before it can begin to accumulate ACKs/NACKs. Pulled from D1's field #6.\n+|-\n+| 6\n+| Max Age*\n+| 3\n+| uInt\n+| Determined by summing (D1's field #6) and (D1's field #7).\n+|-\n+| 7\n+| Threshold*\n+| 2\n+| uInt\n+| Total ACKs needed, this is pulled from D1's field #9.\n+|-\n+| 8\n+| Approved*\n+| 1\n+| boolean\n+| True while ACKs > Threshold, False otherwise.\n+|}\n+\n+\\* Denotes a \"convenience field\" (see above).\n+\n+Withdrawal_DB requires 46 bytes [1+32+2+3+2+3+2+1] per entry. Of these, 13 bytes ([2+3+2+3+2+1], all fields except #1 and #2) can be generated locally, leaving 33 critical bytes [1+32].\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# In each block, a hash commitment to D2 must always exist (even if D2 is blank).\n+# D2 must always be sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, every entry's \"Age\" field must increase by exactly 1.\n+# From one block to the next, entries are only removed from D2 (in the very next block) if:\n+## \"Age\" = \"MaxAge\".\n+## If the block contains a txn who's blinded txID matches WT^. {{ This might be unnecessary, and a lot of work. }}\n+# In addition, there are special rules for the allowed values in the \"ACKs\" field (field #3). See M4 below.\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 37 bytes (0x25)\n+    4-byte - Commitment header (0xD45AA943)\n+    33-byte - the critical bytes mentioned above (fields #1 and #2, to populate a new D2 entry)\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+==== Very Little Info, Probably Calculable in Advance ====\n+\n+M4 is exceptional (in comparison to the other M's) in a few ways. First, its content is not stored anywhere, only the *hash* of its *effect* is stored (in a leaf of a merkle tree who's root is inserted into a mainchain coinbase). M4 alters the contents of D2 -- the *contents* of D2 are consensus critical, but M4 (the process by which nodes reach a new valid D2) can be anything.\n+\n+In fact, M4 can also be *nothing*. In other words, it may be optional. This is precisely because, from one block to the next, we have constrained D2 such that it is only allowed to change in a few ways. Therefore, the exhaustive set of \"candidate D2s\" can be precomputed by full nodes in advance.\n+\n+The following sections assume a maximum of one sucessful withdrawal per sidechain at a time (see [/bip-hashrate-escrows/appendix-1.txt appendix 1]).\n+\n+==== How Hard is it to Guess M4? ====\n+\n+If there are n Escrows and m Withdrawals-per-escrow<sup>1</sup>, then there are (m+2)^n total candidates for the next D2. This is because, [per block per escrow], one of three things can happen: (1) one of the m withdrawal-candidates can be \"ACK\"ed (or \"upvoted\" or \"promoted\"), which automatically downvotes the others; or (2) all withdrawal-candidates can be downvoted, or finally (3) the miners can abstain from voting on the escrow's withdrawals altogether, leaving the tallies the same.\n+\n+First, for nodes which validate all sidechains (assuming these escrows are sidechains), this simplifies to 2^n -- these nodes only have to choose between the single honest choice (on one hand) or an abstention (on the other). Second, even for nodes that don't validate any sidechains, the number of candidates might be reduced from m^n to 3^n, by making a simplifying assumption: whichever withdrawal was most recently added/upvoted, is likely to be the one which is upvoted next.\n+\n+Of course, that is still O(k^n) for n sidechains, which isn't great<sup>2</sup>. If the \"D2 update\" cannot be guessed, it must be transmitted in some way.\n+\n+==== Giving Up and Getting M4 the Old Fashioned Way ====\n+\n+Two examples for transmitting it are below:\n+\n+\"Short Form\" (Assumes there are no more than 254 active withdrawal-attempts per account)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    N-byte - N is the total number of active accounts (\"sidechains\"), each byte specifies the position of the single WT that was \"upvoted\". A value of 0 indicates \"downvote everything\", a value of 255 indicates abstention.\n+\n+\"Long Form\" (Makes no assumptions about anything)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    1-byte - Length (in bytes) of this message; total number of withdrawal attempts; y = ceiling( sum_i(m_i +2)/8 ). Nodes should already know what length to expect, because they know the sequence of M3s and therefore the vector of WT^s.\n+    Y-byte - stream of bits (not bytes), with a 1 indicating the position of the chosen action [downvote all, abstain, upvote1, upvote2, ...]\n+\n+\n+If the message is very very large, then nodes may not want to broadcast it. This opens up an \"exhaustion attack\"<sup>2</sup>, in which many miners create bad WT^s, vote on these randomly, and then refuse to broadcast their votes. Fortunately, even for a worst-case scenario of 200 sidechains and 1,000 withdrawal-attempts per sidechain, honest nodes can communicate a long form M4 with each other by using just 25,056 bytes per block [4+1+1+(200\\*(1000+1+1)/8)].\n+\n+Today's pre-drivechain miners can already carry out a similar attack, by creating and including txns and then not broadcasting that part of the block to anyone. This is often characterized as a  [https://petertodd.org/2016/block-publication-incentives-for-miners \"block publication incentive\"], because in that case the prospect of exhaustively computing all possible transactions (to uncover the missing ones) is completely out of the question.\n+\n+However, message M4 is different from a withheld-txn, because M4 operates outside of the block's mandated information-processing limits (ie, outside the infamous 1 MB nonwitness blocksize limit). So we should examine the conditions under which M4 grows and shrinks, to ensure that we are not smuggling in a tremendous burden on full nodes.\n+\n+Under adversarial conditions, to lengthen a long-form M4 by one bit per block, for C blocks, the attacker must pay 312 bits (39 bytes) one time (to embed a new M3 message). The value C is the length of the sidechain's voting period, which varies but which I expect to be approximately 8,064 (and which could theoretically be as high as 65,536). Thus the attacker can burden nodes disproportionately, if (s)he wishes.\n+\n+Fortunately, the attack in question has no motivation (as far as I can tell). If the miner's goal is to trick rivals into mining on top of invalid blocks, he can already do this much more effectively with the unpublished-txn method (above). If instead he is just trying to harass nodes, then nodes may freely \"downgrade\" to earlier versions of the protocol, and simply ignore all drivechain-related messages. It seems that the attack could best be used in order to: make a large D2, make D2 confusing, sneak in votes for evil WT^ lurking in D2. Thus, the attack disables the transparency of the drivechain system, to some extent. The cost of the attack is forgone transaction fees, due to block space wasted on useless M3s.\n+\n+In practice, n is already capped, and miners may impose [on each other] a \"soft cap\" on m for their mutual protection. Thus, n and m might never get above 10 and 30, respectfully. In this case, the [Short Form, this time] M4 can never require more than 15 bytes per block, no matter what the attacker tries.\n+\n+In practice, m should always be 1 or 2, else something fishy is going on; and m can only inch up by 1 unit per block. So the system as a whole is still quite transparent, in that users are warned appropriately and well in advance. Attackers must invest upfront and they face an uphill climb, in order to eventually make things more expensive for a few others; defenders can wait-and-see if the attack looks like it will ever amount to anything before lifting a finger.\n+\n+\n+===== New Block Validation Rules (for D2 and, by implication, M4) =====\n+\n+From one block to the next, D2 can only be edited in a few strict ways:\n+\n+* Entries can only be added/removed from D2 if they meet the criteria above (in M3, and implicitly M1 and M2).\n+* The ACK-counter of any individual entry can only change by (-1,0,+1) relative to its previous entry.\n+* Within a sidechain group, upvoting one withdrawal (ACK=ACK+1) requires you to downvote all other withdrawals in that group. However, the minimum ACK value is zero (and, therefore, downvotes cannot reduce it below zero).\n+\n+===== Footnotes for M4 =====\n+\n+<sup>1</sup> This represents the worst-case scenario is one where all the Withdrawals are spread evenly over each Sidechain. Under normal operations, there is no reason to expect the all sidechains will have the same number of withdrawals at any given time. In fact, under normal operations, the very *concept* of counting the withdrawals-per-sidechain should be a purposeless one, because there should only be *one* withdrawal at a time. Nonetheless we consider the worst case scenario here.\n+\n+<sup>2</sup> Guessing becomes more computationally intensive in a highly adversarial situation where the \"limited range\" is intentionally expanded. In such a scenario, [a] there are many sidechains, and [b] miners voluntarily sacrifice their scarce block-space by creating a high number of (mutually-exclusive, and hence ultimately invalid) withdrawal attempts and putting these into coinbase transactions; and then agree to all [c] vote on these randomly (guaranteeing that all withdrawals fail, including any true withdrawals) and [d] successfully withhold their random voting strategies from nodes (even including spy-miner-nodes). Under this bizarre scenario, nodes may require computing resources which increase near-exponentially with the number of withdrawals, and it may take a long time for an ignorant node to exhaustively work out the underlying state of Withdrawal_DB. In this case, nodes may decide to temporarily stop validating such transactions (as if they had not yet upgraded to support this soft fork).\n+\n+\n+\n+=== Depositing and Withdrawing (M5, M6) ===\n+\n+\n+Both M5 and M6 are regular Bitcoin txns. They are identified by meeting an important criteria: they select a one of the Critical TxID-index Pairs (a \"CTIP\") as one of their inputs. Deposits (\"M5\") are distinguished from withdrawals (\"M6\") by simply checking to see if money is \"going in\", or \"out\". In other words, we compare the BTC value of the original CTIP to that of new CTIP. If original <= new it is a deposit, if original > new then it is a withdrawal.\n+\n+The code that identifies sidechain withdrawal / deposit txns (by calculating how much value is being put into or taken out of a sidechain) can be seen here: https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L351-L386\n+\n+Such txns are forced (by consensus) to obey two additional criteria:\n+\n+# They must contain an output paying \"to\" the Critical Address [probably in TxOut0].\n+# They must be accompanied by an update to this sidechain's Critical TxID-index Pair (CTIP). The new CTIP must be \"this\" txn itself.\n+\n+These criteria are enforced [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L440-L473 here] by checking that a deposit is paying back to the sidechain more than it is taking out, and completely rejecting any withdrawal from the mempool. And [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L1747-L1757 here] we allow for a withdrawal only once it has attained sufficient work score (ACKs).\n+\n+The purpose of this is to have all of the escrow's money (ie all of the sidechain's money) in one TxID, so that depositors immediately undo any UTXO bloat they may cause. This simplifies the withdrawal process, as there is no need to worry about cleaning up \"dust deposits\" (...and such cleaning can often result in headaches, for example where a withdrawal-txn is larger than 1MB in size, or else may only withdraw an arbitrarily limited amount of BTC). Notice that, unless we assume that an account will last forever, all utxos which are deposited must eventually be withdrawn by someone. Therefore, the relevant design criterion is not \"efficiency\" (total network cost) but rather \"who should pay\" (allocation of costs).\n+\n+==== M5. \"Make a Deposit\" -- a transfer of BTC from-main-to-side ====\n+\n+As far as mainchain consensus is concerned, there are no additional requirements.\n+\n+However, in practice there *are* additional mainchain requirements...specified by the escrow account, (ie specified by the \"sidechain\" or \"virtual chain\"). These requirements are not part of mainchain consensus and are allowed to be anything. In other words, the sidechain is free to invent any way to credit depositor's money -- M5 is fully customizable.\n+\n+One method, is for mainchain depositors to append a zero-value OP Return to a Deposit txn, so that the sidechain knows how to credit funds. Mainchain users must upgrade their wallet software, of course, (on an individual basis) in order to become aware of and take advantage of new deposit-methods.\n+\n+===== Inconvenient Race Condition =====\n+\n+The requirement that each hashrate escrow be linked to a single TxID does create an interesting inconvenience for depositors. If a user is slow to sign a txn after constructing it (perhaps because the user employs an air-gapped computer, etc), then the signed txn may no longer be valid. This is because the input it selects, may no longer be the Critical TxID (as \"the\" Critical TxID changes with each deposit). **Only one user can deposit at a time** (although many can deposit per block). As a result, the transaction must fail, and the user would need to be prompted to remake and resign the txn. If this is problem is too frustrating, users can always make main-to-side transfers using atomic cross chain swaps (or, the LN, if they already have a channel open on both chains).\n+\n+Fortunately, it is already a part of mainchain consensus that no two txns can spend the same TxID. The only new issue here is the confusion it might create for the user (hence the need for error messages and alternative deposit-methods).\n+\n+\n+==== M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main ====\n+\n+We come, finally, to the critical matter: where users can take their money *out* of the escrow account, and return it to the \"regular\" UTXO set. As previously mentioned, this txn is one which (a) spends from a CTIP and (b) reduces the quantity of BTC in an account's CTIP. Most of the work has already been done by D1, M3, M4, and D2. Furthermore, existing Bitcoin tx-rules prevent the sidechain from ever withdrawing more money than has been placed into it.\n+\n+From there, we merely introduce two final concepts:\n+\n+# In each block, an entry in D2 is considered an \"approved candidate\" if the \"ACKs\" value is above 13140.\n+# A \"blinded TxID\" is way of hashing the txn, in which we first overwrite some parts of the txn with zeros. Specifically, the first 36 bytes of \"TxIn0\" (the first input, including TxOutHash and TxOutIndex), as well as the first 8 bytes of \"TxOut0\" (the first output).\n+\n+Blinding is necessary because we allow each sidechain only one UTXO at a time.\n+\n+of our restriction of the account to a single UTXO-member. Because of this, during the ACKing process the withdrawal-txn (which is currently being ACKed) may change in two ways: the CTIP (which changes with each deposit), and the total quantity of BTC stored in the account (which arbitrarily increases with each new deposit). In other words, a withdrawal-attempt is created via M3, but this takes place many blocks before the withdrawal is actually included via M6. During this time, a single new deposit to the account would change its CTIP and its value. So, what do we ACK? Well, we ACK a \"blinded\" version of the withdrawal. This blinded version is stable because the dynamic parts are always overwritten with zeros.\n+\n+While we ACK a blinded WT^, what is actually included in the blockchain (\"M6\") is an unblinded WT^. Since each blinded WT^ could correspond to many different unblinded WT^s, we need to impose further restrictions on those unblinded WT^s that are finally included. First, we will force the final unblinded WT^ to spend the entire sidechain balance (by forcing sum(input_values) to equal sum(output_values)). To avoid withdrawing the entire sidechain balance with every withdrawal, we will, secondly, force the unblinded WT^ to create a new output which is itself a deposit to the sidechain it withdrew from (which nodes can check using D1's CTIP field). Unfortunately, these requirements eliminate the possibility of including a transaction fee, as traditionally calculated. So, finally, to compensate for *that*, txn fees are encoded explicitly as a withdrawal to OP_TRUE (which the main:block's miner can immediately claim).\n+\n+With all of this in place, the only requirements for inclusion in a block are these:\n+\n+# \"Be ACKed\" -- The \"blinded TxID\" of this txn must be member of the \"approved candidate\" set in the D2 of this block.\n+# \"Return Change to Account\" -- TxOut0 must pay to the \"critical account\" (see D1) that corresponds to the CTIP that was selected as a TxIn.\n+# \"Return *all* Change to Account\" -- Sum of inputs must equal the sum of outputs. No traditional tx fee is possible.\n+\n+Finally, don't forget that M6 inherits the requirement (common to both M5 and M6) that the CTIP be selected as an input, and that the CTIP then be updated. In this case, we know that the critical index will be zero, so the new CTIP will be (\"this TxID\" (NOT blinded), 0). The TxID is NOT blinded because blinding is only for accumulating ACKs.\n+\n+As a result of these requirements, every single withdrawal-attempt will fail, unless an entry has been added to D2 and \"ACKed\" a sufficient number of times.\n+",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 426,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191769871,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "But if a miner doesn't do a sidechain, won't it be interpreted as a NACK on every withdrawal?",
      "created_at": "2018-05-30T20:29:35Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191912174",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191912174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 426,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191928105",
      "pull_request_review_id": 124599513,
      "id": 191928105,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkyODEwNQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 67,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191764361,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> If it were just storage, it might be no big deal - but this affects size of the state as well.\r\n\r\nAre you only focusing on M4?\r\n\r\n> Just because old node software is not broken by a softfork does not make it any less necessary for all users to upgrade. \r\n\r\nIn an opcode softfork, non-upgraded nodes don't know if newer blocks contain invalid opcode operations.\r\nIn this softfork, non-upgraded nodes won't know if the newer blocks contain invalid sidechain operations.\r\n\r\nThis upgrade is a little strange because it has a state, but I don't understand how it compels users to upgrade. They can still just not upgrade, and even if they do upgrade, we could theoretically add some kind of \"sidechains off\" option where they don't choose to track any sidechain data.\r\n\r\nAlthough that would be super crazy and open Pandora's Box to a kind of \"a la carte\" consensus.",
      "created_at": "2018-05-30T21:25:32Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191928105",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191928105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191929887",
      "pull_request_review_id": 124601728,
      "id": 191929887,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkyOTg4Nw==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 67,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191764361,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Non-upgraded nodes is never a viable option for any softfork. Old nodes remain compatible, but nobody is supposed to actually *use* them.",
      "created_at": "2018-05-30T21:32:15Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191929887",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191929887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191930616",
      "pull_request_review_id": 124602633,
      "id": 191930616,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkzMDYxNg==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 109,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191765510,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@pennersr I actually don't see how it matters. The options/configuration instructions could be defined in the source code itself.\r\n\r\nMore important to me, though, is that the sidechains have a \"freedom to fail\" design. If so, the sidechain designers are free to make whatever crazy mistakes/choices they think their users want.\r\n\r\nBut it is important to have a reference implementation, is it not? For exactly the same reasons that Satoshi / Peter Todd are against alternative implementations of Bitcoin -- if they ever disagree over a single byte, there will be consensus failure.\r\n\r\nThis was just a simple idea on how to try to prevent that.",
      "created_at": "2018-05-30T21:35:05Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191930616",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191930616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191932050",
      "pull_request_review_id": 124604350,
      "id": 191932050,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkzMjA1MA==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 148,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191766725,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Profitability is subjective. For example, Evilsidechain could be offering a large bribe.\r\n\r\nEither the bribe is objectively larger than some value, or it objectively is not. So I don't see how this is an example of subjectivity?\r\n\r\n> I don't understand how you're trying to tie this to UASFs\r\n\r\nIn the UASF, miners must decide whether they want to upgrade their software (surrender to the UASF) or not (in which case they fight the UASF). And they will make this decision based on their (imperfect) knowledge of the profitability of each version of the protocol.\r\n\r\nIn fact , this is true of all soft forks, not just UASFs. As someone *could* propose a softfork that made coinbase-txn maturity 300,000 blocks, instead of 100; and which reduced the blocksize/weight to 500 bytes. And even in the pre-UASF era, miners would have to decide whether or not to install that software.",
      "created_at": "2018-05-30T21:41:00Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191932050",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191932050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191932557",
      "pull_request_review_id": 124604925,
      "id": 191932557,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkzMjU1Nw==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 148,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191766725,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The bribe might not be offered to all miners equally.\r\n\r\nIt doesn't seem like you understand UASFs... miners must choose to upgrade to remain part of the network, or failure to do so would be them launching an altcoin (whether they run the old software or make other changes). There is no pre-UASF era... the earliest softforks were all UASFs.",
      "created_at": "2018-05-30T21:43:06Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191932557",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191932557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191934347",
      "pull_request_review_id": 124607021,
      "id": 191934347,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkzNDM0Nw==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 154,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191767468,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't see how. It would just make Bitcoin more annoying to use for everyone, with no benefit. So BTC would be less useful, and miners are paid in BTC. So miners would be choosing to pay themselves less.\r\n\r\nBut nonetheless, this establishes the distinction you asked for. It is about which constraints are protecting whom.\r\n\r\nIn the future, I and many others believe that miners will switch to monopolist pricing, and self-impose a blocksize/weight limit on each other. So it would be wrong to say that nodes \"control\" the limit (because they cannot increase it). But it would be wrong to say that miners \"control\" the limit as it is driven by their collective need to maximize revenues.",
      "created_at": "2018-05-30T21:50:21Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191934347",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191934347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191934928",
      "pull_request_review_id": 124607721,
      "id": 191934928,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkzNDkyOA==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 171,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191768376,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That could be because you know what to do and we don't.\r\n\r\nCurrently we track the sidechain's balance by adding a kind of \"watching only\" address, as I said.\r\n\r\nBut this is something we plan to revisit and remove as soon as we have more time to look into it.",
      "created_at": "2018-05-30T21:52:53Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191934928",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191934928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191936056",
      "pull_request_review_id": 124608902,
      "id": 191936056,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkzNjA1Ng==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.\n+\n+\n+( The following messages were modeled on SegWit -- https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 157 bytes (0x9d)\n+    4-byte - Commitment header (0x53707243)\n+    153-byte - the critical bytes mentioned above (fields #1, #3, and #4, to populate a new D1 entry)\n+\n+\n+==== New Block Validation Rules ====\n+\n+# If the network detects a properly-formatted M1, it must add an entry to D1, into the very next block, with the following initial values:\n+## Field #5 will be calculated as per [https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses version 1 Bitcoin addresses], but with a prefix of \"4\" instead of \"1\".\n+## Field #9 will be derived from #7 and #8 using math.\n+## The initial values of Fields #10, #11, and #12 are set to zero.\n+# Only one M1 (of any kind) can be added into a block at a time.\n+\n+==== Notes on M1 ====\n+\n+The escrow will \"reuse\" the same address over and over. But notice that there is no privacy loss due to address reuse, because the address in question does not \"belong\" to any specific individual. Furthermore, the transactions in question could already be linked by just watching the Hashrate Escrow for deposits ...this, in fact, is exactly what a sidechain must do in order to make main-to-side transfers.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 29 bytes (0x1D)\n+    4-byte - Commitment header (0x53616343)\n+    25-byte - Commitment hash: RIPMD-160 of Sha256 of a given M1 (above)\n+\n+==== New Block Validation Rules ====\n+\n+1. An entry will be removed from D1, unless that block contains an M2 supporting it (this will increment field #2), or the entry has accumulated 4032 M2s. Therefore, each entry needs to have 4032 *consecutive* M2s supporting it, else it will be removed from D1 and must start over. This requires all miners to agree to \"soft fork\" the sidechain into existence. This makes it easier to curate the list of active sidechains, and prevents destructive interference (see above) among contradictory sidechains.\n+2. Once the entry has 4032 M2s, then a miner must make a 0 btc payment to the Critical Address, thus activating the chain. This payment becomes the first \"critical (TxID, index) pair\" (or \"CTIP\").\n+3. It is possible to \"overwrite\" a D1 slot -- this destroys the sidechain that is there, and replaces it with a new one. This is defined as requiring 6 months (26298 blocks) of M2s, instead of 4 weeks (4032). This possibility does not change the security assumptions, because we already assume that users have access to \"magically true\" bandwidth at a rate of 1 bit per ACK-cycle. (This is why the voting cycles should be large, 1 month Waiting, 2+ months Voting).\n+\n+\n+\n+=== Adding Withdrawal-Attempts and Tracking Their Success (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+The table below enumerates the database fields, their size (in bytes), type and purpose.\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^\n+| 32\n+| hex\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs*\n+| 2\n+| uInt\n+| The current total number of \"votes\", this starts at 0 and remains there throughout the waiting period.\n+|-\n+| 4\n+| Age*\n+| 3\n+| uInt\n+| Total duration of time, in blocks, that this WT^ has been inside of D2.\n+|-\n+| 5\n+| Waiting Period*\n+| 2\n+| uInt\n+| Total duration of time, in blocks, that this entry must sit idle, before it can begin to accumulate ACKs/NACKs. Pulled from D1's field #6.\n+|-\n+| 6\n+| Max Age*\n+| 3\n+| uInt\n+| Determined by summing (D1's field #6) and (D1's field #7).\n+|-\n+| 7\n+| Threshold*\n+| 2\n+| uInt\n+| Total ACKs needed, this is pulled from D1's field #9.\n+|-\n+| 8\n+| Approved*\n+| 1\n+| boolean\n+| True while ACKs > Threshold, False otherwise.\n+|}\n+\n+\\* Denotes a \"convenience field\" (see above).\n+\n+Withdrawal_DB requires 46 bytes [1+32+2+3+2+3+2+1] per entry. Of these, 13 bytes ([2+3+2+3+2+1], all fields except #1 and #2) can be generated locally, leaving 33 critical bytes [1+32].\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# In each block, a hash commitment to D2 must always exist (even if D2 is blank).\n+# D2 must always be sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, every entry's \"Age\" field must increase by exactly 1.\n+# From one block to the next, entries are only removed from D2 (in the very next block) if:\n+## \"Age\" = \"MaxAge\".\n+## If the block contains a txn who's blinded txID matches WT^. {{ This might be unnecessary, and a lot of work. }}\n+# In addition, there are special rules for the allowed values in the \"ACKs\" field (field #3). See M4 below.\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 37 bytes (0x25)\n+    4-byte - Commitment header (0xD45AA943)\n+    33-byte - the critical bytes mentioned above (fields #1 and #2, to populate a new D2 entry)\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+==== Very Little Info, Probably Calculable in Advance ====\n+\n+M4 is exceptional (in comparison to the other M's) in a few ways. First, its content is not stored anywhere, only the *hash* of its *effect* is stored (in a leaf of a merkle tree who's root is inserted into a mainchain coinbase). M4 alters the contents of D2 -- the *contents* of D2 are consensus critical, but M4 (the process by which nodes reach a new valid D2) can be anything.\n+\n+In fact, M4 can also be *nothing*. In other words, it may be optional. This is precisely because, from one block to the next, we have constrained D2 such that it is only allowed to change in a few ways. Therefore, the exhaustive set of \"candidate D2s\" can be precomputed by full nodes in advance.\n+\n+The following sections assume a maximum of one sucessful withdrawal per sidechain at a time (see [/bip-hashrate-escrows/appendix-1.txt appendix 1]).\n+\n+==== How Hard is it to Guess M4? ====\n+\n+If there are n Escrows and m Withdrawals-per-escrow<sup>1</sup>, then there are (m+2)^n total candidates for the next D2. This is because, [per block per escrow], one of three things can happen: (1) one of the m withdrawal-candidates can be \"ACK\"ed (or \"upvoted\" or \"promoted\"), which automatically downvotes the others; or (2) all withdrawal-candidates can be downvoted, or finally (3) the miners can abstain from voting on the escrow's withdrawals altogether, leaving the tallies the same.\n+\n+First, for nodes which validate all sidechains (assuming these escrows are sidechains), this simplifies to 2^n -- these nodes only have to choose between the single honest choice (on one hand) or an abstention (on the other). Second, even for nodes that don't validate any sidechains, the number of candidates might be reduced from m^n to 3^n, by making a simplifying assumption: whichever withdrawal was most recently added/upvoted, is likely to be the one which is upvoted next.\n+\n+Of course, that is still O(k^n) for n sidechains, which isn't great<sup>2</sup>. If the \"D2 update\" cannot be guessed, it must be transmitted in some way.\n+\n+==== Giving Up and Getting M4 the Old Fashioned Way ====\n+\n+Two examples for transmitting it are below:\n+\n+\"Short Form\" (Assumes there are no more than 254 active withdrawal-attempts per account)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    N-byte - N is the total number of active accounts (\"sidechains\"), each byte specifies the position of the single WT that was \"upvoted\". A value of 0 indicates \"downvote everything\", a value of 255 indicates abstention.\n+\n+\"Long Form\" (Makes no assumptions about anything)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    1-byte - Length (in bytes) of this message; total number of withdrawal attempts; y = ceiling( sum_i(m_i +2)/8 ). Nodes should already know what length to expect, because they know the sequence of M3s and therefore the vector of WT^s.\n+    Y-byte - stream of bits (not bytes), with a 1 indicating the position of the chosen action [downvote all, abstain, upvote1, upvote2, ...]\n+\n+\n+If the message is very very large, then nodes may not want to broadcast it. This opens up an \"exhaustion attack\"<sup>2</sup>, in which many miners create bad WT^s, vote on these randomly, and then refuse to broadcast their votes. Fortunately, even for a worst-case scenario of 200 sidechains and 1,000 withdrawal-attempts per sidechain, honest nodes can communicate a long form M4 with each other by using just 25,056 bytes per block [4+1+1+(200\\*(1000+1+1)/8)].\n+\n+Today's pre-drivechain miners can already carry out a similar attack, by creating and including txns and then not broadcasting that part of the block to anyone. This is often characterized as a  [https://petertodd.org/2016/block-publication-incentives-for-miners \"block publication incentive\"], because in that case the prospect of exhaustively computing all possible transactions (to uncover the missing ones) is completely out of the question.\n+\n+However, message M4 is different from a withheld-txn, because M4 operates outside of the block's mandated information-processing limits (ie, outside the infamous 1 MB nonwitness blocksize limit). So we should examine the conditions under which M4 grows and shrinks, to ensure that we are not smuggling in a tremendous burden on full nodes.\n+\n+Under adversarial conditions, to lengthen a long-form M4 by one bit per block, for C blocks, the attacker must pay 312 bits (39 bytes) one time (to embed a new M3 message). The value C is the length of the sidechain's voting period, which varies but which I expect to be approximately 8,064 (and which could theoretically be as high as 65,536). Thus the attacker can burden nodes disproportionately, if (s)he wishes.\n+\n+Fortunately, the attack in question has no motivation (as far as I can tell). If the miner's goal is to trick rivals into mining on top of invalid blocks, he can already do this much more effectively with the unpublished-txn method (above). If instead he is just trying to harass nodes, then nodes may freely \"downgrade\" to earlier versions of the protocol, and simply ignore all drivechain-related messages. It seems that the attack could best be used in order to: make a large D2, make D2 confusing, sneak in votes for evil WT^ lurking in D2. Thus, the attack disables the transparency of the drivechain system, to some extent. The cost of the attack is forgone transaction fees, due to block space wasted on useless M3s.\n+\n+In practice, n is already capped, and miners may impose [on each other] a \"soft cap\" on m for their mutual protection. Thus, n and m might never get above 10 and 30, respectfully. In this case, the [Short Form, this time] M4 can never require more than 15 bytes per block, no matter what the attacker tries.\n+\n+In practice, m should always be 1 or 2, else something fishy is going on; and m can only inch up by 1 unit per block. So the system as a whole is still quite transparent, in that users are warned appropriately and well in advance. Attackers must invest upfront and they face an uphill climb, in order to eventually make things more expensive for a few others; defenders can wait-and-see if the attack looks like it will ever amount to anything before lifting a finger.\n+\n+\n+===== New Block Validation Rules (for D2 and, by implication, M4) =====\n+\n+From one block to the next, D2 can only be edited in a few strict ways:\n+\n+* Entries can only be added/removed from D2 if they meet the criteria above (in M3, and implicitly M1 and M2).\n+* The ACK-counter of any individual entry can only change by (-1,0,+1) relative to its previous entry.\n+* Within a sidechain group, upvoting one withdrawal (ACK=ACK+1) requires you to downvote all other withdrawals in that group. However, the minimum ACK value is zero (and, therefore, downvotes cannot reduce it below zero).\n+\n+===== Footnotes for M4 =====\n+\n+<sup>1</sup> This represents the worst-case scenario is one where all the Withdrawals are spread evenly over each Sidechain. Under normal operations, there is no reason to expect the all sidechains will have the same number of withdrawals at any given time. In fact, under normal operations, the very *concept* of counting the withdrawals-per-sidechain should be a purposeless one, because there should only be *one* withdrawal at a time. Nonetheless we consider the worst case scenario here.\n+\n+<sup>2</sup> Guessing becomes more computationally intensive in a highly adversarial situation where the \"limited range\" is intentionally expanded. In such a scenario, [a] there are many sidechains, and [b] miners voluntarily sacrifice their scarce block-space by creating a high number of (mutually-exclusive, and hence ultimately invalid) withdrawal attempts and putting these into coinbase transactions; and then agree to all [c] vote on these randomly (guaranteeing that all withdrawals fail, including any true withdrawals) and [d] successfully withhold their random voting strategies from nodes (even including spy-miner-nodes). Under this bizarre scenario, nodes may require computing resources which increase near-exponentially with the number of withdrawals, and it may take a long time for an ignorant node to exhaustively work out the underlying state of Withdrawal_DB. In this case, nodes may decide to temporarily stop validating such transactions (as if they had not yet upgraded to support this soft fork).\n+\n+\n+\n+=== Depositing and Withdrawing (M5, M6) ===\n+\n+\n+Both M5 and M6 are regular Bitcoin txns. They are identified by meeting an important criteria: they select a one of the Critical TxID-index Pairs (a \"CTIP\") as one of their inputs. Deposits (\"M5\") are distinguished from withdrawals (\"M6\") by simply checking to see if money is \"going in\", or \"out\". In other words, we compare the BTC value of the original CTIP to that of new CTIP. If original <= new it is a deposit, if original > new then it is a withdrawal.\n+\n+The code that identifies sidechain withdrawal / deposit txns (by calculating how much value is being put into or taken out of a sidechain) can be seen here: https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L351-L386\n+\n+Such txns are forced (by consensus) to obey two additional criteria:\n+\n+# They must contain an output paying \"to\" the Critical Address [probably in TxOut0].\n+# They must be accompanied by an update to this sidechain's Critical TxID-index Pair (CTIP). The new CTIP must be \"this\" txn itself.\n+\n+These criteria are enforced [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L440-L473 here] by checking that a deposit is paying back to the sidechain more than it is taking out, and completely rejecting any withdrawal from the mempool. And [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L1747-L1757 here] we allow for a withdrawal only once it has attained sufficient work score (ACKs).\n+\n+The purpose of this is to have all of the escrow's money (ie all of the sidechain's money) in one TxID, so that depositors immediately undo any UTXO bloat they may cause. This simplifies the withdrawal process, as there is no need to worry about cleaning up \"dust deposits\" (...and such cleaning can often result in headaches, for example where a withdrawal-txn is larger than 1MB in size, or else may only withdraw an arbitrarily limited amount of BTC). Notice that, unless we assume that an account will last forever, all utxos which are deposited must eventually be withdrawn by someone. Therefore, the relevant design criterion is not \"efficiency\" (total network cost) but rather \"who should pay\" (allocation of costs).\n+\n+==== M5. \"Make a Deposit\" -- a transfer of BTC from-main-to-side ====\n+\n+As far as mainchain consensus is concerned, there are no additional requirements.\n+\n+However, in practice there *are* additional mainchain requirements...specified by the escrow account, (ie specified by the \"sidechain\" or \"virtual chain\"). These requirements are not part of mainchain consensus and are allowed to be anything. In other words, the sidechain is free to invent any way to credit depositor's money -- M5 is fully customizable.\n+\n+One method, is for mainchain depositors to append a zero-value OP Return to a Deposit txn, so that the sidechain knows how to credit funds. Mainchain users must upgrade their wallet software, of course, (on an individual basis) in order to become aware of and take advantage of new deposit-methods.\n+\n+===== Inconvenient Race Condition =====\n+\n+The requirement that each hashrate escrow be linked to a single TxID does create an interesting inconvenience for depositors. If a user is slow to sign a txn after constructing it (perhaps because the user employs an air-gapped computer, etc), then the signed txn may no longer be valid. This is because the input it selects, may no longer be the Critical TxID (as \"the\" Critical TxID changes with each deposit). **Only one user can deposit at a time** (although many can deposit per block). As a result, the transaction must fail, and the user would need to be prompted to remake and resign the txn. If this is problem is too frustrating, users can always make main-to-side transfers using atomic cross chain swaps (or, the LN, if they already have a channel open on both chains).\n+\n+Fortunately, it is already a part of mainchain consensus that no two txns can spend the same TxID. The only new issue here is the confusion it might create for the user (hence the need for error messages and alternative deposit-methods).\n+\n+\n+==== M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main ====\n+\n+We come, finally, to the critical matter: where users can take their money *out* of the escrow account, and return it to the \"regular\" UTXO set. As previously mentioned, this txn is one which (a) spends from a CTIP and (b) reduces the quantity of BTC in an account's CTIP. Most of the work has already been done by D1, M3, M4, and D2. Furthermore, existing Bitcoin tx-rules prevent the sidechain from ever withdrawing more money than has been placed into it.\n+\n+From there, we merely introduce two final concepts:\n+\n+# In each block, an entry in D2 is considered an \"approved candidate\" if the \"ACKs\" value is above 13140.\n+# A \"blinded TxID\" is way of hashing the txn, in which we first overwrite some parts of the txn with zeros. Specifically, the first 36 bytes of \"TxIn0\" (the first input, including TxOutHash and TxOutIndex), as well as the first 8 bytes of \"TxOut0\" (the first output).\n+\n+Blinding is necessary because we allow each sidechain only one UTXO at a time.\n+\n+of our restriction of the account to a single UTXO-member. Because of this, during the ACKing process the withdrawal-txn (which is currently being ACKed) may change in two ways: the CTIP (which changes with each deposit), and the total quantity of BTC stored in the account (which arbitrarily increases with each new deposit). In other words, a withdrawal-attempt is created via M3, but this takes place many blocks before the withdrawal is actually included via M6. During this time, a single new deposit to the account would change its CTIP and its value. So, what do we ACK? Well, we ACK a \"blinded\" version of the withdrawal. This blinded version is stable because the dynamic parts are always overwritten with zeros.\n+\n+While we ACK a blinded WT^, what is actually included in the blockchain (\"M6\") is an unblinded WT^. Since each blinded WT^ could correspond to many different unblinded WT^s, we need to impose further restrictions on those unblinded WT^s that are finally included. First, we will force the final unblinded WT^ to spend the entire sidechain balance (by forcing sum(input_values) to equal sum(output_values)). To avoid withdrawing the entire sidechain balance with every withdrawal, we will, secondly, force the unblinded WT^ to create a new output which is itself a deposit to the sidechain it withdrew from (which nodes can check using D1's CTIP field). Unfortunately, these requirements eliminate the possibility of including a transaction fee, as traditionally calculated. So, finally, to compensate for *that*, txn fees are encoded explicitly as a withdrawal to OP_TRUE (which the main:block's miner can immediately claim).\n+\n+With all of this in place, the only requirements for inclusion in a block are these:\n+\n+# \"Be ACKed\" -- The \"blinded TxID\" of this txn must be member of the \"approved candidate\" set in the D2 of this block.\n+# \"Return Change to Account\" -- TxOut0 must pay to the \"critical account\" (see D1) that corresponds to the CTIP that was selected as a TxIn.\n+# \"Return *all* Change to Account\" -- Sum of inputs must equal the sum of outputs. No traditional tx fee is possible.\n+\n+Finally, don't forget that M6 inherits the requirement (common to both M5 and M6) that the CTIP be selected as an input, and that the CTIP then be updated. In this case, we know that the critical index will be zero, so the new CTIP will be (\"this TxID\" (NOT blinded), 0). The TxID is NOT blinded because blinding is only for accumulating ACKs.\n+\n+As a result of these requirements, every single withdrawal-attempt will fail, unless an entry has been added to D2 and \"ACKed\" a sufficient number of times.\n+",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 426,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191769871,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, a sidechain can \"abstain\" and take no position on the withdrawals. In that case it is neither and ACK nor a NACK.\r\n\r\nIn practice, abstaining miners may also choose to rely on much...flimsier methods, like just checking in with someone who runs a sidechain node in real life, and asking them if everything is operating normally.\r\n\r\n(In any well-designed sidechain, the withdrawal-IDs would be right in *each* sidechain header, or would else be very very easy to find. And there should only be 1 or 2 withdrawls there, per 3 months. And each of these should be a mere 32-bytes of information).",
      "created_at": "2018-05-30T21:57:23Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191936056",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191936056"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 426,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191936843",
      "pull_request_review_id": 124609810,
      "id": 191936843,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkzNjg0Mw==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.\n+\n+\n+( The following messages were modeled on SegWit -- https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 157 bytes (0x9d)\n+    4-byte - Commitment header (0x53707243)\n+    153-byte - the critical bytes mentioned above (fields #1, #3, and #4, to populate a new D1 entry)\n+\n+\n+==== New Block Validation Rules ====\n+\n+# If the network detects a properly-formatted M1, it must add an entry to D1, into the very next block, with the following initial values:\n+## Field #5 will be calculated as per [https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses version 1 Bitcoin addresses], but with a prefix of \"4\" instead of \"1\".\n+## Field #9 will be derived from #7 and #8 using math.\n+## The initial values of Fields #10, #11, and #12 are set to zero.\n+# Only one M1 (of any kind) can be added into a block at a time.\n+\n+==== Notes on M1 ====\n+\n+The escrow will \"reuse\" the same address over and over. But notice that there is no privacy loss due to address reuse, because the address in question does not \"belong\" to any specific individual. Furthermore, the transactions in question could already be linked by just watching the Hashrate Escrow for deposits ...this, in fact, is exactly what a sidechain must do in order to make main-to-side transfers.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 29 bytes (0x1D)\n+    4-byte - Commitment header (0x53616343)\n+    25-byte - Commitment hash: RIPMD-160 of Sha256 of a given M1 (above)\n+\n+==== New Block Validation Rules ====\n+\n+1. An entry will be removed from D1, unless that block contains an M2 supporting it (this will increment field #2), or the entry has accumulated 4032 M2s. Therefore, each entry needs to have 4032 *consecutive* M2s supporting it, else it will be removed from D1 and must start over. This requires all miners to agree to \"soft fork\" the sidechain into existence. This makes it easier to curate the list of active sidechains, and prevents destructive interference (see above) among contradictory sidechains.\n+2. Once the entry has 4032 M2s, then a miner must make a 0 btc payment to the Critical Address, thus activating the chain. This payment becomes the first \"critical (TxID, index) pair\" (or \"CTIP\").\n+3. It is possible to \"overwrite\" a D1 slot -- this destroys the sidechain that is there, and replaces it with a new one. This is defined as requiring 6 months (26298 blocks) of M2s, instead of 4 weeks (4032). This possibility does not change the security assumptions, because we already assume that users have access to \"magically true\" bandwidth at a rate of 1 bit per ACK-cycle. (This is why the voting cycles should be large, 1 month Waiting, 2+ months Voting).\n+\n+\n+\n+=== Adding Withdrawal-Attempts and Tracking Their Success (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+The table below enumerates the database fields, their size (in bytes), type and purpose.\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^\n+| 32\n+| hex\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs*\n+| 2\n+| uInt\n+| The current total number of \"votes\", this starts at 0 and remains there throughout the waiting period.\n+|-\n+| 4\n+| Age*\n+| 3\n+| uInt\n+| Total duration of time, in blocks, that this WT^ has been inside of D2.\n+|-\n+| 5\n+| Waiting Period*\n+| 2\n+| uInt\n+| Total duration of time, in blocks, that this entry must sit idle, before it can begin to accumulate ACKs/NACKs. Pulled from D1's field #6.\n+|-\n+| 6\n+| Max Age*\n+| 3\n+| uInt\n+| Determined by summing (D1's field #6) and (D1's field #7).\n+|-\n+| 7\n+| Threshold*\n+| 2\n+| uInt\n+| Total ACKs needed, this is pulled from D1's field #9.\n+|-\n+| 8\n+| Approved*\n+| 1\n+| boolean\n+| True while ACKs > Threshold, False otherwise.\n+|}\n+\n+\\* Denotes a \"convenience field\" (see above).\n+\n+Withdrawal_DB requires 46 bytes [1+32+2+3+2+3+2+1] per entry. Of these, 13 bytes ([2+3+2+3+2+1], all fields except #1 and #2) can be generated locally, leaving 33 critical bytes [1+32].\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# In each block, a hash commitment to D2 must always exist (even if D2 is blank).\n+# D2 must always be sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, every entry's \"Age\" field must increase by exactly 1.\n+# From one block to the next, entries are only removed from D2 (in the very next block) if:\n+## \"Age\" = \"MaxAge\".\n+## If the block contains a txn who's blinded txID matches WT^. {{ This might be unnecessary, and a lot of work. }}\n+# In addition, there are special rules for the allowed values in the \"ACKs\" field (field #3). See M4 below.\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 37 bytes (0x25)\n+    4-byte - Commitment header (0xD45AA943)\n+    33-byte - the critical bytes mentioned above (fields #1 and #2, to populate a new D2 entry)\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+==== Very Little Info, Probably Calculable in Advance ====\n+\n+M4 is exceptional (in comparison to the other M's) in a few ways. First, its content is not stored anywhere, only the *hash* of its *effect* is stored (in a leaf of a merkle tree who's root is inserted into a mainchain coinbase). M4 alters the contents of D2 -- the *contents* of D2 are consensus critical, but M4 (the process by which nodes reach a new valid D2) can be anything.\n+\n+In fact, M4 can also be *nothing*. In other words, it may be optional. This is precisely because, from one block to the next, we have constrained D2 such that it is only allowed to change in a few ways. Therefore, the exhaustive set of \"candidate D2s\" can be precomputed by full nodes in advance.\n+\n+The following sections assume a maximum of one sucessful withdrawal per sidechain at a time (see [/bip-hashrate-escrows/appendix-1.txt appendix 1]).\n+\n+==== How Hard is it to Guess M4? ====\n+\n+If there are n Escrows and m Withdrawals-per-escrow<sup>1</sup>, then there are (m+2)^n total candidates for the next D2. This is because, [per block per escrow], one of three things can happen: (1) one of the m withdrawal-candidates can be \"ACK\"ed (or \"upvoted\" or \"promoted\"), which automatically downvotes the others; or (2) all withdrawal-candidates can be downvoted, or finally (3) the miners can abstain from voting on the escrow's withdrawals altogether, leaving the tallies the same.\n+\n+First, for nodes which validate all sidechains (assuming these escrows are sidechains), this simplifies to 2^n -- these nodes only have to choose between the single honest choice (on one hand) or an abstention (on the other). Second, even for nodes that don't validate any sidechains, the number of candidates might be reduced from m^n to 3^n, by making a simplifying assumption: whichever withdrawal was most recently added/upvoted, is likely to be the one which is upvoted next.\n+\n+Of course, that is still O(k^n) for n sidechains, which isn't great<sup>2</sup>. If the \"D2 update\" cannot be guessed, it must be transmitted in some way.\n+\n+==== Giving Up and Getting M4 the Old Fashioned Way ====\n+\n+Two examples for transmitting it are below:\n+\n+\"Short Form\" (Assumes there are no more than 254 active withdrawal-attempts per account)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    N-byte - N is the total number of active accounts (\"sidechains\"), each byte specifies the position of the single WT that was \"upvoted\". A value of 0 indicates \"downvote everything\", a value of 255 indicates abstention.\n+\n+\"Long Form\" (Makes no assumptions about anything)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    1-byte - Length (in bytes) of this message; total number of withdrawal attempts; y = ceiling( sum_i(m_i +2)/8 ). Nodes should already know what length to expect, because they know the sequence of M3s and therefore the vector of WT^s.\n+    Y-byte - stream of bits (not bytes), with a 1 indicating the position of the chosen action [downvote all, abstain, upvote1, upvote2, ...]\n+\n+\n+If the message is very very large, then nodes may not want to broadcast it. This opens up an \"exhaustion attack\"<sup>2</sup>, in which many miners create bad WT^s, vote on these randomly, and then refuse to broadcast their votes. Fortunately, even for a worst-case scenario of 200 sidechains and 1,000 withdrawal-attempts per sidechain, honest nodes can communicate a long form M4 with each other by using just 25,056 bytes per block [4+1+1+(200\\*(1000+1+1)/8)].\n+\n+Today's pre-drivechain miners can already carry out a similar attack, by creating and including txns and then not broadcasting that part of the block to anyone. This is often characterized as a  [https://petertodd.org/2016/block-publication-incentives-for-miners \"block publication incentive\"], because in that case the prospect of exhaustively computing all possible transactions (to uncover the missing ones) is completely out of the question.\n+\n+However, message M4 is different from a withheld-txn, because M4 operates outside of the block's mandated information-processing limits (ie, outside the infamous 1 MB nonwitness blocksize limit). So we should examine the conditions under which M4 grows and shrinks, to ensure that we are not smuggling in a tremendous burden on full nodes.\n+\n+Under adversarial conditions, to lengthen a long-form M4 by one bit per block, for C blocks, the attacker must pay 312 bits (39 bytes) one time (to embed a new M3 message). The value C is the length of the sidechain's voting period, which varies but which I expect to be approximately 8,064 (and which could theoretically be as high as 65,536). Thus the attacker can burden nodes disproportionately, if (s)he wishes.\n+\n+Fortunately, the attack in question has no motivation (as far as I can tell). If the miner's goal is to trick rivals into mining on top of invalid blocks, he can already do this much more effectively with the unpublished-txn method (above). If instead he is just trying to harass nodes, then nodes may freely \"downgrade\" to earlier versions of the protocol, and simply ignore all drivechain-related messages. It seems that the attack could best be used in order to: make a large D2, make D2 confusing, sneak in votes for evil WT^ lurking in D2. Thus, the attack disables the transparency of the drivechain system, to some extent. The cost of the attack is forgone transaction fees, due to block space wasted on useless M3s.\n+\n+In practice, n is already capped, and miners may impose [on each other] a \"soft cap\" on m for their mutual protection. Thus, n and m might never get above 10 and 30, respectfully. In this case, the [Short Form, this time] M4 can never require more than 15 bytes per block, no matter what the attacker tries.\n+\n+In practice, m should always be 1 or 2, else something fishy is going on; and m can only inch up by 1 unit per block. So the system as a whole is still quite transparent, in that users are warned appropriately and well in advance. Attackers must invest upfront and they face an uphill climb, in order to eventually make things more expensive for a few others; defenders can wait-and-see if the attack looks like it will ever amount to anything before lifting a finger.\n+\n+\n+===== New Block Validation Rules (for D2 and, by implication, M4) =====\n+\n+From one block to the next, D2 can only be edited in a few strict ways:\n+\n+* Entries can only be added/removed from D2 if they meet the criteria above (in M3, and implicitly M1 and M2).\n+* The ACK-counter of any individual entry can only change by (-1,0,+1) relative to its previous entry.\n+* Within a sidechain group, upvoting one withdrawal (ACK=ACK+1) requires you to downvote all other withdrawals in that group. However, the minimum ACK value is zero (and, therefore, downvotes cannot reduce it below zero).\n+\n+===== Footnotes for M4 =====\n+\n+<sup>1</sup> This represents the worst-case scenario is one where all the Withdrawals are spread evenly over each Sidechain. Under normal operations, there is no reason to expect the all sidechains will have the same number of withdrawals at any given time. In fact, under normal operations, the very *concept* of counting the withdrawals-per-sidechain should be a purposeless one, because there should only be *one* withdrawal at a time. Nonetheless we consider the worst case scenario here.\n+\n+<sup>2</sup> Guessing becomes more computationally intensive in a highly adversarial situation where the \"limited range\" is intentionally expanded. In such a scenario, [a] there are many sidechains, and [b] miners voluntarily sacrifice their scarce block-space by creating a high number of (mutually-exclusive, and hence ultimately invalid) withdrawal attempts and putting these into coinbase transactions; and then agree to all [c] vote on these randomly (guaranteeing that all withdrawals fail, including any true withdrawals) and [d] successfully withhold their random voting strategies from nodes (even including spy-miner-nodes). Under this bizarre scenario, nodes may require computing resources which increase near-exponentially with the number of withdrawals, and it may take a long time for an ignorant node to exhaustively work out the underlying state of Withdrawal_DB. In this case, nodes may decide to temporarily stop validating such transactions (as if they had not yet upgraded to support this soft fork).\n+\n+\n+\n+=== Depositing and Withdrawing (M5, M6) ===\n+\n+\n+Both M5 and M6 are regular Bitcoin txns. They are identified by meeting an important criteria: they select a one of the Critical TxID-index Pairs (a \"CTIP\") as one of their inputs. Deposits (\"M5\") are distinguished from withdrawals (\"M6\") by simply checking to see if money is \"going in\", or \"out\". In other words, we compare the BTC value of the original CTIP to that of new CTIP. If original <= new it is a deposit, if original > new then it is a withdrawal.\n+\n+The code that identifies sidechain withdrawal / deposit txns (by calculating how much value is being put into or taken out of a sidechain) can be seen here: https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L351-L386\n+\n+Such txns are forced (by consensus) to obey two additional criteria:\n+\n+# They must contain an output paying \"to\" the Critical Address [probably in TxOut0].\n+# They must be accompanied by an update to this sidechain's Critical TxID-index Pair (CTIP). The new CTIP must be \"this\" txn itself.\n+\n+These criteria are enforced [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L440-L473 here] by checking that a deposit is paying back to the sidechain more than it is taking out, and completely rejecting any withdrawal from the mempool. And [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L1747-L1757 here] we allow for a withdrawal only once it has attained sufficient work score (ACKs).\n+\n+The purpose of this is to have all of the escrow's money (ie all of the sidechain's money) in one TxID, so that depositors immediately undo any UTXO bloat they may cause. This simplifies the withdrawal process, as there is no need to worry about cleaning up \"dust deposits\" (...and such cleaning can often result in headaches, for example where a withdrawal-txn is larger than 1MB in size, or else may only withdraw an arbitrarily limited amount of BTC). Notice that, unless we assume that an account will last forever, all utxos which are deposited must eventually be withdrawn by someone. Therefore, the relevant design criterion is not \"efficiency\" (total network cost) but rather \"who should pay\" (allocation of costs).\n+\n+==== M5. \"Make a Deposit\" -- a transfer of BTC from-main-to-side ====\n+\n+As far as mainchain consensus is concerned, there are no additional requirements.\n+\n+However, in practice there *are* additional mainchain requirements...specified by the escrow account, (ie specified by the \"sidechain\" or \"virtual chain\"). These requirements are not part of mainchain consensus and are allowed to be anything. In other words, the sidechain is free to invent any way to credit depositor's money -- M5 is fully customizable.\n+\n+One method, is for mainchain depositors to append a zero-value OP Return to a Deposit txn, so that the sidechain knows how to credit funds. Mainchain users must upgrade their wallet software, of course, (on an individual basis) in order to become aware of and take advantage of new deposit-methods.\n+\n+===== Inconvenient Race Condition =====\n+\n+The requirement that each hashrate escrow be linked to a single TxID does create an interesting inconvenience for depositors. If a user is slow to sign a txn after constructing it (perhaps because the user employs an air-gapped computer, etc), then the signed txn may no longer be valid. This is because the input it selects, may no longer be the Critical TxID (as \"the\" Critical TxID changes with each deposit). **Only one user can deposit at a time** (although many can deposit per block). As a result, the transaction must fail, and the user would need to be prompted to remake and resign the txn. If this is problem is too frustrating, users can always make main-to-side transfers using atomic cross chain swaps (or, the LN, if they already have a channel open on both chains).\n+\n+Fortunately, it is already a part of mainchain consensus that no two txns can spend the same TxID. The only new issue here is the confusion it might create for the user (hence the need for error messages and alternative deposit-methods).\n+\n+\n+==== M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main ====\n+\n+We come, finally, to the critical matter: where users can take their money *out* of the escrow account, and return it to the \"regular\" UTXO set. As previously mentioned, this txn is one which (a) spends from a CTIP and (b) reduces the quantity of BTC in an account's CTIP. Most of the work has already been done by D1, M3, M4, and D2. Furthermore, existing Bitcoin tx-rules prevent the sidechain from ever withdrawing more money than has been placed into it.\n+\n+From there, we merely introduce two final concepts:\n+\n+# In each block, an entry in D2 is considered an \"approved candidate\" if the \"ACKs\" value is above 13140.\n+# A \"blinded TxID\" is way of hashing the txn, in which we first overwrite some parts of the txn with zeros. Specifically, the first 36 bytes of \"TxIn0\" (the first input, including TxOutHash and TxOutIndex), as well as the first 8 bytes of \"TxOut0\" (the first output).\n+\n+Blinding is necessary because we allow each sidechain only one UTXO at a time.\n+\n+of our restriction of the account to a single UTXO-member. Because of this, during the ACKing process the withdrawal-txn (which is currently being ACKed) may change in two ways: the CTIP (which changes with each deposit), and the total quantity of BTC stored in the account (which arbitrarily increases with each new deposit). In other words, a withdrawal-attempt is created via M3, but this takes place many blocks before the withdrawal is actually included via M6. During this time, a single new deposit to the account would change its CTIP and its value. So, what do we ACK? Well, we ACK a \"blinded\" version of the withdrawal. This blinded version is stable because the dynamic parts are always overwritten with zeros.\n+\n+While we ACK a blinded WT^, what is actually included in the blockchain (\"M6\") is an unblinded WT^. Since each blinded WT^ could correspond to many different unblinded WT^s, we need to impose further restrictions on those unblinded WT^s that are finally included. First, we will force the final unblinded WT^ to spend the entire sidechain balance (by forcing sum(input_values) to equal sum(output_values)). To avoid withdrawing the entire sidechain balance with every withdrawal, we will, secondly, force the unblinded WT^ to create a new output which is itself a deposit to the sidechain it withdrew from (which nodes can check using D1's CTIP field). Unfortunately, these requirements eliminate the possibility of including a transaction fee, as traditionally calculated. So, finally, to compensate for *that*, txn fees are encoded explicitly as a withdrawal to OP_TRUE (which the main:block's miner can immediately claim).\n+\n+With all of this in place, the only requirements for inclusion in a block are these:\n+\n+# \"Be ACKed\" -- The \"blinded TxID\" of this txn must be member of the \"approved candidate\" set in the D2 of this block.\n+# \"Return Change to Account\" -- TxOut0 must pay to the \"critical account\" (see D1) that corresponds to the CTIP that was selected as a TxIn.\n+# \"Return *all* Change to Account\" -- Sum of inputs must equal the sum of outputs. No traditional tx fee is possible.\n+\n+Finally, don't forget that M6 inherits the requirement (common to both M5 and M6) that the CTIP be selected as an input, and that the CTIP then be updated. In this case, we know that the critical index will be zero, so the new CTIP will be (\"this TxID\" (NOT blinded), 0). The TxID is NOT blinded because blinding is only for accumulating ACKs.\n+\n+As a result of these requirements, every single withdrawal-attempt will fail, unless an entry has been added to D2 and \"ACKed\" a sufficient number of times.\n+",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 426,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191769871,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Let me add that if more than 50% of the hashpower abstains completely (refusing to ACK or NACK), then no withdrawals will ever succeed. That is a function of the parameter choices of 13,150 and 26,300. We could make 26,300 longer, I suppose.\r\n\r\nIn fact, perhaps a good tradeoff to your other point would be to make *this* value flexible. Ie, keep the 13,150 required ACK score fixed, but allow the withdrawal period to be even longer.",
      "created_at": "2018-05-30T22:00:55Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191936843",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191936843"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 426,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191939475",
      "pull_request_review_id": 124613025,
      "id": 191939475,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTkzOTQ3NQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 148,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191766725,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> It doesn't seem like you understand UASFs... miners must choose to upgrade to remain part of the network\r\n\r\nIt seems I do not. For instance, I don't understand what happens if two mutually-exclusive UASFs are released at once, and each of these are installed by exactly half of the userbase? Then miners cannot \"choose to upgrade to remain part of the network\", as you say, because there are now (or will be soon) two networks.\r\n\r\nAnd my example scenario is not really that hard to imagine. For example, suppose that after the SegWit UASF was proposed, someone else proposed a soft fork banning OP returns from coinbase txns (for whatever reason). Or if two people tried to reassign the same unused opcode at the same time, via a UASF alone.\r\n\r\n> There is no pre-UASF era... the earliest softforks were all UASFs.\r\n\r\nI refer to the modern prominence of the UASF, in *contrast* to a MASF. Specifically, I am using the terms \"pre-UASF era\" and \"before Feb 25th, 2017\" interchangeably.",
      "created_at": "2018-05-30T22:13:22Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191939475",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191939475"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191943905",
      "pull_request_review_id": 124618153,
      "id": 191943905,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTk0MzkwNQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 67,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191764361,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmmm, ok.\r\n\r\nSo, you would like it to be such that, when there are many sidechains and many withdrawals at once, (ie, when M4 is large), then the blockweight limit decreases by this size?\r\n\r\nSo, for example, the extreme attacker case, where 256 sidechains have been added, and all of them are doing nothing but spamming full node miners all day, such that in each block a new withdrawal is attempted on each sidechain, such that there are 26300*256 withdrawals at once (this would already be comically irrational for each miner, as it would consume a ridiculous amount of regular blockchain space, that they could instead use to include txns and collect txn fees). M4 might need to be as large as 841,670 bytes. So you would want the blocksize/weight to decrease by 842 kb while the network is in such a state? Because, to you, my alternative (that users just disregard what is happening amonst miners) is not rigorous enough?\r\n\r\nI could shrink that 842 considerably. One way would be to allow ACK counts to go negative, and then further to have some event trigger upon an ACK-count reaching -250 or so. Upon such a count we could delete all withdrawals (from that sidechain) that have a negative ACK count at that time. Then even with 256 sidechains, M4's size would never need to be more than 8 kb or so.",
      "created_at": "2018-05-30T22:34:58Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r191943905",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/191943905"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/192108535",
      "pull_request_review_id": 124816989,
      "id": 192108535,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjEwODUzNQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 171,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191768376,
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can improve the design now and leave the improvements to the implementation for later.\r\n\r\nWhy don't you just use a new opcode like blue matt suggested in the mailing list?\r\nNote that it is orthogonal to putting it all on one output or not.\r\n",
      "created_at": "2018-05-31T13:59:16Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r192108535",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/192108535"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/192573080",
      "pull_request_review_id": 125379461,
      "id": 192573080,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU3MzA4MA==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 171,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191768376,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Why don't you just use a new opcode\r\n\r\nWe will probably add this option",
      "created_at": "2018-06-02T23:36:26Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r192573080",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/192573080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/192573362",
      "pull_request_review_id": 125379796,
      "id": 192573362,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MjU3MzM2Mg==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 171,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191768376,
      "user": {
        "login": "CryptAxe",
        "id": 8107318,
        "node_id": "MDQ6VXNlcjgxMDczMTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptAxe",
        "html_url": "https://github.com/CryptAxe",
        "followers_url": "https://api.github.com/users/CryptAxe/followers",
        "following_url": "https://api.github.com/users/CryptAxe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptAxe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptAxe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
        "repos_url": "https://api.github.com/users/CryptAxe/repos",
        "events_url": "https://api.github.com/users/CryptAxe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We could use one of the expansion opcodes (like NOP4). It seems suboptimal to use one of them up since we do not require any interaction with the script interpreter though. Instead I think it would be best to make use of an existing opcode and some new block level validation rules. \r\n\r\n@psztorc and I had an idea for this involving OP_TRUE(?) + identifying bytes to determine which outputs will have additional restrictions and which sidechain they belong to. The additional restriction could be that all outputs marked for a particular sidechain must be spent by another transaction created by the miner in the (same?) block with the destination again being the weird OP_TRUE script leaving us with a single output after the block is processed for that sidechain. I obviously haven't really figured it out yet! It would be less overhead once figured out though, with no ECDSA operations anymore.",
      "created_at": "2018-06-03T00:02:27Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r192573362",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/192573362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/270291150",
      "pull_request_review_id": 220388048,
      "id": 270291150,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDI5MTE1MA==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 67,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 191764361,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Anything that adds to the burden of nodes doing FULL validation, should count as weight in some way, at least.",
      "created_at": "2019-03-29T06:21:44Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r270291150",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/270291150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/271775445",
      "pull_request_review_id": 222252646,
      "id": 271775445,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MTc3NTQ0NQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.\n+\n+\n+( The following messages were modeled on SegWit -- https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 157 bytes (0x9d)\n+    4-byte - Commitment header (0x53707243)\n+    153-byte - the critical bytes mentioned above (fields #1, #3, and #4, to populate a new D1 entry)\n+\n+\n+==== New Block Validation Rules ====\n+\n+# If the network detects a properly-formatted M1, it must add an entry to D1, into the very next block, with the following initial values:\n+## Field #5 will be calculated as per [https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses version 1 Bitcoin addresses], but with a prefix of \"4\" instead of \"1\".\n+## Field #9 will be derived from #7 and #8 using math.\n+## The initial values of Fields #10, #11, and #12 are set to zero.\n+# Only one M1 (of any kind) can be added into a block at a time.\n+\n+==== Notes on M1 ====\n+\n+The escrow will \"reuse\" the same address over and over. But notice that there is no privacy loss due to address reuse, because the address in question does not \"belong\" to any specific individual. Furthermore, the transactions in question could already be linked by just watching the Hashrate Escrow for deposits ...this, in fact, is exactly what a sidechain must do in order to make main-to-side transfers.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 29 bytes (0x1D)\n+    4-byte - Commitment header (0x53616343)\n+    25-byte - Commitment hash: RIPMD-160 of Sha256 of a given M1 (above)\n+\n+==== New Block Validation Rules ====\n+\n+1. An entry will be removed from D1, unless that block contains an M2 supporting it (this will increment field #2), or the entry has accumulated 4032 M2s. Therefore, each entry needs to have 4032 *consecutive* M2s supporting it, else it will be removed from D1 and must start over. This requires all miners to agree to \"soft fork\" the sidechain into existence. This makes it easier to curate the list of active sidechains, and prevents destructive interference (see above) among contradictory sidechains.\n+2. Once the entry has 4032 M2s, then a miner must make a 0 btc payment to the Critical Address, thus activating the chain. This payment becomes the first \"critical (TxID, index) pair\" (or \"CTIP\").\n+3. It is possible to \"overwrite\" a D1 slot -- this destroys the sidechain that is there, and replaces it with a new one. This is defined as requiring 6 months (26298 blocks) of M2s, instead of 4 weeks (4032). This possibility does not change the security assumptions, because we already assume that users have access to \"magically true\" bandwidth at a rate of 1 bit per ACK-cycle. (This is why the voting cycles should be large, 1 month Waiting, 2+ months Voting).\n+\n+\n+\n+=== Adding Withdrawal-Attempts and Tracking Their Success (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+The table below enumerates the database fields, their size (in bytes), type and purpose.\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^\n+| 32\n+| hex\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs*\n+| 2\n+| uInt\n+| The current total number of \"votes\", this starts at 0 and remains there throughout the waiting period.\n+|-\n+| 4\n+| Age*\n+| 3\n+| uInt\n+| Total duration of time, in blocks, that this WT^ has been inside of D2.\n+|-\n+| 5\n+| Waiting Period*\n+| 2\n+| uInt\n+| Total duration of time, in blocks, that this entry must sit idle, before it can begin to accumulate ACKs/NACKs. Pulled from D1's field #6.\n+|-\n+| 6\n+| Max Age*\n+| 3\n+| uInt\n+| Determined by summing (D1's field #6) and (D1's field #7).\n+|-\n+| 7\n+| Threshold*\n+| 2\n+| uInt\n+| Total ACKs needed, this is pulled from D1's field #9.\n+|-\n+| 8\n+| Approved*\n+| 1\n+| boolean\n+| True while ACKs > Threshold, False otherwise.\n+|}\n+\n+\\* Denotes a \"convenience field\" (see above).\n+\n+Withdrawal_DB requires 46 bytes [1+32+2+3+2+3+2+1] per entry. Of these, 13 bytes ([2+3+2+3+2+1], all fields except #1 and #2) can be generated locally, leaving 33 critical bytes [1+32].\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# In each block, a hash commitment to D2 must always exist (even if D2 is blank).\n+# D2 must always be sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, every entry's \"Age\" field must increase by exactly 1.\n+# From one block to the next, entries are only removed from D2 (in the very next block) if:\n+## \"Age\" = \"MaxAge\".\n+## If the block contains a txn who's blinded txID matches WT^. {{ This might be unnecessary, and a lot of work. }}\n+# In addition, there are special rules for the allowed values in the \"ACKs\" field (field #3). See M4 below.\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 37 bytes (0x25)\n+    4-byte - Commitment header (0xD45AA943)\n+    33-byte - the critical bytes mentioned above (fields #1 and #2, to populate a new D2 entry)\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+==== Very Little Info, Probably Calculable in Advance ====\n+\n+M4 is exceptional (in comparison to the other M's) in a few ways. First, its content is not stored anywhere, only the *hash* of its *effect* is stored (in a leaf of a merkle tree who's root is inserted into a mainchain coinbase). M4 alters the contents of D2 -- the *contents* of D2 are consensus critical, but M4 (the process by which nodes reach a new valid D2) can be anything.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 308,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "rex4539",
        "id": 227442,
        "node_id": "MDQ6VXNlcjIyNzQ0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/227442?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rex4539",
        "html_url": "https://github.com/rex4539",
        "followers_url": "https://api.github.com/users/rex4539/followers",
        "following_url": "https://api.github.com/users/rex4539/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rex4539/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rex4539/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rex4539/subscriptions",
        "organizations_url": "https://api.github.com/users/rex4539/orgs",
        "repos_url": "https://api.github.com/users/rex4539/repos",
        "events_url": "https://api.github.com/users/rex4539/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rex4539/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "who's -> whose",
      "created_at": "2019-04-03T14:37:41Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r271775445",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/271775445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/271775623",
      "pull_request_review_id": 222252646,
      "id": 271775623,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MTc3NTYyMw==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.\n+\n+\n+( The following messages were modeled on SegWit -- https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 157 bytes (0x9d)\n+    4-byte - Commitment header (0x53707243)\n+    153-byte - the critical bytes mentioned above (fields #1, #3, and #4, to populate a new D1 entry)\n+\n+\n+==== New Block Validation Rules ====\n+\n+# If the network detects a properly-formatted M1, it must add an entry to D1, into the very next block, with the following initial values:\n+## Field #5 will be calculated as per [https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses version 1 Bitcoin addresses], but with a prefix of \"4\" instead of \"1\".\n+## Field #9 will be derived from #7 and #8 using math.\n+## The initial values of Fields #10, #11, and #12 are set to zero.\n+# Only one M1 (of any kind) can be added into a block at a time.\n+\n+==== Notes on M1 ====\n+\n+The escrow will \"reuse\" the same address over and over. But notice that there is no privacy loss due to address reuse, because the address in question does not \"belong\" to any specific individual. Furthermore, the transactions in question could already be linked by just watching the Hashrate Escrow for deposits ...this, in fact, is exactly what a sidechain must do in order to make main-to-side transfers.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 29 bytes (0x1D)\n+    4-byte - Commitment header (0x53616343)\n+    25-byte - Commitment hash: RIPMD-160 of Sha256 of a given M1 (above)\n+\n+==== New Block Validation Rules ====\n+\n+1. An entry will be removed from D1, unless that block contains an M2 supporting it (this will increment field #2), or the entry has accumulated 4032 M2s. Therefore, each entry needs to have 4032 *consecutive* M2s supporting it, else it will be removed from D1 and must start over. This requires all miners to agree to \"soft fork\" the sidechain into existence. This makes it easier to curate the list of active sidechains, and prevents destructive interference (see above) among contradictory sidechains.\n+2. Once the entry has 4032 M2s, then a miner must make a 0 btc payment to the Critical Address, thus activating the chain. This payment becomes the first \"critical (TxID, index) pair\" (or \"CTIP\").\n+3. It is possible to \"overwrite\" a D1 slot -- this destroys the sidechain that is there, and replaces it with a new one. This is defined as requiring 6 months (26298 blocks) of M2s, instead of 4 weeks (4032). This possibility does not change the security assumptions, because we already assume that users have access to \"magically true\" bandwidth at a rate of 1 bit per ACK-cycle. (This is why the voting cycles should be large, 1 month Waiting, 2+ months Voting).\n+\n+\n+\n+=== Adding Withdrawal-Attempts and Tracking Their Success (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+The table below enumerates the database fields, their size (in bytes), type and purpose.\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^\n+| 32\n+| hex\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs*\n+| 2\n+| uInt\n+| The current total number of \"votes\", this starts at 0 and remains there throughout the waiting period.\n+|-\n+| 4\n+| Age*\n+| 3\n+| uInt\n+| Total duration of time, in blocks, that this WT^ has been inside of D2.\n+|-\n+| 5\n+| Waiting Period*\n+| 2\n+| uInt\n+| Total duration of time, in blocks, that this entry must sit idle, before it can begin to accumulate ACKs/NACKs. Pulled from D1's field #6.\n+|-\n+| 6\n+| Max Age*\n+| 3\n+| uInt\n+| Determined by summing (D1's field #6) and (D1's field #7).\n+|-\n+| 7\n+| Threshold*\n+| 2\n+| uInt\n+| Total ACKs needed, this is pulled from D1's field #9.\n+|-\n+| 8\n+| Approved*\n+| 1\n+| boolean\n+| True while ACKs > Threshold, False otherwise.\n+|}\n+\n+\\* Denotes a \"convenience field\" (see above).\n+\n+Withdrawal_DB requires 46 bytes [1+32+2+3+2+3+2+1] per entry. Of these, 13 bytes ([2+3+2+3+2+1], all fields except #1 and #2) can be generated locally, leaving 33 critical bytes [1+32].\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# In each block, a hash commitment to D2 must always exist (even if D2 is blank).\n+# D2 must always be sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, every entry's \"Age\" field must increase by exactly 1.\n+# From one block to the next, entries are only removed from D2 (in the very next block) if:\n+## \"Age\" = \"MaxAge\".\n+## If the block contains a txn who's blinded txID matches WT^. {{ This might be unnecessary, and a lot of work. }}\n+# In addition, there are special rules for the allowed values in the \"ACKs\" field (field #3). See M4 below.\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 37 bytes (0x25)\n+    4-byte - Commitment header (0xD45AA943)\n+    33-byte - the critical bytes mentioned above (fields #1 and #2, to populate a new D2 entry)\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+==== Very Little Info, Probably Calculable in Advance ====\n+\n+M4 is exceptional (in comparison to the other M's) in a few ways. First, its content is not stored anywhere, only the *hash* of its *effect* is stored (in a leaf of a merkle tree who's root is inserted into a mainchain coinbase). M4 alters the contents of D2 -- the *contents* of D2 are consensus critical, but M4 (the process by which nodes reach a new valid D2) can be anything.\n+\n+In fact, M4 can also be *nothing*. In other words, it may be optional. This is precisely because, from one block to the next, we have constrained D2 such that it is only allowed to change in a few ways. Therefore, the exhaustive set of \"candidate D2s\" can be precomputed by full nodes in advance.\n+\n+The following sections assume a maximum of one sucessful withdrawal per sidechain at a time (see [/bip-hashrate-escrows/appendix-1.txt appendix 1]).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 312,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "rex4539",
        "id": 227442,
        "node_id": "MDQ6VXNlcjIyNzQ0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/227442?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rex4539",
        "html_url": "https://github.com/rex4539",
        "followers_url": "https://api.github.com/users/rex4539/followers",
        "following_url": "https://api.github.com/users/rex4539/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rex4539/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rex4539/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rex4539/subscriptions",
        "organizations_url": "https://api.github.com/users/rex4539/orgs",
        "repos_url": "https://api.github.com/users/rex4539/repos",
        "events_url": "https://api.github.com/users/rex4539/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rex4539/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo: \"sucessful\"",
      "created_at": "2019-04-03T14:38:04Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r271775623",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/271775623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 312,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/271776627",
      "pull_request_review_id": 222252646,
      "id": 271776627,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MTc3NjYyNw==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.\n+\n+\n+( The following messages were modeled on SegWit -- https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 157 bytes (0x9d)\n+    4-byte - Commitment header (0x53707243)\n+    153-byte - the critical bytes mentioned above (fields #1, #3, and #4, to populate a new D1 entry)\n+\n+\n+==== New Block Validation Rules ====\n+\n+# If the network detects a properly-formatted M1, it must add an entry to D1, into the very next block, with the following initial values:\n+## Field #5 will be calculated as per [https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses version 1 Bitcoin addresses], but with a prefix of \"4\" instead of \"1\".\n+## Field #9 will be derived from #7 and #8 using math.\n+## The initial values of Fields #10, #11, and #12 are set to zero.\n+# Only one M1 (of any kind) can be added into a block at a time.\n+\n+==== Notes on M1 ====\n+\n+The escrow will \"reuse\" the same address over and over. But notice that there is no privacy loss due to address reuse, because the address in question does not \"belong\" to any specific individual. Furthermore, the transactions in question could already be linked by just watching the Hashrate Escrow for deposits ...this, in fact, is exactly what a sidechain must do in order to make main-to-side transfers.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 29 bytes (0x1D)\n+    4-byte - Commitment header (0x53616343)\n+    25-byte - Commitment hash: RIPMD-160 of Sha256 of a given M1 (above)\n+\n+==== New Block Validation Rules ====\n+\n+1. An entry will be removed from D1, unless that block contains an M2 supporting it (this will increment field #2), or the entry has accumulated 4032 M2s. Therefore, each entry needs to have 4032 *consecutive* M2s supporting it, else it will be removed from D1 and must start over. This requires all miners to agree to \"soft fork\" the sidechain into existence. This makes it easier to curate the list of active sidechains, and prevents destructive interference (see above) among contradictory sidechains.\n+2. Once the entry has 4032 M2s, then a miner must make a 0 btc payment to the Critical Address, thus activating the chain. This payment becomes the first \"critical (TxID, index) pair\" (or \"CTIP\").\n+3. It is possible to \"overwrite\" a D1 slot -- this destroys the sidechain that is there, and replaces it with a new one. This is defined as requiring 6 months (26298 blocks) of M2s, instead of 4 weeks (4032). This possibility does not change the security assumptions, because we already assume that users have access to \"magically true\" bandwidth at a rate of 1 bit per ACK-cycle. (This is why the voting cycles should be large, 1 month Waiting, 2+ months Voting).\n+\n+\n+\n+=== Adding Withdrawal-Attempts and Tracking Their Success (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+The table below enumerates the database fields, their size (in bytes), type and purpose.\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^\n+| 32\n+| hex\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs*\n+| 2\n+| uInt\n+| The current total number of \"votes\", this starts at 0 and remains there throughout the waiting period.\n+|-\n+| 4\n+| Age*\n+| 3\n+| uInt\n+| Total duration of time, in blocks, that this WT^ has been inside of D2.\n+|-\n+| 5\n+| Waiting Period*\n+| 2\n+| uInt\n+| Total duration of time, in blocks, that this entry must sit idle, before it can begin to accumulate ACKs/NACKs. Pulled from D1's field #6.\n+|-\n+| 6\n+| Max Age*\n+| 3\n+| uInt\n+| Determined by summing (D1's field #6) and (D1's field #7).\n+|-\n+| 7\n+| Threshold*\n+| 2\n+| uInt\n+| Total ACKs needed, this is pulled from D1's field #9.\n+|-\n+| 8\n+| Approved*\n+| 1\n+| boolean\n+| True while ACKs > Threshold, False otherwise.\n+|}\n+\n+\\* Denotes a \"convenience field\" (see above).\n+\n+Withdrawal_DB requires 46 bytes [1+32+2+3+2+3+2+1] per entry. Of these, 13 bytes ([2+3+2+3+2+1], all fields except #1 and #2) can be generated locally, leaving 33 critical bytes [1+32].\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# In each block, a hash commitment to D2 must always exist (even if D2 is blank).\n+# D2 must always be sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, every entry's \"Age\" field must increase by exactly 1.\n+# From one block to the next, entries are only removed from D2 (in the very next block) if:\n+## \"Age\" = \"MaxAge\".\n+## If the block contains a txn who's blinded txID matches WT^. {{ This might be unnecessary, and a lot of work. }}\n+# In addition, there are special rules for the allowed values in the \"ACKs\" field (field #3). See M4 below.\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 37 bytes (0x25)\n+    4-byte - Commitment header (0xD45AA943)\n+    33-byte - the critical bytes mentioned above (fields #1 and #2, to populate a new D2 entry)\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+==== Very Little Info, Probably Calculable in Advance ====\n+\n+M4 is exceptional (in comparison to the other M's) in a few ways. First, its content is not stored anywhere, only the *hash* of its *effect* is stored (in a leaf of a merkle tree who's root is inserted into a mainchain coinbase). M4 alters the contents of D2 -- the *contents* of D2 are consensus critical, but M4 (the process by which nodes reach a new valid D2) can be anything.\n+\n+In fact, M4 can also be *nothing*. In other words, it may be optional. This is precisely because, from one block to the next, we have constrained D2 such that it is only allowed to change in a few ways. Therefore, the exhaustive set of \"candidate D2s\" can be precomputed by full nodes in advance.\n+\n+The following sections assume a maximum of one sucessful withdrawal per sidechain at a time (see [/bip-hashrate-escrows/appendix-1.txt appendix 1]).\n+\n+==== How Hard is it to Guess M4? ====\n+\n+If there are n Escrows and m Withdrawals-per-escrow<sup>1</sup>, then there are (m+2)^n total candidates for the next D2. This is because, [per block per escrow], one of three things can happen: (1) one of the m withdrawal-candidates can be \"ACK\"ed (or \"upvoted\" or \"promoted\"), which automatically downvotes the others; or (2) all withdrawal-candidates can be downvoted, or finally (3) the miners can abstain from voting on the escrow's withdrawals altogether, leaving the tallies the same.\n+\n+First, for nodes which validate all sidechains (assuming these escrows are sidechains), this simplifies to 2^n -- these nodes only have to choose between the single honest choice (on one hand) or an abstention (on the other). Second, even for nodes that don't validate any sidechains, the number of candidates might be reduced from m^n to 3^n, by making a simplifying assumption: whichever withdrawal was most recently added/upvoted, is likely to be the one which is upvoted next.\n+\n+Of course, that is still O(k^n) for n sidechains, which isn't great<sup>2</sup>. If the \"D2 update\" cannot be guessed, it must be transmitted in some way.\n+\n+==== Giving Up and Getting M4 the Old Fashioned Way ====\n+\n+Two examples for transmitting it are below:\n+\n+\"Short Form\" (Assumes there are no more than 254 active withdrawal-attempts per account)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    N-byte - N is the total number of active accounts (\"sidechains\"), each byte specifies the position of the single WT that was \"upvoted\". A value of 0 indicates \"downvote everything\", a value of 255 indicates abstention.\n+\n+\"Long Form\" (Makes no assumptions about anything)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    1-byte - Length (in bytes) of this message; total number of withdrawal attempts; y = ceiling( sum_i(m_i +2)/8 ). Nodes should already know what length to expect, because they know the sequence of M3s and therefore the vector of WT^s.\n+    Y-byte - stream of bits (not bytes), with a 1 indicating the position of the chosen action [downvote all, abstain, upvote1, upvote2, ...]\n+\n+\n+If the message is very very large, then nodes may not want to broadcast it. This opens up an \"exhaustion attack\"<sup>2</sup>, in which many miners create bad WT^s, vote on these randomly, and then refuse to broadcast their votes. Fortunately, even for a worst-case scenario of 200 sidechains and 1,000 withdrawal-attempts per sidechain, honest nodes can communicate a long form M4 with each other by using just 25,056 bytes per block [4+1+1+(200\\*(1000+1+1)/8)].\n+\n+Today's pre-drivechain miners can already carry out a similar attack, by creating and including txns and then not broadcasting that part of the block to anyone. This is often characterized as a  [https://petertodd.org/2016/block-publication-incentives-for-miners \"block publication incentive\"], because in that case the prospect of exhaustively computing all possible transactions (to uncover the missing ones) is completely out of the question.\n+\n+However, message M4 is different from a withheld-txn, because M4 operates outside of the block's mandated information-processing limits (ie, outside the infamous 1 MB nonwitness blocksize limit). So we should examine the conditions under which M4 grows and shrinks, to ensure that we are not smuggling in a tremendous burden on full nodes.\n+\n+Under adversarial conditions, to lengthen a long-form M4 by one bit per block, for C blocks, the attacker must pay 312 bits (39 bytes) one time (to embed a new M3 message). The value C is the length of the sidechain's voting period, which varies but which I expect to be approximately 8,064 (and which could theoretically be as high as 65,536). Thus the attacker can burden nodes disproportionately, if (s)he wishes.\n+\n+Fortunately, the attack in question has no motivation (as far as I can tell). If the miner's goal is to trick rivals into mining on top of invalid blocks, he can already do this much more effectively with the unpublished-txn method (above). If instead he is just trying to harass nodes, then nodes may freely \"downgrade\" to earlier versions of the protocol, and simply ignore all drivechain-related messages. It seems that the attack could best be used in order to: make a large D2, make D2 confusing, sneak in votes for evil WT^ lurking in D2. Thus, the attack disables the transparency of the drivechain system, to some extent. The cost of the attack is forgone transaction fees, due to block space wasted on useless M3s.\n+\n+In practice, n is already capped, and miners may impose [on each other] a \"soft cap\" on m for their mutual protection. Thus, n and m might never get above 10 and 30, respectfully. In this case, the [Short Form, this time] M4 can never require more than 15 bytes per block, no matter what the attacker tries.\n+\n+In practice, m should always be 1 or 2, else something fishy is going on; and m can only inch up by 1 unit per block. So the system as a whole is still quite transparent, in that users are warned appropriately and well in advance. Attackers must invest upfront and they face an uphill climb, in order to eventually make things more expensive for a few others; defenders can wait-and-see if the attack looks like it will ever amount to anything before lifting a finger.\n+\n+\n+===== New Block Validation Rules (for D2 and, by implication, M4) =====\n+\n+From one block to the next, D2 can only be edited in a few strict ways:\n+\n+* Entries can only be added/removed from D2 if they meet the criteria above (in M3, and implicitly M1 and M2).\n+* The ACK-counter of any individual entry can only change by (-1,0,+1) relative to its previous entry.\n+* Within a sidechain group, upvoting one withdrawal (ACK=ACK+1) requires you to downvote all other withdrawals in that group. However, the minimum ACK value is zero (and, therefore, downvotes cannot reduce it below zero).\n+\n+===== Footnotes for M4 =====\n+\n+<sup>1</sup> This represents the worst-case scenario is one where all the Withdrawals are spread evenly over each Sidechain. Under normal operations, there is no reason to expect the all sidechains will have the same number of withdrawals at any given time. In fact, under normal operations, the very *concept* of counting the withdrawals-per-sidechain should be a purposeless one, because there should only be *one* withdrawal at a time. Nonetheless we consider the worst case scenario here.\n+\n+<sup>2</sup> Guessing becomes more computationally intensive in a highly adversarial situation where the \"limited range\" is intentionally expanded. In such a scenario, [a] there are many sidechains, and [b] miners voluntarily sacrifice their scarce block-space by creating a high number of (mutually-exclusive, and hence ultimately invalid) withdrawal attempts and putting these into coinbase transactions; and then agree to all [c] vote on these randomly (guaranteeing that all withdrawals fail, including any true withdrawals) and [d] successfully withhold their random voting strategies from nodes (even including spy-miner-nodes). Under this bizarre scenario, nodes may require computing resources which increase near-exponentially with the number of withdrawals, and it may take a long time for an ignorant node to exhaustively work out the underlying state of Withdrawal_DB. In this case, nodes may decide to temporarily stop validating such transactions (as if they had not yet upgraded to support this soft fork).\n+\n+\n+\n+=== Depositing and Withdrawing (M5, M6) ===\n+\n+\n+Both M5 and M6 are regular Bitcoin txns. They are identified by meeting an important criteria: they select a one of the Critical TxID-index Pairs (a \"CTIP\") as one of their inputs. Deposits (\"M5\") are distinguished from withdrawals (\"M6\") by simply checking to see if money is \"going in\", or \"out\". In other words, we compare the BTC value of the original CTIP to that of new CTIP. If original <= new it is a deposit, if original > new then it is a withdrawal.\n+\n+The code that identifies sidechain withdrawal / deposit txns (by calculating how much value is being put into or taken out of a sidechain) can be seen here: https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L351-L386\n+\n+Such txns are forced (by consensus) to obey two additional criteria:\n+\n+# They must contain an output paying \"to\" the Critical Address [probably in TxOut0].\n+# They must be accompanied by an update to this sidechain's Critical TxID-index Pair (CTIP). The new CTIP must be \"this\" txn itself.\n+\n+These criteria are enforced [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L440-L473 here] by checking that a deposit is paying back to the sidechain more than it is taking out, and completely rejecting any withdrawal from the mempool. And [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L1747-L1757 here] we allow for a withdrawal only once it has attained sufficient work score (ACKs).\n+\n+The purpose of this is to have all of the escrow's money (ie all of the sidechain's money) in one TxID, so that depositors immediately undo any UTXO bloat they may cause. This simplifies the withdrawal process, as there is no need to worry about cleaning up \"dust deposits\" (...and such cleaning can often result in headaches, for example where a withdrawal-txn is larger than 1MB in size, or else may only withdraw an arbitrarily limited amount of BTC). Notice that, unless we assume that an account will last forever, all utxos which are deposited must eventually be withdrawn by someone. Therefore, the relevant design criterion is not \"efficiency\" (total network cost) but rather \"who should pay\" (allocation of costs).\n+\n+==== M5. \"Make a Deposit\" -- a transfer of BTC from-main-to-side ====\n+\n+As far as mainchain consensus is concerned, there are no additional requirements.\n+\n+However, in practice there *are* additional mainchain requirements...specified by the escrow account, (ie specified by the \"sidechain\" or \"virtual chain\"). These requirements are not part of mainchain consensus and are allowed to be anything. In other words, the sidechain is free to invent any way to credit depositor's money -- M5 is fully customizable.\n+\n+One method, is for mainchain depositors to append a zero-value OP Return to a Deposit txn, so that the sidechain knows how to credit funds. Mainchain users must upgrade their wallet software, of course, (on an individual basis) in order to become aware of and take advantage of new deposit-methods.\n+\n+===== Inconvenient Race Condition =====\n+\n+The requirement that each hashrate escrow be linked to a single TxID does create an interesting inconvenience for depositors. If a user is slow to sign a txn after constructing it (perhaps because the user employs an air-gapped computer, etc), then the signed txn may no longer be valid. This is because the input it selects, may no longer be the Critical TxID (as \"the\" Critical TxID changes with each deposit). **Only one user can deposit at a time** (although many can deposit per block). As a result, the transaction must fail, and the user would need to be prompted to remake and resign the txn. If this is problem is too frustrating, users can always make main-to-side transfers using atomic cross chain swaps (or, the LN, if they already have a channel open on both chains).\n+\n+Fortunately, it is already a part of mainchain consensus that no two txns can spend the same TxID. The only new issue here is the confusion it might create for the user (hence the need for error messages and alternative deposit-methods).\n+\n+\n+==== M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main ====\n+\n+We come, finally, to the critical matter: where users can take their money *out* of the escrow account, and return it to the \"regular\" UTXO set. As previously mentioned, this txn is one which (a) spends from a CTIP and (b) reduces the quantity of BTC in an account's CTIP. Most of the work has already been done by D1, M3, M4, and D2. Furthermore, existing Bitcoin tx-rules prevent the sidechain from ever withdrawing more money than has been placed into it.\n+\n+From there, we merely introduce two final concepts:\n+\n+# In each block, an entry in D2 is considered an \"approved candidate\" if the \"ACKs\" value is above 13140.\n+# A \"blinded TxID\" is way of hashing the txn, in which we first overwrite some parts of the txn with zeros. Specifically, the first 36 bytes of \"TxIn0\" (the first input, including TxOutHash and TxOutIndex), as well as the first 8 bytes of \"TxOut0\" (the first output).\n+\n+Blinding is necessary because we allow each sidechain only one UTXO at a time.\n+\n+of our restriction of the account to a single UTXO-member. Because of this, during the ACKing process the withdrawal-txn (which is currently being ACKed) may change in two ways: the CTIP (which changes with each deposit), and the total quantity of BTC stored in the account (which arbitrarily increases with each new deposit). In other words, a withdrawal-attempt is created via M3, but this takes place many blocks before the withdrawal is actually included via M6. During this time, a single new deposit to the account would change its CTIP and its value. So, what do we ACK? Well, we ACK a \"blinded\" version of the withdrawal. This blinded version is stable because the dynamic parts are always overwritten with zeros.\n+\n+While we ACK a blinded WT^, what is actually included in the blockchain (\"M6\") is an unblinded WT^. Since each blinded WT^ could correspond to many different unblinded WT^s, we need to impose further restrictions on those unblinded WT^s that are finally included. First, we will force the final unblinded WT^ to spend the entire sidechain balance (by forcing sum(input_values) to equal sum(output_values)). To avoid withdrawing the entire sidechain balance with every withdrawal, we will, secondly, force the unblinded WT^ to create a new output which is itself a deposit to the sidechain it withdrew from (which nodes can check using D1's CTIP field). Unfortunately, these requirements eliminate the possibility of including a transaction fee, as traditionally calculated. So, finally, to compensate for *that*, txn fees are encoded explicitly as a withdrawal to OP_TRUE (which the main:block's miner can immediately claim).\n+\n+With all of this in place, the only requirements for inclusion in a block are these:\n+\n+# \"Be ACKed\" -- The \"blinded TxID\" of this txn must be member of the \"approved candidate\" set in the D2 of this block.\n+# \"Return Change to Account\" -- TxOut0 must pay to the \"critical account\" (see D1) that corresponds to the CTIP that was selected as a TxIn.\n+# \"Return *all* Change to Account\" -- Sum of inputs must equal the sum of outputs. No traditional tx fee is possible.\n+\n+Finally, don't forget that M6 inherits the requirement (common to both M5 and M6) that the CTIP be selected as an input, and that the CTIP then be updated. In this case, we know that the critical index will be zero, so the new CTIP will be (\"this TxID\" (NOT blinded), 0). The TxID is NOT blinded because blinding is only for accumulating ACKs.\n+\n+As a result of these requirements, every single withdrawal-attempt will fail, unless an entry has been added to D2 and \"ACKed\" a sufficient number of times.\n+\n+\n+\n+==Backward compatibility==\n+\n+\n+As a soft fork, older software will continue to operate without modification. Non-upgraded nodes will see a number of phenomena that they don't understand -- coinbase txns with non-txn data, value accumulating in anyone-can-spend UTXOs for months at a time, and then random amounts leaving the UTXO in single, infrequent bursts. However, this phenomena doesn't affect them or the validity of the money that they receive.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 432,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": null,
      "user": {
        "login": "rex4539",
        "id": 227442,
        "node_id": "MDQ6VXNlcjIyNzQ0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/227442?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rex4539",
        "html_url": "https://github.com/rex4539",
        "followers_url": "https://api.github.com/users/rex4539/followers",
        "following_url": "https://api.github.com/users/rex4539/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rex4539/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rex4539/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rex4539/subscriptions",
        "organizations_url": "https://api.github.com/users/rex4539/orgs",
        "repos_url": "https://api.github.com/users/rex4539/repos",
        "events_url": "https://api.github.com/users/rex4539/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rex4539/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this phenomena -> these phenomena",
      "created_at": "2019-04-03T14:39:55Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r271776627",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/271776627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272406210",
      "pull_request_review_id": 223051225,
      "id": 272406210,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjQwNjIxMA==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.\n+\n+\n+( The following messages were modeled on SegWit -- https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 157 bytes (0x9d)\n+    4-byte - Commitment header (0x53707243)\n+    153-byte - the critical bytes mentioned above (fields #1, #3, and #4, to populate a new D1 entry)\n+\n+\n+==== New Block Validation Rules ====\n+\n+# If the network detects a properly-formatted M1, it must add an entry to D1, into the very next block, with the following initial values:\n+## Field #5 will be calculated as per [https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses version 1 Bitcoin addresses], but with a prefix of \"4\" instead of \"1\".\n+## Field #9 will be derived from #7 and #8 using math.\n+## The initial values of Fields #10, #11, and #12 are set to zero.\n+# Only one M1 (of any kind) can be added into a block at a time.\n+\n+==== Notes on M1 ====\n+\n+The escrow will \"reuse\" the same address over and over. But notice that there is no privacy loss due to address reuse, because the address in question does not \"belong\" to any specific individual. Furthermore, the transactions in question could already be linked by just watching the Hashrate Escrow for deposits ...this, in fact, is exactly what a sidechain must do in order to make main-to-side transfers.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 29 bytes (0x1D)\n+    4-byte - Commitment header (0x53616343)\n+    25-byte - Commitment hash: RIPMD-160 of Sha256 of a given M1 (above)\n+\n+==== New Block Validation Rules ====\n+\n+1. An entry will be removed from D1, unless that block contains an M2 supporting it (this will increment field #2), or the entry has accumulated 4032 M2s. Therefore, each entry needs to have 4032 *consecutive* M2s supporting it, else it will be removed from D1 and must start over. This requires all miners to agree to \"soft fork\" the sidechain into existence. This makes it easier to curate the list of active sidechains, and prevents destructive interference (see above) among contradictory sidechains.\n+2. Once the entry has 4032 M2s, then a miner must make a 0 btc payment to the Critical Address, thus activating the chain. This payment becomes the first \"critical (TxID, index) pair\" (or \"CTIP\").\n+3. It is possible to \"overwrite\" a D1 slot -- this destroys the sidechain that is there, and replaces it with a new one. This is defined as requiring 6 months (26298 blocks) of M2s, instead of 4 weeks (4032). This possibility does not change the security assumptions, because we already assume that users have access to \"magically true\" bandwidth at a rate of 1 bit per ACK-cycle. (This is why the voting cycles should be large, 1 month Waiting, 2+ months Voting).\n+\n+\n+\n+=== Adding Withdrawal-Attempts and Tracking Their Success (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+The table below enumerates the database fields, their size (in bytes), type and purpose.\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^\n+| 32\n+| hex\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs*\n+| 2\n+| uInt\n+| The current total number of \"votes\", this starts at 0 and remains there throughout the waiting period.\n+|-\n+| 4\n+| Age*\n+| 3\n+| uInt\n+| Total duration of time, in blocks, that this WT^ has been inside of D2.\n+|-\n+| 5\n+| Waiting Period*\n+| 2\n+| uInt\n+| Total duration of time, in blocks, that this entry must sit idle, before it can begin to accumulate ACKs/NACKs. Pulled from D1's field #6.\n+|-\n+| 6\n+| Max Age*\n+| 3\n+| uInt\n+| Determined by summing (D1's field #6) and (D1's field #7).\n+|-\n+| 7\n+| Threshold*\n+| 2\n+| uInt\n+| Total ACKs needed, this is pulled from D1's field #9.\n+|-\n+| 8\n+| Approved*\n+| 1\n+| boolean\n+| True while ACKs > Threshold, False otherwise.\n+|}\n+\n+\\* Denotes a \"convenience field\" (see above).\n+\n+Withdrawal_DB requires 46 bytes [1+32+2+3+2+3+2+1] per entry. Of these, 13 bytes ([2+3+2+3+2+1], all fields except #1 and #2) can be generated locally, leaving 33 critical bytes [1+32].\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# In each block, a hash commitment to D2 must always exist (even if D2 is blank).\n+# D2 must always be sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, every entry's \"Age\" field must increase by exactly 1.\n+# From one block to the next, entries are only removed from D2 (in the very next block) if:\n+## \"Age\" = \"MaxAge\".\n+## If the block contains a txn who's blinded txID matches WT^. {{ This might be unnecessary, and a lot of work. }}\n+# In addition, there are special rules for the allowed values in the \"ACKs\" field (field #3). See M4 below.\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 37 bytes (0x25)\n+    4-byte - Commitment header (0xD45AA943)\n+    33-byte - the critical bytes mentioned above (fields #1 and #2, to populate a new D2 entry)\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+==== Very Little Info, Probably Calculable in Advance ====\n+\n+M4 is exceptional (in comparison to the other M's) in a few ways. First, its content is not stored anywhere, only the *hash* of its *effect* is stored (in a leaf of a merkle tree who's root is inserted into a mainchain coinbase). M4 alters the contents of D2 -- the *contents* of D2 are consensus critical, but M4 (the process by which nodes reach a new valid D2) can be anything.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 308,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 271775445,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thank you",
      "created_at": "2019-04-04T23:45:42Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r272406210",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272406210"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272406307",
      "pull_request_review_id": 223051332,
      "id": 272406307,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjQwNjMwNw==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.\n+\n+\n+( The following messages were modeled on SegWit -- https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 157 bytes (0x9d)\n+    4-byte - Commitment header (0x53707243)\n+    153-byte - the critical bytes mentioned above (fields #1, #3, and #4, to populate a new D1 entry)\n+\n+\n+==== New Block Validation Rules ====\n+\n+# If the network detects a properly-formatted M1, it must add an entry to D1, into the very next block, with the following initial values:\n+## Field #5 will be calculated as per [https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses version 1 Bitcoin addresses], but with a prefix of \"4\" instead of \"1\".\n+## Field #9 will be derived from #7 and #8 using math.\n+## The initial values of Fields #10, #11, and #12 are set to zero.\n+# Only one M1 (of any kind) can be added into a block at a time.\n+\n+==== Notes on M1 ====\n+\n+The escrow will \"reuse\" the same address over and over. But notice that there is no privacy loss due to address reuse, because the address in question does not \"belong\" to any specific individual. Furthermore, the transactions in question could already be linked by just watching the Hashrate Escrow for deposits ...this, in fact, is exactly what a sidechain must do in order to make main-to-side transfers.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 29 bytes (0x1D)\n+    4-byte - Commitment header (0x53616343)\n+    25-byte - Commitment hash: RIPMD-160 of Sha256 of a given M1 (above)\n+\n+==== New Block Validation Rules ====\n+\n+1. An entry will be removed from D1, unless that block contains an M2 supporting it (this will increment field #2), or the entry has accumulated 4032 M2s. Therefore, each entry needs to have 4032 *consecutive* M2s supporting it, else it will be removed from D1 and must start over. This requires all miners to agree to \"soft fork\" the sidechain into existence. This makes it easier to curate the list of active sidechains, and prevents destructive interference (see above) among contradictory sidechains.\n+2. Once the entry has 4032 M2s, then a miner must make a 0 btc payment to the Critical Address, thus activating the chain. This payment becomes the first \"critical (TxID, index) pair\" (or \"CTIP\").\n+3. It is possible to \"overwrite\" a D1 slot -- this destroys the sidechain that is there, and replaces it with a new one. This is defined as requiring 6 months (26298 blocks) of M2s, instead of 4 weeks (4032). This possibility does not change the security assumptions, because we already assume that users have access to \"magically true\" bandwidth at a rate of 1 bit per ACK-cycle. (This is why the voting cycles should be large, 1 month Waiting, 2+ months Voting).\n+\n+\n+\n+=== Adding Withdrawal-Attempts and Tracking Their Success (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+The table below enumerates the database fields, their size (in bytes), type and purpose.\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^\n+| 32\n+| hex\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs*\n+| 2\n+| uInt\n+| The current total number of \"votes\", this starts at 0 and remains there throughout the waiting period.\n+|-\n+| 4\n+| Age*\n+| 3\n+| uInt\n+| Total duration of time, in blocks, that this WT^ has been inside of D2.\n+|-\n+| 5\n+| Waiting Period*\n+| 2\n+| uInt\n+| Total duration of time, in blocks, that this entry must sit idle, before it can begin to accumulate ACKs/NACKs. Pulled from D1's field #6.\n+|-\n+| 6\n+| Max Age*\n+| 3\n+| uInt\n+| Determined by summing (D1's field #6) and (D1's field #7).\n+|-\n+| 7\n+| Threshold*\n+| 2\n+| uInt\n+| Total ACKs needed, this is pulled from D1's field #9.\n+|-\n+| 8\n+| Approved*\n+| 1\n+| boolean\n+| True while ACKs > Threshold, False otherwise.\n+|}\n+\n+\\* Denotes a \"convenience field\" (see above).\n+\n+Withdrawal_DB requires 46 bytes [1+32+2+3+2+3+2+1] per entry. Of these, 13 bytes ([2+3+2+3+2+1], all fields except #1 and #2) can be generated locally, leaving 33 critical bytes [1+32].\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# In each block, a hash commitment to D2 must always exist (even if D2 is blank).\n+# D2 must always be sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, every entry's \"Age\" field must increase by exactly 1.\n+# From one block to the next, entries are only removed from D2 (in the very next block) if:\n+## \"Age\" = \"MaxAge\".\n+## If the block contains a txn who's blinded txID matches WT^. {{ This might be unnecessary, and a lot of work. }}\n+# In addition, there are special rules for the allowed values in the \"ACKs\" field (field #3). See M4 below.\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 37 bytes (0x25)\n+    4-byte - Commitment header (0xD45AA943)\n+    33-byte - the critical bytes mentioned above (fields #1 and #2, to populate a new D2 entry)\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+==== Very Little Info, Probably Calculable in Advance ====\n+\n+M4 is exceptional (in comparison to the other M's) in a few ways. First, its content is not stored anywhere, only the *hash* of its *effect* is stored (in a leaf of a merkle tree who's root is inserted into a mainchain coinbase). M4 alters the contents of D2 -- the *contents* of D2 are consensus critical, but M4 (the process by which nodes reach a new valid D2) can be anything.\n+\n+In fact, M4 can also be *nothing*. In other words, it may be optional. This is precisely because, from one block to the next, we have constrained D2 such that it is only allowed to change in a few ways. Therefore, the exhaustive set of \"candidate D2s\" can be precomputed by full nodes in advance.\n+\n+The following sections assume a maximum of one sucessful withdrawal per sidechain at a time (see [/bip-hashrate-escrows/appendix-1.txt appendix 1]).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 312,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 271775623,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks!",
      "created_at": "2019-04-04T23:46:12Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r272406307",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272406307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 312,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272406479",
      "pull_request_review_id": 223051535,
      "id": 272406479,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjQwNjQ3OQ==",
      "diff_hunk": "@@ -0,0 +1,469 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf a famous Oct 2014 paper] written partially by some Blockstream co-founders.\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by directing hashpower over them for a period of time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html a FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+1. Protect Bitcoin from competition from altcoins and spinoffs. Safely allow competing implementations (of *sidechains*).\n+2. Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+3. Help with review, by making it much easier for reviewers to ignore bad ideas.\n+4. Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+==== On the Resource Requirements of New Databases ====\n+\n+The \"new\" databases are simply reinterpretations of data that are already contained elsewhere in the blockchain. Specifically, M1 M2 and M3 are all located in the block's coinbase txn, and M5 and M6 might be found in any regular txn. M4 is a special case and does not actually need to be included anywhere, so it is not. If you like, you can imagine that the M4s reside in an optional extension block.\n+\n+In other words, we just rearrange what is already there. Because of this, even though \"new databases\" are created and stored in memory, the existing bandwidth and storage limits are respected (although, see \"M4\" below).\n+\n+\n+\n+\n+=== Adding Sidechains and Tracking Them (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+Note: Fields 6 through 9 have been intentionally removed. Previously, this section allowed miners to set and commit to voting/waiting periods. However, I have since standardized the periods: withdrawals expire after 6 months (26298 blocks), and they succeed if they ever achieve an ACK score of 13140 or higher. I have removed the waiting period, because anyone who adopts a policy of ignoring all withdrawals with fewer than 400 ACKs will automatically gain all of the benefits of the waiting period. The justification for this change is that it strongly implies that an attack on any one sidechain is an attack on all of them (in a sense, this change makes the \"victimhood\" of each sidechain \"fungible\").\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Active*\n+| 2\n+| uInt\n+| This counter starts at zero when a new entry is added, and increments as a new entry is supported by \"M2\". The entry either reaches the max value of 4032 (at which point the counter freezes), or else the entry is removed. This enforces the requirement \"a soft fork is required to add a new escrow\".\n+|-\n+| 3\n+| Escrow Name/Description\n+| 120\n+| string\n+| A human-readable name and description of the sidechain. More than enough space to hold a 32 byte hash. Helps prevent destructive interference among sidechains (see below).\n+|-\n+| 4\n+| Critical Private Key\n+| 32\n+| hex\n+| This is the Double-SHA256 of the binary release of the reference software. It ties the sidechain to a specific software release, and doubles as a way of signing withdrawals (see below).\n+|-\n+| 5\n+| Critical Address*\n+| 32\n+| string\n+| This is derived by taking f(x) = ImportPrivateKey(HexToBase58Check(x)) of field #3. It is intentionally in the human-readable format {{although it could be 25 bytes of binary}}.\n+|-\n+| 10\n+| \"CTIP\" -- Part 1 \"TxID\"*\n+| 32\n+| hex\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 11\n+| \"CTIP\" -- Part 2 \"Index\"*\n+| 4\n+| hex\n+| Of the CTIP, this is second element of the pair: the Index. See #10 above.\n+|}\n+\n+\\* Denotes a \"convenience field\", the entry for this field is derived from other fields, or from the blockchain-state itself. The escrow-creator does not need to provide these values in M1 (or anywhere).\n+\n+Escrow_DB requires 223 bytes [1+120+32+32+2+32+4] for each escrow in the main blockchain. Of these, 70 bytes [2+32+32+4] are merely for convenience. Therefore, a sidechain is defined (see \"M1\") by 153 bytes of information.\n+\n+====Notes on D1====\n+\n+# D1 will always exist.\n+# D1 will always have a unique sort (first by \"Escrow Number\" (field #1), and second by \"Active\" (field #2)). There is only ever one (escrow number, Active) pair. \n+# D1 is updated according to M1 and M2 (below).\n+# If a new entry is added to D1 with an \"Escrow Number\" that is already in use, then this entry will either eventually be removed (because it was not supported with an M2), or it will eventually overwrite the old entry (if it *was* supported via M2).\n+\n+\n+====Notes on D1====\n+\n+=====Obligations Placed on Miners=====\n+\n+Miners have always upgraded their software according to criteria that are known only to them (in other words, \"whenever they want\").\n+\n+However, this soft fork imposes two new criteria upon them. First: miners should only upgrade their software, if any modification to the portfolio of sidechains [that are added/removed in the upgrade] can be expected to increase miner wealth. Trivially, this implies that miners should make sure that the upgrade doesn't overwrite (and destroy) an existing sidechain that they like! But, more seriously, it implies that miners should take an interest in what the sidechain is doing to the mainchain and other sidechains (see below).\n+\n+===== Destructive Sidechain Interference =====\n+\n+People frequently emphasize that miners should have \"as little control\" as possible. It is a very safe claim to make, and a very easy sentence to write. Much harder is to determine exactly what this minimum value is, and how to achieve it. Harder still is to untie the knot of who is actually controlling what, in a decentralized, interacting system.\n+\n+Certainly, miners can not have \"zero control\" -- for that is the same as to just remove them from the system altogether. Some rules are enforced \"on miners by nodes\" (such as the infamous blocksize limit); other rules are enforced by nodes but are narrowly-controlled by miners (such as the proof-of-work itself, or the block's timestamp). Thirdly, some rules are enforced by both against each other (such as the rule against including invalid txns or double-spent txns), for mutual benefit.\n+\n+Some pause should be given, after one considers that the sidechain design goal is literally a piece of software that can do *anything*. Anything includes a great many things, many of which I demonstrate to be undesirable. Bitcoin itself does not allow \"anything\" -- it allows any person to transact, but, in contrast, it does not permit any person to double-spend. This is because \"allowing anyone to do anything\" is not viable in a world that contains undesirable interactions (what a libertarian might call \"aggression\") -- in the case of money, these are theft and counterfeiting.\n+\n+I have produced a comprehensive quantity of written material [1], presentations [2], etc [3] on exactly what the level of miner-control should be, and why. Specifically, I claim that **miners should be aware of the purpose of the sidechain, and they should reject sidechains which have an unclear purpose or which have a purpose that will lead to decrease in miner-wealth** (where wealth measured explicitly as: the estimated present value of the purchasing power of the blockchain's coinbase txns). I claim that this criterion is necessary because, just Original Bitcoin filters unwanted interactions among different BTC txns, so too much \"Sidechain Bitcoin\" filter out unwanted interactions among sidechain.\n+\n+* [1] http://www.truthcoin.info/blog/wise-contracts/\n+* [2] https://www.youtube.com/watch?v=xGu0o8HH10U&index=1&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4\n+* [3] http://www.drivechain.info/literature/index.html\n+\n+Call it a \"sidechain non-aggression principle\", if you want.\n+\n+To the best of my knowledge, everyone who *has* reviewed this information as found the arguments to be acceptable. It has, also, changed a few minds (from \"unacceptable\" to \"acceptable\").\n+\n+\n+===== ISSUE: \"Signing\" BTC Txns =====\n+\n+Currently, we use a process which may be suboptimal. It is that we *literally sign* a txn with a globally and publicly known private key. But this is for convenience purposes -- to easily detect the sidechain's balance. The signature that is produced is not doing anything. This is probably an area of improvement.\n+\n+\n+( The following messages were modeled on SegWit -- https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 157 bytes (0x9d)\n+    4-byte - Commitment header (0x53707243)\n+    153-byte - the critical bytes mentioned above (fields #1, #3, and #4, to populate a new D1 entry)\n+\n+\n+==== New Block Validation Rules ====\n+\n+# If the network detects a properly-formatted M1, it must add an entry to D1, into the very next block, with the following initial values:\n+## Field #5 will be calculated as per [https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses version 1 Bitcoin addresses], but with a prefix of \"4\" instead of \"1\".\n+## Field #9 will be derived from #7 and #8 using math.\n+## The initial values of Fields #10, #11, and #12 are set to zero.\n+# Only one M1 (of any kind) can be added into a block at a time.\n+\n+==== Notes on M1 ====\n+\n+The escrow will \"reuse\" the same address over and over. But notice that there is no privacy loss due to address reuse, because the address in question does not \"belong\" to any specific individual. Furthermore, the transactions in question could already be linked by just watching the Hashrate Escrow for deposits ...this, in fact, is exactly what a sidechain must do in order to make main-to-side transfers.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 29 bytes (0x1D)\n+    4-byte - Commitment header (0x53616343)\n+    25-byte - Commitment hash: RIPMD-160 of Sha256 of a given M1 (above)\n+\n+==== New Block Validation Rules ====\n+\n+1. An entry will be removed from D1, unless that block contains an M2 supporting it (this will increment field #2), or the entry has accumulated 4032 M2s. Therefore, each entry needs to have 4032 *consecutive* M2s supporting it, else it will be removed from D1 and must start over. This requires all miners to agree to \"soft fork\" the sidechain into existence. This makes it easier to curate the list of active sidechains, and prevents destructive interference (see above) among contradictory sidechains.\n+2. Once the entry has 4032 M2s, then a miner must make a 0 btc payment to the Critical Address, thus activating the chain. This payment becomes the first \"critical (TxID, index) pair\" (or \"CTIP\").\n+3. It is possible to \"overwrite\" a D1 slot -- this destroys the sidechain that is there, and replaces it with a new one. This is defined as requiring 6 months (26298 blocks) of M2s, instead of 4 weeks (4032). This possibility does not change the security assumptions, because we already assume that users have access to \"magically true\" bandwidth at a rate of 1 bit per ACK-cycle. (This is why the voting cycles should be large, 1 month Waiting, 2+ months Voting).\n+\n+\n+\n+=== Adding Withdrawal-Attempts and Tracking Their Success (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+The table below enumerates the database fields, their size (in bytes), type and purpose.\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Bytes\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| 1\n+| uInt\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^\n+| 32\n+| hex\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs*\n+| 2\n+| uInt\n+| The current total number of \"votes\", this starts at 0 and remains there throughout the waiting period.\n+|-\n+| 4\n+| Age*\n+| 3\n+| uInt\n+| Total duration of time, in blocks, that this WT^ has been inside of D2.\n+|-\n+| 5\n+| Waiting Period*\n+| 2\n+| uInt\n+| Total duration of time, in blocks, that this entry must sit idle, before it can begin to accumulate ACKs/NACKs. Pulled from D1's field #6.\n+|-\n+| 6\n+| Max Age*\n+| 3\n+| uInt\n+| Determined by summing (D1's field #6) and (D1's field #7).\n+|-\n+| 7\n+| Threshold*\n+| 2\n+| uInt\n+| Total ACKs needed, this is pulled from D1's field #9.\n+|-\n+| 8\n+| Approved*\n+| 1\n+| boolean\n+| True while ACKs > Threshold, False otherwise.\n+|}\n+\n+\\* Denotes a \"convenience field\" (see above).\n+\n+Withdrawal_DB requires 46 bytes [1+32+2+3+2+3+2+1] per entry. Of these, 13 bytes ([2+3+2+3+2+1], all fields except #1 and #2) can be generated locally, leaving 33 critical bytes [1+32].\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# In each block, a hash commitment to D2 must always exist (even if D2 is blank).\n+# D2 must always be sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, every entry's \"Age\" field must increase by exactly 1.\n+# From one block to the next, entries are only removed from D2 (in the very next block) if:\n+## \"Age\" = \"MaxAge\".\n+## If the block contains a txn who's blinded txID matches WT^. {{ This might be unnecessary, and a lot of work. }}\n+# In addition, there are special rules for the allowed values in the \"ACKs\" field (field #3). See M4 below.\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 37 bytes (0x25)\n+    4-byte - Commitment header (0xD45AA943)\n+    33-byte - the critical bytes mentioned above (fields #1 and #2, to populate a new D2 entry)\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+==== Very Little Info, Probably Calculable in Advance ====\n+\n+M4 is exceptional (in comparison to the other M's) in a few ways. First, its content is not stored anywhere, only the *hash* of its *effect* is stored (in a leaf of a merkle tree who's root is inserted into a mainchain coinbase). M4 alters the contents of D2 -- the *contents* of D2 are consensus critical, but M4 (the process by which nodes reach a new valid D2) can be anything.\n+\n+In fact, M4 can also be *nothing*. In other words, it may be optional. This is precisely because, from one block to the next, we have constrained D2 such that it is only allowed to change in a few ways. Therefore, the exhaustive set of \"candidate D2s\" can be precomputed by full nodes in advance.\n+\n+The following sections assume a maximum of one sucessful withdrawal per sidechain at a time (see [/bip-hashrate-escrows/appendix-1.txt appendix 1]).\n+\n+==== How Hard is it to Guess M4? ====\n+\n+If there are n Escrows and m Withdrawals-per-escrow<sup>1</sup>, then there are (m+2)^n total candidates for the next D2. This is because, [per block per escrow], one of three things can happen: (1) one of the m withdrawal-candidates can be \"ACK\"ed (or \"upvoted\" or \"promoted\"), which automatically downvotes the others; or (2) all withdrawal-candidates can be downvoted, or finally (3) the miners can abstain from voting on the escrow's withdrawals altogether, leaving the tallies the same.\n+\n+First, for nodes which validate all sidechains (assuming these escrows are sidechains), this simplifies to 2^n -- these nodes only have to choose between the single honest choice (on one hand) or an abstention (on the other). Second, even for nodes that don't validate any sidechains, the number of candidates might be reduced from m^n to 3^n, by making a simplifying assumption: whichever withdrawal was most recently added/upvoted, is likely to be the one which is upvoted next.\n+\n+Of course, that is still O(k^n) for n sidechains, which isn't great<sup>2</sup>. If the \"D2 update\" cannot be guessed, it must be transmitted in some way.\n+\n+==== Giving Up and Getting M4 the Old Fashioned Way ====\n+\n+Two examples for transmitting it are below:\n+\n+\"Short Form\" (Assumes there are no more than 254 active withdrawal-attempts per account)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    N-byte - N is the total number of active accounts (\"sidechains\"), each byte specifies the position of the single WT that was \"upvoted\". A value of 0 indicates \"downvote everything\", a value of 255 indicates abstention.\n+\n+\"Long Form\" (Makes no assumptions about anything)\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    1-byte - Length (in bytes) of this message; total number of withdrawal attempts; y = ceiling( sum_i(m_i +2)/8 ). Nodes should already know what length to expect, because they know the sequence of M3s and therefore the vector of WT^s.\n+    Y-byte - stream of bits (not bytes), with a 1 indicating the position of the chosen action [downvote all, abstain, upvote1, upvote2, ...]\n+\n+\n+If the message is very very large, then nodes may not want to broadcast it. This opens up an \"exhaustion attack\"<sup>2</sup>, in which many miners create bad WT^s, vote on these randomly, and then refuse to broadcast their votes. Fortunately, even for a worst-case scenario of 200 sidechains and 1,000 withdrawal-attempts per sidechain, honest nodes can communicate a long form M4 with each other by using just 25,056 bytes per block [4+1+1+(200\\*(1000+1+1)/8)].\n+\n+Today's pre-drivechain miners can already carry out a similar attack, by creating and including txns and then not broadcasting that part of the block to anyone. This is often characterized as a  [https://petertodd.org/2016/block-publication-incentives-for-miners \"block publication incentive\"], because in that case the prospect of exhaustively computing all possible transactions (to uncover the missing ones) is completely out of the question.\n+\n+However, message M4 is different from a withheld-txn, because M4 operates outside of the block's mandated information-processing limits (ie, outside the infamous 1 MB nonwitness blocksize limit). So we should examine the conditions under which M4 grows and shrinks, to ensure that we are not smuggling in a tremendous burden on full nodes.\n+\n+Under adversarial conditions, to lengthen a long-form M4 by one bit per block, for C blocks, the attacker must pay 312 bits (39 bytes) one time (to embed a new M3 message). The value C is the length of the sidechain's voting period, which varies but which I expect to be approximately 8,064 (and which could theoretically be as high as 65,536). Thus the attacker can burden nodes disproportionately, if (s)he wishes.\n+\n+Fortunately, the attack in question has no motivation (as far as I can tell). If the miner's goal is to trick rivals into mining on top of invalid blocks, he can already do this much more effectively with the unpublished-txn method (above). If instead he is just trying to harass nodes, then nodes may freely \"downgrade\" to earlier versions of the protocol, and simply ignore all drivechain-related messages. It seems that the attack could best be used in order to: make a large D2, make D2 confusing, sneak in votes for evil WT^ lurking in D2. Thus, the attack disables the transparency of the drivechain system, to some extent. The cost of the attack is forgone transaction fees, due to block space wasted on useless M3s.\n+\n+In practice, n is already capped, and miners may impose [on each other] a \"soft cap\" on m for their mutual protection. Thus, n and m might never get above 10 and 30, respectfully. In this case, the [Short Form, this time] M4 can never require more than 15 bytes per block, no matter what the attacker tries.\n+\n+In practice, m should always be 1 or 2, else something fishy is going on; and m can only inch up by 1 unit per block. So the system as a whole is still quite transparent, in that users are warned appropriately and well in advance. Attackers must invest upfront and they face an uphill climb, in order to eventually make things more expensive for a few others; defenders can wait-and-see if the attack looks like it will ever amount to anything before lifting a finger.\n+\n+\n+===== New Block Validation Rules (for D2 and, by implication, M4) =====\n+\n+From one block to the next, D2 can only be edited in a few strict ways:\n+\n+* Entries can only be added/removed from D2 if they meet the criteria above (in M3, and implicitly M1 and M2).\n+* The ACK-counter of any individual entry can only change by (-1,0,+1) relative to its previous entry.\n+* Within a sidechain group, upvoting one withdrawal (ACK=ACK+1) requires you to downvote all other withdrawals in that group. However, the minimum ACK value is zero (and, therefore, downvotes cannot reduce it below zero).\n+\n+===== Footnotes for M4 =====\n+\n+<sup>1</sup> This represents the worst-case scenario is one where all the Withdrawals are spread evenly over each Sidechain. Under normal operations, there is no reason to expect the all sidechains will have the same number of withdrawals at any given time. In fact, under normal operations, the very *concept* of counting the withdrawals-per-sidechain should be a purposeless one, because there should only be *one* withdrawal at a time. Nonetheless we consider the worst case scenario here.\n+\n+<sup>2</sup> Guessing becomes more computationally intensive in a highly adversarial situation where the \"limited range\" is intentionally expanded. In such a scenario, [a] there are many sidechains, and [b] miners voluntarily sacrifice their scarce block-space by creating a high number of (mutually-exclusive, and hence ultimately invalid) withdrawal attempts and putting these into coinbase transactions; and then agree to all [c] vote on these randomly (guaranteeing that all withdrawals fail, including any true withdrawals) and [d] successfully withhold their random voting strategies from nodes (even including spy-miner-nodes). Under this bizarre scenario, nodes may require computing resources which increase near-exponentially with the number of withdrawals, and it may take a long time for an ignorant node to exhaustively work out the underlying state of Withdrawal_DB. In this case, nodes may decide to temporarily stop validating such transactions (as if they had not yet upgraded to support this soft fork).\n+\n+\n+\n+=== Depositing and Withdrawing (M5, M6) ===\n+\n+\n+Both M5 and M6 are regular Bitcoin txns. They are identified by meeting an important criteria: they select a one of the Critical TxID-index Pairs (a \"CTIP\") as one of their inputs. Deposits (\"M5\") are distinguished from withdrawals (\"M6\") by simply checking to see if money is \"going in\", or \"out\". In other words, we compare the BTC value of the original CTIP to that of new CTIP. If original <= new it is a deposit, if original > new then it is a withdrawal.\n+\n+The code that identifies sidechain withdrawal / deposit txns (by calculating how much value is being put into or taken out of a sidechain) can be seen here: https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L351-L386\n+\n+Such txns are forced (by consensus) to obey two additional criteria:\n+\n+# They must contain an output paying \"to\" the Critical Address [probably in TxOut0].\n+# They must be accompanied by an update to this sidechain's Critical TxID-index Pair (CTIP). The new CTIP must be \"this\" txn itself.\n+\n+These criteria are enforced [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L440-L473 here] by checking that a deposit is paying back to the sidechain more than it is taking out, and completely rejecting any withdrawal from the mempool. And [https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/validation.cpp#L1747-L1757 here] we allow for a withdrawal only once it has attained sufficient work score (ACKs).\n+\n+The purpose of this is to have all of the escrow's money (ie all of the sidechain's money) in one TxID, so that depositors immediately undo any UTXO bloat they may cause. This simplifies the withdrawal process, as there is no need to worry about cleaning up \"dust deposits\" (...and such cleaning can often result in headaches, for example where a withdrawal-txn is larger than 1MB in size, or else may only withdraw an arbitrarily limited amount of BTC). Notice that, unless we assume that an account will last forever, all utxos which are deposited must eventually be withdrawn by someone. Therefore, the relevant design criterion is not \"efficiency\" (total network cost) but rather \"who should pay\" (allocation of costs).\n+\n+==== M5. \"Make a Deposit\" -- a transfer of BTC from-main-to-side ====\n+\n+As far as mainchain consensus is concerned, there are no additional requirements.\n+\n+However, in practice there *are* additional mainchain requirements...specified by the escrow account, (ie specified by the \"sidechain\" or \"virtual chain\"). These requirements are not part of mainchain consensus and are allowed to be anything. In other words, the sidechain is free to invent any way to credit depositor's money -- M5 is fully customizable.\n+\n+One method, is for mainchain depositors to append a zero-value OP Return to a Deposit txn, so that the sidechain knows how to credit funds. Mainchain users must upgrade their wallet software, of course, (on an individual basis) in order to become aware of and take advantage of new deposit-methods.\n+\n+===== Inconvenient Race Condition =====\n+\n+The requirement that each hashrate escrow be linked to a single TxID does create an interesting inconvenience for depositors. If a user is slow to sign a txn after constructing it (perhaps because the user employs an air-gapped computer, etc), then the signed txn may no longer be valid. This is because the input it selects, may no longer be the Critical TxID (as \"the\" Critical TxID changes with each deposit). **Only one user can deposit at a time** (although many can deposit per block). As a result, the transaction must fail, and the user would need to be prompted to remake and resign the txn. If this is problem is too frustrating, users can always make main-to-side transfers using atomic cross chain swaps (or, the LN, if they already have a channel open on both chains).\n+\n+Fortunately, it is already a part of mainchain consensus that no two txns can spend the same TxID. The only new issue here is the confusion it might create for the user (hence the need for error messages and alternative deposit-methods).\n+\n+\n+==== M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main ====\n+\n+We come, finally, to the critical matter: where users can take their money *out* of the escrow account, and return it to the \"regular\" UTXO set. As previously mentioned, this txn is one which (a) spends from a CTIP and (b) reduces the quantity of BTC in an account's CTIP. Most of the work has already been done by D1, M3, M4, and D2. Furthermore, existing Bitcoin tx-rules prevent the sidechain from ever withdrawing more money than has been placed into it.\n+\n+From there, we merely introduce two final concepts:\n+\n+# In each block, an entry in D2 is considered an \"approved candidate\" if the \"ACKs\" value is above 13140.\n+# A \"blinded TxID\" is way of hashing the txn, in which we first overwrite some parts of the txn with zeros. Specifically, the first 36 bytes of \"TxIn0\" (the first input, including TxOutHash and TxOutIndex), as well as the first 8 bytes of \"TxOut0\" (the first output).\n+\n+Blinding is necessary because we allow each sidechain only one UTXO at a time.\n+\n+of our restriction of the account to a single UTXO-member. Because of this, during the ACKing process the withdrawal-txn (which is currently being ACKed) may change in two ways: the CTIP (which changes with each deposit), and the total quantity of BTC stored in the account (which arbitrarily increases with each new deposit). In other words, a withdrawal-attempt is created via M3, but this takes place many blocks before the withdrawal is actually included via M6. During this time, a single new deposit to the account would change its CTIP and its value. So, what do we ACK? Well, we ACK a \"blinded\" version of the withdrawal. This blinded version is stable because the dynamic parts are always overwritten with zeros.\n+\n+While we ACK a blinded WT^, what is actually included in the blockchain (\"M6\") is an unblinded WT^. Since each blinded WT^ could correspond to many different unblinded WT^s, we need to impose further restrictions on those unblinded WT^s that are finally included. First, we will force the final unblinded WT^ to spend the entire sidechain balance (by forcing sum(input_values) to equal sum(output_values)). To avoid withdrawing the entire sidechain balance with every withdrawal, we will, secondly, force the unblinded WT^ to create a new output which is itself a deposit to the sidechain it withdrew from (which nodes can check using D1's CTIP field). Unfortunately, these requirements eliminate the possibility of including a transaction fee, as traditionally calculated. So, finally, to compensate for *that*, txn fees are encoded explicitly as a withdrawal to OP_TRUE (which the main:block's miner can immediately claim).\n+\n+With all of this in place, the only requirements for inclusion in a block are these:\n+\n+# \"Be ACKed\" -- The \"blinded TxID\" of this txn must be member of the \"approved candidate\" set in the D2 of this block.\n+# \"Return Change to Account\" -- TxOut0 must pay to the \"critical account\" (see D1) that corresponds to the CTIP that was selected as a TxIn.\n+# \"Return *all* Change to Account\" -- Sum of inputs must equal the sum of outputs. No traditional tx fee is possible.\n+\n+Finally, don't forget that M6 inherits the requirement (common to both M5 and M6) that the CTIP be selected as an input, and that the CTIP then be updated. In this case, we know that the critical index will be zero, so the new CTIP will be (\"this TxID\" (NOT blinded), 0). The TxID is NOT blinded because blinding is only for accumulating ACKs.\n+\n+As a result of these requirements, every single withdrawal-attempt will fail, unless an entry has been added to D2 and \"ACKed\" a sufficient number of times.\n+\n+\n+\n+==Backward compatibility==\n+\n+\n+As a soft fork, older software will continue to operate without modification. Non-upgraded nodes will see a number of phenomena that they don't understand -- coinbase txns with non-txn data, value accumulating in anyone-can-spend UTXOs for months at a time, and then random amounts leaving the UTXO in single, infrequent bursts. However, this phenomena doesn't affect them or the validity of the money that they receive.",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 432,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "0c186ed8e220fecad9864a435f65974c781161cf",
      "in_reply_to_id": 271776627,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks!",
      "created_at": "2019-04-04T23:47:13Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r272406479",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272406479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272445641",
      "pull_request_review_id": 223099984,
      "id": 272445641,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjQ0NTY0MQ==",
      "diff_hunk": "@@ -0,0 +1,20 @@\n+\n+==== Two Withdrawals at Once ====\n+\n+Currently, the documentation and code describe a situation where only one withdrawal can proceed at a time.\n+\n+In other words, as WT^s are proposed, only one can make progress toward the finish line. As a result, a given side-to-main transfer will always take between 3 and 6 months.\n+\n+However, it might be best to use a maximum of two transfers at once.\n+\n+If there were more simulataneous withdrawals, the worst-case transfer duration would improve.",
      "path": "bip-hashrate-escrows/appendix-1.txt",
      "position": null,
      "original_position": 10,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "dd6a747cb34721d2ee1a762956bb8c5dc2613704",
      "in_reply_to_id": null,
      "user": {
        "login": "rex4539",
        "id": 227442,
        "node_id": "MDQ6VXNlcjIyNzQ0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/227442?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rex4539",
        "html_url": "https://github.com/rex4539",
        "followers_url": "https://api.github.com/users/rex4539/followers",
        "following_url": "https://api.github.com/users/rex4539/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rex4539/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rex4539/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rex4539/subscriptions",
        "organizations_url": "https://api.github.com/users/rex4539/orgs",
        "repos_url": "https://api.github.com/users/rex4539/repos",
        "events_url": "https://api.github.com/users/rex4539/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rex4539/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo: \"simulataneous\"",
      "created_at": "2019-04-05T05:08:02Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r272445641",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272445641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272445688",
      "pull_request_review_id": 223099984,
      "id": 272445688,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjQ0NTY4OA==",
      "diff_hunk": "@@ -0,0 +1,20 @@\n+\n+==== Two Withdrawals at Once ====\n+\n+Currently, the documentation and code describe a situation where only one withdrawal can proceed at a time.\n+\n+In other words, as WT^s are proposed, only one can make progress toward the finish line. As a result, a given side-to-main transfer will always take between 3 and 6 months.\n+\n+However, it might be best to use a maximum of two transfers at once.\n+\n+If there were more simulataneous withdrawals, the worst-case transfer duration would improve.\n+\n+See image: bip-hashrate-escrows/two-groups.png?raw=true\n+\n+The worst-case withdrawal time obeys f(n)=3+(3/n) months, where n is the number of simultaneous withdrawals.\n+\n+N=2 is the most desirable choice for several reasons. First, it delievers the greatest marginal benefit (of 1.5 months). Later choices only deliver 0.5 and 0.25 marginal months.",
      "path": "bip-hashrate-escrows/appendix-1.txt",
      "position": null,
      "original_position": 16,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "dd6a747cb34721d2ee1a762956bb8c5dc2613704",
      "in_reply_to_id": null,
      "user": {
        "login": "rex4539",
        "id": 227442,
        "node_id": "MDQ6VXNlcjIyNzQ0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/227442?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rex4539",
        "html_url": "https://github.com/rex4539",
        "followers_url": "https://api.github.com/users/rex4539/followers",
        "following_url": "https://api.github.com/users/rex4539/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rex4539/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rex4539/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rex4539/subscriptions",
        "organizations_url": "https://api.github.com/users/rex4539/orgs",
        "repos_url": "https://api.github.com/users/rex4539/repos",
        "events_url": "https://api.github.com/users/rex4539/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rex4539/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo: \"delievers\"",
      "created_at": "2019-04-05T05:08:23Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r272445688",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272445688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272445906",
      "pull_request_review_id": 223099984,
      "id": 272445906,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjQ0NTkwNg==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf the 2014 Blockstream whitepaper].\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by the accumulation of hashpower over time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html an FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+# Protect Bitcoin from competition from altcoins and spinoffs.\n+# Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+# Help with review, by making it much easier for reviewers to ignore bad ideas.\n+# Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+\n+\n+=== Adding Sidechains (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| uint8_t\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Sidechain Deposit Script Hex\n+| string\n+| The script that will be deposited to, and update the CTIP of the sidechain.\n+|-\n+| 3\n+| Sidechain Private Key\n+| string\n+| The private key of the sidechain deposit script.\n+|-\n+| 4\n+| Escrow Name\n+| string\n+| A human-readable name of the sidechain.\n+|-\n+| 5\n+| Escrow Description\n+| string\n+| A human-readable name description of the sidechain. More than enough space to hold a 32 byte hash.\n+|-\n+| 6\n+| Hash ID 1\n+| uint256\n+| A field of 32 bytes, which could be any bytes such as a sha256 hash.\n+|-\n+| 7\n+| Hash ID 2\n+| uint256\n+| A field of 32 bytes, which could be any bytes such as a sha256 hash.\n+|-\n+| 8\n+| \"CTIP\" -- Part 1 \"TxID\"\n+| uint256\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 9\n+| \"CTIP\" -- Part 2 \"Index\"\n+| int32_t\n+| Of the CTIP, this is second element of the pair: the Index. See #9 above.\n+|-\n+|}\n+\n+D1 is updated via M1 and M2.\n+\n+( The following messages were modeled on SegWit -- see [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure here] and [https://github.com/DriveNetTESTDRIVE/DriveNet/blob/564516653c1d876429382971a011f5f6119f7eb4/src/validation.cpp#L3348-L3375 here]. )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    4-byte - Commitment header (0xD5E0C4AF)\n+    N-byte - The serialization of the sidechain.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    4-byte - Commitment header (0xD6E1C5BF)\n+    32-byte - Commitment hash: sha256D hash of sidechain's serialization\n+\n+==== New Block Validation Rules ====\n+\n+\n+# Escrows are added in a procedure that resembles BIP 9 soft fork activation: the network must see a properly-formatted M1, followed by \"acknowledgement\" of the sidechain in 95% of the following 2016 blocks.\n+# It is possible to \"overwrite\" an escrow. This requires 6 months (26298 blocks) of M2s, instead of 2 weeks (XXXX). This possibility does not change the security assumptions (because we already assume that users perform extra-protocolic validation at a rate of 1 bit per 26298 blocks).\n+\n+\n+\n+=== Withdrawing from Escrows (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+D2 changes deterministically with respect to M3, M4, M5, and M6.\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| uint8_t\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^ Hash\n+| uint256\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs (Work Score)\n+| uint16_t\n+| The current total number of ACKs (PoW)\n+|-\n+| 4\n+| Blocks Remaining (Age)\n+| uint16_t\n+| The number of blocks which this WT^ has remaining to accumulate ACKs\n+|}\n+\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# A hash commitment to D2 exists in each block (even if D2 is blank).\n+# Withdrawals in D2 are sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, \"Age\" fields must increase by exactly 1.\n+# Withdrawals are stored in D2 until they fail (\"Age\" = \"MaxAge\"), or they succeed (the blockchain contains a txn whose blinded txID matches \"WT^\").\n+\n+In addition, there are special rules for the \"ACKs\" field (see M4 below).\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 36 bytes (0x24)\n+    4-byte - Commitment header (0xD45AA943)\n+    32-byte - The WT^ hash to populate a new D2 entry\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+M4 is a way of describing changes to the \"ACKs\" column of D2.\n+\n+From one block to the next, \"ACKs\" can only change as follows:\n+\n+* The ACK-counter of any withdrawal can only change by (-1,0,+1).\n+* Within a sidechain-group, upvoting one withdrawal (\"+1\") requires you to downvote all other withdrawals in that group. However, the minimum ACK-value is zero (and, therefore, downvotes cannot reduce it below zero).\n+* While only one withdrawal can be upvoted at once, they can all be unchangd at once (\"abstain\") and they can all be downvoted at once (\"alarm\").",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 217,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "dd6a747cb34721d2ee1a762956bb8c5dc2613704",
      "in_reply_to_id": null,
      "user": {
        "login": "rex4539",
        "id": 227442,
        "node_id": "MDQ6VXNlcjIyNzQ0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/227442?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rex4539",
        "html_url": "https://github.com/rex4539",
        "followers_url": "https://api.github.com/users/rex4539/followers",
        "following_url": "https://api.github.com/users/rex4539/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rex4539/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rex4539/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rex4539/subscriptions",
        "organizations_url": "https://api.github.com/users/rex4539/orgs",
        "repos_url": "https://api.github.com/users/rex4539/repos",
        "events_url": "https://api.github.com/users/rex4539/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rex4539/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo: \"unchangd\"",
      "created_at": "2019-04-05T05:10:42Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r272445906",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272445906"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272445943",
      "pull_request_review_id": 223099984,
      "id": 272445943,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjQ0NTk0Mw==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf the 2014 Blockstream whitepaper].\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by the accumulation of hashpower over time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html an FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+# Protect Bitcoin from competition from altcoins and spinoffs.\n+# Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+# Help with review, by making it much easier for reviewers to ignore bad ideas.\n+# Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+\n+\n+=== Adding Sidechains (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| uint8_t\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Sidechain Deposit Script Hex\n+| string\n+| The script that will be deposited to, and update the CTIP of the sidechain.\n+|-\n+| 3\n+| Sidechain Private Key\n+| string\n+| The private key of the sidechain deposit script.\n+|-\n+| 4\n+| Escrow Name\n+| string\n+| A human-readable name of the sidechain.\n+|-\n+| 5\n+| Escrow Description\n+| string\n+| A human-readable name description of the sidechain. More than enough space to hold a 32 byte hash.\n+|-\n+| 6\n+| Hash ID 1\n+| uint256\n+| A field of 32 bytes, which could be any bytes such as a sha256 hash.\n+|-\n+| 7\n+| Hash ID 2\n+| uint256\n+| A field of 32 bytes, which could be any bytes such as a sha256 hash.\n+|-\n+| 8\n+| \"CTIP\" -- Part 1 \"TxID\"\n+| uint256\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 9\n+| \"CTIP\" -- Part 2 \"Index\"\n+| int32_t\n+| Of the CTIP, this is second element of the pair: the Index. See #9 above.\n+|-\n+|}\n+\n+D1 is updated via M1 and M2.\n+\n+( The following messages were modeled on SegWit -- see [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure here] and [https://github.com/DriveNetTESTDRIVE/DriveNet/blob/564516653c1d876429382971a011f5f6119f7eb4/src/validation.cpp#L3348-L3375 here]. )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    4-byte - Commitment header (0xD5E0C4AF)\n+    N-byte - The serialization of the sidechain.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    4-byte - Commitment header (0xD6E1C5BF)\n+    32-byte - Commitment hash: sha256D hash of sidechain's serialization\n+\n+==== New Block Validation Rules ====\n+\n+\n+# Escrows are added in a procedure that resembles BIP 9 soft fork activation: the network must see a properly-formatted M1, followed by \"acknowledgement\" of the sidechain in 95% of the following 2016 blocks.\n+# It is possible to \"overwrite\" an escrow. This requires 6 months (26298 blocks) of M2s, instead of 2 weeks (XXXX). This possibility does not change the security assumptions (because we already assume that users perform extra-protocolic validation at a rate of 1 bit per 26298 blocks).\n+\n+\n+\n+=== Withdrawing from Escrows (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+D2 changes deterministically with respect to M3, M4, M5, and M6.\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| uint8_t\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^ Hash\n+| uint256\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs (Work Score)\n+| uint16_t\n+| The current total number of ACKs (PoW)\n+|-\n+| 4\n+| Blocks Remaining (Age)\n+| uint16_t\n+| The number of blocks which this WT^ has remaining to accumulate ACKs\n+|}\n+\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# A hash commitment to D2 exists in each block (even if D2 is blank).\n+# Withdrawals in D2 are sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, \"Age\" fields must increase by exactly 1.\n+# Withdrawals are stored in D2 until they fail (\"Age\" = \"MaxAge\"), or they succeed (the blockchain contains a txn whose blinded txID matches \"WT^\").\n+\n+In addition, there are special rules for the \"ACKs\" field (see M4 below).\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 36 bytes (0x24)\n+    4-byte - Commitment header (0xD45AA943)\n+    32-byte - The WT^ hash to populate a new D2 entry\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+M4 is a way of describing changes to the \"ACKs\" column of D2.\n+\n+From one block to the next, \"ACKs\" can only change as follows:\n+\n+* The ACK-counter of any withdrawal can only change by (-1,0,+1).\n+* Within a sidechain-group, upvoting one withdrawal (\"+1\") requires you to downvote all other withdrawals in that group. However, the minimum ACK-value is zero (and, therefore, downvotes cannot reduce it below zero).\n+* While only one withdrawal can be upvoted at once, they can all be unchangd at once (\"abstain\") and they can all be downvoted at once (\"alarm\").\n+\n+One option for explict transmission of M4 is:",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 219,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "dd6a747cb34721d2ee1a762956bb8c5dc2613704",
      "in_reply_to_id": null,
      "user": {
        "login": "rex4539",
        "id": 227442,
        "node_id": "MDQ6VXNlcjIyNzQ0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/227442?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rex4539",
        "html_url": "https://github.com/rex4539",
        "followers_url": "https://api.github.com/users/rex4539/followers",
        "following_url": "https://api.github.com/users/rex4539/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rex4539/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rex4539/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rex4539/subscriptions",
        "organizations_url": "https://api.github.com/users/rex4539/orgs",
        "repos_url": "https://api.github.com/users/rex4539/repos",
        "events_url": "https://api.github.com/users/rex4539/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rex4539/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo: \"explict\"",
      "created_at": "2019-04-05T05:11:06Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r272445943",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272445943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272446041",
      "pull_request_review_id": 223099984,
      "id": 272446041,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjQ0NjA0MQ==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf the 2014 Blockstream whitepaper].\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by the accumulation of hashpower over time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html an FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+# Protect Bitcoin from competition from altcoins and spinoffs.\n+# Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+# Help with review, by making it much easier for reviewers to ignore bad ideas.\n+# Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+\n+\n+=== Adding Sidechains (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| uint8_t\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Sidechain Deposit Script Hex\n+| string\n+| The script that will be deposited to, and update the CTIP of the sidechain.\n+|-\n+| 3\n+| Sidechain Private Key\n+| string\n+| The private key of the sidechain deposit script.\n+|-\n+| 4\n+| Escrow Name\n+| string\n+| A human-readable name of the sidechain.\n+|-\n+| 5\n+| Escrow Description\n+| string\n+| A human-readable name description of the sidechain. More than enough space to hold a 32 byte hash.\n+|-\n+| 6\n+| Hash ID 1\n+| uint256\n+| A field of 32 bytes, which could be any bytes such as a sha256 hash.\n+|-\n+| 7\n+| Hash ID 2\n+| uint256\n+| A field of 32 bytes, which could be any bytes such as a sha256 hash.\n+|-\n+| 8\n+| \"CTIP\" -- Part 1 \"TxID\"\n+| uint256\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 9\n+| \"CTIP\" -- Part 2 \"Index\"\n+| int32_t\n+| Of the CTIP, this is second element of the pair: the Index. See #9 above.\n+|-\n+|}\n+\n+D1 is updated via M1 and M2.\n+\n+( The following messages were modeled on SegWit -- see [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure here] and [https://github.com/DriveNetTESTDRIVE/DriveNet/blob/564516653c1d876429382971a011f5f6119f7eb4/src/validation.cpp#L3348-L3375 here]. )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    4-byte - Commitment header (0xD5E0C4AF)\n+    N-byte - The serialization of the sidechain.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    4-byte - Commitment header (0xD6E1C5BF)\n+    32-byte - Commitment hash: sha256D hash of sidechain's serialization\n+\n+==== New Block Validation Rules ====\n+\n+\n+# Escrows are added in a procedure that resembles BIP 9 soft fork activation: the network must see a properly-formatted M1, followed by \"acknowledgement\" of the sidechain in 95% of the following 2016 blocks.\n+# It is possible to \"overwrite\" an escrow. This requires 6 months (26298 blocks) of M2s, instead of 2 weeks (XXXX). This possibility does not change the security assumptions (because we already assume that users perform extra-protocolic validation at a rate of 1 bit per 26298 blocks).\n+\n+\n+\n+=== Withdrawing from Escrows (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+D2 changes deterministically with respect to M3, M4, M5, and M6.\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| uint8_t\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^ Hash\n+| uint256\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs (Work Score)\n+| uint16_t\n+| The current total number of ACKs (PoW)\n+|-\n+| 4\n+| Blocks Remaining (Age)\n+| uint16_t\n+| The number of blocks which this WT^ has remaining to accumulate ACKs\n+|}\n+\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# A hash commitment to D2 exists in each block (even if D2 is blank).\n+# Withdrawals in D2 are sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, \"Age\" fields must increase by exactly 1.\n+# Withdrawals are stored in D2 until they fail (\"Age\" = \"MaxAge\"), or they succeed (the blockchain contains a txn whose blinded txID matches \"WT^\").\n+\n+In addition, there are special rules for the \"ACKs\" field (see M4 below).\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 36 bytes (0x24)\n+    4-byte - Commitment header (0xD45AA943)\n+    32-byte - The WT^ hash to populate a new D2 entry\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+M4 is a way of describing changes to the \"ACKs\" column of D2.\n+\n+From one block to the next, \"ACKs\" can only change as follows:\n+\n+* The ACK-counter of any withdrawal can only change by (-1,0,+1).\n+* Within a sidechain-group, upvoting one withdrawal (\"+1\") requires you to downvote all other withdrawals in that group. However, the minimum ACK-value is zero (and, therefore, downvotes cannot reduce it below zero).\n+* While only one withdrawal can be upvoted at once, they can all be unchangd at once (\"abstain\") and they can all be downvoted at once (\"alarm\").\n+\n+One option for explict transmission of M4 is:\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    1-byte - Length (in bytes) of this message; total number of withdrawal attempts; y = ceiling( sum_i(m_i +2)/8 ). Nodes should already know what length to expect, because they know the sequence of M3s and therefore the vector of WT^s.\n+    N-byte - stream of bits (not bytes), with a 1 indicating the position of the chosen action [downvote all, abstain, upvote1, upvote2, ...]\n+\n+But sometimes M4 does not need to be transmitted at all! If there are n Escrows and m Withdrawals-per-escrow, then there are (m+2)^n total candidates for the next D2. So, when m and n are low, all of the possible D2s can be trivially computed in advance.\n+\n+Miners can impose a \"soft limit\" on m, blocking new withdrawal-attempts until previous ones expire. For a worst-case scenario of n=200 and m=1,000, honest nodes can communicate M4 with ~25 KB per block [4+1+1+(200\\*(1000+1+1)/8)]. \n+\n+\n+=== Depositing and Withdrawing (M5, M6) ===\n+\n+Both M5 and M6 are regular Bitcoin txns. They are identified by meeting an important criteria: they select a one of the Critical TxID-index Pairs (a \"CTIP\") as one of their inputs.\n+\n+Just as these txns must select a CTIP input, they must create a new CTIP output. D1 is then updated to match only the latest CTIP output. The purpose of this is to have all of the escrow's money (ie all of the sidechain's money) in one TxID, so that depositors immediately undo any UTXO bloat they may cause. \n+\n+Deposits (\"M5\") are distinguished from withdrawals (\"M6\") by simply checking to see if money is \"going in\", or \"out\".\n+\n+https://github.com/DriveNetTESTDRIVE/DriveNet/blob/564516653c1d876429382971a011f5f6119f7eb4/src/validation.cpp#L647-L742\n+\n+\n+==== M5. \"Make a Deposit\" -- a transfer of BTC from-main-to-side ====\n+\n+As far as mainchain consensus is concerned, deposits to the escrow are always valid.\n+\n+However, in practice there will be additional requirements. The escrow account (ie the \"sidechain\") needs to know how to credit depositors. One well-known method, is for mainchain depositors to append a zero-value OP Return to a Deposit txn, so that the sidechain knows how to credit funds. Mainchain users must upgrade their wallet software, of course, (on an individual basis) in order to become aware of and take advantage of new deposit-methods.\n+\n+\n+\n+==== M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main ====\n+\n+We come, finally, to the critical matter: where users can take their money *out* of the escrow account, and return it to the \"regular\" UTXO set. As previously mentioned, this txn is one which (a) spends from a CTIP and (b) reduces the quantity of BTC in an account's CTIP. Most of the work has already been done by D1, M3, M4, and D2. Furthermore, existing Bitcoin tx-rules prevent the sidechain from ever withdrawing more money than has been placed into it.\n+\n+In each block, a withdrawal in D2 is considered \"approved\" if its \"ACKs\" value meets the threshold (13,150).\n+\n+Approved withdrawals give the green light to their respective \"WT^\". A \"WT^\" is 32-bytes which aspire to represent the withdrawing transtion (the txn that actually withdraws funds from the escrow). The two cannot match exactly, beacuse \"WT^\" is defined at onset, and the withdrawing TxID depends on the its CTIP input (which is constantly changing).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 256,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "dd6a747cb34721d2ee1a762956bb8c5dc2613704",
      "in_reply_to_id": null,
      "user": {
        "login": "rex4539",
        "id": 227442,
        "node_id": "MDQ6VXNlcjIyNzQ0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/227442?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rex4539",
        "html_url": "https://github.com/rex4539",
        "followers_url": "https://api.github.com/users/rex4539/followers",
        "following_url": "https://api.github.com/users/rex4539/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rex4539/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rex4539/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rex4539/subscriptions",
        "organizations_url": "https://api.github.com/users/rex4539/orgs",
        "repos_url": "https://api.github.com/users/rex4539/repos",
        "events_url": "https://api.github.com/users/rex4539/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rex4539/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo: \"transtion\"",
      "created_at": "2019-04-05T05:11:54Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r272446041",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272446041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272446124",
      "pull_request_review_id": 223099984,
      "id": 272446124,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjQ0NjEyNA==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf the 2014 Blockstream whitepaper].\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by the accumulation of hashpower over time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html an FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+# Protect Bitcoin from competition from altcoins and spinoffs.\n+# Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+# Help with review, by making it much easier for reviewers to ignore bad ideas.\n+# Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+\n+\n+=== Adding Sidechains (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| uint8_t\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Sidechain Deposit Script Hex\n+| string\n+| The script that will be deposited to, and update the CTIP of the sidechain.\n+|-\n+| 3\n+| Sidechain Private Key\n+| string\n+| The private key of the sidechain deposit script.\n+|-\n+| 4\n+| Escrow Name\n+| string\n+| A human-readable name of the sidechain.\n+|-\n+| 5\n+| Escrow Description\n+| string\n+| A human-readable name description of the sidechain. More than enough space to hold a 32 byte hash.\n+|-\n+| 6\n+| Hash ID 1\n+| uint256\n+| A field of 32 bytes, which could be any bytes such as a sha256 hash.\n+|-\n+| 7\n+| Hash ID 2\n+| uint256\n+| A field of 32 bytes, which could be any bytes such as a sha256 hash.\n+|-\n+| 8\n+| \"CTIP\" -- Part 1 \"TxID\"\n+| uint256\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 9\n+| \"CTIP\" -- Part 2 \"Index\"\n+| int32_t\n+| Of the CTIP, this is second element of the pair: the Index. See #9 above.\n+|-\n+|}\n+\n+D1 is updated via M1 and M2.\n+\n+( The following messages were modeled on SegWit -- see [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure here] and [https://github.com/DriveNetTESTDRIVE/DriveNet/blob/564516653c1d876429382971a011f5f6119f7eb4/src/validation.cpp#L3348-L3375 here]. )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    4-byte - Commitment header (0xD5E0C4AF)\n+    N-byte - The serialization of the sidechain.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    4-byte - Commitment header (0xD6E1C5BF)\n+    32-byte - Commitment hash: sha256D hash of sidechain's serialization\n+\n+==== New Block Validation Rules ====\n+\n+\n+# Escrows are added in a procedure that resembles BIP 9 soft fork activation: the network must see a properly-formatted M1, followed by \"acknowledgement\" of the sidechain in 95% of the following 2016 blocks.\n+# It is possible to \"overwrite\" an escrow. This requires 6 months (26298 blocks) of M2s, instead of 2 weeks (XXXX). This possibility does not change the security assumptions (because we already assume that users perform extra-protocolic validation at a rate of 1 bit per 26298 blocks).\n+\n+\n+\n+=== Withdrawing from Escrows (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+D2 changes deterministically with respect to M3, M4, M5, and M6.\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| uint8_t\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^ Hash\n+| uint256\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs (Work Score)\n+| uint16_t\n+| The current total number of ACKs (PoW)\n+|-\n+| 4\n+| Blocks Remaining (Age)\n+| uint16_t\n+| The number of blocks which this WT^ has remaining to accumulate ACKs\n+|}\n+\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# A hash commitment to D2 exists in each block (even if D2 is blank).\n+# Withdrawals in D2 are sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, \"Age\" fields must increase by exactly 1.\n+# Withdrawals are stored in D2 until they fail (\"Age\" = \"MaxAge\"), or they succeed (the blockchain contains a txn whose blinded txID matches \"WT^\").\n+\n+In addition, there are special rules for the \"ACKs\" field (see M4 below).\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 36 bytes (0x24)\n+    4-byte - Commitment header (0xD45AA943)\n+    32-byte - The WT^ hash to populate a new D2 entry\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+M4 is a way of describing changes to the \"ACKs\" column of D2.\n+\n+From one block to the next, \"ACKs\" can only change as follows:\n+\n+* The ACK-counter of any withdrawal can only change by (-1,0,+1).\n+* Within a sidechain-group, upvoting one withdrawal (\"+1\") requires you to downvote all other withdrawals in that group. However, the minimum ACK-value is zero (and, therefore, downvotes cannot reduce it below zero).\n+* While only one withdrawal can be upvoted at once, they can all be unchangd at once (\"abstain\") and they can all be downvoted at once (\"alarm\").\n+\n+One option for explict transmission of M4 is:\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    1-byte - Length (in bytes) of this message; total number of withdrawal attempts; y = ceiling( sum_i(m_i +2)/8 ). Nodes should already know what length to expect, because they know the sequence of M3s and therefore the vector of WT^s.\n+    N-byte - stream of bits (not bytes), with a 1 indicating the position of the chosen action [downvote all, abstain, upvote1, upvote2, ...]\n+\n+But sometimes M4 does not need to be transmitted at all! If there are n Escrows and m Withdrawals-per-escrow, then there are (m+2)^n total candidates for the next D2. So, when m and n are low, all of the possible D2s can be trivially computed in advance.\n+\n+Miners can impose a \"soft limit\" on m, blocking new withdrawal-attempts until previous ones expire. For a worst-case scenario of n=200 and m=1,000, honest nodes can communicate M4 with ~25 KB per block [4+1+1+(200\\*(1000+1+1)/8)]. \n+\n+\n+=== Depositing and Withdrawing (M5, M6) ===\n+\n+Both M5 and M6 are regular Bitcoin txns. They are identified by meeting an important criteria: they select a one of the Critical TxID-index Pairs (a \"CTIP\") as one of their inputs.\n+\n+Just as these txns must select a CTIP input, they must create a new CTIP output. D1 is then updated to match only the latest CTIP output. The purpose of this is to have all of the escrow's money (ie all of the sidechain's money) in one TxID, so that depositors immediately undo any UTXO bloat they may cause. \n+\n+Deposits (\"M5\") are distinguished from withdrawals (\"M6\") by simply checking to see if money is \"going in\", or \"out\".\n+\n+https://github.com/DriveNetTESTDRIVE/DriveNet/blob/564516653c1d876429382971a011f5f6119f7eb4/src/validation.cpp#L647-L742\n+\n+\n+==== M5. \"Make a Deposit\" -- a transfer of BTC from-main-to-side ====\n+\n+As far as mainchain consensus is concerned, deposits to the escrow are always valid.\n+\n+However, in practice there will be additional requirements. The escrow account (ie the \"sidechain\") needs to know how to credit depositors. One well-known method, is for mainchain depositors to append a zero-value OP Return to a Deposit txn, so that the sidechain knows how to credit funds. Mainchain users must upgrade their wallet software, of course, (on an individual basis) in order to become aware of and take advantage of new deposit-methods.\n+\n+\n+\n+==== M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main ====\n+\n+We come, finally, to the critical matter: where users can take their money *out* of the escrow account, and return it to the \"regular\" UTXO set. As previously mentioned, this txn is one which (a) spends from a CTIP and (b) reduces the quantity of BTC in an account's CTIP. Most of the work has already been done by D1, M3, M4, and D2. Furthermore, existing Bitcoin tx-rules prevent the sidechain from ever withdrawing more money than has been placed into it.\n+\n+In each block, a withdrawal in D2 is considered \"approved\" if its \"ACKs\" value meets the threshold (13,150).\n+\n+Approved withdrawals give the green light to their respective \"WT^\". A \"WT^\" is 32-bytes which aspire to represent the withdrawing transtion (the txn that actually withdraws funds from the escrow). The two cannot match exactly, beacuse \"WT^\" is defined at onset, and the withdrawing TxID depends on the its CTIP input (which is constantly changing).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 256,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "dd6a747cb34721d2ee1a762956bb8c5dc2613704",
      "in_reply_to_id": 272446041,
      "user": {
        "login": "rex4539",
        "id": 227442,
        "node_id": "MDQ6VXNlcjIyNzQ0Mg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/227442?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rex4539",
        "html_url": "https://github.com/rex4539",
        "followers_url": "https://api.github.com/users/rex4539/followers",
        "following_url": "https://api.github.com/users/rex4539/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rex4539/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rex4539/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rex4539/subscriptions",
        "organizations_url": "https://api.github.com/users/rex4539/orgs",
        "repos_url": "https://api.github.com/users/rex4539/repos",
        "events_url": "https://api.github.com/users/rex4539/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rex4539/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo: \"beacuse\"",
      "created_at": "2019-04-05T05:12:27Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r272446124",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272446124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272670834",
      "pull_request_review_id": 223382840,
      "id": 272670834,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjY3MDgzNA==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf the 2014 Blockstream whitepaper].\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by the accumulation of hashpower over time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html an FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+# Protect Bitcoin from competition from altcoins and spinoffs.\n+# Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+# Help with review, by making it much easier for reviewers to ignore bad ideas.\n+# Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+\n+\n+=== Adding Sidechains (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| uint8_t\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Sidechain Deposit Script Hex\n+| string\n+| The script that will be deposited to, and update the CTIP of the sidechain.\n+|-\n+| 3\n+| Sidechain Private Key\n+| string\n+| The private key of the sidechain deposit script.\n+|-\n+| 4\n+| Escrow Name\n+| string\n+| A human-readable name of the sidechain.\n+|-\n+| 5\n+| Escrow Description\n+| string\n+| A human-readable name description of the sidechain. More than enough space to hold a 32 byte hash.\n+|-\n+| 6\n+| Hash ID 1\n+| uint256\n+| A field of 32 bytes, which could be any bytes such as a sha256 hash.\n+|-\n+| 7\n+| Hash ID 2\n+| uint256\n+| A field of 32 bytes, which could be any bytes such as a sha256 hash.\n+|-\n+| 8\n+| \"CTIP\" -- Part 1 \"TxID\"\n+| uint256\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 9\n+| \"CTIP\" -- Part 2 \"Index\"\n+| int32_t\n+| Of the CTIP, this is second element of the pair: the Index. See #9 above.\n+|-\n+|}\n+\n+D1 is updated via M1 and M2.\n+\n+( The following messages were modeled on SegWit -- see [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure here] and [https://github.com/DriveNetTESTDRIVE/DriveNet/blob/564516653c1d876429382971a011f5f6119f7eb4/src/validation.cpp#L3348-L3375 here]. )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    4-byte - Commitment header (0xD5E0C4AF)\n+    N-byte - The serialization of the sidechain.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    4-byte - Commitment header (0xD6E1C5BF)\n+    32-byte - Commitment hash: sha256D hash of sidechain's serialization\n+\n+==== New Block Validation Rules ====\n+\n+\n+# Escrows are added in a procedure that resembles BIP 9 soft fork activation: the network must see a properly-formatted M1, followed by \"acknowledgement\" of the sidechain in 95% of the following 2016 blocks.\n+# It is possible to \"overwrite\" an escrow. This requires 6 months (26298 blocks) of M2s, instead of 2 weeks (XXXX). This possibility does not change the security assumptions (because we already assume that users perform extra-protocolic validation at a rate of 1 bit per 26298 blocks).\n+\n+\n+\n+=== Withdrawing from Escrows (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+D2 changes deterministically with respect to M3, M4, M5, and M6.\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| uint8_t\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^ Hash\n+| uint256\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs (Work Score)\n+| uint16_t\n+| The current total number of ACKs (PoW)\n+|-\n+| 4\n+| Blocks Remaining (Age)\n+| uint16_t\n+| The number of blocks which this WT^ has remaining to accumulate ACKs\n+|}\n+\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# A hash commitment to D2 exists in each block (even if D2 is blank).\n+# Withdrawals in D2 are sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, \"Age\" fields must increase by exactly 1.\n+# Withdrawals are stored in D2 until they fail (\"Age\" = \"MaxAge\"), or they succeed (the blockchain contains a txn whose blinded txID matches \"WT^\").\n+\n+In addition, there are special rules for the \"ACKs\" field (see M4 below).\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 36 bytes (0x24)\n+    4-byte - Commitment header (0xD45AA943)\n+    32-byte - The WT^ hash to populate a new D2 entry\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+M4 is a way of describing changes to the \"ACKs\" column of D2.\n+\n+From one block to the next, \"ACKs\" can only change as follows:\n+\n+* The ACK-counter of any withdrawal can only change by (-1,0,+1).\n+* Within a sidechain-group, upvoting one withdrawal (\"+1\") requires you to downvote all other withdrawals in that group. However, the minimum ACK-value is zero (and, therefore, downvotes cannot reduce it below zero).\n+* While only one withdrawal can be upvoted at once, they can all be unchangd at once (\"abstain\") and they can all be downvoted at once (\"alarm\").",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 217,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "dd6a747cb34721d2ee1a762956bb8c5dc2613704",
      "in_reply_to_id": 272445906,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks",
      "created_at": "2019-04-05T17:02:58Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r272670834",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272670834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272670867",
      "pull_request_review_id": 223382886,
      "id": 272670867,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjY3MDg2Nw==",
      "diff_hunk": "@@ -0,0 +1,20 @@\n+\n+==== Two Withdrawals at Once ====\n+\n+Currently, the documentation and code describe a situation where only one withdrawal can proceed at a time.\n+\n+In other words, as WT^s are proposed, only one can make progress toward the finish line. As a result, a given side-to-main transfer will always take between 3 and 6 months.\n+\n+However, it might be best to use a maximum of two transfers at once.\n+\n+If there were more simulataneous withdrawals, the worst-case transfer duration would improve.\n+\n+See image: bip-hashrate-escrows/two-groups.png?raw=true\n+\n+The worst-case withdrawal time obeys f(n)=3+(3/n) months, where n is the number of simultaneous withdrawals.\n+\n+N=2 is the most desirable choice for several reasons. First, it delievers the greatest marginal benefit (of 1.5 months). Later choices only deliver 0.5 and 0.25 marginal months.",
      "path": "bip-hashrate-escrows/appendix-1.txt",
      "position": null,
      "original_position": 16,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "dd6a747cb34721d2ee1a762956bb8c5dc2613704",
      "in_reply_to_id": 272445688,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks",
      "created_at": "2019-04-05T17:03:05Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r272670867",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272670867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272670915",
      "pull_request_review_id": 223382933,
      "id": 272670915,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjY3MDkxNQ==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf the 2014 Blockstream whitepaper].\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by the accumulation of hashpower over time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html an FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+# Protect Bitcoin from competition from altcoins and spinoffs.\n+# Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+# Help with review, by making it much easier for reviewers to ignore bad ideas.\n+# Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+\n+\n+=== Adding Sidechains (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| uint8_t\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Sidechain Deposit Script Hex\n+| string\n+| The script that will be deposited to, and update the CTIP of the sidechain.\n+|-\n+| 3\n+| Sidechain Private Key\n+| string\n+| The private key of the sidechain deposit script.\n+|-\n+| 4\n+| Escrow Name\n+| string\n+| A human-readable name of the sidechain.\n+|-\n+| 5\n+| Escrow Description\n+| string\n+| A human-readable name description of the sidechain. More than enough space to hold a 32 byte hash.\n+|-\n+| 6\n+| Hash ID 1\n+| uint256\n+| A field of 32 bytes, which could be any bytes such as a sha256 hash.\n+|-\n+| 7\n+| Hash ID 2\n+| uint256\n+| A field of 32 bytes, which could be any bytes such as a sha256 hash.\n+|-\n+| 8\n+| \"CTIP\" -- Part 1 \"TxID\"\n+| uint256\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 9\n+| \"CTIP\" -- Part 2 \"Index\"\n+| int32_t\n+| Of the CTIP, this is second element of the pair: the Index. See #9 above.\n+|-\n+|}\n+\n+D1 is updated via M1 and M2.\n+\n+( The following messages were modeled on SegWit -- see [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure here] and [https://github.com/DriveNetTESTDRIVE/DriveNet/blob/564516653c1d876429382971a011f5f6119f7eb4/src/validation.cpp#L3348-L3375 here]. )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    4-byte - Commitment header (0xD5E0C4AF)\n+    N-byte - The serialization of the sidechain.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    4-byte - Commitment header (0xD6E1C5BF)\n+    32-byte - Commitment hash: sha256D hash of sidechain's serialization\n+\n+==== New Block Validation Rules ====\n+\n+\n+# Escrows are added in a procedure that resembles BIP 9 soft fork activation: the network must see a properly-formatted M1, followed by \"acknowledgement\" of the sidechain in 95% of the following 2016 blocks.\n+# It is possible to \"overwrite\" an escrow. This requires 6 months (26298 blocks) of M2s, instead of 2 weeks (XXXX). This possibility does not change the security assumptions (because we already assume that users perform extra-protocolic validation at a rate of 1 bit per 26298 blocks).\n+\n+\n+\n+=== Withdrawing from Escrows (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+D2 changes deterministically with respect to M3, M4, M5, and M6.\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| uint8_t\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^ Hash\n+| uint256\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs (Work Score)\n+| uint16_t\n+| The current total number of ACKs (PoW)\n+|-\n+| 4\n+| Blocks Remaining (Age)\n+| uint16_t\n+| The number of blocks which this WT^ has remaining to accumulate ACKs\n+|}\n+\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# A hash commitment to D2 exists in each block (even if D2 is blank).\n+# Withdrawals in D2 are sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, \"Age\" fields must increase by exactly 1.\n+# Withdrawals are stored in D2 until they fail (\"Age\" = \"MaxAge\"), or they succeed (the blockchain contains a txn whose blinded txID matches \"WT^\").\n+\n+In addition, there are special rules for the \"ACKs\" field (see M4 below).\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 36 bytes (0x24)\n+    4-byte - Commitment header (0xD45AA943)\n+    32-byte - The WT^ hash to populate a new D2 entry\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+M4 is a way of describing changes to the \"ACKs\" column of D2.\n+\n+From one block to the next, \"ACKs\" can only change as follows:\n+\n+* The ACK-counter of any withdrawal can only change by (-1,0,+1).\n+* Within a sidechain-group, upvoting one withdrawal (\"+1\") requires you to downvote all other withdrawals in that group. However, the minimum ACK-value is zero (and, therefore, downvotes cannot reduce it below zero).\n+* While only one withdrawal can be upvoted at once, they can all be unchangd at once (\"abstain\") and they can all be downvoted at once (\"alarm\").\n+\n+One option for explict transmission of M4 is:",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 219,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "dd6a747cb34721d2ee1a762956bb8c5dc2613704",
      "in_reply_to_id": 272445943,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks",
      "created_at": "2019-04-05T17:03:14Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r272670915",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272670915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272670955",
      "pull_request_review_id": 223382980,
      "id": 272670955,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjY3MDk1NQ==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+\n+\n+<pre>\n+    BIP: ????\n+    Layer: Consensus (soft fork)\n+    Title: Hashrate Escrows (Consensus layer)\n+    Author: Paul Sztorc <truthcoin@gmail.com>\n+            CryptAxe <cryptaxe@gmail.com>\n+    Comments-Summary: No comments yet.\n+    Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???????\n+    Status: Draft\n+    Type: Standards Track\n+    Created: 2017-08-14\n+    License: BSD-2-Clause\n+    Post-History: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014364.html\n+</pre>\n+\n+==Abstract==\n+\n+A \"Hashrate Escrow\" is a clearer term for the concept of \"locked to an SPV Proof\", which is itself a restatement of the phrase \"within a sidechain\" as described in [https://blockstream.com/sidechains.pdf the 2014 Blockstream whitepaper].\n+\n+A Hashrate Escrow resembles a 2-of-3 multisig escrow, where the 3rd party (who will arbitrate any disputes) is a decentralized group of people: the dynamic-membership set of Bitcoin Miners. However, the 3rd party does not sign escrow-withdrawal transactions with a private key. Instead, these are \"signed\" by the accumulation of hashpower over time.\n+\n+This project has [http://www.drivechain.info/ a website] which includes [http://www.drivechain.info/faq/index.html an FAQ].\n+\n+\n+==Motivation==\n+\n+In practice these escrows are likely to be \"asymmetric sidechains\" of Bitcoin (such as [http://www.rsk.co/ Rootstock]) or \"virtual chains\" within Bitcoin (such as [https://github.com/blockstack/virtualchain proposed by Blockstack] in mid-2016).\n+\n+Sidechains have many potential benefits, including:\n+\n+# Protect Bitcoin from competition from altcoins and spinoffs.\n+# Protect Bitcoin from hard fork campaigns. (Such campaigns represent an existential threat to Bitcoin, as well as an avenue for developer corruption.)\n+# Help with review, by making it much easier for reviewers to ignore bad ideas.\n+# Provide an avenue for good-but-confusing ideas to prove their value safely.\n+\n+\n+\n+==Specification==\n+\n+==== Components ====\n+\n+Hashrate Escrows are built of two types of component: [1] new databases, and [2] new message-interpretations.\n+\n+===== 1. New Databases =====\n+\n+* D1. \"Escrow_DB\" -- a database of \"accounts\" and their attributes.\n+* D2. \"Withdrawal_DB\" -- a database of pending withdrawals from these accounts, and their statuses.\n+\n+Please note that these structures (D1 and D2) will not literally exist anywhere in the blockchain. Instead they are constructed from messages...these messages, in contrast, *will* exist in the blockchain (with the exception of M4). \n+\n+===== 2. New Messages =====\n+\n+* M1. \"Propose New Escrow\"\n+* M2. \"ACK Escrow Proposal\"\n+* M3. \"Propose Withdrawal\"\n+* M4. (implied) \"ACK Withdrawal\"\n+* M5. \"Execute Deposit\"   -- a transfer of BTC from-main-to-side\n+* M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main\n+\n+\n+\n+\n+=== Adding Sidechains (D1, M1, M2) ===\n+\n+==== D1 -- \"Escrow_DB\" ====\n+\n+The table below enumerates the new database fields, their size in bytes, and their purpose. In general, an escrow designer (for example, a sidechain-designer), is free to choose any value for these.\n+\n+\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| uint8_t\n+| A number assigned to the entire escrow. Used to make it easy to refer to each escrow.\n+|-\n+| 2\n+| Sidechain Deposit Script Hex\n+| string\n+| The script that will be deposited to, and update the CTIP of the sidechain.\n+|-\n+| 3\n+| Sidechain Private Key\n+| string\n+| The private key of the sidechain deposit script.\n+|-\n+| 4\n+| Escrow Name\n+| string\n+| A human-readable name of the sidechain.\n+|-\n+| 5\n+| Escrow Description\n+| string\n+| A human-readable name description of the sidechain. More than enough space to hold a 32 byte hash.\n+|-\n+| 6\n+| Hash ID 1\n+| uint256\n+| A field of 32 bytes, which could be any bytes such as a sha256 hash.\n+|-\n+| 7\n+| Hash ID 2\n+| uint256\n+| A field of 32 bytes, which could be any bytes such as a sha256 hash.\n+|-\n+| 8\n+| \"CTIP\" -- Part 1 \"TxID\"\n+| uint256\n+| The CTIP, or \"Critical (TxID, Index) Pair\" is a variable for keeping track of where the escrow's money is (ie, which member of the UTXO set).\n+|-\n+| 9\n+| \"CTIP\" -- Part 2 \"Index\"\n+| int32_t\n+| Of the CTIP, this is second element of the pair: the Index. See #9 above.\n+|-\n+|}\n+\n+D1 is updated via M1 and M2.\n+\n+( The following messages were modeled on SegWit -- see [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure here] and [https://github.com/DriveNetTESTDRIVE/DriveNet/blob/564516653c1d876429382971a011f5f6119f7eb4/src/validation.cpp#L3348-L3375 here]. )\n+\n+\n+==== M1 -- \"Propose New Sidechain\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    4-byte - Commitment header (0xD5E0C4AF)\n+    N-byte - The serialization of the sidechain.\n+\n+\n+==== M2 -- \"ACK Sidechain Proposal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    4-byte - Commitment header (0xD6E1C5BF)\n+    32-byte - Commitment hash: sha256D hash of sidechain's serialization\n+\n+==== New Block Validation Rules ====\n+\n+\n+# Escrows are added in a procedure that resembles BIP 9 soft fork activation: the network must see a properly-formatted M1, followed by \"acknowledgement\" of the sidechain in 95% of the following 2016 blocks.\n+# It is possible to \"overwrite\" an escrow. This requires 6 months (26298 blocks) of M2s, instead of 2 weeks (XXXX). This possibility does not change the security assumptions (because we already assume that users perform extra-protocolic validation at a rate of 1 bit per 26298 blocks).\n+\n+\n+\n+=== Withdrawing from Escrows (D2, M3, M4) ===\n+\n+==== D2 -- \"Withdrawal_DB\" ====\n+\n+D2 changes deterministically with respect to M3, M4, M5, and M6.\n+\n+{| class=\"wikitable\"\n+! Field No.\n+! Label\n+! Type\n+! Description / Purpose\n+|-\n+| 1\n+| Escrow Number\n+| uint8_t\n+| Links the withdrawal-request to a specific escrow.\n+|-\n+| 2\n+| WT^ Hash\n+| uint256\n+| This is a \"blinded transaction id\" (ie, the double-Sha256 of a txn that has had two fields zeroed out, see M6) of a withdrawal-attempt.\n+|-\n+| 3\n+| ACKs (Work Score)\n+| uint16_t\n+| The current total number of ACKs (PoW)\n+|-\n+| 4\n+| Blocks Remaining (Age)\n+| uint16_t\n+| The number of blocks which this WT^ has remaining to accumulate ACKs\n+|}\n+\n+\n+==== New Block Validation Rules for D2 ====\n+\n+# A hash commitment to D2 exists in each block (even if D2 is blank).\n+# Withdrawals in D2 are sorted first by field #1 (Escrow Number) and second by field #4 (Age). This imposes a unique sort.\n+# From one block to the next, \"Age\" fields must increase by exactly 1.\n+# Withdrawals are stored in D2 until they fail (\"Age\" = \"MaxAge\"), or they succeed (the blockchain contains a txn whose blinded txID matches \"WT^\").\n+\n+In addition, there are special rules for the \"ACKs\" field (see M4 below).\n+\n+==== M3 -- \"Propose Withdrawal\" ====\n+\n+    1-byte - OP_RETURN (0x6a)\n+    1-byte - Push the following 36 bytes (0x24)\n+    4-byte - Commitment header (0xD45AA943)\n+    32-byte - The WT^ hash to populate a new D2 entry\n+\n+\n+==== New Block Validation Rules for M3 ====\n+\n+# If the network detects a properly-formatted M3, it must add an entry to D2 in the very next block. The starting values of fields #3 and #4 are zero, and #5 is pulled over by extracting the relevant value from D1.\n+# Each block can only contain one M3 per sidechain.\n+\n+\n+==== M4 -- \"ACK Withdrawal\" ====\n+\n+M4 is a way of describing changes to the \"ACKs\" column of D2.\n+\n+From one block to the next, \"ACKs\" can only change as follows:\n+\n+* The ACK-counter of any withdrawal can only change by (-1,0,+1).\n+* Within a sidechain-group, upvoting one withdrawal (\"+1\") requires you to downvote all other withdrawals in that group. However, the minimum ACK-value is zero (and, therefore, downvotes cannot reduce it below zero).\n+* While only one withdrawal can be upvoted at once, they can all be unchangd at once (\"abstain\") and they can all be downvoted at once (\"alarm\").\n+\n+One option for explict transmission of M4 is:\n+\n+    4-byte - Message identifier (0x????????)\n+    1-byte - Version of this message\n+    1-byte - Length (in bytes) of this message; total number of withdrawal attempts; y = ceiling( sum_i(m_i +2)/8 ). Nodes should already know what length to expect, because they know the sequence of M3s and therefore the vector of WT^s.\n+    N-byte - stream of bits (not bytes), with a 1 indicating the position of the chosen action [downvote all, abstain, upvote1, upvote2, ...]\n+\n+But sometimes M4 does not need to be transmitted at all! If there are n Escrows and m Withdrawals-per-escrow, then there are (m+2)^n total candidates for the next D2. So, when m and n are low, all of the possible D2s can be trivially computed in advance.\n+\n+Miners can impose a \"soft limit\" on m, blocking new withdrawal-attempts until previous ones expire. For a worst-case scenario of n=200 and m=1,000, honest nodes can communicate M4 with ~25 KB per block [4+1+1+(200\\*(1000+1+1)/8)]. \n+\n+\n+=== Depositing and Withdrawing (M5, M6) ===\n+\n+Both M5 and M6 are regular Bitcoin txns. They are identified by meeting an important criteria: they select a one of the Critical TxID-index Pairs (a \"CTIP\") as one of their inputs.\n+\n+Just as these txns must select a CTIP input, they must create a new CTIP output. D1 is then updated to match only the latest CTIP output. The purpose of this is to have all of the escrow's money (ie all of the sidechain's money) in one TxID, so that depositors immediately undo any UTXO bloat they may cause. \n+\n+Deposits (\"M5\") are distinguished from withdrawals (\"M6\") by simply checking to see if money is \"going in\", or \"out\".\n+\n+https://github.com/DriveNetTESTDRIVE/DriveNet/blob/564516653c1d876429382971a011f5f6119f7eb4/src/validation.cpp#L647-L742\n+\n+\n+==== M5. \"Make a Deposit\" -- a transfer of BTC from-main-to-side ====\n+\n+As far as mainchain consensus is concerned, deposits to the escrow are always valid.\n+\n+However, in practice there will be additional requirements. The escrow account (ie the \"sidechain\") needs to know how to credit depositors. One well-known method, is for mainchain depositors to append a zero-value OP Return to a Deposit txn, so that the sidechain knows how to credit funds. Mainchain users must upgrade their wallet software, of course, (on an individual basis) in order to become aware of and take advantage of new deposit-methods.\n+\n+\n+\n+==== M6. \"Execute Withdrawal\" -- a transfer of BTC from-side-to-main ====\n+\n+We come, finally, to the critical matter: where users can take their money *out* of the escrow account, and return it to the \"regular\" UTXO set. As previously mentioned, this txn is one which (a) spends from a CTIP and (b) reduces the quantity of BTC in an account's CTIP. Most of the work has already been done by D1, M3, M4, and D2. Furthermore, existing Bitcoin tx-rules prevent the sidechain from ever withdrawing more money than has been placed into it.\n+\n+In each block, a withdrawal in D2 is considered \"approved\" if its \"ACKs\" value meets the threshold (13,150).\n+\n+Approved withdrawals give the green light to their respective \"WT^\". A \"WT^\" is 32-bytes which aspire to represent the withdrawing transtion (the txn that actually withdraws funds from the escrow). The two cannot match exactly, beacuse \"WT^\" is defined at onset, and the withdrawing TxID depends on the its CTIP input (which is constantly changing).",
      "path": "bip-hashrate-escrows.mediawiki",
      "position": null,
      "original_position": 256,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "dd6a747cb34721d2ee1a762956bb8c5dc2613704",
      "in_reply_to_id": 272446041,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks",
      "created_at": "2019-04-05T17:03:20Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r272670955",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272670955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272670994",
      "pull_request_review_id": 223383020,
      "id": 272670994,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjY3MDk5NA==",
      "diff_hunk": "@@ -0,0 +1,20 @@\n+\n+==== Two Withdrawals at Once ====\n+\n+Currently, the documentation and code describe a situation where only one withdrawal can proceed at a time.\n+\n+In other words, as WT^s are proposed, only one can make progress toward the finish line. As a result, a given side-to-main transfer will always take between 3 and 6 months.\n+\n+However, it might be best to use a maximum of two transfers at once.\n+\n+If there were more simulataneous withdrawals, the worst-case transfer duration would improve.",
      "path": "bip-hashrate-escrows/appendix-1.txt",
      "position": null,
      "original_position": 10,
      "commit_id": "34f0fe5b2af4f7c82fbe6ed0706bbb3feef94acf",
      "original_commit_id": "dd6a747cb34721d2ee1a762956bb8c5dc2613704",
      "in_reply_to_id": 272445641,
      "user": {
        "login": "psztorc",
        "id": 3165891,
        "node_id": "MDQ6VXNlcjMxNjU4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3165891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psztorc",
        "html_url": "https://github.com/psztorc",
        "followers_url": "https://api.github.com/users/psztorc/followers",
        "following_url": "https://api.github.com/users/psztorc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/psztorc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/psztorc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/psztorc/subscriptions",
        "organizations_url": "https://api.github.com/users/psztorc/orgs",
        "repos_url": "https://api.github.com/users/psztorc/repos",
        "events_url": "https://api.github.com/users/psztorc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/psztorc/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks",
      "created_at": "2019-04-05T17:03:28Z",
      "updated_at": "2019-09-20T17:56:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/642#discussion_r272670994",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/272670994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/642"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    }
  ]
}