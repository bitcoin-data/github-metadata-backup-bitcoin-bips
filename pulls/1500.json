{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1500",
    "id": 1536572316,
    "node_id": "PR_kwDOAN28mc5bljuc",
    "html_url": "https://github.com/bitcoin/bips/pull/1500",
    "diff_url": "https://github.com/bitcoin/bips/pull/1500.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1500.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1500",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1500/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/245c0b96463620a69a73a402f92987e8a52d8eed",
    "number": 1500,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Add BIP for OP_TXHASH and OP_CHECKTXHASHVERIFY",
    "user": {
      "login": "stevenroose",
      "id": 853468,
      "node_id": "MDQ6VXNlcjg1MzQ2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stevenroose",
      "html_url": "https://github.com/stevenroose",
      "followers_url": "https://api.github.com/users/stevenroose/followers",
      "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
      "organizations_url": "https://api.github.com/users/stevenroose/orgs",
      "repos_url": "https://api.github.com/users/stevenroose/repos",
      "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/stevenroose/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\r\n\r\n\r\n## Semantic changes\r\n\r\nI thought it might be valuable to keep track of actual semantic changes being made since the initial out-of-draft version.\r\n\r\n* 2023-12-19: Added relative indices for individual mode.\r\n\r\n\r\n\r\n## Implementations \r\n\r\n* A proposed implementation for Bitcoin Core is available here:\r\n  https://github.com/bitcoin/bitcoin/pull/29050\r\n* A proposed implementation for rust-bitcoin is available here:\r\n  https://github.com/rust-bitcoin/rust-bitcoin/pull/2275\r\n",
    "labels": [],
    "created_at": "2023-09-30T11:40:55Z",
    "updated_at": "2024-01-01T23:31:00Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merge_commit_sha": "6ea9a9d3818a737a0c4e4ce6fe007be7febca91b",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "stevenroose:txhash",
      "ref": "txhash",
      "sha": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 15035550,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNTAzNTU1MA==",
        "name": "bips",
        "full_name": "stevenroose/bips",
        "owner": {
          "login": "stevenroose",
          "id": 853468,
          "node_id": "MDQ6VXNlcjg1MzQ2OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stevenroose",
          "html_url": "https://github.com/stevenroose",
          "followers_url": "https://api.github.com/users/stevenroose/followers",
          "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
          "organizations_url": "https://api.github.com/users/stevenroose/orgs",
          "repos_url": "https://api.github.com/users/stevenroose/repos",
          "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/stevenroose/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/stevenroose/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/stevenroose/bips",
        "archive_url": "https://api.github.com/repos/stevenroose/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/stevenroose/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/stevenroose/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/stevenroose/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/stevenroose/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/stevenroose/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/stevenroose/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/stevenroose/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/stevenroose/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/stevenroose/bips/contributors",
        "deployments_url": "https://api.github.com/repos/stevenroose/bips/deployments",
        "downloads_url": "https://api.github.com/repos/stevenroose/bips/downloads",
        "events_url": "https://api.github.com/repos/stevenroose/bips/events",
        "forks_url": "https://api.github.com/repos/stevenroose/bips/forks",
        "git_commits_url": "https://api.github.com/repos/stevenroose/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/stevenroose/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/stevenroose/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/stevenroose/bips.git",
        "issue_comment_url": "https://api.github.com/repos/stevenroose/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/stevenroose/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/stevenroose/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/stevenroose/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/stevenroose/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/stevenroose/bips/languages",
        "merges_url": "https://api.github.com/repos/stevenroose/bips/merges",
        "milestones_url": "https://api.github.com/repos/stevenroose/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/stevenroose/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/stevenroose/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/stevenroose/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:stevenroose/bips.git",
        "stargazers_url": "https://api.github.com/repos/stevenroose/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/stevenroose/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/stevenroose/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/stevenroose/bips/subscription",
        "tags_url": "https://api.github.com/repos/stevenroose/bips/tags",
        "teams_url": "https://api.github.com/repos/stevenroose/bips/teams",
        "trees_url": "https://api.github.com/repos/stevenroose/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/stevenroose/bips.git",
        "hooks_url": "https://api.github.com/repos/stevenroose/bips/hooks",
        "svn_url": "https://github.com/stevenroose/bips",
        "homepage": "bitcoin.org",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 13675,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-12-19T13:16:19Z",
        "created_at": "2013-12-09T01:50:33Z",
        "updated_at": "2016-01-11T09:56:15Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "9c57fac1a71d20f693607c2490dec9011c205ab5",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5689,
        "stargazers_count": 8565,
        "watchers_count": 8565,
        "size": 13739,
        "default_branch": "master",
        "open_issues_count": 127,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-12-29T23:29:02Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2024-01-01T21:41:15Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 2469,
    "deletions": 0,
    "changed_files": 4,
    "commits": 1,
    "review_comments": 15,
    "comments": 2
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 10517205429,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAJy39G1",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10517205429",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-30T11:44:01Z"
    },
    {
      "event": "reviewed",
      "id": 1691790241,
      "node_id": "PRR_kwDOAN28mc5k1quh",
      "url": null,
      "actor": null,
      "commit_id": "ec98a85061eb9d5bf853470a469ab841f3da7916",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-1691790241",
      "submitted_at": "2023-10-23T06:35:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "commented",
      "id": 1775541954,
      "node_id": "IC_kwDOAN28mc5p1J7C",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1775541954",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-23T16:11:38Z",
      "updated_at": "2023-10-23T16:11:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Alternatively, but slightly even more complicating the cases, since the first two fields (version, locktime), are not very valuable without anything else (especially since we have `OP_CLTV`), we could introduce four special-cased bytes to mimick other popular SIGHASH modes: 0x00, 0x01, 0x02 and 0x03. Though locktime might be useful with `OP_TX` at some point. So I would argue against that. Mimicking \"regular\" sighashes isn't super useful in the first place because any system that expects to use regular sighashes can use current regular schnorr keys.",
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#issuecomment-1775541954",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1500"
    },
    {
      "event": "mentioned",
      "id": 10749745486,
      "node_id": "MEE_lADOAN28mc5ydFO8zwAAAAKAvBlO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749745486",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T06:36:54Z"
    },
    {
      "event": "subscribed",
      "id": 10749745493,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAAKAvBlV",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749745493",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T06:36:54Z"
    },
    {
      "event": "mentioned",
      "id": 10749745509,
      "node_id": "MEE_lADOAN28mc5ydFO8zwAAAAKAvBll",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749745509",
      "actor": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T06:36:54Z"
    },
    {
      "event": "subscribed",
      "id": 10749745519,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAAKAvBlv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749745519",
      "actor": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T06:36:54Z"
    },
    {
      "event": "mentioned",
      "id": 10749745526,
      "node_id": "MEE_lADOAN28mc5ydFO8zwAAAAKAvBl2",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749745526",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T06:36:54Z"
    },
    {
      "event": "subscribed",
      "id": 10749745536,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAAKAvBmA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749745536",
      "actor": {
        "login": "roconnor-blockstream",
        "id": 21371712,
        "node_id": "MDQ6VXNlcjIxMzcxNzEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21371712?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roconnor-blockstream",
        "html_url": "https://github.com/roconnor-blockstream",
        "followers_url": "https://api.github.com/users/roconnor-blockstream/followers",
        "following_url": "https://api.github.com/users/roconnor-blockstream/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roconnor-blockstream/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roconnor-blockstream/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roconnor-blockstream/subscriptions",
        "organizations_url": "https://api.github.com/users/roconnor-blockstream/orgs",
        "repos_url": "https://api.github.com/users/roconnor-blockstream/repos",
        "events_url": "https://api.github.com/users/roconnor-blockstream/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roconnor-blockstream/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T06:36:54Z"
    },
    {
      "event": "reviewed",
      "id": 1694118285,
      "node_id": "PRR_kwDOAN28mc5k-jGN",
      "url": null,
      "actor": null,
      "commit_id": "ec98a85061eb9d5bf853470a469ab841f3da7916",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "sennhann29",
        "id": 139481458,
        "node_id": "U_kgDOCFBRcg",
        "avatar_url": "https://avatars.githubusercontent.com/u/139481458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sennhann29",
        "html_url": "https://github.com/sennhann29",
        "followers_url": "https://api.github.com/users/sennhann29/followers",
        "following_url": "https://api.github.com/users/sennhann29/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sennhann29/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sennhann29/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sennhann29/subscriptions",
        "organizations_url": "https://api.github.com/users/sennhann29/orgs",
        "repos_url": "https://api.github.com/users/sennhann29/repos",
        "events_url": "https://api.github.com/users/sennhann29/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sennhann29/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-1694118285",
      "submitted_at": "2023-10-24T06:41:07Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "mentioned",
      "id": 10749961308,
      "node_id": "MEE_lADOAN28mc5ydFO8zwAAAAKAv2Rc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749961308",
      "actor": {
        "login": "sennhann29",
        "id": 139481458,
        "node_id": "U_kgDOCFBRcg",
        "avatar_url": "https://avatars.githubusercontent.com/u/139481458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sennhann29",
        "html_url": "https://github.com/sennhann29",
        "followers_url": "https://api.github.com/users/sennhann29/followers",
        "following_url": "https://api.github.com/users/sennhann29/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sennhann29/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sennhann29/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sennhann29/subscriptions",
        "organizations_url": "https://api.github.com/users/sennhann29/orgs",
        "repos_url": "https://api.github.com/users/sennhann29/repos",
        "events_url": "https://api.github.com/users/sennhann29/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sennhann29/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T07:05:02Z"
    },
    {
      "event": "subscribed",
      "id": 10749961323,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAAKAv2Rr",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10749961323",
      "actor": {
        "login": "sennhann29",
        "id": 139481458,
        "node_id": "U_kgDOCFBRcg",
        "avatar_url": "https://avatars.githubusercontent.com/u/139481458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sennhann29",
        "html_url": "https://github.com/sennhann29",
        "followers_url": "https://api.github.com/users/sennhann29/followers",
        "following_url": "https://api.github.com/users/sennhann29/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sennhann29/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sennhann29/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sennhann29/subscriptions",
        "organizations_url": "https://api.github.com/users/sennhann29/orgs",
        "repos_url": "https://api.github.com/users/sennhann29/repos",
        "events_url": "https://api.github.com/users/sennhann29/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sennhann29/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-24T07:05:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11207030082,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKb_bVC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11207030082",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T08:42:37Z"
    },
    {
      "event": "ready_for_review",
      "id": 11207031471,
      "node_id": "RFRE_lADOAN28mc5ydFO8zwAAAAKb_bqv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11207031471",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T08:42:44Z"
    },
    {
      "event": "commented",
      "id": 1849566150,
      "node_id": "IC_kwDOAN28mc5uPiPG",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1849566150",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T08:44:00Z",
      "updated_at": "2023-12-11T08:44:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "I just pushed an updated version of this BIP. It has a reference implementation that produces test vectors that are tested against an implementation for Bitcoin Core and for rust-bitcoin.\r\n\r\nI think it should be ready for review. I have one small last TODO in the specification related to txfs malleability.",
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#issuecomment-1849566150",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1500"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T09:00:41Z",
      "updated_at": "2023-12-11T09:00:41Z",
      "source": {
        "issue": {
          "id": 2035160572,
          "node_id": "PR_kwDOABII585hp4Pn",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29050",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29050/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29050/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29050/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/29050",
          "number": 29050,
          "state": "open",
          "state_reason": null,
          "title": "Add OP_TXHASH and OP_CHECKTXHASHVERIFY opcodes",
          "body": "Implementation of OP_TXHASH and OP_CHECKTXHASHVERIFY, as per the [draft BIP](https://github.com/bitcoin/bips/pull/1500).\r\n\r\nThis MR includes a test using the test vectors generated from the reference implementation in the BIP.\r\nThe implementation utilizes a caching strategy that hopefully alleviates concerns around resource usage like quadratic hashing.\r\n\r\nThis MR on purpose does not make any consensus changes yet. Activation of the proposed opcodes will be coordinated in an independent MR, probably combined with other opcodes (like OP_CAT and/or OP_CHECKSIGFROMSTACK).\r\n\r\n(I'm not very familiar with checks and lints on here, so I'll try to address problems as they come. I have personally been able to compile and run the tests, but that usually is only the tip of the iceberg.)",
          "user": {
            "login": "stevenroose",
            "id": 853468,
            "node_id": "MDQ6VXNlcjg1MzQ2OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stevenroose",
            "html_url": "https://github.com/stevenroose",
            "followers_url": "https://api.github.com/users/stevenroose/followers",
            "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
            "organizations_url": "https://api.github.com/users/stevenroose/orgs",
            "repos_url": "https://api.github.com/users/stevenroose/repos",
            "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/stevenroose/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 5334691551,
              "node_id": "LA_kwDOABII588AAAABPfju3w",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
              "name": "CI failed",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29050",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/29050",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/29050.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/29050.patch"
          },
          "created_at": "2023-12-11T09:00:40Z",
          "updated_at": "2023-12-22T19:42:19Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11207565144,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKcBd9Y",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11207565144",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T09:23:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11207801225,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKcCXmJ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11207801225",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T09:42:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11208071729,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKcDZox",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11208071729",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T10:04:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11265404031,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKfeGx_",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11265404031",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-16T09:15:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11265412034,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKfeIvC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11265412034",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-16T09:20:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11265419086,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKfeKdO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11265419086",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-16T09:25:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11265422468,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKfeLSE",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11265422468",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-16T09:26:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11265454001,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKfeS-x",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11265454001",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-16T09:51:53Z"
    },
    {
      "event": "subscribed",
      "id": 11266915218,
      "node_id": "SE_lADOAN28mc5ydFO8zwAAAAKfj3uS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11266915218",
      "actor": {
        "login": "sethforprivacy",
        "id": 40500387,
        "node_id": "MDQ6VXNlcjQwNTAwMzg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/40500387?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sethforprivacy",
        "html_url": "https://github.com/sethforprivacy",
        "followers_url": "https://api.github.com/users/sethforprivacy/followers",
        "following_url": "https://api.github.com/users/sethforprivacy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sethforprivacy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sethforprivacy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sethforprivacy/subscriptions",
        "organizations_url": "https://api.github.com/users/sethforprivacy/orgs",
        "repos_url": "https://api.github.com/users/sethforprivacy/repos",
        "events_url": "https://api.github.com/users/sethforprivacy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sethforprivacy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-17T00:38:48Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDI0NWMwYjk2NDYzNjIwYTY5YTczYTQwMmY5Mjk4N2U4YTUyZDhlZWQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/245c0b96463620a69a73a402f92987e8a52d8eed",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/245c0b96463620a69a73a402f92987e8a52d8eed",
      "tree": {
        "sha": "f599587f3dabb5a57a63df67e8b3ce5d48dfd87b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f599587f3dabb5a57a63df67e8b3ce5d48dfd87b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f599587f3dabb5a57a63df67e8b3ce5d48dfd87b\nparent e918b50731397872ad2922a1b08a5a4cd1d6d546\nauthor Steven Roose <steven@stevenroose.org> 1694013395 +0100\ncommitter Steven Roose <steven@stevenroose.org> 1702991772 +0000\n\nAdd BIP for OP_TXHASH and OP_CHECKTXHASHVERIFY\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3hDoJimoytVbcAuXLyqI1/jWjocFAmWBl50ACgkQLyqI1/jW\njodtXxAAjVgwdiM+MR0gHUGdhB7nb1ZqirL09BhcZ3Jq4cMGu7tvUADWLlNfacC5\ntkJLf1pjhRAOfXNQ4GjAZuOrfTJ7rGibtybCzDhDfHm3oHte869pVZ43vwLYss14\nhs5zRttrxng5EnNu5zdQeX6HjXCrKtaKSsWTJUaYeHoKrq6ctWE10rXP6fGP/RQM\ne1BYB0q2fjv9R5gpy0rKro/eLXBAFak//UdIWgkoJdZCRvZK3k+A2tD7/yyZrK6t\nk9qEkIKYdzXUAb1kAREV1vwY5XO7cXORHnVq0T35fKBbgWO7RqAG0hLEaTmmOq8Q\nb/JYRVmDjJheqPpiZO1hvBbvkc57OnxxFJqBUiwTe+jaqU2PrOTzlDb/jHrirEPb\nqjXckUp6xa+Pq2gU16bOkxGFkHoiCi05WccUDyxbY4KJ8PH5h6xdrGd99Z2IrgFl\nN/IHRdxIMPE2YdBBtq67bF1sZDgQ5iJoKAN/KofcucAFovdmdDHVX6fjwKoFQ8nZ\n22r5F7OMIm99taxEjXRVWMO3xIfiWC/xKGcw+Zj56KhkE38xDBBfGbWlO2gKovzo\nfEhOEKCBpcK6eb/BwHIEK9Hpx91y/aM+PpX7y6Pf6zfFda8F5NXJvLzHj6cIJypg\n6JBtWqz/VIy0dYONd5GfFm2mrgNaICZmeuJaHOXWLNv9N4q7Rqk=\n=02cV\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e918b50731397872ad2922a1b08a5a4cd1d6d546",
          "sha": "e918b50731397872ad2922a1b08a5a4cd1d6d546",
          "html_url": "https://github.com/bitcoin/bips/commit/e918b50731397872ad2922a1b08a5a4cd1d6d546"
        }
      ],
      "message": "Add BIP for OP_TXHASH and OP_CHECKTXHASHVERIFY",
      "committer": {
        "name": "Steven Roose",
        "email": "steven@stevenroose.org",
        "date": "2023-12-19T13:16:12Z"
      },
      "author": {
        "name": "Steven Roose",
        "email": "steven@stevenroose.org",
        "date": "2023-09-06T15:16:35Z"
      },
      "sha": "245c0b96463620a69a73a402f92987e8a52d8eed"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11289585570,
      "node_id": "HRFPE_lADOAN28mc5ydFO8zwAAAAKg6Wei",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11289585570",
      "actor": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-19T13:16:20Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sputn1ck",
        "id": 8904314,
        "node_id": "MDQ6VXNlcjg5MDQzMTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8904314?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sputn1ck",
        "html_url": "https://github.com/sputn1ck",
        "followers_url": "https://api.github.com/users/sputn1ck/followers",
        "following_url": "https://api.github.com/users/sputn1ck/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sputn1ck/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sputn1ck/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sputn1ck/subscriptions",
        "organizations_url": "https://api.github.com/users/sputn1ck/orgs",
        "repos_url": "https://api.github.com/users/sputn1ck/repos",
        "events_url": "https://api.github.com/users/sputn1ck/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sputn1ck/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-24T12:07:53Z",
      "updated_at": "2023-12-24T12:07:53Z",
      "source": {
        "issue": {
          "id": 2055080294,
          "node_id": "PR_kwDOALYNmM5ithS6",
          "url": "https://api.github.com/repos/btcsuite/btcd/issues/2078",
          "repository_url": "https://api.github.com/repos/btcsuite/btcd",
          "labels_url": "https://api.github.com/repos/btcsuite/btcd/issues/2078/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/btcsuite/btcd/issues/2078/comments",
          "events_url": "https://api.github.com/repos/btcsuite/btcd/issues/2078/events",
          "html_url": "https://github.com/btcsuite/btcd/pull/2078",
          "number": 2078,
          "state": "open",
          "state_reason": null,
          "title": "Add OP_TXHASH and OP_CHECKTXHASHVERIFY opcodes",
          "body": "Implementation of OP_TXHASH and OP_CHECKTXHASHVERIFY, as per https://github.com/bitcoin/bips/pull/1500.\r\n\r\nI mainly did this to learn about the BIP, maybe others might find this interesting and useful.\r\n\r\nThe code passes all testvectors specified in the BIP, I also added an example of restricting a transaction to be only spent to specified outputs.\r\n\r\nI also added a rudimentary cache with a benchmark.",
          "user": {
            "login": "sputn1ck",
            "id": 8904314,
            "node_id": "MDQ6VXNlcjg5MDQzMTQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8904314?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sputn1ck",
            "html_url": "https://github.com/sputn1ck",
            "followers_url": "https://api.github.com/users/sputn1ck/followers",
            "following_url": "https://api.github.com/users/sputn1ck/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sputn1ck/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sputn1ck/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sputn1ck/subscriptions",
            "organizations_url": "https://api.github.com/users/sputn1ck/orgs",
            "repos_url": "https://api.github.com/users/sputn1ck/repos",
            "events_url": "https://api.github.com/users/sputn1ck/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sputn1ck/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "COLLABORATOR",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/btcsuite/btcd/pulls/2078",
            "html_url": "https://github.com/btcsuite/btcd/pull/2078",
            "diff_url": "https://github.com/btcsuite/btcd/pull/2078.diff",
            "patch_url": "https://github.com/btcsuite/btcd/pull/2078.patch"
          },
          "created_at": "2023-12-24T12:07:53Z",
          "updated_at": "2023-12-26T14:09:23Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 1796550166,
      "node_id": "PRR_kwDOAN28mc5rFS4W",
      "url": null,
      "actor": null,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Missing a section on backward compatibility",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-1796550166",
      "submitted_at": "2023-12-26T19:23:14Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    },
    {
      "event": "reviewed",
      "id": 1799874836,
      "node_id": "PRR_kwDOAN28mc5rR-kU",
      "url": null,
      "actor": null,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Sorry for the delay!  I've finally found a round tuit, and have performed a more detailed review.",
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1500#pullrequestreview-1799874836",
      "submitted_at": "2024-01-01T23:31:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368181858",
      "pull_request_review_id": 1691790241,
      "id": 1368181858,
      "node_id": "PRRC_kwDOAN28mc5RjMxi",
      "diff_hunk": "@@ -0,0 +1,659 @@\n+<pre>\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP proposes two new opcodes, OP_CHECKTXHASHVERIFY, to be activated\n+as a change to the semantics of OP_NOP4 in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of OP_SUCCESS189\n+in tapscript only.\n+\n+These new opcodes allow for non-interactive enforcement of certain properties\n+of transactions spending a certain UTXO. Together with something like \n+OP_CHECKSIGFROMSTACK (and maybe OP_CAT) it would also enable the emulation of\n+arbitrarily complex sighash types. More on the use cases in the Motivation\n+section of this BIP.\n+\n+\n+==Summary==\n+\n+OP_CHECKTXHASHVERIFY uses opcode OP_NOP4 (0xb3) as a soft fork upgrade.\n+\n+OP_CHECKTXHASHVERIFY does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix\n+  bytes specify the TxFieldSelector.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+OP_TXHASH uses tapscript opcode OP_SUCCESS189 (0xbd) as a soft fork upgrade.\n+\n+OP_TXHASH does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The 32-byte TxHash of the transaction at the current input index,\n+  calculated using the given TxFieldSelector is pushed onto the stack.\n+\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  - the empty value, zero bytes long: it is set equal to 0xff|0xf6|0xbf|0xbf,\n+    the de-facto default value which means everything except the prevouts and\n+    the prevout scriptPubkeys.\n+  - the 0x00 byte: it is set equal to 0xff|0xff|0xbf|0xbf, which means \"ALL\"\n+    and is primarily useful to emulate SIGHASH_ALL when OP_TXHASH is used in\n+    combination with OP_CHECKSIGFROMSTACK.\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows,\n+  from lowest to highest:\n+  1. version\n+  2. locktime\n+  3. current input index\n+  4. current input control block (only in case of tapscript spend)\n+  5. current script last OP_CODESEPARATOR position\n+  6. inputs\n+  7. outputs",
      "path": "bip-txhash.mediawiki",
      "position": null,
      "original_position": 73,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "original_commit_id": "ec98a85061eb9d5bf853470a469ab841f3da7916",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please provide symbolic names for all these.  And then use them instead of 0xff|0xf6|0xbf|0xbf etc.  More verbose, but much clearer.",
      "created_at": "2023-10-23T06:29:52Z",
      "updated_at": "2023-10-23T06:35:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1368181858",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368181858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368182751",
      "pull_request_review_id": 1691790241,
      "id": 1368182751,
      "node_id": "PRRC_kwDOAN28mc5RjM_f",
      "diff_hunk": "@@ -0,0 +1,659 @@\n+<pre>\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP proposes two new opcodes, OP_CHECKTXHASHVERIFY, to be activated\n+as a change to the semantics of OP_NOP4 in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of OP_SUCCESS189\n+in tapscript only.\n+\n+These new opcodes allow for non-interactive enforcement of certain properties\n+of transactions spending a certain UTXO. Together with something like \n+OP_CHECKSIGFROMSTACK (and maybe OP_CAT) it would also enable the emulation of\n+arbitrarily complex sighash types. More on the use cases in the Motivation\n+section of this BIP.\n+\n+\n+==Summary==\n+\n+OP_CHECKTXHASHVERIFY uses opcode OP_NOP4 (0xb3) as a soft fork upgrade.\n+\n+OP_CHECKTXHASHVERIFY does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix\n+  bytes specify the TxFieldSelector.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+OP_TXHASH uses tapscript opcode OP_SUCCESS189 (0xbd) as a soft fork upgrade.\n+\n+OP_TXHASH does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The 32-byte TxHash of the transaction at the current input index,\n+  calculated using the given TxFieldSelector is pushed onto the stack.\n+\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  - the empty value, zero bytes long: it is set equal to 0xff|0xf6|0xbf|0xbf,\n+    the de-facto default value which means everything except the prevouts and\n+    the prevout scriptPubkeys.\n+  - the 0x00 byte: it is set equal to 0xff|0xff|0xbf|0xbf, which means \"ALL\"\n+    and is primarily useful to emulate SIGHASH_ALL when OP_TXHASH is used in\n+    combination with OP_CHECKSIGFROMSTACK.\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows,\n+  from lowest to highest:\n+  1. version\n+  2. locktime\n+  3. current input index\n+  4. current input control block (only in case of tapscript spend)\n+  5. current script last OP_CODESEPARATOR position\n+  6. inputs\n+  7. outputs\n+\n+* The last (highest) bit of the first byte, we will call the \"control bit\", and\n+  it can be used to control the behavior of the opcode. For OP_TXHASH and\n+  OP_CHECKTXHASHVERIFY, the control bit is used to determine whether the\n+  TxFieldSelector itself has to be included in the resulting hash. (For\n+  potential other uses of the TxFieldSelector (like a hypothetical OP_TX), this\n+  bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    1. prevouts\n+    2. sequences\n+    3. scriptSigs\n+    4. prevout scriptPubkeys\n+    5. prevout values\n+    6. taproot annexes (only in case of tapscript spend)\n+  * Specifying which fields of the outputs will be selected:\n+    7. scriptPubkeys\n+    8. values\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit indicates whether the \"number of in-/outputs\" should be\n+    committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    - 0x00 means \"no in/outputs\" (hence only the number of them as 0x80)\n+    - 0x40 means \"select only the in/output of the current input index\".\n+    - 0x3f means \"select all in/outputs\".\n+  * The second highest bit is the \"specification mode\":\n+    - Set to 0 it means \"prefix mode\".\n+    - Set to 1 it means \"individual mode\".\n+  * The third highest bit is used to indicate the \"index size\", i.e. the number\n+    of bytes will be used to represent in/output indices.\n+  * In \"prefix mode\",\n+    - With \"index size\" set to 0, the remaining lowest 5 bits of the first byte\n+      will be interpreted as the number of leading in/outputs to select.\n+    - With \"index size\" set to 1, the remaining lowest 5 bits of the first byte\n+      together with the 8 bits of the next byte will be interpreted as the\n+      number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 5 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select.\n+    - With \"index size\" set to 0, interpret the following `n` individual bytes\n+      as the indices of an individual in/outputs to select.\n+    - With \"index size\" set to 1, interpret the next `n` pairs of two bytes as\n+      the indices of individual in/outputs to select.\n+\n+\n+The function ValidateTxFieldSelector has the following semantics, it\n+effectively checks that the TxFieldSelector value is valid according to\n+above rules:\n+\n+* If there are 0 bytes, it becomes the default of 0xff|0xf6|0xff|0xff; succeed.\n+* If the first byte is exactly 0x00, the Script execution succeeds immediately.\n+  //TODO(stevenroose) is this valuable? it's the only \"exception case\" that\n+  could potentially be hooked for some future upgrade",
      "path": "bip-txhash.mediawiki",
      "position": null,
      "original_position": 130,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "original_commit_id": "ec98a85061eb9d5bf853470a469ab841f3da7916",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not allow extra bytes at the end to mean OP_SUCCESS?",
      "created_at": "2023-10-23T06:31:09Z",
      "updated_at": "2023-10-23T06:35:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1368182751",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368182751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 128,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368904131",
      "pull_request_review_id": 1692925870,
      "id": 1368904131,
      "node_id": "PRRC_kwDOAN28mc5Rl9HD",
      "diff_hunk": "@@ -0,0 +1,659 @@\n+<pre>\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP proposes two new opcodes, OP_CHECKTXHASHVERIFY, to be activated\n+as a change to the semantics of OP_NOP4 in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of OP_SUCCESS189\n+in tapscript only.\n+\n+These new opcodes allow for non-interactive enforcement of certain properties\n+of transactions spending a certain UTXO. Together with something like \n+OP_CHECKSIGFROMSTACK (and maybe OP_CAT) it would also enable the emulation of\n+arbitrarily complex sighash types. More on the use cases in the Motivation\n+section of this BIP.\n+\n+\n+==Summary==\n+\n+OP_CHECKTXHASHVERIFY uses opcode OP_NOP4 (0xb3) as a soft fork upgrade.\n+\n+OP_CHECKTXHASHVERIFY does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix\n+  bytes specify the TxFieldSelector.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+OP_TXHASH uses tapscript opcode OP_SUCCESS189 (0xbd) as a soft fork upgrade.\n+\n+OP_TXHASH does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The 32-byte TxHash of the transaction at the current input index,\n+  calculated using the given TxFieldSelector is pushed onto the stack.\n+\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  - the empty value, zero bytes long: it is set equal to 0xff|0xf6|0xbf|0xbf,\n+    the de-facto default value which means everything except the prevouts and\n+    the prevout scriptPubkeys.\n+  - the 0x00 byte: it is set equal to 0xff|0xff|0xbf|0xbf, which means \"ALL\"\n+    and is primarily useful to emulate SIGHASH_ALL when OP_TXHASH is used in\n+    combination with OP_CHECKSIGFROMSTACK.\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows,\n+  from lowest to highest:\n+  1. version\n+  2. locktime\n+  3. current input index\n+  4. current input control block (only in case of tapscript spend)\n+  5. current script last OP_CODESEPARATOR position\n+  6. inputs\n+  7. outputs",
      "path": "bip-txhash.mediawiki",
      "position": null,
      "original_position": 73,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "original_commit_id": "ec98a85061eb9d5bf853470a469ab841f3da7916",
      "in_reply_to_id": 1368181858,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah that's why I did the textual clarification. In the ref impl I have constants for them. I could add them into the BIP text as well, makes sense.",
      "created_at": "2023-10-23T15:50:58Z",
      "updated_at": "2023-10-23T15:50:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1368904131",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368904131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368912187",
      "pull_request_review_id": 1692939088,
      "id": 1368912187,
      "node_id": "PRRC_kwDOAN28mc5Rl_E7",
      "diff_hunk": "@@ -0,0 +1,659 @@\n+<pre>\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP proposes two new opcodes, OP_CHECKTXHASHVERIFY, to be activated\n+as a change to the semantics of OP_NOP4 in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of OP_SUCCESS189\n+in tapscript only.\n+\n+These new opcodes allow for non-interactive enforcement of certain properties\n+of transactions spending a certain UTXO. Together with something like \n+OP_CHECKSIGFROMSTACK (and maybe OP_CAT) it would also enable the emulation of\n+arbitrarily complex sighash types. More on the use cases in the Motivation\n+section of this BIP.\n+\n+\n+==Summary==\n+\n+OP_CHECKTXHASHVERIFY uses opcode OP_NOP4 (0xb3) as a soft fork upgrade.\n+\n+OP_CHECKTXHASHVERIFY does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix\n+  bytes specify the TxFieldSelector.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+OP_TXHASH uses tapscript opcode OP_SUCCESS189 (0xbd) as a soft fork upgrade.\n+\n+OP_TXHASH does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The 32-byte TxHash of the transaction at the current input index,\n+  calculated using the given TxFieldSelector is pushed onto the stack.\n+\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  - the empty value, zero bytes long: it is set equal to 0xff|0xf6|0xbf|0xbf,\n+    the de-facto default value which means everything except the prevouts and\n+    the prevout scriptPubkeys.\n+  - the 0x00 byte: it is set equal to 0xff|0xff|0xbf|0xbf, which means \"ALL\"\n+    and is primarily useful to emulate SIGHASH_ALL when OP_TXHASH is used in\n+    combination with OP_CHECKSIGFROMSTACK.\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows,\n+  from lowest to highest:\n+  1. version\n+  2. locktime\n+  3. current input index\n+  4. current input control block (only in case of tapscript spend)\n+  5. current script last OP_CODESEPARATOR position\n+  6. inputs\n+  7. outputs\n+\n+* The last (highest) bit of the first byte, we will call the \"control bit\", and\n+  it can be used to control the behavior of the opcode. For OP_TXHASH and\n+  OP_CHECKTXHASHVERIFY, the control bit is used to determine whether the\n+  TxFieldSelector itself has to be included in the resulting hash. (For\n+  potential other uses of the TxFieldSelector (like a hypothetical OP_TX), this\n+  bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    1. prevouts\n+    2. sequences\n+    3. scriptSigs\n+    4. prevout scriptPubkeys\n+    5. prevout values\n+    6. taproot annexes (only in case of tapscript spend)\n+  * Specifying which fields of the outputs will be selected:\n+    7. scriptPubkeys\n+    8. values\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit indicates whether the \"number of in-/outputs\" should be\n+    committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    - 0x00 means \"no in/outputs\" (hence only the number of them as 0x80)\n+    - 0x40 means \"select only the in/output of the current input index\".\n+    - 0x3f means \"select all in/outputs\".\n+  * The second highest bit is the \"specification mode\":\n+    - Set to 0 it means \"prefix mode\".\n+    - Set to 1 it means \"individual mode\".\n+  * The third highest bit is used to indicate the \"index size\", i.e. the number\n+    of bytes will be used to represent in/output indices.\n+  * In \"prefix mode\",\n+    - With \"index size\" set to 0, the remaining lowest 5 bits of the first byte\n+      will be interpreted as the number of leading in/outputs to select.\n+    - With \"index size\" set to 1, the remaining lowest 5 bits of the first byte\n+      together with the 8 bits of the next byte will be interpreted as the\n+      number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 5 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select.\n+    - With \"index size\" set to 0, interpret the following `n` individual bytes\n+      as the indices of an individual in/outputs to select.\n+    - With \"index size\" set to 1, interpret the next `n` pairs of two bytes as\n+      the indices of individual in/outputs to select.\n+\n+\n+The function ValidateTxFieldSelector has the following semantics, it\n+effectively checks that the TxFieldSelector value is valid according to\n+above rules:\n+\n+* If there are 0 bytes, it becomes the default of 0xff|0xf6|0xff|0xff; succeed.\n+* If the first byte is exactly 0x00, the Script execution succeeds immediately.\n+  //TODO(stevenroose) is this valuable? it's the only \"exception case\" that\n+  could potentially be hooked for some future upgrade",
      "path": "bip-txhash.mediawiki",
      "position": null,
      "original_position": 130,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "original_commit_id": "ec98a85061eb9d5bf853470a469ab841f3da7916",
      "in_reply_to_id": 1368182751,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@roconnor-blockstream  has previously warned about non-trivial OP_SUCCESS semantics. Though the current SUCCESS semantics are \"any OP_SUCCESS opcode *occurring in the script* means SUCCESS\", but we could have different semantics that allow any opcode internally to trigger \"instant success\", but (1) that are very different semantics and will require entirely different code and (2) it becomes way harder to reason about.\r\n\r\nIIRC, @sanket1729 also noted that such SUCCESS semantics make reasoning about scripts for things like miniscript way harder.\r\n\r\nActually this BIP seems outdated, I have to push a small update. I decided to propose to make the `0x00` special case mean \"ALL\" to make this more ergonomic to use as a sighash together with CSFS. (\"ALL\" isn't valuable as a template check because it contains the prevout scriptPubkey which should contain the hash) Other suggestions welcome.",
      "created_at": "2023-10-23T15:57:30Z",
      "updated_at": "2023-10-23T15:57:30Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1368912187",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1368912187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 128,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1422168551",
      "pull_request_review_id": 1774660979,
      "id": 1422168551,
      "node_id": "PRRC_kwDOAN28mc5UxJHn",
      "diff_hunk": "@@ -0,0 +1,659 @@\n+<pre>\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP proposes two new opcodes, OP_CHECKTXHASHVERIFY, to be activated\n+as a change to the semantics of OP_NOP4 in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of OP_SUCCESS189\n+in tapscript only.\n+\n+These new opcodes allow for non-interactive enforcement of certain properties\n+of transactions spending a certain UTXO. Together with something like \n+OP_CHECKSIGFROMSTACK (and maybe OP_CAT) it would also enable the emulation of\n+arbitrarily complex sighash types. More on the use cases in the Motivation\n+section of this BIP.\n+\n+\n+==Summary==\n+\n+OP_CHECKTXHASHVERIFY uses opcode OP_NOP4 (0xb3) as a soft fork upgrade.\n+\n+OP_CHECKTXHASHVERIFY does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix\n+  bytes specify the TxFieldSelector.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+OP_TXHASH uses tapscript opcode OP_SUCCESS189 (0xbd) as a soft fork upgrade.\n+\n+OP_TXHASH does the following:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If ValidateTxFieldSelector fails for the provided TxFieldSelector, fail.\n+* The 32-byte TxHash of the transaction at the current input index,\n+  calculated using the given TxFieldSelector is pushed onto the stack.\n+\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  - the empty value, zero bytes long: it is set equal to 0xff|0xf6|0xbf|0xbf,\n+    the de-facto default value which means everything except the prevouts and\n+    the prevout scriptPubkeys.\n+  - the 0x00 byte: it is set equal to 0xff|0xff|0xbf|0xbf, which means \"ALL\"\n+    and is primarily useful to emulate SIGHASH_ALL when OP_TXHASH is used in\n+    combination with OP_CHECKSIGFROMSTACK.\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows,\n+  from lowest to highest:\n+  1. version\n+  2. locktime\n+  3. current input index\n+  4. current input control block (only in case of tapscript spend)\n+  5. current script last OP_CODESEPARATOR position\n+  6. inputs\n+  7. outputs",
      "path": "bip-txhash.mediawiki",
      "position": null,
      "original_position": 73,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "original_commit_id": "ec98a85061eb9d5bf853470a469ab841f3da7916",
      "in_reply_to_id": 1368181858,
      "user": {
        "login": "stevenroose",
        "id": 853468,
        "node_id": "MDQ6VXNlcjg1MzQ2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/853468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stevenroose",
        "html_url": "https://github.com/stevenroose",
        "followers_url": "https://api.github.com/users/stevenroose/followers",
        "following_url": "https://api.github.com/users/stevenroose/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stevenroose/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stevenroose/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stevenroose/subscriptions",
        "organizations_url": "https://api.github.com/users/stevenroose/orgs",
        "repos_url": "https://api.github.com/users/stevenroose/repos",
        "events_url": "https://api.github.com/users/stevenroose/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stevenroose/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added all the bit names to the BIP text.",
      "created_at": "2023-12-11T09:27:50Z",
      "updated_at": "2023-12-11T09:27:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1422168551",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1422168551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439093730",
      "pull_request_review_id": 1799874836,
      "id": 1439093730,
      "node_id": "PRRC_kwDOAN28mc5VxtPi",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+",
      "path": "bip-txhash.md",
      "position": 31,
      "original_position": 31,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I realize it's traditional, but why are we adding new non-Taproot opcodes?  Is there a case where this is desirable?",
      "created_at": "2024-01-01T22:38:05Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439093730",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439093730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439094729",
      "pull_request_review_id": 1799874836,
      "id": 1439094729,
      "node_id": "PRRC_kwDOAN28mc5VxtfJ",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination",
      "path": "bip-txhash.md",
      "position": 71,
      "original_position": 71,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, \"would be useful if that were proposed which it isn't\".  I am skeptical of this magic value.\r\n\r\nWhile I understand Russell O'Connor's dislike of runtime OP_SUCCESS, it is a lesser evil here than this kind of guessing of future utility which will no doubt prove suboptimal when we get there.\r\n\r\nAnd for miniscript: sure, it will only generate and decode a push followed by TXHASH.  But there are other things it can't decode too, and that's OK.",
      "created_at": "2024-01-01T22:47:50Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439094729",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439094729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439094915",
      "pull_request_review_id": 1799874836,
      "id": 1439094915,
      "node_id": "PRRC_kwDOAN28mc5VxtiD",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,",
      "path": "bip-txhash.md",
      "position": 63,
      "original_position": 63,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You re-use this term TXFS_SPECIAL_TEMPLATE twice for different things, which is confusing.",
      "created_at": "2024-01-01T22:49:51Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439094915",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439094915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439094917",
      "pull_request_review_id": 1799874836,
      "id": 1439094917,
      "node_id": "PRRC_kwDOAN28mc5VxtiF",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)",
      "path": "bip-txhash.md",
      "position": 87,
      "original_position": 87,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The `&nbsp;` HTML makes reading the markdown awkward, BTW.",
      "created_at": "2024-01-01T22:49:55Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439094917",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439094917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": 80,
      "original_start_line": 80,
      "start_side": "RIGHT",
      "line": 87,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439095106",
      "pull_request_review_id": 1799874836,
      "id": 1439095106,
      "node_id": "PRRC_kwDOAN28mc5VxtlC",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)",
      "path": "bip-txhash.md",
      "position": 94,
      "original_position": 94,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's a footnote, at best, mentioning how this could be expanded for a new OP_TX.  But there's no reason to design for it now that I can see, except to leave a clear carve-out for future expansion.\r\n\r\nSo `TXFS_CONTROL` is a terrible name.  `TXFS_FIELD_SELECTOR` perhaps?",
      "created_at": "2024-01-01T22:52:44Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439095106",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439095106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": 89,
      "original_start_line": 89,
      "start_side": "RIGHT",
      "line": 94,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439096276",
      "pull_request_review_id": 1799874836,
      "id": 1439096276,
      "node_id": "PRRC_kwDOAN28mc5Vxt3U",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:",
      "path": "bip-txhash.md",
      "position": 118,
      "original_position": 118,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If I'm following this correctly, the (non-special) TxFieldSelector format is, in bytes:\r\n\r\nCORE_SELECTOR [INOUT_SELECTOR] [IN_SELECTOR] [OUT_SELECTOR]\r\n\r\nIf `TXFS_INPUTS` is set in the CORE_SELECTOR, then INOUT_SELECTOR and IN_SELECTOR are present.  If `TXFS_OUTPUTS` is set in CORE_SELECTOR, then INOUT_SELECTOR and OUT_SELECTOR are present?\r\n",
      "created_at": "2024-01-01T23:00:57Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439096276",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439096276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 118,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439096337",
      "pull_request_review_id": 1799874836,
      "id": 1439096337,
      "node_id": "PRRC_kwDOAN28mc5Vxt4R",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:",
      "path": "bip-txhash.md",
      "position": 121,
      "original_position": 121,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not the remaining bits, since you haven't yet mentioned 0x40.",
      "created_at": "2024-01-01T23:01:34Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439096337",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439096337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439098009",
      "pull_request_review_id": 1799874836,
      "id": 1439098009,
      "node_id": "PRRC_kwDOAN28mc5VxuSZ",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\"\n+      (hence only the number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output of the current input index\"\n+      (it is invalid when current index exceeds number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_SELECTION_SIZE`) is\n+    used to indicate the \"count size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte will\n+      be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte together with the\n+      8 bits of the next byte will be interpreted as the number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 6 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select. For each\n+    individual input, (at least) one byte is expected, of this byte. The\n+    highest bit is used to indicate \"absolute or relative\" indices.\n+    * If the highest bit is set to 0, it is an absolute index. The second\n+      highest bit is used to indicate the amount of bytes are used to represent\n+      the index.\n+      * If the second-highest bit is 0, the remaining 6 bits represent the index to be selected.\n+      * If the second-highest bit is 1, the remaining 6 bits, together with the 8 bits of the next\n+        byte, represent the index to be selected.\n+    * If the highest bit is set to 1, it is a relative index. The second highest bit is used to\n+      indicate the sign of the index.\n+      * If the second-highest bit is set to 0, the remaining 6 bits represent the positive relative\n+        index to be selected.\n+      * If the second-highest bit is set to 1, the remaining 6 bits represent the negative relative\n+        index to be selected.\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 8192\n+* up to 64 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -64 to +64.",
      "path": "bip-txhash.md",
      "position": 161,
      "original_position": 161,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is incredibly complex, and seems to mismatch what I can see covenants being used for in practice.  I anticipate fees being high in future, such that people will do a reasonable amount of engineering to minimize their total footprint.  In particular, they will want to *add fees* after commitment, and want to *batch transactions* using stacking.\r\n\r\nThe first case implies you want to *exclude* a specific input and output, to allow for fees, or at least allow binding not to cover the final input/output.  The second case implies you want to mul/divide an input number to get the corresponding range of outputs.\r\n\r\nThe simplest case is a single input and output pair: a-la SIGHASH_SINGLE.  This both allows almost arbitrary fee inputs/outputs, and stacking.\r\n\r\nBut what if you want to bind a pair of inputs to one output?  Or a pair of outputs to one input?  Both seem reasonably common things to want to do (e.g. opening a dual-funded lightning channel, and closing a channel).\r\n\r\nThat means you need to be able to select outputs as \"current input index / 2\" or \"current input index * 2 and current input index * 2 + 1\".  Numbers other than 2 are possible but this is the most likely case (since, in order to stack, all txs must be of same input-output number form, and I consider 1 and 2 by far the most likely numbers here).",
      "created_at": "2024-01-01T23:17:19Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439098009",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439098009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 161,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439098416",
      "pull_request_review_id": 1799874836,
      "id": 1439098416,
      "node_id": "PRRC_kwDOAN28mc5VxuYw",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\"\n+      (hence only the number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output of the current input index\"\n+      (it is invalid when current index exceeds number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_SELECTION_SIZE`) is\n+    used to indicate the \"count size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte will\n+      be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte together with the\n+      8 bits of the next byte will be interpreted as the number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 6 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select. For each\n+    individual input, (at least) one byte is expected, of this byte. The\n+    highest bit is used to indicate \"absolute or relative\" indices.\n+    * If the highest bit is set to 0, it is an absolute index. The second\n+      highest bit is used to indicate the amount of bytes are used to represent\n+      the index.\n+      * If the second-highest bit is 0, the remaining 6 bits represent the index to be selected.\n+      * If the second-highest bit is 1, the remaining 6 bits, together with the 8 bits of the next\n+        byte, represent the index to be selected.\n+    * If the highest bit is set to 1, it is a relative index. The second highest bit is used to\n+      indicate the sign of the index.\n+      * If the second-highest bit is set to 0, the remaining 6 bits represent the positive relative\n+        index to be selected.\n+      * If the second-highest bit is set to 1, the remaining 6 bits represent the negative relative\n+        index to be selected.\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 8192\n+* up to 64 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -64 to +64.\n+\n+The TxFieldSelector is invalid when\n+* a byte is expected but missing\n+* additional unexpected bytes are present\n+* index size is set to 1 while not being necessary\n+* a leading number of individual index is selected out of bounds of the in/outputs\n+* individual indices are duplicated or not in increasing order\n+\n+These limitations are to avoid potential TxFieldSelector malleability. It is\n+however allowed to use leading mode where it could be \"all\". This\n+is important to allow for optional addition of extra inputs or outputs.\n+\n+//TODO(stevenroose) should we disallow individual that could be leading?\n+\n+\n+## Resource limits\n+\n+* For legacy scripts and segwit, we don't add any extra resource limitations,\n+  with the argumentation that `OP_CHECKTXHASHVERIFY` already requires the user\n+  to provide at least 32 bytes of extra transaction size, either in the input\n+  scriptSig, or the witness. Additional more complex hashes require additional\n+  witness bytes. Given that `OP_CAT` is not available in this context, if a\n+  malicious user tries to increase the number of TransactionHashes being\n+  calculated by using opcodes like `OP_DUP`, the TxFieldSelector for all these\n+  calculations is identical, so the calculation can be cached within the same\n+  transaction.\n+\n+* For tapscript, primarily motivated by the cheaper opcode `OP_TXHASH` (it\n+  doesn't require an additional 32 witness bytes be provided) and the potential\n+  future addition of byte manipulation opcodes like `OP_CAT`, an additional\n+  cost is specified per TransactionHash execution. Using the same validation\n+  budget (\"sigops budget\") introduced in BIP-0342, each TransactionHash\n+  decreases the validation budget by 10. If this brings the budget below zero,",
      "path": "bip-txhash.md",
      "position": 194,
      "original_position": 194,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This needs much more justification.  Why 10?  It has an implied cost of 2 already, since you have to use the opcode and a selector.    If it has to hash a lot, hasn't someone already paid that to make such a large transaction?",
      "created_at": "2024-01-01T23:21:25Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439098416",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439098416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 194,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439099495",
      "pull_request_review_id": 1799874836,
      "id": 1439099495,
      "node_id": "PRRC_kwDOAN28mc5Vxupn",
      "diff_hunk": "@@ -0,0 +1,269 @@\n+```\n+  BIP: tbd\n+  Layer: Consensus (soft fork)\n+  Title: OP_TXHASH and OP_CHECKTXHASHVERIFY\n+  Author: Steven Roose <steven@roose.io>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-tbd\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-09-03\n+  License: BSD-3-Clause\n+```\n+\n+# Abstract\n+\n+This BIP proposes two new opcodes, `OP_CHECKTXHASHVERIFY`, to be activated\n+as a change to the semantics of `OP_NOP4` in legacy script, segwit and tapscript;\n+and OP_TXHASH, to be activated as a change to the semantics of `OP_SUCCESS189`\n+in tapscript only.\n+\n+These opcodes provide a generalized method for introspecting certain details of\n+the spending transaction, which enables non-interactive enforcement of certain\n+properties of the transaction spending a certain UTXO.\n+\n+The constructions specified in this BIP also open up the way for other\n+potential updates; see Motivation section for more details.\n+\n+\n+# Summary\n+\n+## OP_CHECKTXHASHVERIFY\n+\n+The first new opcode, `OP_CHECKTXHASHVERIFY`, redefines the `OP_NOP4` opcode (`0xb3`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element on the stack is at least 32 bytes long, fail otherwise.\n+* The first 32 bytes are interpreted as the TxHash and the remaining suffix bytes specify the TxFieldSelector.\n+* If the TxFieldSelector is invalid, fail.\n+* The actual TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector must be equal to the first 32 bytes of the\n+  element on the stack, fail otherwise.\n+\n+\n+## OP_TXHASH\n+\n+The second new opcode, `OP_TXHASH`, redefines the `OP_SUCCESS189` tapscript opcode (`0xbd`) as a soft fork upgrade.\n+\n+It has the following semantics:\n+\n+* There is at least one element on the stack, fail otherwise.\n+* The element is interpreted as the TxFieldSelector and is popped off the stack.\n+* If the TxFieldSelector is invalid, fail.\n+* The 32-byte TxHash of the transaction at the current input index, calculated\n+  using the given TxFieldSelector is pushed onto the stack.\n+\n+## TxFieldSelector\n+\n+The TxFieldSelector has the following semantics. We will give a brief conceptual\n+summary, followed by a reference implementation of the CalculateTxHash function.\n+\n+* There are two special cases for the TxFieldSelector:\n+  * the empty value, zero bytes long: it is set equal to `TXFS_SPECIAL_TEMPLATE`,\n+    the de-facto default value which means everything except the prevouts and the prevout\n+    scriptPubkeys.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4 bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_TEMPLATE | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+  * the `0x00` byte: it is set equal to `TXFS_SPECIAL_ALL`, which means \"ALL\" and is primarily\n+    useful to emulate `SIGHASH_ALL` when `OP_TXHASH` is used in combination\n+    with `OP_CHECKSIGFROMSTACK`.<br>Special case `TXFS_SPECIAL_TEMPLATE` is 4\n+    bytes long, as follows:\n+    * &nbsp;1. `TXFS_ALL`\n+    * &nbsp;2. `TXFS_INPUTS_ALL | TXFS_OUTPUTS_ALL`\n+    * &nbsp;3. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+    * &nbsp;4. `TXFS_INOUT_NUMBER | TXFS_INOUT_SELECTION_ALL`\n+\n+* The first byte of the TxFieldSelector has its 8 bits assigned as follows, from lowest to highest:\n+  * &nbsp;1. version (`TXFS_VERSION`)\n+  * &nbsp;2. locktime (`TXFS_LOCKTIME`)\n+  * &nbsp;3. current input index (`TXFS_CURRENT_INPUT_IDX`)\n+  * &nbsp;4. current input control block (or empty) (`TXFS_CURRENT_INPUT_CONTROL_BLOCK`)\n+  * &nbsp;5. current script last `OP_CODESEPARATOR` position (or 0xffffffff)\n+    (`TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS`)\n+  * &nbsp;6. inputs (`TXFS_INPUTS`)\n+  * &nbsp;7. outputs (`TXFS_OUTPUTS`)\n+\n+* The last (highest) bit of the first byte (`TXFS_CONTROL`), we will call the\n+  \"control bit\", and it can be used to control the behavior of the opcode. For\n+  `OP_TXHASH` and `OP_CHECKTXHASHVERIFY`, the control bit is used to determine\n+  whether the TxFieldSelector itself has to be included in the resulting hash.\n+  (For potential other uses of the TxFieldSelector (like a hypothetical\n+  `OP_TX`), this bit can be repurposed.)\n+\n+* If either \"inputs\" or \"outputs\" is set to 1, expect another byte with its 8\n+  bits assigning the following variables, from lowest to highest:\n+  * Specifying which fields of the inputs will be selected:\n+    * &nbsp;1. prevouts (`TXFS_INPUTS_PREVOUTS`)\n+    * &nbsp;2. sequences (`TXFS_INPUTS_SEQUENCES`)\n+    * &nbsp;3. scriptSigs (`TXFS_INPUTS_SCRIPTSIGS`)\n+    * &nbsp;4. prevout scriptPubkeys (`TXFS_INPUTS_PREV_SCRIPTPUBKEYS`)\n+    * &nbsp;5. prevout values (`TXFS_INPUTS_PREV_VALUED`)\n+    * &nbsp;6. taproot annexes (`TXFS_INPUTS_TAPROOT_ANNEXES`)\n+\n+  * Specifying which fields of the outputs will be selected:\n+    * &nbsp;7. scriptPubkeys (`TXFS_OUTPUTS_SCRIPTPUBKEYS`)\n+    * &nbsp;8. values (`TXFS_OUTPUTS_VALUES`)\n+\n+* We define as follows:\n+  * `TXFS_ALL = TXFS_VERSION | TXFS_LOCKTIME | TXFS_CURRENT_INPUT_IDX | TXFS_CURRENT_INPUT_CONTROL_BLOCK | TXFS_CURRENT_INPUT_LAST_CODESEPARATOR_POS | TXFS_INPUTS | TXFS_OUTPUTS | TXFS_CONTROL`\n+  * `TXFS_INPUTS_ALL = TXFS_INPUTS_PREVOUTS | TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_SCRIPTPUBKEYS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_INPUTS_TEMPLATE = TXFS_INPUTS_SEQUENCES | TXFS_INPUTS_SCRIPTSIGS | TXFS_INPUTS_PREV_VALUES | TXFS_INPUTS_TAPROOT_ANNEXES`\n+  * `TXFS_OUTPUTS_ALL = TXFS_OUTPUTS_SCRIPTPUBKEYS | TXFS_OUTPUTS_VALUES`\n+\n+For both inputs and then outputs, do the following:\n+\n+* If the \"in/outputs\" field is set to 1, another additional byte is expected:\n+  * The highest bit (`TXFS_INOUT_NUMBER`) indicates whether the \"number of in-/outputs\"\n+    should be committed to.\n+  * For the remaining bits, there are three exceptional values:\n+    * 0x00 (`TXFS_INOUT_SELECTION_NONE`) means \"no in/outputs\"\n+      (hence only the number of them as `0x80` (`TXFS_INOUT_NUMBER`)).\n+    * `0x40` (`TXFS_INOUT_SELECTION_CURRENT`) means \"select only the in/output of the current input index\"\n+      (it is invalid when current index exceeds number of outputs).\n+    * `0x3f` (`TXFS_INOUT_SELECTION_ALL`) means \"select all in/outputs\".\n+\n+  * The second highest bit (`TXFS_INOUT_SELECTION_MODE`) is the \"specification mode\":\n+    * Set to 0 it means \"leading mode\".\n+    * Set to 1 it means \"individual mode\".\n+  * In \"leading mode\", the third highest bit (`TXFS_INOUT_SELECTION_SIZE`) is\n+    used to indicate the \"count size\", i.e. the number of bytes will be used to\n+    represent the number of in/output.\n+    * With \"index size\" set to 0, the remaining lowest 5 bits of the first byte will\n+      be interpreted as the number of leading in/outputs to select.\n+    * With \"index size\" set to 1, the remaining lowest 5 bits of the first byte together with the\n+      8 bits of the next byte will be interpreted as the number of leading in/outputs to select.\n+  * In \"individual mode\", the remaining lowest 6 bits of the first byte will be\n+    interpreted as `n`, the number of individual in/outputs to select. For each\n+    individual input, (at least) one byte is expected, of this byte. The\n+    highest bit is used to indicate \"absolute or relative\" indices.\n+    * If the highest bit is set to 0, it is an absolute index. The second\n+      highest bit is used to indicate the amount of bytes are used to represent\n+      the index.\n+      * If the second-highest bit is 0, the remaining 6 bits represent the index to be selected.\n+      * If the second-highest bit is 1, the remaining 6 bits, together with the 8 bits of the next\n+        byte, represent the index to be selected.\n+    * If the highest bit is set to 1, it is a relative index. The second highest bit is used to\n+      indicate the sign of the index.\n+      * If the second-highest bit is set to 0, the remaining 6 bits represent the positive relative\n+        index to be selected.\n+      * If the second-highest bit is set to 1, the remaining 6 bits represent the negative relative\n+        index to be selected.\n+\n+Effectively, this allows a user to select\n+* all in/outputs\n+* the current input index\n+* the leading in/outputs up to 8192\n+* up to 64 individually selected in/outputs\n+** using absolute indices up to 16384\n+** using indices relative to the current input index from -64 to +64.\n+\n+The TxFieldSelector is invalid when\n+* a byte is expected but missing\n+* additional unexpected bytes are present\n+* index size is set to 1 while not being necessary\n+* a leading number of individual index is selected out of bounds of the in/outputs\n+* individual indices are duplicated or not in increasing order\n+\n+These limitations are to avoid potential TxFieldSelector malleability. It is\n+however allowed to use leading mode where it could be \"all\". This\n+is important to allow for optional addition of extra inputs or outputs.\n+\n+//TODO(stevenroose) should we disallow individual that could be leading?\n+\n+\n+## Resource limits\n+\n+* For legacy scripts and segwit, we don't add any extra resource limitations,\n+  with the argumentation that `OP_CHECKTXHASHVERIFY` already requires the user\n+  to provide at least 32 bytes of extra transaction size, either in the input\n+  scriptSig, or the witness. Additional more complex hashes require additional\n+  witness bytes. Given that `OP_CAT` is not available in this context, if a\n+  malicious user tries to increase the number of TransactionHashes being\n+  calculated by using opcodes like `OP_DUP`, the TxFieldSelector for all these\n+  calculations is identical, so the calculation can be cached within the same\n+  transaction.\n+\n+* For tapscript, primarily motivated by the cheaper opcode `OP_TXHASH` (it\n+  doesn't require an additional 32 witness bytes be provided) and the potential\n+  future addition of byte manipulation opcodes like `OP_CAT`, an additional\n+  cost is specified per TransactionHash execution. Using the same validation\n+  budget (\"sigops budget\") introduced in BIP-0342, each TransactionHash\n+  decreases the validation budget by 10. If this brings the budget below zero,\n+  the script fails immediately.<br>The following considerations should be made:\n+  * All fields that can be of arbitrary size are cachable as TransactionHash always hashes their hashed values.\n+  * In \"individual mode\", a user can at most commit 32 inputs or outputs,\n+    which we don't consider excessive for potential repeated use.\n+  * In \"leading mode\", a caching strategy can be used where the SHA256 context\n+    is stored every N in/outputs so that multiple executions of the\n+    TransactionHash function can use the caches and only have to hash an\n+    additional N-1 items at most.\n+\n+\n+# Motivation\n+\n+This BIP specifies a basic transaction introspection primitive that is useful\n+to either reduce interactivity in multi-user protocols or to enforce some basic\n+constraints on transactions.\n+\n+Additionally, the constructions specified in this BIP can lay the groundwork for\n+some potential future upgrades:\n+* The TxFieldSelector construction would work well with a hypothetical opcode\n+  `OP_TX` that allows for directly introspecting the transaction by putting the\n+  fields selected on the stack instead of hashing them together.\n+* The TransactionHash obtained by `OP_TXHASH` can be combined with a\n+  hypothetical opcode `OP_CHECKSIGFROMSTACK` to effectively create an\n+  incredibly flexible signature hash, which would enable constructions like\n+  `SIGHASH_ANYPREVOUT`.\n+\n+## Comparing with some alternative proposals\n+\n+* This proposal strictly generalizes BIP-119's `OP_CHECKTEMPLATEVERIFY`, as the\n+  default mode of our TxFieldSelector is effectively the same (though not\n+  byte-for-byte identical) as what `OP_CTV` acomplishes, without costing any\n+  additional bytes. Additionally, using `OP_CHECKTXHASHVERIFY` allows for more\n+  flexibility which can help in the case for\n+  * enabling adding fees to a transaction without breaking a multi-tx protocol;\n+  * multi-user protocols where users are only concerned about their own inputs and outputs.\n+\n+* Constructions like `OP_IN_OUT_VALUE` used with `OP_EQUALVERIFY` can be\n+  emulated by two `OP_TXHASH` instances by using the TxFieldSelector to select\n+  a single input value first and a single output value second and enforcing\n+  equality on the hashes. Neither of these alternatives can be used to enforce\n+  small value differencials without the availability of 64-bit arithmetic in\n+  Script.\n+\n+* Like mentioned above, `SIGHASH_ANYPREVOUT` can be emulated using `OP_TXHASH`\n+  when combined with `OP_CHECKSIGFROMSTACK`: \n+  `<txfs> OP_TXHASH <pubkey> OP_CHECKSIGFROMSTACK` effectively emulates `SIGHASH_ANYPREVOUT`.\n+\n+\n+# Detailed Specification\n+\n+A reference implementation in Rust is provided attached as part of this BIP",
      "path": "bip-txhash.md",
      "position": 245,
      "original_position": 245,
      "commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "original_commit_id": "245c0b96463620a69a73a402f92987e8a52d8eed",
      "in_reply_to_id": null,
      "user": {
        "login": "rustyrussell",
        "id": 775844,
        "node_id": "MDQ6VXNlcjc3NTg0NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rustyrussell",
        "html_url": "https://github.com/rustyrussell",
        "followers_url": "https://api.github.com/users/rustyrussell/followers",
        "following_url": "https://api.github.com/users/rustyrussell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rustyrussell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rustyrussell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
        "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
        "repos_url": "https://api.github.com/users/rustyrussell/repos",
        "events_url": "https://api.github.com/users/rustyrussell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "OK, I would *really* appreciate a table of all the bits and exactly what and how they encode them.  It's particularly nasty because some values are little-endian 32 bit encoded, not CScriptNum encoded, and others are varint encoded?  \r\n\r\nBut it's nice to be explicit in each case, for people like me who are not deep in the weeds of bitcoin's onchain representation, since it helps when considering how to use this alongside things like OP_CAT and extended arithmetic opcodes.",
      "created_at": "2024-01-01T23:29:48Z",
      "updated_at": "2024-01-01T23:31:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1500#discussion_r1439099495",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1439099495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 245,
      "original_line": 245,
      "side": "RIGHT"
    }
  ]
}