{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1972",
    "id": 2842818355,
    "node_id": "PR_kwDOAN28mc6pcfcz",
    "html_url": "https://github.com/bitcoin/bips/pull/1972",
    "diff_url": "https://github.com/bitcoin/bips/pull/1972.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1972.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1972",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1972/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1972/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1972/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
    "number": 1972,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "[guardian] Add wallet behaviour draft BIP",
    "user": {
      "login": "bitcoinguardian",
      "id": 215255061,
      "node_id": "U_kgDODNSIFQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/215255061?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitcoinguardian",
      "html_url": "https://github.com/bitcoinguardian",
      "followers_url": "https://api.github.com/users/bitcoinguardian/followers",
      "following_url": "https://api.github.com/users/bitcoinguardian/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/bitcoinguardian/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/bitcoinguardian/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/bitcoinguardian/subscriptions",
      "organizations_url": "https://api.github.com/users/bitcoinguardian/orgs",
      "repos_url": "https://api.github.com/users/bitcoinguardian/repos",
      "events_url": "https://api.github.com/users/bitcoinguardian/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/bitcoinguardian/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Implements wallet behaviour for the Guardian Address proposal.\r\n\r\nThe source code for the wallet implementation is available at https://github.com/bitcoinguardian/electrum. This serves as a model for self-custodial wallets, while custodial services may adapt the protocol to their infrastructure.\r\n\r\nGuardian Signal tooling is available at https://github.com/bitcoinguardian/GASPv1-draft\r\n\r\nA demo with testnet transactions and Guardian integration is available at https://github.com/bitcoinguardian/electrum/tree/master/demo",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2025-09-19T07:26:18Z",
    "updated_at": "2025-10-06T18:35:41Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merged": false,
    "merge_commit_sha": "49c4311ad2b691f4b1552edb597c8715d92931fe",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "bitcoinguardian:guardian-wallet",
      "ref": "guardian-wallet",
      "sha": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "user": {
        "login": "bitcoinguardian",
        "id": 215255061,
        "node_id": "U_kgDODNSIFQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/215255061?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoinguardian",
        "html_url": "https://github.com/bitcoinguardian",
        "followers_url": "https://api.github.com/users/bitcoinguardian/followers",
        "following_url": "https://api.github.com/users/bitcoinguardian/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoinguardian/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoinguardian/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoinguardian/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoinguardian/orgs",
        "repos_url": "https://api.github.com/users/bitcoinguardian/repos",
        "events_url": "https://api.github.com/users/bitcoinguardian/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoinguardian/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1059956423,
        "node_id": "R_kgDOPy2mxw",
        "name": "bips",
        "full_name": "bitcoinguardian/bips",
        "owner": {
          "login": "bitcoinguardian",
          "id": 215255061,
          "node_id": "U_kgDODNSIFQ",
          "avatar_url": "https://avatars.githubusercontent.com/u/215255061?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoinguardian",
          "html_url": "https://github.com/bitcoinguardian",
          "followers_url": "https://api.github.com/users/bitcoinguardian/followers",
          "following_url": "https://api.github.com/users/bitcoinguardian/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoinguardian/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoinguardian/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoinguardian/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoinguardian/orgs",
          "repos_url": "https://api.github.com/users/bitcoinguardian/repos",
          "events_url": "https://api.github.com/users/bitcoinguardian/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoinguardian/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoinguardian/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/bitcoinguardian/bips",
        "archive_url": "https://api.github.com/repos/bitcoinguardian/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoinguardian/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoinguardian/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoinguardian/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoinguardian/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoinguardian/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoinguardian/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoinguardian/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoinguardian/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoinguardian/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoinguardian/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoinguardian/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoinguardian/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoinguardian/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoinguardian/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoinguardian/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoinguardian/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoinguardian/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoinguardian/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoinguardian/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoinguardian/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoinguardian/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoinguardian/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoinguardian/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoinguardian/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoinguardian/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoinguardian/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoinguardian/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoinguardian/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoinguardian/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoinguardian/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoinguardian/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoinguardian/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoinguardian/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoinguardian/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoinguardian/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoinguardian/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoinguardian/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoinguardian/bips/hooks",
        "svn_url": "https://github.com/bitcoinguardian/bips",
        "homepage": "",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 17033,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-09-19T15:51:09Z",
        "created_at": "2025-09-19T07:23:36Z",
        "updated_at": "2025-09-19T07:23:36Z",
        "allow_forking": true
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "6730ee8a1e767ccc5594938f8a73aca8a639a1cf",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5779,
        "stargazers_count": 10234,
        "watchers_count": 10234,
        "size": 16685,
        "default_branch": "master",
        "open_issues_count": 54,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-01T21:35:33Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2025-10-06T09:32:08Z",
        "allow_forking": true
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
      }
    },
    "author_association": "NONE",
    "draft": true,
    "additions": 275,
    "deletions": 0,
    "changed_files": 3,
    "commits": 2,
    "review_comments": 6,
    "comments": 0
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGZhOWNlNTkxNzQ3OWNjOWZmYzM1ZDAwYzdiNmQ5MGU5YmUxNzhhZTI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fa9ce5917479cc9ffc35d00c7b6d90e9be178ae2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/fa9ce5917479cc9ffc35d00c7b6d90e9be178ae2",
      "tree": {
        "sha": "513dc723afd680157e341ce14b4939bc2f236584",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/513dc723afd680157e341ce14b4939bc2f236584"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6730ee8a1e767ccc5594938f8a73aca8a639a1cf",
          "sha": "6730ee8a1e767ccc5594938f8a73aca8a639a1cf",
          "html_url": "https://github.com/bitcoin/bips/commit/6730ee8a1e767ccc5594938f8a73aca8a639a1cf"
        }
      ],
      "message": "[guardian] Add wallet behaviour draft bip",
      "committer": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-09-19T07:17:27Z"
      },
      "author": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-09-19T07:17:27Z"
      },
      "sha": "fa9ce5917479cc9ffc35d00c7b6d90e9be178ae2"
    },
    {
      "event": "labeled",
      "id": 19800820187,
      "node_id": "LE_lADOAN28mc7Mor6-zwAAAAScOInb",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19800820187",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-19T14:23:25Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDhkZjNhM2ZhNzA0YTM1MjBjMjUyY2Y5Yzg4ZTQ3OWM1YWY4OWExYzQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "tree": {
        "sha": "3030a60f73d2f01a325ca3c054b865376f115e2c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3030a60f73d2f01a325ca3c054b865376f115e2c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fa9ce5917479cc9ffc35d00c7b6d90e9be178ae2",
          "sha": "fa9ce5917479cc9ffc35d00c7b6d90e9be178ae2",
          "html_url": "https://github.com/bitcoin/bips/commit/fa9ce5917479cc9ffc35d00c7b6d90e9be178ae2"
        }
      ],
      "message": "[guardian] Add ack",
      "committer": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-09-19T15:51:01Z"
      },
      "author": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-09-19T15:51:01Z"
      },
      "sha": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4"
    },
    {
      "event": "reviewed",
      "id": 3306286307,
      "node_id": "PRR_kwDOAN28mc7FEezj",
      "url": null,
      "actor": null,
      "commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-06T18:35:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "The described signaling mechanism is expensive and unreliable, and adds overhead to the setup. It is likely incompatible with basic security practices like airgap setups as it relies on the wallet to be synchronized with the mempool and blockchain. The motivating scenarios sound implausible. The proposal comes across as fairly convoluted, a simple 2FA co-signer or a multisig setup with distributed signers both seem superior.\r\n\r\nI’m not convinced it works at all, as per the described scenario, the attacker gains physical access to the unlocked wallet and therefore could tweak the firmware to make it ignore the Guardian signal, or extract the key material and create the transaction with different software. Relying on the software of a compromised device to enforce security is not reasonable.\r\n\r\nI’m not convinced this proposal is a net improvement, nor that it is technically sound.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1972#pullrequestreview-3306286307",
      "submitted_at": "2025-10-06T18:32:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407679923",
      "pull_request_review_id": 3306286307,
      "id": 2407679923,
      "node_id": "PRRC_kwDOAN28mc6Pgkez",
      "diff_hunk": "@@ -0,0 +1,275 @@\n+<pre>\n+  BIP: TBD\n+  Layer: Applications\n+  Title: Guardian Address Wallet Implementation\n+  Author: Bitcoin Guardian <bitcoinguardian@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-09-19\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines the wallet implementation of Guardian Addresses, an application layer signaling mechanism that allows users to remotely lock or unlock their Bitcoin wallets via on-chain OP_RETURN signals. The specification standardizes how wallets configure, monitor, and enforce Guardian signals, ensuring consistent behavior across implementations while remaining backwards compatible with existing wallets and bitcoin nodes.\n+\n+==Motivation==\n+\n+Physical coercion and theft remain persistent risks for bitcoin users. Existing protections such as multisig or vault constructions are effective against key compromise but are limited in scenarios where attackers gain direct access to unlocked devices or custodial accounts. The Guardian Address standard provides a uniform, lightweight signalling channel that wallets can use to respond in real time to distress signals. By enabling rapid wallet lock and coordinated monitoring across both self-hosted and custodial environments, Guardian Addresses add an operational security layer that complements consensus layer protections and enhances user resilience under coercion or theft.\n+\n+==Specification==\n+\n+### 1. Wallet Behavior\n+\n+The wallet Guardian lifecycle has four distinct states as visualized in this finite state machine:\n+\n+![Guardian FSM](bip-XXXX/guardian-fsm.png)",
      "path": "bip-guardian-wallet.mediawiki",
      "position": 28,
      "original_position": 28,
      "commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "original_commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This appears to be Markdown syntax, but you are using a MediaWiki file. This is how your document renders:\n\n<img width=\"765\" height=\"253\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/8b54df06-0ead-44b9-8a29-38ffb57264d4\" />",
      "created_at": "2025-10-06T17:48:32Z",
      "updated_at": "2025-10-06T18:32:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1972#discussion_r2407679923",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407679923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
        }
      },
      "start_line": 24,
      "original_start_line": 24,
      "start_side": "RIGHT",
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407707655",
      "pull_request_review_id": 3306286307,
      "id": 2407707655,
      "node_id": "PRRC_kwDOAN28mc6PgrQH",
      "diff_hunk": "@@ -0,0 +1,275 @@\n+<pre>\n+  BIP: TBD\n+  Layer: Applications\n+  Title: Guardian Address Wallet Implementation\n+  Author: Bitcoin Guardian <bitcoinguardian@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-09-19\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines the wallet implementation of Guardian Addresses, an application layer signaling mechanism that allows users to remotely lock or unlock their Bitcoin wallets via on-chain OP_RETURN signals. The specification standardizes how wallets configure, monitor, and enforce Guardian signals, ensuring consistent behavior across implementations while remaining backwards compatible with existing wallets and bitcoin nodes.\n+\n+==Motivation==\n+\n+Physical coercion and theft remain persistent risks for bitcoin users. Existing protections such as multisig or vault constructions are effective against key compromise but are limited in scenarios where attackers gain direct access to unlocked devices or custodial accounts. The Guardian Address standard provides a uniform, lightweight signalling channel that wallets can use to respond in real time to distress signals. By enabling rapid wallet lock and coordinated monitoring across both self-hosted and custodial environments, Guardian Addresses add an operational security layer that complements consensus layer protections and enhances user resilience under coercion or theft.",
      "path": "bip-guardian-wallet.mediawiki",
      "position": 20,
      "original_position": 20,
      "commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "original_commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The Motivation section is too generic and fails to motivate why this design should be adopted specifically.",
      "created_at": "2025-10-06T17:54:30Z",
      "updated_at": "2025-10-06T18:32:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1972#discussion_r2407707655",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407707655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407724974",
      "pull_request_review_id": 3306286307,
      "id": 2407724974,
      "node_id": "PRRC_kwDOAN28mc6Pgveu",
      "diff_hunk": "@@ -0,0 +1,275 @@\n+<pre>\n+  BIP: TBD\n+  Layer: Applications\n+  Title: Guardian Address Wallet Implementation\n+  Author: Bitcoin Guardian <bitcoinguardian@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-09-19\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines the wallet implementation of Guardian Addresses, an application layer signaling mechanism that allows users to remotely lock or unlock their Bitcoin wallets via on-chain OP_RETURN signals. The specification standardizes how wallets configure, monitor, and enforce Guardian signals, ensuring consistent behavior across implementations while remaining backwards compatible with existing wallets and bitcoin nodes.\n+\n+==Motivation==\n+\n+Physical coercion and theft remain persistent risks for bitcoin users. Existing protections such as multisig or vault constructions are effective against key compromise but are limited in scenarios where attackers gain direct access to unlocked devices or custodial accounts. The Guardian Address standard provides a uniform, lightweight signalling channel that wallets can use to respond in real time to distress signals. By enabling rapid wallet lock and coordinated monitoring across both self-hosted and custodial environments, Guardian Addresses add an operational security layer that complements consensus layer protections and enhances user resilience under coercion or theft.\n+\n+==Specification==\n+\n+### 1. Wallet Behavior\n+\n+The wallet Guardian lifecycle has four distinct states as visualized in this finite state machine:\n+\n+![Guardian FSM](bip-XXXX/guardian-fsm.png)\n+\n+For each state, the order of operations MUST be adhered to as defined in this BIP.\n+\n+### No Guardian Configuration\n+\n+This is the state of an unconfigured Guardian Address in a wallet. No Guardian Addresses are monitored for protocol signals. No action will be taken in the wallet if any Guardian Address signals a state change. This is also the behavior of non-cooperating BIP wallets that do not implement the standard, ensuring this specification is kept optional and will not affect the operation of existing wallets or nodes.\n+\n+### Guardian Addition\n+\n+* Wallets MUST allow only one Guardian Address at a time. If one is already configured, wallets MUST require the user to remove it first (see Guardian Removal).\n+* Wallets MUST reject any address that matches a spending address managed by the wallet, to enforce key separation and accidental spending of the Guardian signal UTXO.\n+* Wallets MUST ensure that a Guardian Address maintains at least one reserved UTXO for signalling purposes.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - MUST Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII raw ≤40 bytes. Signals MUST match the grammar defined in BIP-A (note: placeholder until BIP assignment).\n+    - MUST Sort them by nonce in ascending order.\n+    - MUST Reject if no signals exist (address not instantiated) or if the highest nonce signal sets `Lock=true`. This prevents accidental locking of the wallet with a Guardian Address outside of the user's control.\n+    - MUST Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate a potential nonce exhaustion issue).\n+* If valid, store the address state and its current highest nonce locally.\n+* Wallets MUST transition to Guardian Monitoring if these operations complete.\n+\n+### Guardian Monitoring\n+\n+![Guardian Monitoring Substate](bip-XXXX/guardian-monitoring.png)\n+\n+**Guardian Address Polling**\n+\n+* If the previously checked block is not set (the wallet is polling the Guardian Address for the first time) wallets MUST poll the Guardian Address from activation block height 914021 onwards (note: placeholder block height will be updated if the BIP progresses to a future BIP assigned height). This is to prevent wallets from polling the entire chain history for the Guardian Address signals.\n+* The configured Guardian Address MUST be sourced from the same storage as used in the Guardian Addition.\n+* Addresses other than the configured Guardian Address MUST NOT be polled for Guardian Monitoring.\n+* The configured Guardian Address SHOULD be polled every 30 seconds. The lower the polling interval, the faster the wallet can respond to the user triggering the lock of the wallet.\n+* The configured Guardian Address MUST be checked every time a new block is created, even if the block is produced before the polling interval.\n+* The Guardian Address MUST be polled for transactions that are pending in the mempool.\n+* Signal transactions MUST be treated equally whether they are included in a block or still in the mempool.\n+* Wallets MUST warn users if the Guardian balance drops to zero or UTXOs are moved without a valid signal `OP_RETURN`.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII, ≤40 bytes. Signals MUST match the grammar defined in BIP-A[^1] (note: placeholder until BIP assignment).\n+    - Sort them by nonce in ascending order.\n+    - Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate potential nonce exhaustion issues).\n+* Wallets MUST store the current block as the previously checked block. This optimizes for speed at wallet startup.\n+* Wallets MUST transition to Guardian State Evaluation if signals present.\n+* Wallets MUST wait for the polling interval before checking for new signals.\n+\n+### Guardian State Evaluation\n+\n+**Nonce Conflict Resolution**\n+\n+Guardian signals use a monotonic nonce to prevent replay attacks and ensure deterministic evaluation of the Guardian state. Wallets MUST resolve conflicts between signals using the following rules:\n+\n+**Monotonicity**\n+\n+* Nonces MUST be strictly greater than the last observed valid nonce.\n+* Wallets MUST ignore any signal with a nonce less than or equal to the locally stored nonce of the configured Guardian Address.\n+* Wallets MUST warn the user if a stale nonce is observed.\n+\n+**Duplicate Nonces**\n+\n+* If two signals share the same nonce and are both confirmed on-chain, the transaction included at the earliest block height MUST take precedence.\n+* If two signals share the same nonce and are both unconfirmed in the mempool, wallets MUST treat the first seen transaction (by mempool arrival time) as canonical until confirmation.\n+* Once one of the duplicates is confirmed, the confirmed transaction MUST override any unconfirmed duplicate. Local storage MUST be updated accordingly.\n+* Wallets MUST warn the user if duplicate nonce usage is detected with different payloads.\n+\n+**Invalid Nonces**\n+\n+* Nonces are 32 bit unsigned integers (0 ≤ nonce ≤ 2^32-1). Values outside this range MUST be rejected and MUST warn the user.\n+* Wallets SHOULD alert the user if the nonce exceeds a high value (e.g., 65,535) to indicate possible nonce exhaustion or misconfiguration.\n+\n+**Mempool Conditions**\n+\n+* Wallets MUST treat a signal as effective once it is visible in the mempool, without waiting for block inclusion.",
      "path": "bip-guardian-wallet.mediawiki",
      "position": 97,
      "original_position": 97,
      "commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "original_commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Propagation of unconfirmed transactions is best effort. There is no guarantee that transactions will be seen by all nodes before they are confirmed.",
      "created_at": "2025-10-06T17:57:55Z",
      "updated_at": "2025-10-06T18:32:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1972#discussion_r2407724974",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407724974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407732173",
      "pull_request_review_id": 3306286307,
      "id": 2407732173,
      "node_id": "PRRC_kwDOAN28mc6PgxPN",
      "diff_hunk": "@@ -0,0 +1,275 @@\n+<pre>\n+  BIP: TBD\n+  Layer: Applications\n+  Title: Guardian Address Wallet Implementation\n+  Author: Bitcoin Guardian <bitcoinguardian@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-09-19\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines the wallet implementation of Guardian Addresses, an application layer signaling mechanism that allows users to remotely lock or unlock their Bitcoin wallets via on-chain OP_RETURN signals. The specification standardizes how wallets configure, monitor, and enforce Guardian signals, ensuring consistent behavior across implementations while remaining backwards compatible with existing wallets and bitcoin nodes.\n+\n+==Motivation==\n+\n+Physical coercion and theft remain persistent risks for bitcoin users. Existing protections such as multisig or vault constructions are effective against key compromise but are limited in scenarios where attackers gain direct access to unlocked devices or custodial accounts. The Guardian Address standard provides a uniform, lightweight signalling channel that wallets can use to respond in real time to distress signals. By enabling rapid wallet lock and coordinated monitoring across both self-hosted and custodial environments, Guardian Addresses add an operational security layer that complements consensus layer protections and enhances user resilience under coercion or theft.\n+\n+==Specification==\n+\n+### 1. Wallet Behavior\n+\n+The wallet Guardian lifecycle has four distinct states as visualized in this finite state machine:\n+\n+![Guardian FSM](bip-XXXX/guardian-fsm.png)\n+\n+For each state, the order of operations MUST be adhered to as defined in this BIP.\n+\n+### No Guardian Configuration\n+\n+This is the state of an unconfigured Guardian Address in a wallet. No Guardian Addresses are monitored for protocol signals. No action will be taken in the wallet if any Guardian Address signals a state change. This is also the behavior of non-cooperating BIP wallets that do not implement the standard, ensuring this specification is kept optional and will not affect the operation of existing wallets or nodes.\n+\n+### Guardian Addition\n+\n+* Wallets MUST allow only one Guardian Address at a time. If one is already configured, wallets MUST require the user to remove it first (see Guardian Removal).\n+* Wallets MUST reject any address that matches a spending address managed by the wallet, to enforce key separation and accidental spending of the Guardian signal UTXO.\n+* Wallets MUST ensure that a Guardian Address maintains at least one reserved UTXO for signalling purposes.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - MUST Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII raw ≤40 bytes. Signals MUST match the grammar defined in BIP-A (note: placeholder until BIP assignment).\n+    - MUST Sort them by nonce in ascending order.\n+    - MUST Reject if no signals exist (address not instantiated) or if the highest nonce signal sets `Lock=true`. This prevents accidental locking of the wallet with a Guardian Address outside of the user's control.\n+    - MUST Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate a potential nonce exhaustion issue).\n+* If valid, store the address state and its current highest nonce locally.\n+* Wallets MUST transition to Guardian Monitoring if these operations complete.\n+\n+### Guardian Monitoring\n+\n+![Guardian Monitoring Substate](bip-XXXX/guardian-monitoring.png)\n+\n+**Guardian Address Polling**\n+\n+* If the previously checked block is not set (the wallet is polling the Guardian Address for the first time) wallets MUST poll the Guardian Address from activation block height 914021 onwards (note: placeholder block height will be updated if the BIP progresses to a future BIP assigned height). This is to prevent wallets from polling the entire chain history for the Guardian Address signals.\n+* The configured Guardian Address MUST be sourced from the same storage as used in the Guardian Addition.\n+* Addresses other than the configured Guardian Address MUST NOT be polled for Guardian Monitoring.\n+* The configured Guardian Address SHOULD be polled every 30 seconds. The lower the polling interval, the faster the wallet can respond to the user triggering the lock of the wallet.\n+* The configured Guardian Address MUST be checked every time a new block is created, even if the block is produced before the polling interval.\n+* The Guardian Address MUST be polled for transactions that are pending in the mempool.\n+* Signal transactions MUST be treated equally whether they are included in a block or still in the mempool.\n+* Wallets MUST warn users if the Guardian balance drops to zero or UTXOs are moved without a valid signal `OP_RETURN`.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII, ≤40 bytes. Signals MUST match the grammar defined in BIP-A[^1] (note: placeholder until BIP assignment).\n+    - Sort them by nonce in ascending order.\n+    - Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate potential nonce exhaustion issues).\n+* Wallets MUST store the current block as the previously checked block. This optimizes for speed at wallet startup.\n+* Wallets MUST transition to Guardian State Evaluation if signals present.\n+* Wallets MUST wait for the polling interval before checking for new signals.\n+\n+### Guardian State Evaluation\n+\n+**Nonce Conflict Resolution**\n+\n+Guardian signals use a monotonic nonce to prevent replay attacks and ensure deterministic evaluation of the Guardian state. Wallets MUST resolve conflicts between signals using the following rules:\n+\n+**Monotonicity**\n+\n+* Nonces MUST be strictly greater than the last observed valid nonce.\n+* Wallets MUST ignore any signal with a nonce less than or equal to the locally stored nonce of the configured Guardian Address.\n+* Wallets MUST warn the user if a stale nonce is observed.\n+\n+**Duplicate Nonces**\n+\n+* If two signals share the same nonce and are both confirmed on-chain, the transaction included at the earliest block height MUST take precedence.\n+* If two signals share the same nonce and are both unconfirmed in the mempool, wallets MUST treat the first seen transaction (by mempool arrival time) as canonical until confirmation.\n+* Once one of the duplicates is confirmed, the confirmed transaction MUST override any unconfirmed duplicate. Local storage MUST be updated accordingly.\n+* Wallets MUST warn the user if duplicate nonce usage is detected with different payloads.\n+\n+**Invalid Nonces**\n+\n+* Nonces are 32 bit unsigned integers (0 ≤ nonce ≤ 2^32-1). Values outside this range MUST be rejected and MUST warn the user.\n+* Wallets SHOULD alert the user if the nonce exceeds a high value (e.g., 65,535) to indicate possible nonce exhaustion or misconfiguration.\n+\n+**Mempool Conditions**\n+\n+* Wallets MUST treat a signal as effective once it is visible in the mempool, without waiting for block inclusion.\n+* If such a signal later disappears (due to eviction, replacement, or block reorg), wallets MUST retain the resulting state until a higher nonce signal is observed. This ensures wallets are locked in adversarial mempool conditions. Store a local `signal_observed` record that includes `txid`, `nonce`, `observed_time`, and `state` (`Lock`/`Unlock`) so users can audit why the wallet Guardian state has changed.\n+* Wallets MUST NOT revert to an earlier state purely because the mempool transaction disappeared.\n+* To mitigate censorship, users SHOULD broadcast signals to multiple mining pools.\n+\n+**Latest State Selection**\n+\n+* At any given evaluation, the signal with the highest valid nonce MUST be interpreted as the latest Guardian state, regardless of confirmation status.\n+* Signals MUST be processed in ascending nonce order to ensure sequential evaluation.\n+* If there is a state delta between the received signal and local storage, wallets MUST transition with the highest nonce signal to the Guardian Lock Change substate.\n+* If there are no state changes, wallets MUST transition to Guardian Address Polling substate.\n+\n+### Guardian Lock Change\n+\n+* Wallets MUST update the Guardian lock state in local storage with the signal presented.\n+* Wallets MUST update the latest used Guardian nonce in local storage with the signal presented.\n+* Wallets MUST update the global Guardian lock state user interface and allow UTXOs in the wallet to be spent according to lock state. If the lock state is true, wallets MUST NOT allow UTXOs in the wallet to be spent.\n+* Wallets MUST NOT automatically unlock after any time period or modify state in local storage from sources other than signals from the configured Guardian Address.\n+* Wallets MAY provide the user a pathway to view funds and history, but MUST NOT broadcast new transactions if Guardian Locked.\n+* Wallets MUST transition into the Guardian Address Polling substate after the state change.\n+\n+### Guardian Removal\n+\n+* The Guardian Monitoring substate MUST currently be Guardian Address Polling.\n+* Wallets MUST validate the existing configured Guardian Address in local storage is unlocked.\n+* If the Guardian Address state is locked, wallets MUST NOT allow the removal of the Guardian configuration.\n+\n+### 2. Attack Scenarios\n+\n+#### Device Theft\n+\n+Alice the attacker. Bob the Bitcoin user. Alice coerces Bob under duress to login to his device and applications. Bob's device contains a self-hosted wallet, a Bitcoin exchange application, access to Bob's e-mails, and a two-factor authentication application. After forcing Bob to unlock the device and provide access, Alice takes the device and begins to attempt the Bitcoin theft.\n+\n+Prior to the attack, Bob configured a Guardian Address across all of his Bitcoin wallets. Though he no longer has his device as it has been stolen by Alice, Bob broadcasts a Guardian Lock message to the Bitcoin blockchain using a pre-signed transaction that he has available outside of the stolen device. Centralized services Bob uses have recognized the distress signal and accounts have been frozen. The self-hosted wallet is Guardian Locked and does not allow UTXOs to be spent. Despite having all the information to gain access to Bob's collective Bitcoin holdings, Alice's attack has not resulted in the loss of any Bitcoin.",
      "path": "bip-guardian-wallet.mediawiki",
      "position": 130,
      "original_position": 130,
      "commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "original_commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This scenario is unconvincing. Why would Alice release Bob from the duress before sending the transaction if the signer is already unlocked?",
      "created_at": "2025-10-06T17:59:27Z",
      "updated_at": "2025-10-06T18:32:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1972#discussion_r2407732173",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407732173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407742567",
      "pull_request_review_id": 3306286307,
      "id": 2407742567,
      "node_id": "PRRC_kwDOAN28mc6Pgzxn",
      "diff_hunk": "@@ -0,0 +1,275 @@\n+<pre>\n+  BIP: TBD\n+  Layer: Applications\n+  Title: Guardian Address Wallet Implementation\n+  Author: Bitcoin Guardian <bitcoinguardian@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-09-19\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines the wallet implementation of Guardian Addresses, an application layer signaling mechanism that allows users to remotely lock or unlock their Bitcoin wallets via on-chain OP_RETURN signals. The specification standardizes how wallets configure, monitor, and enforce Guardian signals, ensuring consistent behavior across implementations while remaining backwards compatible with existing wallets and bitcoin nodes.\n+\n+==Motivation==\n+\n+Physical coercion and theft remain persistent risks for bitcoin users. Existing protections such as multisig or vault constructions are effective against key compromise but are limited in scenarios where attackers gain direct access to unlocked devices or custodial accounts. The Guardian Address standard provides a uniform, lightweight signalling channel that wallets can use to respond in real time to distress signals. By enabling rapid wallet lock and coordinated monitoring across both self-hosted and custodial environments, Guardian Addresses add an operational security layer that complements consensus layer protections and enhances user resilience under coercion or theft.\n+\n+==Specification==\n+\n+### 1. Wallet Behavior\n+\n+The wallet Guardian lifecycle has four distinct states as visualized in this finite state machine:\n+\n+![Guardian FSM](bip-XXXX/guardian-fsm.png)\n+\n+For each state, the order of operations MUST be adhered to as defined in this BIP.\n+\n+### No Guardian Configuration\n+\n+This is the state of an unconfigured Guardian Address in a wallet. No Guardian Addresses are monitored for protocol signals. No action will be taken in the wallet if any Guardian Address signals a state change. This is also the behavior of non-cooperating BIP wallets that do not implement the standard, ensuring this specification is kept optional and will not affect the operation of existing wallets or nodes.\n+\n+### Guardian Addition\n+\n+* Wallets MUST allow only one Guardian Address at a time. If one is already configured, wallets MUST require the user to remove it first (see Guardian Removal).\n+* Wallets MUST reject any address that matches a spending address managed by the wallet, to enforce key separation and accidental spending of the Guardian signal UTXO.\n+* Wallets MUST ensure that a Guardian Address maintains at least one reserved UTXO for signalling purposes.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - MUST Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII raw ≤40 bytes. Signals MUST match the grammar defined in BIP-A (note: placeholder until BIP assignment).\n+    - MUST Sort them by nonce in ascending order.\n+    - MUST Reject if no signals exist (address not instantiated) or if the highest nonce signal sets `Lock=true`. This prevents accidental locking of the wallet with a Guardian Address outside of the user's control.\n+    - MUST Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate a potential nonce exhaustion issue).\n+* If valid, store the address state and its current highest nonce locally.\n+* Wallets MUST transition to Guardian Monitoring if these operations complete.\n+\n+### Guardian Monitoring\n+\n+![Guardian Monitoring Substate](bip-XXXX/guardian-monitoring.png)\n+\n+**Guardian Address Polling**\n+\n+* If the previously checked block is not set (the wallet is polling the Guardian Address for the first time) wallets MUST poll the Guardian Address from activation block height 914021 onwards (note: placeholder block height will be updated if the BIP progresses to a future BIP assigned height). This is to prevent wallets from polling the entire chain history for the Guardian Address signals.\n+* The configured Guardian Address MUST be sourced from the same storage as used in the Guardian Addition.\n+* Addresses other than the configured Guardian Address MUST NOT be polled for Guardian Monitoring.\n+* The configured Guardian Address SHOULD be polled every 30 seconds. The lower the polling interval, the faster the wallet can respond to the user triggering the lock of the wallet.\n+* The configured Guardian Address MUST be checked every time a new block is created, even if the block is produced before the polling interval.\n+* The Guardian Address MUST be polled for transactions that are pending in the mempool.\n+* Signal transactions MUST be treated equally whether they are included in a block or still in the mempool.\n+* Wallets MUST warn users if the Guardian balance drops to zero or UTXOs are moved without a valid signal `OP_RETURN`.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII, ≤40 bytes. Signals MUST match the grammar defined in BIP-A[^1] (note: placeholder until BIP assignment).\n+    - Sort them by nonce in ascending order.\n+    - Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate potential nonce exhaustion issues).\n+* Wallets MUST store the current block as the previously checked block. This optimizes for speed at wallet startup.\n+* Wallets MUST transition to Guardian State Evaluation if signals present.\n+* Wallets MUST wait for the polling interval before checking for new signals.\n+\n+### Guardian State Evaluation\n+\n+**Nonce Conflict Resolution**\n+\n+Guardian signals use a monotonic nonce to prevent replay attacks and ensure deterministic evaluation of the Guardian state. Wallets MUST resolve conflicts between signals using the following rules:\n+\n+**Monotonicity**\n+\n+* Nonces MUST be strictly greater than the last observed valid nonce.\n+* Wallets MUST ignore any signal with a nonce less than or equal to the locally stored nonce of the configured Guardian Address.\n+* Wallets MUST warn the user if a stale nonce is observed.\n+\n+**Duplicate Nonces**\n+\n+* If two signals share the same nonce and are both confirmed on-chain, the transaction included at the earliest block height MUST take precedence.\n+* If two signals share the same nonce and are both unconfirmed in the mempool, wallets MUST treat the first seen transaction (by mempool arrival time) as canonical until confirmation.\n+* Once one of the duplicates is confirmed, the confirmed transaction MUST override any unconfirmed duplicate. Local storage MUST be updated accordingly.\n+* Wallets MUST warn the user if duplicate nonce usage is detected with different payloads.\n+\n+**Invalid Nonces**\n+\n+* Nonces are 32 bit unsigned integers (0 ≤ nonce ≤ 2^32-1). Values outside this range MUST be rejected and MUST warn the user.\n+* Wallets SHOULD alert the user if the nonce exceeds a high value (e.g., 65,535) to indicate possible nonce exhaustion or misconfiguration.\n+\n+**Mempool Conditions**\n+\n+* Wallets MUST treat a signal as effective once it is visible in the mempool, without waiting for block inclusion.\n+* If such a signal later disappears (due to eviction, replacement, or block reorg), wallets MUST retain the resulting state until a higher nonce signal is observed. This ensures wallets are locked in adversarial mempool conditions. Store a local `signal_observed` record that includes `txid`, `nonce`, `observed_time`, and `state` (`Lock`/`Unlock`) so users can audit why the wallet Guardian state has changed.\n+* Wallets MUST NOT revert to an earlier state purely because the mempool transaction disappeared.\n+* To mitigate censorship, users SHOULD broadcast signals to multiple mining pools.\n+\n+**Latest State Selection**\n+\n+* At any given evaluation, the signal with the highest valid nonce MUST be interpreted as the latest Guardian state, regardless of confirmation status.\n+* Signals MUST be processed in ascending nonce order to ensure sequential evaluation.\n+* If there is a state delta between the received signal and local storage, wallets MUST transition with the highest nonce signal to the Guardian Lock Change substate.\n+* If there are no state changes, wallets MUST transition to Guardian Address Polling substate.\n+\n+### Guardian Lock Change\n+\n+* Wallets MUST update the Guardian lock state in local storage with the signal presented.\n+* Wallets MUST update the latest used Guardian nonce in local storage with the signal presented.\n+* Wallets MUST update the global Guardian lock state user interface and allow UTXOs in the wallet to be spent according to lock state. If the lock state is true, wallets MUST NOT allow UTXOs in the wallet to be spent.\n+* Wallets MUST NOT automatically unlock after any time period or modify state in local storage from sources other than signals from the configured Guardian Address.\n+* Wallets MAY provide the user a pathway to view funds and history, but MUST NOT broadcast new transactions if Guardian Locked.\n+* Wallets MUST transition into the Guardian Address Polling substate after the state change.\n+\n+### Guardian Removal\n+\n+* The Guardian Monitoring substate MUST currently be Guardian Address Polling.\n+* Wallets MUST validate the existing configured Guardian Address in local storage is unlocked.\n+* If the Guardian Address state is locked, wallets MUST NOT allow the removal of the Guardian configuration.\n+\n+### 2. Attack Scenarios\n+\n+#### Device Theft\n+\n+Alice the attacker. Bob the Bitcoin user. Alice coerces Bob under duress to login to his device and applications. Bob's device contains a self-hosted wallet, a Bitcoin exchange application, access to Bob's e-mails, and a two-factor authentication application. After forcing Bob to unlock the device and provide access, Alice takes the device and begins to attempt the Bitcoin theft.\n+\n+Prior to the attack, Bob configured a Guardian Address across all of his Bitcoin wallets. Though he no longer has his device as it has been stolen by Alice, Bob broadcasts a Guardian Lock message to the Bitcoin blockchain using a pre-signed transaction that he has available outside of the stolen device. Centralized services Bob uses have recognized the distress signal and accounts have been frozen. The self-hosted wallet is Guardian Locked and does not allow UTXOs to be spent. Despite having all the information to gain access to Bob's collective Bitcoin holdings, Alice's attack has not resulted in the loss of any Bitcoin.\n+\n+After the attack is over and the threat has been mitigated, Bob is able to recover access to his wallets by broadcasting a Guardian Unlock transaction with the private key of the Guardian Address.\n+\n+If Bob regains the device, he is able to recover access to his wallet(s) by broadcasting a Guardian Unlock transaction with the private key of the Guardian Address. No UTXOs could be spent while the device was stolen since Bob locked the wallet(s). Now Bob has unlocked the wallet(s) he has the ability to spend UTXOs that were previously locked.\n+\n+#### Public Figure\n+\n+Alice the attacker. Bob the Bitcoin public figure. Bob's public status makes him a target for threat actors. Bob wants a balance between his own personal freedom and security from physical attacks. He keeps a private security team on response near his residence, but lives in his family house with privacy.\n+\n+Alice is an intruder that is attempting to break into the house to demand bitcoin be transferred. A security automation system recognises threat and locks wallets via broadcasting a pre-signed Guardian Lock transaction. This locks Bob's wallets and prevents spending of UTXOs through theft.\n+\n+The security team has also been alerted since they monitor the Guardian Address. They do not know which wallets belong to Bob, maintaining his privacy while keeping his bitcoin safe. His physical security has been protected with the response ensuring his family's safety.\n+\n+### 3. Threat Model and Limitations\n+\n+Guardian Addresses will not protect wallets that are airgapped or otherwise unable to query address state from the latest block height.\n+\n+If a Guardian Address key is lost or compromised, the user MUST rotate to a new Guardian Address. Wallet funds are unaffected since the Guardian cannot spend UTXOs, but monitoring and `Lock/Unlock` state depends on a secure Guardian.\n+\n+This mechanism provides resilience if Guardian keys or pre-signed transactions are not accessible under coercion. It does not protect if attackers demand Guardian material directly or prevent the broadcast of a lock signal.\n+\n+Guardian provides signaling and coordination, not enforceable spending constraints. It is therefore effective in some coercion or theft scenarios, but not all. The following table summarizes the expected impact of the Guardian Address mechanism under various threat scenarios, with and without external monitoring (e.g., security teams, automated alerts, or third-party services actively watching the Guardian Address for signals). External monitoring enhances deterrence by acting as a distress beacon, potentially triggering physical or operational responses that disrupt an attacker's plans.\n+\n+| Threat | Guardian Impact (No External Monitoring) | Guardian Impact (With External Monitoring) |\n+|----------------------------------------|------------------------------------------|------------------------------------------|",
      "path": "bip-guardian-wallet.mediawiki",
      "position": 155,
      "original_position": 155,
      "commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "original_commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "<img width=\"1047\" height=\"545\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/23744d34-7ee6-4b7c-8d1f-510e5d2ca4ad\" />",
      "created_at": "2025-10-06T18:01:47Z",
      "updated_at": "2025-10-06T18:32:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1972#discussion_r2407742567",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407742567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 155,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407751220",
      "pull_request_review_id": 3306286307,
      "id": 2407751220,
      "node_id": "PRRC_kwDOAN28mc6Pg140",
      "diff_hunk": "@@ -0,0 +1,275 @@\n+<pre>\n+  BIP: TBD\n+  Layer: Applications\n+  Title: Guardian Address Wallet Implementation\n+  Author: Bitcoin Guardian <bitcoinguardian@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-09-19\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines the wallet implementation of Guardian Addresses, an application layer signaling mechanism that allows users to remotely lock or unlock their Bitcoin wallets via on-chain OP_RETURN signals. The specification standardizes how wallets configure, monitor, and enforce Guardian signals, ensuring consistent behavior across implementations while remaining backwards compatible with existing wallets and bitcoin nodes.\n+\n+==Motivation==\n+\n+Physical coercion and theft remain persistent risks for bitcoin users. Existing protections such as multisig or vault constructions are effective against key compromise but are limited in scenarios where attackers gain direct access to unlocked devices or custodial accounts. The Guardian Address standard provides a uniform, lightweight signalling channel that wallets can use to respond in real time to distress signals. By enabling rapid wallet lock and coordinated monitoring across both self-hosted and custodial environments, Guardian Addresses add an operational security layer that complements consensus layer protections and enhances user resilience under coercion or theft.\n+\n+==Specification==\n+\n+### 1. Wallet Behavior\n+\n+The wallet Guardian lifecycle has four distinct states as visualized in this finite state machine:\n+\n+![Guardian FSM](bip-XXXX/guardian-fsm.png)\n+\n+For each state, the order of operations MUST be adhered to as defined in this BIP.\n+\n+### No Guardian Configuration\n+\n+This is the state of an unconfigured Guardian Address in a wallet. No Guardian Addresses are monitored for protocol signals. No action will be taken in the wallet if any Guardian Address signals a state change. This is also the behavior of non-cooperating BIP wallets that do not implement the standard, ensuring this specification is kept optional and will not affect the operation of existing wallets or nodes.\n+\n+### Guardian Addition\n+\n+* Wallets MUST allow only one Guardian Address at a time. If one is already configured, wallets MUST require the user to remove it first (see Guardian Removal).\n+* Wallets MUST reject any address that matches a spending address managed by the wallet, to enforce key separation and accidental spending of the Guardian signal UTXO.\n+* Wallets MUST ensure that a Guardian Address maintains at least one reserved UTXO for signalling purposes.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - MUST Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII raw ≤40 bytes. Signals MUST match the grammar defined in BIP-A (note: placeholder until BIP assignment).\n+    - MUST Sort them by nonce in ascending order.\n+    - MUST Reject if no signals exist (address not instantiated) or if the highest nonce signal sets `Lock=true`. This prevents accidental locking of the wallet with a Guardian Address outside of the user's control.\n+    - MUST Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate a potential nonce exhaustion issue).\n+* If valid, store the address state and its current highest nonce locally.\n+* Wallets MUST transition to Guardian Monitoring if these operations complete.\n+\n+### Guardian Monitoring\n+\n+![Guardian Monitoring Substate](bip-XXXX/guardian-monitoring.png)\n+\n+**Guardian Address Polling**\n+\n+* If the previously checked block is not set (the wallet is polling the Guardian Address for the first time) wallets MUST poll the Guardian Address from activation block height 914021 onwards (note: placeholder block height will be updated if the BIP progresses to a future BIP assigned height). This is to prevent wallets from polling the entire chain history for the Guardian Address signals.\n+* The configured Guardian Address MUST be sourced from the same storage as used in the Guardian Addition.\n+* Addresses other than the configured Guardian Address MUST NOT be polled for Guardian Monitoring.\n+* The configured Guardian Address SHOULD be polled every 30 seconds. The lower the polling interval, the faster the wallet can respond to the user triggering the lock of the wallet.\n+* The configured Guardian Address MUST be checked every time a new block is created, even if the block is produced before the polling interval.\n+* The Guardian Address MUST be polled for transactions that are pending in the mempool.\n+* Signal transactions MUST be treated equally whether they are included in a block or still in the mempool.\n+* Wallets MUST warn users if the Guardian balance drops to zero or UTXOs are moved without a valid signal `OP_RETURN`.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII, ≤40 bytes. Signals MUST match the grammar defined in BIP-A[^1] (note: placeholder until BIP assignment).\n+    - Sort them by nonce in ascending order.\n+    - Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate potential nonce exhaustion issues).\n+* Wallets MUST store the current block as the previously checked block. This optimizes for speed at wallet startup.\n+* Wallets MUST transition to Guardian State Evaluation if signals present.\n+* Wallets MUST wait for the polling interval before checking for new signals.\n+\n+### Guardian State Evaluation\n+\n+**Nonce Conflict Resolution**\n+\n+Guardian signals use a monotonic nonce to prevent replay attacks and ensure deterministic evaluation of the Guardian state. Wallets MUST resolve conflicts between signals using the following rules:\n+\n+**Monotonicity**\n+\n+* Nonces MUST be strictly greater than the last observed valid nonce.\n+* Wallets MUST ignore any signal with a nonce less than or equal to the locally stored nonce of the configured Guardian Address.\n+* Wallets MUST warn the user if a stale nonce is observed.\n+\n+**Duplicate Nonces**\n+\n+* If two signals share the same nonce and are both confirmed on-chain, the transaction included at the earliest block height MUST take precedence.\n+* If two signals share the same nonce and are both unconfirmed in the mempool, wallets MUST treat the first seen transaction (by mempool arrival time) as canonical until confirmation.\n+* Once one of the duplicates is confirmed, the confirmed transaction MUST override any unconfirmed duplicate. Local storage MUST be updated accordingly.\n+* Wallets MUST warn the user if duplicate nonce usage is detected with different payloads.\n+\n+**Invalid Nonces**\n+\n+* Nonces are 32 bit unsigned integers (0 ≤ nonce ≤ 2^32-1). Values outside this range MUST be rejected and MUST warn the user.\n+* Wallets SHOULD alert the user if the nonce exceeds a high value (e.g., 65,535) to indicate possible nonce exhaustion or misconfiguration.\n+\n+**Mempool Conditions**\n+\n+* Wallets MUST treat a signal as effective once it is visible in the mempool, without waiting for block inclusion.\n+* If such a signal later disappears (due to eviction, replacement, or block reorg), wallets MUST retain the resulting state until a higher nonce signal is observed. This ensures wallets are locked in adversarial mempool conditions. Store a local `signal_observed` record that includes `txid`, `nonce`, `observed_time`, and `state` (`Lock`/`Unlock`) so users can audit why the wallet Guardian state has changed.\n+* Wallets MUST NOT revert to an earlier state purely because the mempool transaction disappeared.\n+* To mitigate censorship, users SHOULD broadcast signals to multiple mining pools.\n+\n+**Latest State Selection**\n+\n+* At any given evaluation, the signal with the highest valid nonce MUST be interpreted as the latest Guardian state, regardless of confirmation status.\n+* Signals MUST be processed in ascending nonce order to ensure sequential evaluation.\n+* If there is a state delta between the received signal and local storage, wallets MUST transition with the highest nonce signal to the Guardian Lock Change substate.\n+* If there are no state changes, wallets MUST transition to Guardian Address Polling substate.\n+\n+### Guardian Lock Change\n+\n+* Wallets MUST update the Guardian lock state in local storage with the signal presented.\n+* Wallets MUST update the latest used Guardian nonce in local storage with the signal presented.\n+* Wallets MUST update the global Guardian lock state user interface and allow UTXOs in the wallet to be spent according to lock state. If the lock state is true, wallets MUST NOT allow UTXOs in the wallet to be spent.\n+* Wallets MUST NOT automatically unlock after any time period or modify state in local storage from sources other than signals from the configured Guardian Address.\n+* Wallets MAY provide the user a pathway to view funds and history, but MUST NOT broadcast new transactions if Guardian Locked.\n+* Wallets MUST transition into the Guardian Address Polling substate after the state change.\n+\n+### Guardian Removal\n+\n+* The Guardian Monitoring substate MUST currently be Guardian Address Polling.\n+* Wallets MUST validate the existing configured Guardian Address in local storage is unlocked.\n+* If the Guardian Address state is locked, wallets MUST NOT allow the removal of the Guardian configuration.\n+\n+### 2. Attack Scenarios\n+\n+#### Device Theft\n+\n+Alice the attacker. Bob the Bitcoin user. Alice coerces Bob under duress to login to his device and applications. Bob's device contains a self-hosted wallet, a Bitcoin exchange application, access to Bob's e-mails, and a two-factor authentication application. After forcing Bob to unlock the device and provide access, Alice takes the device and begins to attempt the Bitcoin theft.\n+\n+Prior to the attack, Bob configured a Guardian Address across all of his Bitcoin wallets. Though he no longer has his device as it has been stolen by Alice, Bob broadcasts a Guardian Lock message to the Bitcoin blockchain using a pre-signed transaction that he has available outside of the stolen device. Centralized services Bob uses have recognized the distress signal and accounts have been frozen. The self-hosted wallet is Guardian Locked and does not allow UTXOs to be spent. Despite having all the information to gain access to Bob's collective Bitcoin holdings, Alice's attack has not resulted in the loss of any Bitcoin.\n+\n+After the attack is over and the threat has been mitigated, Bob is able to recover access to his wallets by broadcasting a Guardian Unlock transaction with the private key of the Guardian Address.\n+\n+If Bob regains the device, he is able to recover access to his wallet(s) by broadcasting a Guardian Unlock transaction with the private key of the Guardian Address. No UTXOs could be spent while the device was stolen since Bob locked the wallet(s). Now Bob has unlocked the wallet(s) he has the ability to spend UTXOs that were previously locked.\n+\n+#### Public Figure\n+\n+Alice the attacker. Bob the Bitcoin public figure. Bob's public status makes him a target for threat actors. Bob wants a balance between his own personal freedom and security from physical attacks. He keeps a private security team on response near his residence, but lives in his family house with privacy.\n+\n+Alice is an intruder that is attempting to break into the house to demand bitcoin be transferred. A security automation system recognises threat and locks wallets via broadcasting a pre-signed Guardian Lock transaction. This locks Bob's wallets and prevents spending of UTXOs through theft.\n+\n+The security team has also been alerted since they monitor the Guardian Address. They do not know which wallets belong to Bob, maintaining his privacy while keeping his bitcoin safe. His physical security has been protected with the response ensuring his family's safety.\n+\n+### 3. Threat Model and Limitations\n+\n+Guardian Addresses will not protect wallets that are airgapped or otherwise unable to query address state from the latest block height.\n+\n+If a Guardian Address key is lost or compromised, the user MUST rotate to a new Guardian Address. Wallet funds are unaffected since the Guardian cannot spend UTXOs, but monitoring and `Lock/Unlock` state depends on a secure Guardian.\n+\n+This mechanism provides resilience if Guardian keys or pre-signed transactions are not accessible under coercion. It does not protect if attackers demand Guardian material directly or prevent the broadcast of a lock signal.\n+\n+Guardian provides signaling and coordination, not enforceable spending constraints. It is therefore effective in some coercion or theft scenarios, but not all. The following table summarizes the expected impact of the Guardian Address mechanism under various threat scenarios, with and without external monitoring (e.g., security teams, automated alerts, or third-party services actively watching the Guardian Address for signals). External monitoring enhances deterrence by acting as a distress beacon, potentially triggering physical or operational responses that disrupt an attacker's plans.\n+\n+| Threat | Guardian Impact (No External Monitoring) | Guardian Impact (With External Monitoring) |\n+|----------------------------------------|------------------------------------------|------------------------------------------|\n+| **Device Theft** (phone/laptop stolen) | ✅ Lock can be broadcast remotely, rendering the attacker’s copy of the wallet unusable. Funds remain safe until the user broadcasts an Unlock signal. | ✅ Same as without monitoring, plus external responders (e.g., security team) are alerted to the theft via the Lock signal, potentially enabling recovery efforts or tracking. |\n+| **Custodian Account Compromise** | ✅ Custodian may freeze withdrawals or require manual review upon Lock, limiting exposure for centralized accounts. | ✅ Enhanced by external monitoring, as custodians or third parties can act faster (e.g., freezing accounts or notifying authorities) upon seeing the Lock signal in the mempool. |\n+| **Travel in Unsafe Jurisdictions** | ✅ User may proactively Lock funds before exposure, reducing risk of forced spending. Pre-signed transactions enable rapid response without carrying keys. | ✅ Lock signal can alert local or remote responders (e.g., private security), increasing deterrence as attackers may fear intervention, especially in high-risk areas. |\n+| **Opportunistic Mugging** (“hand over your wallet now”) | ⚠️ A Lock may be triggered via voice/automation or pre-signed transaction if the user can safely broadcast it, but success is not guaranteed under immediate threat. Signal Boxes improve chances with diverse activation methods. | ⚠️/✅ External monitoring improves outcomes: the Lock signal could alert nearby responders (e.g., police or security), deterring the attacker if they suspect intervention. Success depends on response speed and attacker awareness. |\n+| **Sustained Coercion** (attacker controls victim) | ❌ Guardian cannot guarantee safety; an attacker may escalate threats to force disclosure of keys or prevent lock broadcast. Physical separation of pre-signed transactions mitigates but doesn’t eliminate risk. | ⚠️ Limited protection, but external monitoring may deter escalation if the attacker knows the Lock signal could trigger a physical response (e.g., police or security team arrival). Effectiveness depends on response speed and attacker’s knowledge of the Guardian. |\n+| **Loss or Theft of Guardian Key** | ⚠️ Wallet remains spendable; signaling is disabled until rotated to a new Guardian Address. A leaked pre-signed Lock transaction may cause a one-time griefing Lock, but is recoverable with an Unlock signal. | ⚠️ Same as without monitoring. External responders may still act on a griefing Lock, causing temporary inconvenience but not affecting fund security. Users must rotate the Guardian Address promptly. |\n+\n+Guardian Addresses should be considered an additional layer of defense against common theft and coercion scenarios. It MUST NOT be relied upon as complete protection against determined physical attacks. Users leveraging external monitoring (e.g., via APIs, watchtowers, or private security integrations) can enhance deterrence, as the Lock signal serves as a distress beacon, but success depends on the speed and reliability of the response mechanism.\n+\n+==Compatibility==\n+\n+The proposal is backwards compatible with existing wallets and Bitcoin nodes as it uses standard address formats and `OP_RETURN`. Non-cooperative wallets will ignore the signalling mechanism. This BIP does not attempt to cryptographically restrict spending conditions at the consensus layer.\n+\n+Vault and covenant constructions (e.g., pre-signed vaults, deleted key covenants, or future consensus changes such as `OP_VAULT` or `OP_CHECKTEMPLATEVERIFY`) provide enforceable spending constraints that protect coins even if signing keys are compromised. These tools are powerful for self custody, but they apply only to UTXOs that have been intentionally placed under covenant rules, and they cannot directly influence how centralized custodians manage user balances.\n+\n+The Guardian Address standard is intended to be complementary to spending rule mechanisms. It can operate across both self-hosted and custodial wallets, providing a uniform way to trigger emergency responses. This BIP requires no changes to Bitcoin consensus and can be deployed immediately by cooperating wallet software and service providers. It can be combined with vault implementations. For example, a Guardian Lock signal could trigger a watchtower or co-signer to broadcast a pre-signed re-vault transaction, or could instruct a custodian to freeze withdrawals pending further verification.\n+\n+In this layered model, spending rules provide strong technical enforcement, while the Guardian Address provides operational coordination and rapid signalling across diverse custody wallets. Spending rules and Guardian Addresses are synergistic in this respect.\n+\n+The minimum protocol signalling payload in an `OP_RETURN` output is 19 vBytes for a `Lock` and 20 vBytes for an `Unlock` in version 1 of the protocol. The transaction is built with 20 vBytes for the canonical identifier and operation, and 20 vBytes for the monotonic nonce. The protocol is lightweight enough to ensure Guardian signalling transactions will be relayed by nodes with a default maximum `OP_RETURN` transaction limit of 40 vBytes, such as some Bitcoin Knots deployments.\n+\n+==Security Considerations==\n+\n+This signalling mechanism is an application layer security feature and does not change consensus rules or script enforcement.\n+\n+A griefing vector exists where an unauthorized third party broadcasts a `Lock` signal from the Guardian Address. This could happen if the griefing attacker gains access to the pre-signed `Lock` signal transaction and broadcasts it to the mempool. However, this lockout is temporary, recoverable, and fully under the user’s control. A monotonic nonce is included in each protocol signal so that even if a pre-signed transaction is obtained and used by an attacker, it may only be used once, limiting the impact of this to a single occurrence. This griefing vector is further mitigated by user education of secure pre-signed transaction storage. The trade off favors wide usability and deployment over strict tamper resistance hardware requirments, since key material is not required to be carried by the user.\n+\n+Wallets will always retain the ability to reset their Guardian state by creating a new transaction with `Lock=false` signed by the same Guardian private key and the incrementing monotonic nonce.\n+\n+Users MUST ensure their pre-signed Lock transactions reference a stable UTXO. Wallets SHOULD warn users if the UTXO required for a pre-signed `Lock` transaction is no longer available.\n+\n+Non-RBF eliminates the ability to replace pre-signed `Lock` transactions with a tampered `OP_RETURN`, which is crucial for the signal integrity and nonce based replay protection.\n+\n+This design intentionally avoids requiring secure enclaves or hardware protected state. Instead, the device that triggers the lock stores only a pre-signed transaction and not signing material, reducing the risk of key material compromise while still enabling `Lock` activation.\n+\n+Users MAY use hardware for managing Guardian key signing with secure storage.\n+\n+A forced signalling attack occurs when an attacker coerces the victim to send an undesired signal. The key material for the Guardian Address must be physically unavailable to the user in a secure location to prevent this scenario.",
      "path": "bip-guardian-wallet.mediawiki",
      "position": 193,
      "original_position": 193,
      "commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "original_commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "How would you compare your proposal to a multisig setup with signing devices in multiple locations?",
      "created_at": "2025-10-06T18:03:49Z",
      "updated_at": "2025-10-06T18:32:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1972#discussion_r2407751220",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407751220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 193,
      "original_line": 193,
      "side": "RIGHT"
    }
  ]
}