{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/923",
    "id": 419014021,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDE5MDE0MDIx",
    "html_url": "https://github.com/bitcoin/bips/pull/923",
    "diff_url": "https://github.com/bitcoin/bips/pull/923.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/923.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/923/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/923/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/923/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
    "number": 923,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "BIP 78: Add payjoin proposal",
    "user": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Previous discussion at https://github.com/NicolasDorier/bips/pull/3\r\n\r\nSubmitting to mailing list.",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2020-05-16T19:41:34Z",
    "updated_at": "2020-08-05T04:43:21Z",
    "closed_at": "2020-06-25T05:15:16Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-06-25T05:15:16Z",
    "merge_commit_sha": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "NicolasDorier:pj",
      "ref": "pj",
      "sha": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 19277826,
        "node_id": "MDEwOlJlcG9zaXRvcnkxOTI3NzgyNg==",
        "name": "bips",
        "full_name": "NicolasDorier/bips",
        "owner": {
          "login": "NicolasDorier",
          "id": 3020646,
          "node_id": "MDQ6VXNlcjMwMjA2NDY=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/NicolasDorier",
          "html_url": "https://github.com/NicolasDorier",
          "followers_url": "https://api.github.com/users/NicolasDorier/followers",
          "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
          "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
          "repos_url": "https://api.github.com/users/NicolasDorier/repos",
          "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/NicolasDorier/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/NicolasDorier/bips",
        "archive_url": "https://api.github.com/repos/NicolasDorier/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/NicolasDorier/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/NicolasDorier/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/NicolasDorier/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/NicolasDorier/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/NicolasDorier/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/NicolasDorier/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/NicolasDorier/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/NicolasDorier/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/NicolasDorier/bips/contributors",
        "deployments_url": "https://api.github.com/repos/NicolasDorier/bips/deployments",
        "downloads_url": "https://api.github.com/repos/NicolasDorier/bips/downloads",
        "events_url": "https://api.github.com/repos/NicolasDorier/bips/events",
        "forks_url": "https://api.github.com/repos/NicolasDorier/bips/forks",
        "git_commits_url": "https://api.github.com/repos/NicolasDorier/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/NicolasDorier/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/NicolasDorier/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/NicolasDorier/bips.git",
        "issue_comment_url": "https://api.github.com/repos/NicolasDorier/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/NicolasDorier/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/NicolasDorier/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/NicolasDorier/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/NicolasDorier/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/NicolasDorier/bips/languages",
        "merges_url": "https://api.github.com/repos/NicolasDorier/bips/merges",
        "milestones_url": "https://api.github.com/repos/NicolasDorier/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/NicolasDorier/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/NicolasDorier/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/NicolasDorier/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:NicolasDorier/bips.git",
        "stargazers_url": "https://api.github.com/repos/NicolasDorier/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/NicolasDorier/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/NicolasDorier/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/NicolasDorier/bips/subscription",
        "tags_url": "https://api.github.com/repos/NicolasDorier/bips/tags",
        "teams_url": "https://api.github.com/repos/NicolasDorier/bips/teams",
        "trees_url": "https://api.github.com/repos/NicolasDorier/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/NicolasDorier/bips.git",
        "hooks_url": "https://api.github.com/repos/NicolasDorier/bips/hooks",
        "svn_url": "https://github.com/NicolasDorier/bips",
        "homepage": "bitcoin.org",
        "language": "Python",
        "forks_count": 1,
        "stargazers_count": 8,
        "watchers_count": 8,
        "size": 9349,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2021-09-01T08:53:38Z",
        "created_at": "2014-04-29T13:41:58Z",
        "updated_at": "2023-06-29T02:17:14Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "7e680f9f6b693b36c1220542124fb7d7719719d8",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5535,
        "stargazers_count": 8220,
        "watchers_count": 8220,
        "size": 13787,
        "default_branch": "master",
        "open_issues_count": 112,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T12:09:15Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2023-08-01T09:08:43Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 683,
    "deletions": 0,
    "changed_files": 2,
    "commits": 45,
    "review_comments": 89,
    "comments": 141
  },
  "events": [
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-16T20:11:25Z",
      "updated_at": "2020-05-16T20:11:25Z",
      "source": {
        "issue": {
          "id": 615129286,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDE1NTQzNDM2",
          "url": "https://api.github.com/repos/NicolasDorier/bips/issues/3",
          "repository_url": "https://api.github.com/repos/NicolasDorier/bips",
          "labels_url": "https://api.github.com/repos/NicolasDorier/bips/issues/3/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/NicolasDorier/bips/issues/3/comments",
          "events_url": "https://api.github.com/repos/NicolasDorier/bips/issues/3/events",
          "html_url": "https://github.com/NicolasDorier/bips/pull/3",
          "number": 3,
          "state": "closed",
          "state_reason": null,
          "title": "BIP: Add payjoin proposal",
          "body": "Ping @Kukks @junderw @lukechilds @lontivero @AdamISZ @ncoelho @nopara73\r\n\r\nI am preparing the BIP to submit to the mailing list.\r\n\r\nThis is https://docs.btcpayserver.org/features/payjoin/payjoin-spec but without the btcpayserver specific parts, and more detailed on the protocol aspects.",
          "user": {
            "login": "NicolasDorier",
            "id": 3020646,
            "node_id": "MDQ6VXNlcjMwMjA2NDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/NicolasDorier",
            "html_url": "https://github.com/NicolasDorier",
            "followers_url": "https://api.github.com/users/NicolasDorier/followers",
            "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
            "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
            "repos_url": "https://api.github.com/users/NicolasDorier/repos",
            "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "OWNER",
          "locked": false,
          "comments": 20,
          "pull_request": {
            "url": "https://api.github.com/repos/NicolasDorier/bips/pulls/3",
            "html_url": "https://github.com/NicolasDorier/bips/pull/3",
            "diff_url": "https://github.com/NicolasDorier/bips/pull/3.diff",
            "patch_url": "https://github.com/NicolasDorier/bips/pull/3.patch"
          },
          "closed_at": "2020-05-16T20:11:25Z",
          "created_at": "2020-05-09T09:02:27Z",
          "updated_at": "2020-05-16T20:11:25Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6M2ZhZjZlNzU0MGU5OTI1YjUzNjcwMWM5NjQ0ZTY2MjJiOGQyNWIxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3faf6e7540e9925b536701c9644e6622b8d25b19",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3faf6e7540e9925b536701c9644e6622b8d25b19",
      "tree": {
        "sha": "4d8300da632488e1b97e3d0aae0349974e5f3c36",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4d8300da632488e1b97e3d0aae0349974e5f3c36"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4d8300da632488e1b97e3d0aae0349974e5f3c36\nparent 4fb2c5290e10270c8e4a6df357fe98bfab2ddfe9\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1589013239 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1589662763 +0900\n\nAdd payjoin proposal\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7AVCsACgkQZhh2PvCR\nhv4AzxAAq/DgjovepDPnJcbtM0BeZseqL5skrWoExVvErt6C0jEwK2cc0Tej+cg+\nFQzVKuz4jR+Ft07xXdnHlTHdII+YFRSqBj3KudeLXg08B5nT1Dxg4m/UJFzuD7AW\ndKj7AKCD+cgsX0zNkMd1X98Ev7FWWIxS0I9radA3+m4LL+QoahvZYB7CWhfjnU0d\nwnbihxe5lTub76jp3J6c75e7bFNhFkR0OEG3txj12LyCkfl3FVSh13sFV5D4586w\necHE9w7/D/A1YobzPZtaKYKZ3JB16e9Qd1ss9Zm3Az3vFsVxN0Cx/m92CGMl3bjg\nF/5uAA1h2HhRvJQP/S209/2ZpsuOuC+gdW4cKfoyIN9bR+Dex8JldJAGZOfpRtBr\n6EpMGRbLhbbNIaj4udG0V4Fx7FnSnfLX7mIx/2App+SRvcvjmkTYtJGpYSUgR9kS\nw6/bq9bhxigCnvxWI4AgavDhfbbu92MEAyrW/2b2U7V+3/e/J494TF/DjQ8GzjTN\njPBxpFdUPydmaSraURNLPdc1l15MhFaF1VFhWcbwqWTVj2Aw9vnxoSwVKLgImdaD\nQaovl2HP5hZqmSVJxqvqDmoGNK0PFv9sWmuvWN7Ny0ZLJvPanpoHSuZ8LXCr9XOz\nAYRhy3uLc8Nrtwy2vZ1TjFKYuGFJ851v4ENoI6DsA4bVcTrJowc=\n=v92Z\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4fb2c5290e10270c8e4a6df357fe98bfab2ddfe9",
          "sha": "4fb2c5290e10270c8e4a6df357fe98bfab2ddfe9",
          "html_url": "https://github.com/bitcoin/bips/commit/4fb2c5290e10270c8e4a6df357fe98bfab2ddfe9"
        }
      ],
      "message": "Add payjoin proposal",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-16T20:59:23Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-09T08:33:59Z"
      },
      "sha": "3faf6e7540e9925b536701c9644e6622b8d25b19"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3343949475,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0Mzk0OTQ3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3343949475",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-16T20:59:32Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YzMzZjA3NTlkNjMwOTMzMjljNDQ0M2RmMWQxYjYyN2JhMWFlN2YwOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c33f0759d63093329c4443df1d1b627ba1ae7f08",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c33f0759d63093329c4443df1d1b627ba1ae7f08",
      "tree": {
        "sha": "e4d7493e6b013afa4c45f93170f2b3522808d212",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e4d7493e6b013afa4c45f93170f2b3522808d212"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e4d7493e6b013afa4c45f93170f2b3522808d212\nparent 3faf6e7540e9925b536701c9644e6622b8d25b19\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1589712945 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1589712945 +0900\n\nClarify sender's payjoin proposal checklist\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7BGDEACgkQZhh2PvCR\nhv6FWw//Um2tHCub6he3N30QRwAn+52iG31PXoqwqDcMTq9CBbwQV7AMafWf3cBV\nBf/4e56VSs0Z0RQqxZVhlQqwrb9jVupFyS2s+Ayi8QU2yQwTyxOa4f+9a8ySI0Dl\np0rfFnN332YA6L40TDJK+J4SJCjJ5YmmXfqMrOUM5YP6/HRc+9/eZgkU3tA8VWqL\nJAoP30ms2rmOvkmLGrXcVQ/aq4hFpqthbpN+81Kv1wCJgnzwCBhzFdlwXOk+jlZu\ng0CjmEGxsXtVFDs3tiF+AMpufF3X2DQT0B7R+rOtQ1PeQmWc+U0HNrZoCDi11Chv\n27lklAJhYum6kfmSRSWy8F1Ijr/8Wgvi0vIc/rtb3SJyr2H6xu1fqCWev5VFO/DY\n7FnW998roy1rr/geJ86lnpRnfMa1hwlQ7QQDvv84wMMzuwcZDCBLEF8cnvhYNSaA\nZrYABZYq59/FsJJE4m3T9qWbF+m4CHhHrJolxAO4dBxaEkn40mwMtRN+d8CtsJfU\nJ7DnKwLNxLKRWmbXkrCuEkZsuYd6jAtlyR9F/rkG/ZPqlZWw/D+TfILZlT6sY0SP\nS4Hkg77nbywkL44PBV7pvvfkErMxxlHjcUan7+bZO9qua8SOqfWykiMdCa0cFdyC\nXrE0Dw0+S6P6637E/nYZbApgcmqg5ofImLNCTAXxSkQIY1FY3T0=\n=OQzT\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3faf6e7540e9925b536701c9644e6622b8d25b19",
          "sha": "3faf6e7540e9925b536701c9644e6622b8d25b19",
          "html_url": "https://github.com/bitcoin/bips/commit/3faf6e7540e9925b536701c9644e6622b8d25b19"
        }
      ],
      "message": "Clarify sender's payjoin proposal checklist",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-17T10:55:45Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-17T10:55:45Z"
      },
      "sha": "c33f0759d63093329c4443df1d1b627ba1ae7f08"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MjRkZDI3NTQ0NTMyOWFiYTIzMDU0MjA5OWJmNDllMzZjNGEyZDc4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/24dd275445329aba230542099bf49e36c4a2d785",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/24dd275445329aba230542099bf49e36c4a2d785",
      "tree": {
        "sha": "2748e72ee5552cfdc01638c2cea3e6fe7cacf1c8",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2748e72ee5552cfdc01638c2cea3e6fe7cacf1c8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2748e72ee5552cfdc01638c2cea3e6fe7cacf1c8\nparent c33f0759d63093329c4443df1d1b627ba1ae7f08\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1589713097 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1589713097 +0900\n\nRename to additionalfeeoutputindex and maxadditionalfeecontribution\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7BGMkACgkQZhh2PvCR\nhv6sBQ//VDdH409zX6XtTd+VPno7GywhivWZKYfHGQO2ChdILugGfzHq6l4EWGvn\nG3g1qFizlwZZX5Y1J1ymyx2+81laLkX+JsVxfYEAB7tcu+SFmx659/GdyYN7VVZQ\nEAKT+VjHEo8kuWEcwAEeVWmKXnhfiRavx/s5IIVFTQLbCGr6NBb7VG1DBvJfMKEZ\nZV97iRqQkQSHkaOdb3a/4Zu0nx7ew2UOdE9snmH7Dp8/+Fc55cBVvEay2dGIdAhq\nvUooPIbpeIfGJjIv4hhnoNevVsWwc76rORzr3rM1AY5oYfM38O5ANj4sXgXWrcre\nwwawvCat4sanT+CG7P7Tz1tNo8R4ZLYE7eqYWAedVQfhOwuJFAUKSt9xS/4o0f8i\n4jtxzGBWcqY1DY8VmNHgBp8GbdiBFZsVRyNRzGuFG5fAD4V9JNWDXDdnADtlf2qz\nc72qsWNIpZCMVJkVcg+HIlqHFD4g9A00nlpQ0f93qo0OGxyLlezEifN2SL6B9cJF\nXTY6I40YTgeeEIVIUpShDiCOZJTh+xW4Jl3e0nWnjsby9i7cHqR4c+WU0JFaEw97\nUWOJdJF2AjK7uFaWvK9b8k84+usMSGQDuMyS5Enrukbur7+J0HX/tn/3JSNxgRCc\n+g+6M8AGvNx0sRBXbw/rFchlljc+uedFlTt0xoaYRLihaF9b2aI=\n=9jWK\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c33f0759d63093329c4443df1d1b627ba1ae7f08",
          "sha": "c33f0759d63093329c4443df1d1b627ba1ae7f08",
          "html_url": "https://github.com/bitcoin/bips/commit/c33f0759d63093329c4443df1d1b627ba1ae7f08"
        }
      ],
      "message": "Rename to additionalfeeoutputindex and maxadditionalfeecontribution",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-17T10:58:17Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-17T10:58:17Z"
      },
      "sha": "24dd275445329aba230542099bf49e36c4a2d785"
    },
    {
      "event": "commented",
      "id": 629780536,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc4MDUzNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/629780536",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T11:14:08Z",
      "updated_at": "2020-05-17T11:18:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "Ping @instagibbs I added some commit clarifying what you sent me by mail.\r\n\r\nAbout your point:\r\n\r\n> There is no global \"minimum relay fee policy\". My node my have 5 sat/byte floor, yours 1. The receiver may think something is fine but sender can't actually get it into its own mempool. Seems pertinent to have the sender choose feerate and receiver adhere to this up to the maxfeebumpcontribution if specified.\r\n\r\nWhile true in theory, this is not true in practice. The network adopt the default of Bitcoin core every single time. (Got interesting problems with colored coins back in the days because of this)\r\n\r\nI suggest we add an additional parameter so the sender can specify what is the `minfeerate` for him?\r\n\r\nI can see a problem happening in case the sender's wallet stop being able to make payjoin with receivers because receivers bump the fee rate not knowing the new network's default.\r\n\r\n> the other case is where the receiver piggy backs and accomplishes another goal like payouts. Seems to me I'm that case the receiver should pay for everything aside from maybe the original deporting input? The receiver is getting a free ride from the input and possibly denying the sender inclusion in their analysis cluster. Basically just doing cut-through. \r\n\r\nThe receiver is bounded by the `additionalfeecontribution`. So he is free to add more than the fee contribution, but he would have to pay from his own pocket.\r\n\r\nNow that is true that he can make the sender pay for a few output, even if the receiver has an upper limit. That said, I think this is quite difficult to calculate properly.\r\nFor example, the receiver may have changed his payment output from P2WPKH to P2SH which would change the outputs length (top of my head calculation +2 bytes), but the sender should pay for it.\r\n\r\nAnother solution is to drop address substitution completely. But I wanted to keep doubt in the analyst calculation that their heuristic may be poisoned.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-629780536",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3344436283,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM0NDQzNjI4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3344436283",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T11:14:08Z"
    },
    {
      "event": "subscribed",
      "id": 3344436284,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNDQ0MzYyODQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3344436284",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T11:14:08Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MDg4Y2Y5YmY5MTE3MzMwNDU4NTM1ZTg0YmIzNmViZjI5ODk3NDAzNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/088cf9bf9117330458535e84bb36ebf298974037",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/088cf9bf9117330458535e84bb36ebf298974037",
      "tree": {
        "sha": "38dfc99a14ff9fa0183a50e3493ac37b4250ac50",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/38dfc99a14ff9fa0183a50e3493ac37b4250ac50"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 38dfc99a14ff9fa0183a50e3493ac37b4250ac50\nparent 24dd275445329aba230542099bf49e36c4a2d785\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1589713308 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1589714192 +0900\n\nClarify fake rounded amount added by the receiver\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7BHRAACgkQZhh2PvCR\nhv5SiBAAsJ/3DPvZZXedZt++dZoZfROuLuPdjzMOJRFmAlFwRnHu/BXAMu94P+XI\noaTJfOG4gCCOfIkq1TLcPHQXYthNhIJxTD+XymLWT+gTqkb4B83gm5uur4LxU+Sc\nk/OBTA+glgcJsDtagbizYcO/t8A6PmK9JBknuV7sIxTR9MCZEmWRilUl1lOhuNqD\nOEphHiclaY9sPU5Yx1s8lJDnn1mYg4PwOyXGFotGKE5KJm6iZc+A5S46t0weDvk9\nL5gXxxRRNnyLtObU+SLBRZSK3I7Q5O36zv10goi/0vwQ2hMP1Pkt1BGNV6OdHMYN\nhtvNt7mi/1cnA9Jyyhte+fiddjECl8fcmNNhGJNbLsKkiBbemg1JLM/8/HEFC0Et\no4YatrPaRiFEmeyLj2B8HRXIbZyaxkSHo+bPcUT2vD0cYvWxRGVUcgrNnzuPqs+h\nWQSQtAeNJG6lCDUR8XNFSEjTZ2QFxAACqOjSLiMKEudl9Biele/YHabrqOuWv0mF\no7nZD+yvOk/OSP+NipLaf2JdPe54i9fQH/F6JC2OdkrSJ6wjtMgAu3ArES+s7lIs\nN8WBih9cqrIF3EfnMfYjDt+CzdWwjfqpGkp2xCozDiqbJ7MucNLZsKPHy+7lYDBY\nhNdgXD9di9pzu30G95wNNvFPEVYsR9i+70URpzxiDhnDPIomLOo=\n=3cDI\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/24dd275445329aba230542099bf49e36c4a2d785",
          "sha": "24dd275445329aba230542099bf49e36c4a2d785",
          "html_url": "https://github.com/bitcoin/bips/commit/24dd275445329aba230542099bf49e36c4a2d785"
        }
      ],
      "message": "Clarify fake rounded amount added by the receiver",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-17T11:16:32Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-17T11:01:48Z"
      },
      "sha": "088cf9bf9117330458535e84bb36ebf298974037"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3344438360,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0NDQzODM2MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3344438360",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T11:16:41Z"
    },
    {
      "event": "commented",
      "id": 629788742,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc4ODc0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/629788742",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T12:24:05Z",
      "updated_at": "2020-05-17T12:24:05Z",
      "author_association": "MEMBER",
      "body": "Re minimum feerate: I was more saying that one mempool could have slightly\nhigher min feerate in times of large congestion/spam once it starts\nremoving txns from the mempool due to lack of space.\n\nOn Sun, May 17, 2020, 7:14 AM Nicolas Dorier <notifications@github.com>\nwrote:\n\n> Ping @instagibbs <https://github.com/instagibbs> I added some commit\n> clarifying what you sent me by mail.\n>\n> About your point:\n>\n> There is no global \"minimum relay fee policy\". My node my have 5 sat/byte\n> floor, yours 1. The receiver may think something is fine but sender can't\n> actually get it into its own mempool. Seems pertinent to have the sender\n> choose feerate and receiver adhere to this up to the maxfeebumpcontribution\n> if specified.\n>\n> While true in theory, this is not true in practice. The network adopt the\n> default of Bitcoin core every single time. (Got interesting problems with\n> colored coins back in the days because of this)\n>\n> I suggest we add an additional parameter so the sender can specify what is\n> the minfeerate for him?\n>\n> I can see a problem happening in case the sender's wallet stop being able\n> to make payjoin with receivers because receivers bump the fee rate.\n>\n> the other case is where the receiver piggy backs and accomplishes another\n> goal like payouts. Seems to me I'm that case the receiver should pay for\n> everything aside from maybe the original deporting input? The receiver is\n> getting a free ride from the input and possibly denying the sender\n> inclusion in their analysis cluster. Basically just doing cut-through.\n>\n> The receiver is bounded by the additionalfeecontribution. So he is free\n> to add more than the fee contribution, but he would have to pay from his\n> own pocket.\n>\n> Now that is true that he can make the sender pay for a few output, even if\n> the receiver has an upper limit. That said, I think this is quite difficult\n> to calculate properly.\n> For example, the receiver may have changed his payment output from P2WPKH\n> to P2SH which would change the outputs length (top of my head calculation\n> +2 bytes), but the sender should pay for it.\n>\n> Another solution is to drop address substitution completely. But I wanted\n> to keep doubt in the analyst calculation that their heuristic may be\n> poisoned.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bips/pull/923#issuecomment-629780536>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABMAFU5MXMGJE4PVWVCZMMTRR7BIZANCNFSM4NDBRK6Q>\n> .\n>\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-629788742",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3344492587,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM0NDQ5MjU4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3344492587",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T12:24:06Z"
    },
    {
      "event": "subscribed",
      "id": 3344492588,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNDQ0OTI1ODg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3344492588",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T12:24:06Z"
    },
    {
      "event": "commented",
      "id": 629789342,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc4OTM0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/629789342",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T12:29:48Z",
      "updated_at": "2020-05-17T12:29:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "Indeed. And BTCPayServer is using bitcoin's core one we get from RPC... So I think the best solution is to let the sender define it, and if not defined, use the receiver's one?",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-629789342",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 629789519,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc4OTUxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/629789519",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T12:31:32Z",
      "updated_at": "2020-05-17T12:31:32Z",
      "author_association": "MEMBER",
      "body": "Correct. I think that makes it clear and clears up another set of questions\nis sent you about the receiver lowering feerate too much.\n\nOn Sun, May 17, 2020, 8:30 AM Nicolas Dorier <notifications@github.com>\nwrote:\n\n> Indeed. And BTCPayServer is using bitcoin's core one we get from RPC... So\n> I think the best solution is to let the sender define it, and if not\n> defined, use the receiver's one?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bips/pull/923#issuecomment-629789342>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABMAFU7YKWUAZ4AAMYO2SVDRR7KEPANCNFSM4NDBRK6Q>\n> .\n>\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-629789519",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 629791056,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc5MTA1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/629791056",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T12:44:44Z",
      "updated_at": "2020-05-17T12:45:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "I was thinking though: If the feerate of the sender is  lower than the minfeerate of the receiver, the payjoin will still fail because the receiver is using testmempoolaccept before doing the proposal. This is a corner case, so I think we can safely ignore that.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-629791056",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 629791507,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc5MTUwNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/629791507",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T12:48:13Z",
      "updated_at": "2020-05-17T12:48:13Z",
      "author_association": "MEMBER",
      "body": "Well practically I was thinking sender would set the floor at whatever\npriority they wanted which could be much higher as well.\n\nI guess receiver should signal their absolute lowest rate in opening, and\nthen sender responds with something both can agree with in the end.\n\nOn Sun, May 17, 2020, 8:44 AM Nicolas Dorier <notifications@github.com>\nwrote:\n\n> I was thinking though: If the feerate of the sender is lower than the\n> minfeerate of the receiver, the payjoin will still fail because the\n> receiver is using testmempoolaccept before doing the proposal.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bips/pull/923#issuecomment-629791056>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABMAFUZJOZP4MR3UTMDB23DRR7L4RANCNFSM4NDBRK6Q>\n> .\n>\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-629791507",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 629791912,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc5MTkxMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/629791912",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T12:50:29Z",
      "updated_at": "2020-05-17T13:22:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "@instagibbs check 233c094",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-629791912",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3344513975,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM0NDUxMzk3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3344513975",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T12:50:29Z"
    },
    {
      "event": "subscribed",
      "id": 3344513976,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNDQ1MTM5NzY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3344513976",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T12:50:29Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MjMzYzA5NDY2NzRjNzgxOGE2NTY5NTM0NGJkODIzZmQ4ZGE5ODlhNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/233c0946674c7818a65695344bd823fd8da989a7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/233c0946674c7818a65695344bd823fd8da989a7",
      "tree": {
        "sha": "a01ea16900314dadd885220b6ec782d53de446bc",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a01ea16900314dadd885220b6ec782d53de446bc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a01ea16900314dadd885220b6ec782d53de446bc\nparent 088cf9bf9117330458535e84bb36ebf298974037\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1589719783 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1589720257 +0900\n\nAdd minFeeRate optional parameter\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7BNMEACgkQZhh2PvCR\nhv5y3hAAmPf46Dci3ThbFFbyHRvLqjmgV37krCwkda2/LCno782mPV0Uoabd7wsv\n7JlDEA7IB9d5U4wIO7lK956t96Ba+pnCmuxpqd5Yql7Bq7znnQgCB0pJEOx8zF+t\nQ5zreWKFzUeKVTAS6ipIntbv7dNOAmj9QQijhezsEs2FG2CbvI4P5kPBNIa1X5Mn\nPEYfg86lbWgLSH7qmUDtt66HcUvrJvUjgGbLrVi37Xm84KBgmj/Q0+l8R3Hn/MVf\n3C42dOgnxZLheyUpyjy1ep+mPmcBDaVfUQc1yNRfD7ayFtx3PtIXQRuHC074KnLb\nTrGFJ9FMhV63qFQIZQ8UN8l+9uJTCi4eU0QV02tnAleEGdNWQb+NM9UAGXwGnR3z\n3H7LLbqy82dlVJXTu0yeibQXvU3KnNsYTEAIc+qCOo5scqd/B4JslCTKVUTQJeDJ\n2Zq+85wwA0FVlE7235AF0L6mAPWdZNdrEIBHnpM5GNqow/F/yBaHjoCxja6hWtc2\n16mUfl3a4UGvPG6NrL884FHGXTvL8CDZasUTPqLTJ5rUJUmBczMGOoiePIm1Qs2H\nQpcUE0GnRvXF3bT1GoW5VGjMhim2QO1oQk7gr3nzjV97WXeYy9yWz4FsnJg5xzBv\nwL4IJVYoh7Sr0Hcl0uWjDoap3nYuAzENlTjYz+dhNogauAnEtGI=\n=PdiN\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/088cf9bf9117330458535e84bb36ebf298974037",
          "sha": "088cf9bf9117330458535e84bb36ebf298974037",
          "html_url": "https://github.com/bitcoin/bips/commit/088cf9bf9117330458535e84bb36ebf298974037"
        }
      ],
      "message": "Add minFeeRate optional parameter",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-17T12:57:37Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-17T12:49:43Z"
      },
      "sha": "233c0946674c7818a65695344bd823fd8da989a7"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3344520223,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0NDUyMDIyMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3344520223",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T12:57:45Z"
    },
    {
      "event": "commented",
      "id": 629802390,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTgwMjM5MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/629802390",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T13:53:53Z",
      "updated_at": "2020-05-17T13:53:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "I renamed the optional parameter as your suggestion, I also think \"bump\" should not be overloaded meaning.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-629802390",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "reviewed",
      "id": 413396288,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMzk2Mjg4",
      "url": null,
      "actor": null,
      "commit_id": "233c0946674c7818a65695344bd823fd8da989a7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-413396288",
      "submitted_at": "2020-05-18T08:54:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "reviewed",
      "id": 413401111,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNDAxMTEx",
      "url": null,
      "actor": null,
      "commit_id": "233c0946674c7818a65695344bd823fd8da989a7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-413401111",
      "submitted_at": "2020-05-18T09:00:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MzgzNmVmNjUzNDJmZjQ0NjI4YTcwZGRmODU5ZTQyOGE2OTc1M2M1ZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3836ef65342ff44628a70ddf859e428a69753c5e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3836ef65342ff44628a70ddf859e428a69753c5e",
      "tree": {
        "sha": "1cdec7cb6dbc3393e79f742b3cae9cbbc62475a3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1cdec7cb6dbc3393e79f742b3cae9cbbc62475a3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1cdec7cb6dbc3393e79f742b3cae9cbbc62475a3\nparent 233c0946674c7818a65695344bd823fd8da989a7\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1589795012 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1589795012 +0900\n\nReword sentence\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7CWMQACgkQZhh2PvCR\nhv6wYBAAy4yLwcv7c3cK0fLY03fBtgnIiiqeFKxay1Q0YoYyKvNhLz7ulS3z2oqE\nPg8JUjOVEQi0kr5pCi0LvdJ9w1VsAy7CU1DlVgQ3W8GM7D95LIHT1hRzTIoJUldX\ncISvDGe+FORFdWhNOjXytWWQaMxlvoZMMW1au9mUkYpWEjuAdo+1D9F6QUczbGmv\n/f7uNz3vRHOhNTEetoI8UNiaopkFIROOh/me+h+dzpH9LfuyOX6KoFDB/jTOfM80\nqZAAaM6jESIMb8GMmlqjY1SDnOxOVg8NMXQ4EOd/voZvtoC9DKfVkewIyHg4mDnv\np9743DZcFGWfjCL3CnhFxTvM9SLV/kqNBbKSCtqTslZ8Wkisl/fh7x02r3N+4aBr\nev7vAPUFmcSgsCuRh69B5X8QdtOqY/8ZC9k2Rk6cPABRrVVBEJG0B2NYIa66GQMS\nMBIPlmmSB9FMNzCh/cuwmWpwlIL14z/e+d+4Ttz7/s91dHpRWDObYGnBcjxWCO8P\nubHn+NKnwczWUEesgRqSQpDiUFDgs3ovHRKc54BeUACjAVBfKzr0Tl0yyJ5FsW49\nSjfblqX0MDjckQz5E5GvdvN9xy3nlTKI0doQzCnljh26EhSMxBr3/GGToUC4dE+W\nBZHzXYDWyw+ncd/IpfjhdUZh0FLUXdgeUnOFXMSp4fsEHhalNC0=\n=no2V\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/233c0946674c7818a65695344bd823fd8da989a7",
          "sha": "233c0946674c7818a65695344bd823fd8da989a7",
          "html_url": "https://github.com/bitcoin/bips/commit/233c0946674c7818a65695344bd823fd8da989a7"
        }
      ],
      "message": "Reword sentence",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-18T09:43:32Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-18T09:43:32Z"
      },
      "sha": "3836ef65342ff44628a70ddf859e428a69753c5e"
    },
    {
      "event": "reviewed",
      "id": 413481530,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNDgxNTMw",
      "url": null,
      "actor": null,
      "commit_id": "3836ef65342ff44628a70ddf859e428a69753c5e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-413481530",
      "submitted_at": "2020-05-18T10:51:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T14:40:15Z",
      "updated_at": "2020-05-18T14:40:15Z",
      "source": {
        "issue": {
          "id": 619454139,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDE4OTU3MTI5",
          "url": "https://api.github.com/repos/BlueWallet/BlueWallet/issues/1085",
          "repository_url": "https://api.github.com/repos/BlueWallet/BlueWallet",
          "labels_url": "https://api.github.com/repos/BlueWallet/BlueWallet/issues/1085/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/BlueWallet/BlueWallet/issues/1085/comments",
          "events_url": "https://api.github.com/repos/BlueWallet/BlueWallet/issues/1085/events",
          "html_url": "https://github.com/BlueWallet/BlueWallet/pull/1085",
          "number": 1085,
          "state": "closed",
          "state_reason": null,
          "title": "[WIP] Add payjoin support",
          "body": ">**Warning:** Unsafe to merge. This currently depends on unstable development builds of both `bitcoinjs-lib` and `payjoin-client-js`.\r\n\r\nThis is a preliminary PR adding payjoin functionality for review.\r\n\r\nYou can see a demo of the functionality below:\r\n\r\n![pj-gh-demo](https://user-images.githubusercontent.com/2123375/82118992-f0e21300-97a4-11ea-8768-bdb404dec1c7.gif)\r\n\r\nSome things that we should probably add:\r\n\r\n- Show a message to the user briefly explaining how payjoin works the first time they use it. There are some caveats they should be aware of. For example if they're using clearnet, they expose their IP to the receiver. This could result in a privacy reduction if they got the payment URI over a secure channel, e.g by scanning a QR code from a Tor Browser window on a laptop.\r\n- Have a global setting to always opt in/out of payjoin. The user should still be able to override this per payment.\r\n- Add support for the newly proposed [`maxfeecontribution`](https://github.com/NicolasDorier/bips/pull/3#discussion_r423143916) parameter.\r\n\r\nCC @junderw @Kukks @Overtorment ",
          "user": {
            "login": "lukechilds",
            "id": 2123375,
            "node_id": "MDQ6VXNlcjIxMjMzNzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lukechilds",
            "html_url": "https://github.com/lukechilds",
            "followers_url": "https://api.github.com/users/lukechilds/followers",
            "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
            "organizations_url": "https://api.github.com/users/lukechilds/orgs",
            "repos_url": "https://api.github.com/users/lukechilds/repos",
            "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/lukechilds/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 24,
          "pull_request": {
            "url": "https://api.github.com/repos/BlueWallet/BlueWallet/pulls/1085",
            "html_url": "https://github.com/BlueWallet/BlueWallet/pull/1085",
            "diff_url": "https://github.com/BlueWallet/BlueWallet/pull/1085.diff",
            "patch_url": "https://github.com/BlueWallet/BlueWallet/pull/1085.patch"
          },
          "closed_at": "2020-08-12T19:05:36Z",
          "created_at": "2020-05-16T11:49:37Z",
          "updated_at": "2020-08-12T19:05:37Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZGQ5MTkzZmQxZDM3MDE5NGZmZWQ1OGQyMzFiN2FhNzVkNzJlMzI3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/dd9193fd1d370194ffed58d231b7aa75d72e3273",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/dd9193fd1d370194ffed58d231b7aa75d72e3273",
      "tree": {
        "sha": "9f85b48828739a3d418827bf7ce0257396583f2c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9f85b48828739a3d418827bf7ce0257396583f2c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9f85b48828739a3d418827bf7ce0257396583f2c\nparent 3836ef65342ff44628a70ddf859e428a69753c5e\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1589831446 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1589831563 +0900\n\nRemove out-of-utxo\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7C54sACgkQZhh2PvCR\nhv4DZg//VpOsEQsrPuNB1+XKRfoJ4hKbYhpryMFjfPmu0zUX22M7BctgWlUsfGyL\nKg5tRYZM3StACum5S6I5ererRfK/BgzP1u9fkOP6FS6QLGXqDRFmZBANf/pZB06S\ngLuXhBub7HrKeK9BirSDQUjbEyOBgeCbUldVrq73aXKyLxjvNyyrydTT0d+514WF\ntikHjmQCRdvOIdOXup93yTPWaRi5ZnpZtsDYpe/mMG4NzkVeE+QduybZIxQcZBKq\n5sh+L2XPJXR8iLdaE3q1hPNtg0mhUUuHwCD/v48Vh0v+BLNiVIezeyJvd1fEZvbn\napGHCgcMVA3ou8bWBEgeQegDRIGsN4RbET14e1Oj265UpBW2i2Vt/V2z5E+36MUQ\nwBdsUOIAXH3TSmUA3ZuaQMVN6AOKYkZUpVMSZa+L12PvVyAvGH4RNYsd7xummQWz\nAH4X7wvdCgkGd16vMSzsPPXxWl671IJIJR6ghWyNJU2acvQgJBEJK4ZvBZcA5P6D\nEpjNDRYoqOBVgtjttFoNE43aqaNgF5OaO85Nui7PT+WCWDS84zSj6hc+vey50B/o\nWP2jexKt2J0XRVbq0OWhtk5H4P4q+oL00qh5swXacszva+Keo3N6tC6bouzYJ/vZ\n+OG5L0M4ZWii35Z4vcq7s7Vqn9gbP9MR7wAG5E/cylZyf533HtE=\n=eeTv\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3836ef65342ff44628a70ddf859e428a69753c5e",
          "sha": "3836ef65342ff44628a70ddf859e428a69753c5e",
          "html_url": "https://github.com/bitcoin/bips/commit/3836ef65342ff44628a70ddf859e428a69753c5e"
        }
      ],
      "message": "Remove out-of-utxo",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-18T19:52:43Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-18T19:50:46Z"
      },
      "sha": "dd9193fd1d370194ffed58d231b7aa75d72e3273"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3348880505,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0ODg4MDUwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3348880505",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T19:52:52Z"
    },
    {
      "event": "reviewed",
      "id": 414240794,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MjQwNzk0",
      "url": null,
      "actor": null,
      "commit_id": "dd9193fd1d370194ffed58d231b7aa75d72e3273",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-414240794",
      "submitted_at": "2020-05-19T08:57:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NWEzMzdjNmZjNjEwNGZjMzFlZmYwZWNiYjY1NGU5NTgwYWY0ZjkwNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5a337c6fc6104fc31eff0ecbb654e9580af4f907",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5a337c6fc6104fc31eff0ecbb654e9580af4f907",
      "tree": {
        "sha": "5eefcf0a0b81d0a76441621a52b8f4f96ed28dc9",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5eefcf0a0b81d0a76441621a52b8f4f96ed28dc9"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5eefcf0a0b81d0a76441621a52b8f4f96ed28dc9\nparent dd9193fd1d370194ffed58d231b7aa75d72e3273\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1589882397 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1589882397 +0900\n\nMake sure the receiver is not free riding on sender's back\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7Drh0ACgkQZhh2PvCR\nhv79/BAAtrhOh+x+xw52S5Blq7eQmZEbZRTgN+lgFyzGHVizfhbpbxJeL78zXL6J\nJqeftsm/wMH5YoFVC2AvMyFIwTb+yyYw51LVYPe4dDmj/1jRL6BQM4XcXVlgC/Q5\nQZYLXiccDuf3sLPguL6/6o4LM8d9tEKX2or6Yh+dZBRGJc0gI6UA9ILSTediL34y\nKKczHtBYFPLQh7yrhJwYkoqE9A5Nq9Q6H6lgXkDAGeN3o6NfVoQSlgd5QvMUWMRn\ntNXqzlgqEL5SiRx9pEtgzJbrKDyTC5xB0SzgeRq1jn5LLK313UqtseKSrC3IvRRY\n+Wx52kX3Mi3srPTksU3O0sQXTWFvexQ+0j/bGVSdOmCbPBdM1LxMF3N0XUIdyGr4\nbl0HaaYu0R+NYSqpi/lFTOuO0dnO5ysdYgCguxk0vSHCzX0haq8PYgL6nBBWc7bi\nCXSTcmABbS6lw9PsDc/VCR05Q4bhK9x5xDcIZvOM5ZvPGC2uUh/eg5vn/GU5d+N5\nKFSAwvldxJqPxg0dPgnnQC2PBiLRs01AtV25ebxF6RJnr1YpzHJnqqP92A/5eidf\nQzYOmT7tpXteXxoplknp72K1nwd2j/6KfAqdp7Xaexqo122ncYYcz92ZqZHOuepF\nYqLtLnRCKajDwBZb0m5Y1CBIRPjM3udhE1Xu8DlsSB95Tb4resQ=\n=gqwX\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/dd9193fd1d370194ffed58d231b7aa75d72e3273",
          "sha": "dd9193fd1d370194ffed58d231b7aa75d72e3273",
          "html_url": "https://github.com/bitcoin/bips/commit/dd9193fd1d370194ffed58d231b7aa75d72e3273"
        }
      ],
      "message": "Make sure the receiver is not free riding on sender's back",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-19T09:59:57Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-19T09:59:57Z"
      },
      "sha": "5a337c6fc6104fc31eff0ecbb654e9580af4f907"
    },
    {
      "event": "commented",
      "id": 630719489,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDcxOTQ4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/630719489",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-19T10:01:15Z",
      "updated_at": "2020-05-19T10:01:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Kukks @instagibbs I added 5a337c6fc6104fc31eff0ecbb654e9580af4f907 to specify that the receiver should not free ride on the sender's fee for batching.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-630719489",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3351070924,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM1MTA3MDkyNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3351070924",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-19T10:01:16Z"
    },
    {
      "event": "subscribed",
      "id": 3351070927,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNTEwNzA5Mjc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3351070927",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-19T10:01:16Z"
    },
    {
      "event": "mentioned",
      "id": 3351070929,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM1MTA3MDkyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3351070929",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-19T10:01:16Z"
    },
    {
      "event": "subscribed",
      "id": 3351070932,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNTEwNzA5MzI=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3351070932",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-19T10:01:16Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MzY1OTY3MWEyMjRkZmY0YTNmYzkyNDdkYWYxY2E2NWUzNWI0NTIyYQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3659671a224dff4a3fc9247daf1ca65e35b4522a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3659671a224dff4a3fc9247daf1ca65e35b4522a",
      "tree": {
        "sha": "946bed51cc9ee41e827b07e9541c113b19b14284",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/946bed51cc9ee41e827b07e9541c113b19b14284"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 946bed51cc9ee41e827b07e9541c113b19b14284\nparent 5a337c6fc6104fc31eff0ecbb654e9580af4f907\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1589883291 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1589883291 +0900\n\nRelaxing authenticated endpoint\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7DsZsACgkQZhh2PvCR\nhv4ckg//ZEAYQvVeK3fExL/Olz9N0dSFrmmmDMFRgiuAuiR7PmX36aWM+Fw3rt47\norZzKrvPYIV8Tj+5G3iaL1PsGpKersiJnO+jel5tsH1sGpl23FJCDintNRLM+bxz\nqbKLgCkMQhGcyHQD3X8TeU7ofwLLhHhV2/wIbZ0qkMqaaBobDV49zZ6PTg6SsRuA\n/RuelF5rWolTa2ARWv8IN+aBSF+nRKqxXW6YrQrKzvcYKdToGhXTK1vuAnXR30Sz\nFhp8eXhCeyqLVVMwFiWfu/o5/aoF3qtgwOBJ7Y2grV+goRuYnd/C8bz8MJq2b3BO\nVRpTgiZ33gASER0JPS/vhy63705xovUMCgmZTqjlOUxkyXZJnBWdkrtgSmtqXeLO\npkpewLuz+AcKYoeX0508z8Wlg1yhMVWXRpJuFtROMDPNzuFl7AwuTF0z1JOAn8dX\n963uXQZuYqlPnXmsmGH7ajBXaHjY4ifUgHWVhD8hBQbzBM/FhmaUt8rXrWrIB43z\nG5D052bfx7e1oXfmiwEqFwlh9iot2wWTYJuFlFlPU6cR3O6IL+it053xZHw7k5v1\nvoOe06GT3ZqxGXZb2iw0rMXcka3BKaBn5rD9VnoDYX2vSe+abEFo+eD5r2q/MIAd\nEN1zMYGxTRJgA1vRCjhaAUHzgX8OOLiCJA/3H5cGCOT2P0c6kt4=\n=HWWE\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5a337c6fc6104fc31eff0ecbb654e9580af4f907",
          "sha": "5a337c6fc6104fc31eff0ecbb654e9580af4f907",
          "html_url": "https://github.com/bitcoin/bips/commit/5a337c6fc6104fc31eff0ecbb654e9580af4f907"
        }
      ],
      "message": "Relaxing authenticated endpoint",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-19T10:14:51Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-19T10:14:51Z"
      },
      "sha": "3659671a224dff4a3fc9247daf1ca65e35b4522a"
    },
    {
      "event": "commented",
      "id": 630726929,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDcyNjkyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/630726929",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-19T10:16:57Z",
      "updated_at": "2020-05-19T10:16:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "I relaxed the endpoint requirement.\r\n\r\nAlso, authorizing unauthenticated channel, because the payment output can effectively be used to make sure that the sender is sending to the right person, even over unauthenticated channel.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-630726929",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MTI1MWQyOTg1NGMzNzE5NGU1YzVhZDhmZjUwMjlhNTAxOTZhYTIyZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "tree": {
        "sha": "170dea2d35aa733f8981ec1d9f9f6e1c1a0bcceb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/170dea2d35aa733f8981ec1d9f9f6e1c1a0bcceb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 170dea2d35aa733f8981ec1d9f9f6e1c1a0bcceb\nparent 3659671a224dff4a3fc9247daf1ca65e35b4522a\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1589922718 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1589922718 +0900\n\nDiscourage unsecured endpoint\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7ES54ACgkQZhh2PvCR\nhv6miBAAqbswBwr5AWfzOOjzpQcVynOgBIYL1hw998QNuFV0lm8vkst2b39wyiHz\n530ulCIjbAax//4c8ZXGAmFuJakb4s0IFnWp17ynNSLwOUBKtncvzDnh9eAn3Ffq\nyKh90R5g5EKdXxLQBiXEVoYiVos/UF5KAFBZ03FzxdaAaBqdXehgQ7mhU4Ndbdif\nft/6uT32t7vhmAhtAVYtXm9aRxHxzBYvhyPUqnu2CoVvk9eC2GbFR3SlO6lL4PNT\nOYAJ/hzQfUJQpC8cvFlaNJRziGU4c5WX094cwPvPXf4vhwq+bPogVopsKpuR3pM0\n7L4reLjm4PFErv9X1sVy9QBNc8J+XHQyR4mCLNDnNPtj4L94AeX259rMTe057qWL\n/xr5hl8gHynAM3D8CHwfH/iFpA8pKyDfJe8DePMlWvQoUf/7iniVzmgGsspY7IG+\n3UVKvbu+5+ANEyy2ej+gSSfC8lheFGNmiBDwINWEZiquHn5e3mNi9+FzDg4fhBkO\nVmG9LihP8uM+Vcu/bTfZ0krnpUCi/TnXZAcKrPy04We7ZrtHrox0V2Krmn74zWYX\nmnEdG12EVL9BAl27XxKAL010KC613vbxEEl348KOywUB+q6fJph+M9Btqsu9FTHC\nvFPX3B6FXjZ36OG+/tDSZ03D1JImAj+ZlLDJx5BdHNBeSlKns8U=\n=enH9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3659671a224dff4a3fc9247daf1ca65e35b4522a",
          "sha": "3659671a224dff4a3fc9247daf1ca65e35b4522a",
          "html_url": "https://github.com/bitcoin/bips/commit/3659671a224dff4a3fc9247daf1ca65e35b4522a"
        }
      ],
      "message": "Discourage unsecured endpoint",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-19T21:11:58Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-19T21:11:58Z"
      },
      "sha": "1251d29854c37194e5c5ad8ff5029a50196aa22e"
    },
    {
      "event": "reviewed",
      "id": 415600183,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NjAwMTgz",
      "url": null,
      "actor": null,
      "commit_id": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-415600183",
      "submitted_at": "2020-05-20T18:22:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "reviewed",
      "id": 416804985,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2ODA0OTg1",
      "url": null,
      "actor": null,
      "commit_id": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-416804985",
      "submitted_at": "2020-05-22T10:21:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "commented",
      "id": 632642461,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjY0MjQ2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/632642461",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T11:25:11Z",
      "updated_at": "2020-05-22T11:25:11Z",
      "author_association": "MEMBER",
      "body": "I took it a the sender setting it since they may try to send a new body\nmessage type for example a set of PSBT to be modified.\n\nOn Fri, May 22, 2020, 6:21 AM Adam Gibson <notifications@github.com> wrote:\n\n> *@AdamISZ* commented on this pull request.\n> ------------------------------\n>\n> In bip-xxxx.mediawiki\n> <https://github.com/bitcoin/bips/pull/923#discussion_r429165630>:\n>\n> > +* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n> +* The sender must allow the receiver to add outputs.\n> +* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n> +* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n> +\n> +Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n> +It also allows the receiver to pay the fee for batching adding his own outputs.\n> +\n> +On top of those check, it is recommended, but not required for the sender to check that:\n> +* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any change in the output list.\n> +\n> +===Optional parameters===\n> +\n> +When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n> +\n> +* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n>\n> Do we think v= in the BIP21 uri actually makes sense? This is a version\n> specific to the payjoin feature; what if the URI contains other features\n> which themselves might be versioned? I mean pjv= could kinda work but it\n> almost seems like the versioning should be embedded within the pj= field.\n> Don't want to open a can of worms there, but v= seems .. \"off\" somehow.\n> No?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bips/pull/923#pullrequestreview-416804985>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABMAFU62KQYRPFC4ZB2FKBLRSZG3BANCNFSM4NDBRK6Q>\n> .\n>\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-632642461",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3364329194,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM2NDMyOTE5NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3364329194",
      "actor": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T11:25:11Z"
    },
    {
      "event": "subscribed",
      "id": 3364329197,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNjQzMjkxOTc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3364329197",
      "actor": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T11:25:12Z"
    },
    {
      "event": "commented",
      "id": 632731771,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjczMTc3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/632731771",
      "actor": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T14:49:50Z",
      "updated_at": "2020-05-22T14:49:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I took it a the sender setting it since they may try to send a new body message type for example a set of PSBT to be modified.\r\n\r\nDid you intend to reply outside the [thread](https://github.com/bitcoin/bips/pull/923#discussion_r429165630)? Well, anyway: we discussed this quite a bit in the earlier version of this document (see [here](https://github.com/btcpayserver/btcpayserver-doc/pull/505#issuecomment-624167280) and various other strands of discussion around that), from what I can glean you're just talking about the motivation for versioning/version negotiation?\r\nI don't think that's so much in question any more (it seems like I convinced people it's necessary, or more, they convinced themselves :)), I'm just talking here about the syntax of the URI, not whether to do it or why.",
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-632731771",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 633101233,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzEwMTIzMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/633101233",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-23T17:29:24Z",
      "updated_at": "2020-05-23T17:31:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "@AdamISZ the `v=` is not part of the BIP21. It is a parameter passed by the sender to the receiver in the POST request, not from receiver to sender.\r\n\r\nBasically receiver say \"here is my negociation endpoint\", then sender say \"Ok, let's do this! I am running v2\", then receiver say \"Ah sorry, I don't support 2, but 1 and 3\", then the sender can say \"Ok let's use 1 then\"",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-633101233",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3367255826,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM2NzI1NTgyNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3367255826",
      "actor": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-23T17:29:24Z"
    },
    {
      "event": "subscribed",
      "id": 3367255828,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNjcyNTU4Mjg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3367255828",
      "actor": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-23T17:29:24Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OTAwZDIyMWE4NThkNTU4MWRjZTE1MWMwZGZlNDI5NzE2ZjAwZDNiZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/900d221a858d5581dce151c0dfe429716f00d3be",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/900d221a858d5581dce151c0dfe429716f00d3be",
      "tree": {
        "sha": "829fc573d432d1d8c3685adc53598a628173cff0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/829fc573d432d1d8c3685adc53598a628173cff0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 829fc573d432d1d8c3685adc53598a628173cff0\nparent 1251d29854c37194e5c5ad8ff5029a50196aa22e\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1590255319 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1590255319 +0900\n\nFix typo\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7JXtcACgkQZhh2PvCR\nhv7XYg/+KMrU/rNUwCnqQc/AqVWuVWEihY2xySlZYqrVVDItBcdvkPV5DqHu5wYc\niau+VJoYPkzFV3wgeh4K+AWpUAXbfXNQE/7w71N8Zj5QFQq25ZXCKiJl/WYOnZZq\nRPanaxil/6yjT6xVUaXeK72I3ie4JcvDST1yLBjOTXJdNsxnusnTNnTQAbvLS4I8\na0QUzzxpV/Q3Swj3flYe/0KodGV++45CV7PV+ZRmY0EF7BrC/iW58oPlZPQ4WIEp\nnSgeFGXtS9BblR8MKAi0ErqA7WuWcjFTRV48aewthCFZ3h5Ep/iCQZPjik8/ijfn\ncJZu+ZJKR9Rd5YZ6Ec0knit9MkS69OwcYwL8LqyKpLl5SIGGvoTIYR/7+Ef5RLrR\nSPdnRlNb5Kj1PbPZxlrF4Esm7c4mzlKj5c5C72l32TPrAfj5uUB3RETCLVXBg2z4\n9E1y5e49VCu3YQEifovW6P3VLgsc1fljwyJ3dh4UGkVwKsL7ymn2g2lxu2Zf6+nR\ngAHd+NwPNr0+kVO27RRQwP9dcNndWzMRzM8XQ/HrTkUkOX79F+ysaBvgc2xT4jIy\nqmGs+b4QIftC1n9McYLgK1Pu0YuBy6OGWsyX+taDuARtAki4GKcZ53IpFiuasw2H\nA3ohnOMbviyPVOqY4EHLEKGgq0h/lnWtEl75o+ZmBPyEeT+rrto=\n=jREI\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1251d29854c37194e5c5ad8ff5029a50196aa22e",
          "sha": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
          "html_url": "https://github.com/bitcoin/bips/commit/1251d29854c37194e5c5ad8ff5029a50196aa22e"
        }
      ],
      "message": "Fix typo",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-23T17:35:19Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-23T17:35:19Z"
      },
      "sha": "900d221a858d5581dce151c0dfe429716f00d3be"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6Mzg3ZDVlMWIxMmVhZjA2ZjRkNDU0ZTFlNTNlMzQ2NWMyNWE5ZmE1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/387d5e1b12eaf06f4d454e1e53e3465c25a9fa53",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/387d5e1b12eaf06f4d454e1e53e3465c25a9fa53",
      "tree": {
        "sha": "a8dbce913f021d8f570c191dbcd556cfa26a7565",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a8dbce913f021d8f570c191dbcd556cfa26a7565"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a8dbce913f021d8f570c191dbcd556cfa26a7565\nparent 900d221a858d5581dce151c0dfe429716f00d3be\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1590255446 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1590255446 +0900\n\nReformulate\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7JX1YACgkQZhh2PvCR\nhv7GvQ//dKLM2TiRW/Lg+CrzQyvcgmdycSNgjwd0I9+VCVs1WoxymWIxwl8/azYf\ns5CgjfL0X/5jdE+uFN3gFUZtS2oiOdxjdDDKT9tUssihjXagjxdPdB+qEw6seCLq\nsuHQ0oKpLvyujNkxLLnlIZ5XOflaXSDa3QbVRlKJPhEiZ/EVPYxXHDTAESjQaTuL\npxH04+jFrs7z1kbGnZ4LuV5PYIf7BoG11mJ8BzvixkLn3As2Vlj2/ssmec2HiaBN\n51uTqrv14APqm/PoZmMpwvkG3oMo69sreygqEp/pic03nfBns15bFWiJXFhkRg31\nZu8n3NfzTX6E5G1hj+R9mJ0j8XFxgjHPEmIbP8UTwUBZQx0a6WCP4DymjyZodaBz\nRTyBhCU+ExjxXnVT0ZOUG1nPueDx872JbGa5CrrnrQV5Efb8RDGvlKlX56qPyjjl\nFNKiODZN01Qa7WiAAcB1AgLmFLMzMLs5EAel5iH9CxNjEZWCr+XrXbo1Cc2Msjqi\n3w3XyJqjLCcQCp37abLWF4HUBXLuhTaq6TJn0DJPEkf+h24UZjF9/U0Kszmkq8tF\nNinmuovNItGubLMb9UqKMEczrZq/rVMIBWNQ9K4aGaL86OnTK9Fb9q1K4RgS0VLa\nDU6+ucEr2droOrOBZsWLcgBi54gnc92cdoOGWJMByhU2c0uUt9o=\n=hOBN\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/900d221a858d5581dce151c0dfe429716f00d3be",
          "sha": "900d221a858d5581dce151c0dfe429716f00d3be",
          "html_url": "https://github.com/bitcoin/bips/commit/900d221a858d5581dce151c0dfe429716f00d3be"
        }
      ],
      "message": "Reformulate",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-23T17:37:26Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-23T17:37:26Z"
      },
      "sha": "387d5e1b12eaf06f4d454e1e53e3465c25a9fa53"
    },
    {
      "event": "commented",
      "id": 633201610,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzIwMTYxMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/633201610",
      "actor": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-24T09:06:29Z",
      "updated_at": "2020-05-24T09:06:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @AdamISZ the `v=` is not part of the BIP21. It is a parameter passed by the sender to the receiver in the POST request, not from receiver to sender.\r\n> \r\n> Basically receiver say \"here is my negociation endpoint\", then sender say \"Ok, let's do this! I am running v2\", then receiver say \"Ah sorry, I don't support 2, but 1 and 3\", then the sender can say \"Ok let's use 1 then\"\r\n\r\nDoh! Sorry for wasting time there. No wonder it seemed weird, it's because it was completely wrong, lol.",
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-633201610",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3367774549,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM2Nzc3NDU0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3367774549",
      "actor": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-24T09:06:30Z"
    },
    {
      "event": "subscribed",
      "id": 3367774551,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNjc3NzQ1NTE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3367774551",
      "actor": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-24T09:06:30Z"
    },
    {
      "event": "commented",
      "id": 634390769,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDM5MDc2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/634390769",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T02:33:14Z",
      "updated_at": "2020-05-27T02:33:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "Keeping that open for 1 or 2 week before proceeding. Received a mail of someone telling me they are writing a paper and that part of it inside suggest some things that should be included in payjoin.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-634390769",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 634928082,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDkyODA4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/634928082",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T20:42:06Z",
      "updated_at": "2020-05-27T20:42:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Nice work. If you want, you can add: `Replaces: 79` and I'll get bip79 updates to say it's `Superseded-By` by this.",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-634928082",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "reviewed",
      "id": 419593224,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTkzMjI0",
      "url": null,
      "actor": null,
      "commit_id": "387d5e1b12eaf06f4d454e1e53e3465c25a9fa53",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-419593224",
      "submitted_at": "2020-05-27T20:43:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "reviewed",
      "id": 419670721,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjcwNzIx",
      "url": null,
      "actor": null,
      "commit_id": "387d5e1b12eaf06f4d454e1e53e3465c25a9fa53",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-419670721",
      "submitted_at": "2020-05-27T23:08:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NjMzZjk0ZDAwNTZkZDNhZWM4ZWQ4OTM0M2ZjZmEzN2Y4OTA1ZTExNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/633f94d0056dd3aec8ed89343fcfa37f8905e117",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/633f94d0056dd3aec8ed89343fcfa37f8905e117",
      "tree": {
        "sha": "da7d8877363793846729433ff9f6486e419f2fd4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/da7d8877363793846729433ff9f6486e419f2fd4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree da7d8877363793846729433ff9f6486e419f2fd4\nparent 387d5e1b12eaf06f4d454e1e53e3465c25a9fa53\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1590622789 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1590622789 +0900\n\nThis BIP replace 79\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7O+kUACgkQZhh2PvCR\nhv6c2hAAy7ePQqrwvpVu+mqgXX2ZPhiq/qAb4I9xvFhz85odSlIwis2UWWlXqQvD\nb47snEQBy5TalxMchiMwT6+sm3lWcbsaVls4cnZPZ74/2oTxg1QfSxX5c0OmEIKa\nBo59x4dO6pIrj/N+qpegRxlvnSg03ZI0Ov3D7gigVhdrh0PsPrFo/46krHm+XcbF\nbzjkSvKC0WX0oA7QL1dLcZWT1w/+GRUX34bDlDE9IksKBBw9QtHENGRPylFC+b7p\nJgiU2gTpW2kkf+anYHrO6ZwNupFmfLy5nzUMxfcC3T8ithFBOJPDaH28I1Wnac2a\nVie/pi4SOGfwVfJjY4PPljOLa1MckWoSWnj3Ks/gQHhA+Ctaw40dD65qvZt0R1QD\nJy+yKT1qDbXr9d2KbHBBpIGNpx1zFKQ6ZA13ArlPH6qauIyPy62Wb0ojP8k+LpwR\n03vvgJRrgYMg7nHhadLOLlZNPJnpWIuRCSB2Qm/AQWc5VzPOVSCg2vl0WjHQaZkU\n2Ca9EuAwvmQb8wxVhVLM7Z4oqY4mANMlsN7a8RUZkBUumii+cWf41RKZEc/h1j+U\n+MzWIYZjLsPvt/atealTNQlcvsNTcbtH0+RZO6iZLUYTA8qWMyLct+nT39cYPdna\ny1YtrM1AAYQKy19hqc6KrwEtq0m4lBZ2WrJMmRN4T9Xz07JywNI=\n=Lxa/\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/387d5e1b12eaf06f4d454e1e53e3465c25a9fa53",
          "sha": "387d5e1b12eaf06f4d454e1e53e3465c25a9fa53",
          "html_url": "https://github.com/bitcoin/bips/commit/387d5e1b12eaf06f4d454e1e53e3465c25a9fa53"
        }
      ],
      "message": "This BIP replace 79",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-27T23:39:49Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-27T23:39:49Z"
      },
      "sha": "633f94d0056dd3aec8ed89343fcfa37f8905e117"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZjYyY2VlZTc4MWFlODBjYTcwNGVmZmIxNWRjMzVhYjFlZWJhZGUxYQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f62ceee781ae80ca704effb15dc35ab1eebade1a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f62ceee781ae80ca704effb15dc35ab1eebade1a",
      "tree": {
        "sha": "7273da121aa46032fe6b4269931dabfbb4bc4480",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7273da121aa46032fe6b4269931dabfbb4bc4480"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7273da121aa46032fe6b4269931dabfbb4bc4480\nparent 633f94d0056dd3aec8ed89343fcfa37f8905e117\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1590640234 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1590640234 +0900\n\nRemove uneeded error message, add more details on the original/proposal PSBT requirements\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7PPmoACgkQZhh2PvCR\nhv6PYxAArdi2zY/3L8Y0RjFRNqHd3piUYo+IVZfYSttbXpF1Jl0cioukFtDBWvrT\nUSS+fhNfx3MD7zPoRx30SMwPVvTPlbObpcwtYn4LCGfr9u/a7/1jYauP1jpVuRBo\n57V7uerStdK4n3SosEuFVguL7mKSUArjqclXMspmTNP6NeLErpJgbNbYDlFu/z90\nb/jqR4w7NKO7uzfuQhEY0GC5JjBTDTqRvJfUYftWiPqNw5iIfWpfcRaqbu76IHN0\n+jenmceNE0Qpc3FVomkwE14wa9pNd8OfP/LafLVUIjKjcJKckmhE6DPf1IQNi+wu\ncU7HKcpCJjKzi2l/z6+LSkJpelJbJZd0IAdZsz0hQpC35xPog5CT/y/cRmnAwL7B\npmKQU1Kn2otq9KZDWsdgAt7XKU0iaYlu9Ez9zYclzbIu+C0rqdaazVDz4OvsxIFA\nGEY4bB7/OwjcqMiT5eAe+XjR3EHVaY+3rmVrcsrT+PB5cl1h8qSyhY/+qBaDW26t\nHkoryy5AasPweCHDYG1AtQR4ddvwkEZNrUkOxzS4IlxYbh7B1Wh0UjB2IbY2avSB\nDOJCS5hJvpFhmGUFu4ym5VwttlAQusylfeQXtd53jFrmMLFsUkg7ZQI+SzD1e7sq\nwCxuRIRAR6itPZ+14QMbkqQiDppPLtPVIoR1F4xuNLx7GUUrjl8=\n=KJeb\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/633f94d0056dd3aec8ed89343fcfa37f8905e117",
          "sha": "633f94d0056dd3aec8ed89343fcfa37f8905e117",
          "html_url": "https://github.com/bitcoin/bips/commit/633f94d0056dd3aec8ed89343fcfa37f8905e117"
        }
      ],
      "message": "Remove uneeded error message, add more details on the original/proposal PSBT requirements",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-28T04:30:34Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-28T04:30:34Z"
      },
      "sha": "f62ceee781ae80ca704effb15dc35ab1eebade1a"
    },
    {
      "event": "reviewed",
      "id": 419772132,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NzcyMTMy",
      "url": null,
      "actor": null,
      "commit_id": "f62ceee781ae80ca704effb15dc35ab1eebade1a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "yahiheb",
        "id": 52379387,
        "node_id": "MDQ6VXNlcjUyMzc5Mzg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/52379387?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yahiheb",
        "html_url": "https://github.com/yahiheb",
        "followers_url": "https://api.github.com/users/yahiheb/followers",
        "following_url": "https://api.github.com/users/yahiheb/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yahiheb/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yahiheb/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yahiheb/subscriptions",
        "organizations_url": "https://api.github.com/users/yahiheb/orgs",
        "repos_url": "https://api.github.com/users/yahiheb/repos",
        "events_url": "https://api.github.com/users/yahiheb/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yahiheb/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-419772132",
      "submitted_at": "2020-05-28T04:41:27Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NDM0ZThjMjc5ZGZmYzFkYTYyNjE3Mjk4NTYwNWQzZjE2NzIyM2I2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/434e8c279dffc1da626172985605d3f167223b63",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/434e8c279dffc1da626172985605d3f167223b63",
      "tree": {
        "sha": "b5f3b3c7349967340b2a47527856b4fb71cf1cc7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b5f3b3c7349967340b2a47527856b4fb71cf1cc7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b5f3b3c7349967340b2a47527856b4fb71cf1cc7\nparent f62ceee781ae80ca704effb15dc35ab1eebade1a\nauthor Nicolas Dorier <nicolas.dorier@gmail.com> 1590641108 +0900\ncommitter GitHub <noreply@github.com> 1590641108 +0900\n\nUpdate bip-xxxx.mediawiki\n\nCo-authored-by: yahiheb <52379387+yahiheb@users.noreply.github.com>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJez0HUCRBK7hj4Ov3rIwAAdHIIAC5Q2jqLcjeTN5LJ6s4P4Jxf\nzud/YOjhRvSkU8ok2Wo3hdUmTR0REj1c607M1+JnHr7kLIlyspPaebZGFKBoyoyn\n790vHyyDuAY+az9i4E8mBQ2b2BnflQWvF6JnZl/iXLIQ9inAACf3tnwI1Z1zF1aX\n4vt+nrwjph9Wx4rQ6J2qvBM6f1wmyOwCaRWNpVbqWNDRJQ0JZpb7FGe4wPxOjHM3\nSJ9BeP+IwOtVQnapRewMPDGw/IUvbaT1ZQXDAEwMLeZ9GEUCEW1BRyOqiPtChyET\nSAzH/UBXrGsPvz10QIa08vzyxE4Tw1qu0dnwOFlHSfBmM8k8CtxrbFX6BzR/KKM=\n=O3hu\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f62ceee781ae80ca704effb15dc35ab1eebade1a",
          "sha": "f62ceee781ae80ca704effb15dc35ab1eebade1a",
          "html_url": "https://github.com/bitcoin/bips/commit/f62ceee781ae80ca704effb15dc35ab1eebade1a"
        }
      ],
      "message": "Update bip-xxxx.mediawiki\n\nCo-authored-by: yahiheb <52379387+yahiheb@users.noreply.github.com>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2020-05-28T04:45:08Z"
      },
      "author": {
        "name": "Nicolas Dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-28T04:45:08Z"
      },
      "sha": "434e8c279dffc1da626172985605d3f167223b63"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NWRiMWI5OTUwNDk1OGE4MDhiOTY2OTJmY2E4NzI0NzRiZjJlY2ZkYQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5db1b99504958a808b96692fca872474bf2ecfda",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5db1b99504958a808b96692fca872474bf2ecfda",
      "tree": {
        "sha": "1f673653812c785a4b9edb7bada6eddd0e0020e0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1f673653812c785a4b9edb7bada6eddd0e0020e0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1f673653812c785a4b9edb7bada6eddd0e0020e0\nparent 434e8c279dffc1da626172985605d3f167223b63\nauthor Nicolas Dorier <nicolas.dorier@gmail.com> 1590641121 +0900\ncommitter GitHub <noreply@github.com> 1590641121 +0900\n\nUpdate bip-xxxx.mediawiki\n\nCo-authored-by: yahiheb <52379387+yahiheb@users.noreply.github.com>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJez0HhCRBK7hj4Ov3rIwAAdHIIAGQ0ioanzOXAOCT8a8m8QaYx\nIbms51XK3Y7FKJ099Pm2QEhYwJ5738dvQdK1zVHfSzC3Z4SGgIdAvkj2u94jsBie\nJT8KrrwBpnYkngD2HLnpR53bgHAPJxxGyIy5fu/n9Z6ERceFIivZ6ywnRLTdQK7b\nALNrzpE1/OpOWUtumRTWWNuq/+QtHruGi6zVxa/p1atQ2VOKjGGk46BwZJ71WjFV\nc7FQSyS35bYpuFV8opP1Wju/elWidaw75DN/ZqAupaDsW4BH8HUibAWdaR9zfq1W\nK4MH4vMwTHjw3lWNiyDfwjnlaWNR0ZD3kNQeHuv/zJieJFP+0FtLKL2CEzzSDQU=\n=Y/eP\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/434e8c279dffc1da626172985605d3f167223b63",
          "sha": "434e8c279dffc1da626172985605d3f167223b63",
          "html_url": "https://github.com/bitcoin/bips/commit/434e8c279dffc1da626172985605d3f167223b63"
        }
      ],
      "message": "Update bip-xxxx.mediawiki\n\nCo-authored-by: yahiheb <52379387+yahiheb@users.noreply.github.com>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2020-05-28T04:45:21Z"
      },
      "author": {
        "name": "Nicolas Dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-05-28T04:45:21Z"
      },
      "sha": "5db1b99504958a808b96692fca872474bf2ecfda"
    },
    {
      "event": "reviewed",
      "id": 421789988,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNzg5OTg4",
      "url": null,
      "actor": null,
      "commit_id": "5db1b99504958a808b96692fca872474bf2ecfda",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "junderw",
        "id": 11246316,
        "node_id": "MDQ6VXNlcjExMjQ2MzE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/junderw",
        "html_url": "https://github.com/junderw",
        "followers_url": "https://api.github.com/users/junderw/followers",
        "following_url": "https://api.github.com/users/junderw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/junderw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/junderw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
        "organizations_url": "https://api.github.com/users/junderw/orgs",
        "repos_url": "https://api.github.com/users/junderw/repos",
        "events_url": "https://api.github.com/users/junderw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/junderw/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-421789988",
      "submitted_at": "2020-06-01T12:02:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "reviewed",
      "id": 421803285,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxODAzMjg1",
      "url": null,
      "actor": null,
      "commit_id": "5db1b99504958a808b96692fca872474bf2ecfda",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "\n\n",
      "user": {
        "login": "christianrolandso",
        "id": 25420895,
        "node_id": "MDQ6VXNlcjI1NDIwODk1",
        "avatar_url": "https://avatars.githubusercontent.com/u/25420895?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/christianrolandso",
        "html_url": "https://github.com/christianrolandso",
        "followers_url": "https://api.github.com/users/christianrolandso/followers",
        "following_url": "https://api.github.com/users/christianrolandso/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/christianrolandso/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/christianrolandso/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/christianrolandso/subscriptions",
        "organizations_url": "https://api.github.com/users/christianrolandso/orgs",
        "repos_url": "https://api.github.com/users/christianrolandso/repos",
        "events_url": "https://api.github.com/users/christianrolandso/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/christianrolandso/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-421803285",
      "submitted_at": "2020-06-01T12:27:46Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "labeled",
      "id": 3394559140,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzOTQ1NTkxNDA=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3394559140",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-01T19:28:50Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 637058673,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzA1ODY3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/637058673",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-01T19:31:01Z",
      "updated_at": "2020-06-01T19:31:01Z",
      "author_association": "MEMBER",
      "body": "`Backwards compatibility` section is required.\r\n\r\n(In this case, it should probably document interaction with existing BIP21 wallets, at least.)",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-637058673",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6M2JlZGU2MGI3MDVlYmVhZjE0MGIyNmIxYjJkY2YyMGNmNzhkNjI1ZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3bede60b705ebeaf140b26b1b2dcf20cf78d625e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3bede60b705ebeaf140b26b1b2dcf20cf78d625e",
      "tree": {
        "sha": "25286822186da1d4baefff410bb6b808ced7dcae",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/25286822186da1d4baefff410bb6b808ced7dcae"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 25286822186da1d4baefff410bb6b808ced7dcae\nparent 5db1b99504958a808b96692fca872474bf2ecfda\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1591065701 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1591065982 +0900\n\nUpdate Javascript sender implementation link\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7VvX4ACgkQZhh2PvCR\nhv56hg//YM7mZw8mNELvxyUe57YcdIhO3fIM4VdXyuO9oZU3sSR1fMDb9mtoab08\nZoxGDnv2PNSsaUk7Stu/72Y1YfrvjMSh2jM60CSQx6W0s+TLbo/rszRCpHfQ4Hp7\nbLhgsI5JtzeeKPY0V5XJ8jG0dFoZrrhBkzESuBTWRSHUHAav1TFaUEG7bUag9It3\nXGvUekJdIsPUM8xmaS3DFdYM/Ba8CP4DyZEz+Qt76ksGve6Omhi4NWV4ldVZ1etH\nzqfFxjPYeSRT2BMs7DGuwN+IdXG9ciaw9M4ZgrEIZnVKVC4SyJ3f7nPwEgPMovgp\njvMtBuiMcWXeIm7YKU67sso7OSx9odpA4w2XI4xOoSMrbZHpU9R13DcNmemB9dry\nDdWO32iCraU/nEZujUDeV4SfQCo7EFYZhEdwNI3zykGPNNBU2YoQ3n5aR69qPqEw\n7HijcSzoCJqodBB8cZwfc8BwWrWag/YaZnt8nqDCNJxTvByUwwVXChVtlK108MsQ\n5gxnl+g0PRuM0aBN83ObhuPmmeGRRYL9gBOPLPDCpjt+Dh5rQozdJ9SRKE1aBmNU\noqkf2djvCowOShBOsasXNCaxZGbmc27Bn+U2szZLceUIAasxKsn+etUghZ4VYMPv\nduVUxqvAb6VFeRoWv6iktGrGXyhe7TpIp48zoUgPX6bUmwXVg9Y=\n=DLeL\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5db1b99504958a808b96692fca872474bf2ecfda",
          "sha": "5db1b99504958a808b96692fca872474bf2ecfda",
          "html_url": "https://github.com/bitcoin/bips/commit/5db1b99504958a808b96692fca872474bf2ecfda"
        }
      ],
      "message": "Update Javascript sender implementation link",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-02T02:46:22Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-02T02:41:41Z"
      },
      "sha": "3bede60b705ebeaf140b26b1b2dcf20cf78d625e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OGNlNjA4NjUxNzhiNDZmMGQ0MjBkZGU1YzViYzM3M2NjMTdhMjJkYQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "tree": {
        "sha": "699e0b362840779ffddc1a54b93c44e5add99c98",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/699e0b362840779ffddc1a54b93c44e5add99c98"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 699e0b362840779ffddc1a54b93c44e5add99c98\nparent 3bede60b705ebeaf140b26b1b2dcf20cf78d625e\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1591065964 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1591065982 +0900\n\nAdd Backward compatibility section\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7VvX4ACgkQZhh2PvCR\nhv7nuBAArebKOfVSs+WjntfMZbcHB1pxd4zo6PRYHkHAtNBUf12BkwF7moMlZq/v\nnUls/9CjUB/uXfijL+K9Rd0ZTjCi4Lx1qErvCvi3YisXh8aWtMMwJXvu79PW1vBg\nhaAlzgEus7BJoyuuTP/OSFtQA7xH5VLseqXWJUwHWbUDlUW2gbpLplKtTarSBWhq\nxvT+89OrNvvjs3rtp3W8vDM3eSX4RJC3v+znmuEHR8WK2OMHe43RGNAHMEwsekiP\n1VgiT8ebhIWUUrV1RmZNuOgsYNXmScoGSsE9LUPi9BJz5hEQ5XyCyfyTNDl2hL7x\nVj6UglYfUBaPPL/00j9r2BbNxqy+YzyKGKosujfdxBhERxdxYM93wQeTojeQtQ+2\nJ2PlMKVZn01w5bXU5tp+CZB3q2nD2CEa3jXuA79XETqqv+2yfjOoS+GWTYT5zKpz\n53wKGOrI+bRnUbBy30IfSaEB6VTKp2Rs1PsAVPSASivG5sc9U1CYPySNL4WdjURX\n04F896aSsEVtcvGwaKYTHC6Ll+aB6vF4lEzVOuOphda0i1Vn754tTrESMUblFjAn\n/TKsKeq/WVUoBbY8pPqMM1oQji7jPgKpcFXTRk82FV+FgdCIC9FEYmpCdhnH548d\nTcICWYwvL55PZs170iX7YKngI0V7f5SwZQw/xGXFBN6xHBM5+0Q=\n=FcFc\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3bede60b705ebeaf140b26b1b2dcf20cf78d625e",
          "sha": "3bede60b705ebeaf140b26b1b2dcf20cf78d625e",
          "html_url": "https://github.com/bitcoin/bips/commit/3bede60b705ebeaf140b26b1b2dcf20cf78d625e"
        }
      ],
      "message": "Add Backward compatibility section",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-02T02:46:22Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-02T02:46:04Z"
      },
      "sha": "8ce60865178b46f0d420dde5c5bc373cc17a22da"
    },
    {
      "event": "commented",
      "id": 637236733,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzIzNjczMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/637236733",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-02T02:46:31Z",
      "updated_at": "2020-06-02T02:46:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "@luke-jr done.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-637236733",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3395614712,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM5NTYxNDcxMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3395614712",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-02T02:46:31Z"
    },
    {
      "event": "subscribed",
      "id": 3395614717,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzOTU2MTQ3MTc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3395614717",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-02T02:46:31Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "kristapsk",
        "id": 4500994,
        "node_id": "MDQ6VXNlcjQ1MDA5OTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4500994?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kristapsk",
        "html_url": "https://github.com/kristapsk",
        "followers_url": "https://api.github.com/users/kristapsk/followers",
        "following_url": "https://api.github.com/users/kristapsk/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kristapsk/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kristapsk/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kristapsk/subscriptions",
        "organizations_url": "https://api.github.com/users/kristapsk/orgs",
        "repos_url": "https://api.github.com/users/kristapsk/repos",
        "events_url": "https://api.github.com/users/kristapsk/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kristapsk/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-02T23:43:54Z",
      "updated_at": "2020-06-02T23:43:54Z",
      "source": {
        "issue": {
          "id": 629577888,
          "node_id": "MDU6SXNzdWU2Mjk1Nzc4ODg=",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19148",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19148/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19148/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19148/events",
          "html_url": "https://github.com/bitcoin/bitcoin/issues/19148",
          "number": 19148,
          "state": "open",
          "state_reason": null,
          "title": "Implement PayJoin / Pay-to-EndPoint",
          "body": "PayJoin (also called pay-to-end-point or P2EP) is a special type of CoinJoin between two parties where one party pays the other. This coinjoin type has different (probably better) privacy properties. The transaction then doesn't have the distinctive multiple outputs with the same value, and so is not obviously visible as an equal-output CoinJoin. \r\n\r\nAn overview of PayJoin with additional information and links can be found here https://en.bitcoin.it/wiki/PayJoin\r\n\r\nImplementing PayJoin would potentially need OpenSSL to communicate with the PayJoin server (unless I am misunderstanding how PayJoin works) as such, implementing this would have similar objections to BIP 70.\r\n\r\nLooking forward to hearing thoughts.",
          "user": {
            "login": "PastaPastaPasta",
            "id": 6443210,
            "node_id": "MDQ6VXNlcjY0NDMyMTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/PastaPastaPasta",
            "html_url": "https://github.com/PastaPastaPasta",
            "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
            "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
            "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
            "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
            "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 64583,
              "node_id": "MDU6TGFiZWw2NDU4Mw==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
              "name": "Feature",
              "color": "7cf575",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 5,
          "created_at": "2020-06-02T23:23:20Z",
          "updated_at": "2023-07-24T21:12:15Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "reviewed",
      "id": 423705732,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNzA1NzMy",
      "url": null,
      "actor": null,
      "commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-423705732",
      "submitted_at": "2020-06-03T16:00:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "reviewed",
      "id": 423708975,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNzA4OTc1",
      "url": null,
      "actor": null,
      "commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-423708975",
      "submitted_at": "2020-06-03T16:04:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "reviewed",
      "id": 424248106,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjQ4MTA2",
      "url": null,
      "actor": null,
      "commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-424248106",
      "submitted_at": "2020-06-04T09:07:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "reviewed",
      "id": 424693024,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjkzMDI0",
      "url": null,
      "actor": null,
      "commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-424693024",
      "submitted_at": "2020-06-04T17:56:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "commented",
      "id": 639184873,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTE4NDg3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639184873",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:14:19Z",
      "updated_at": "2020-06-05T01:01:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "I am thinking about restricting the receiver to make it easier to code the sender. https://github.com/bitcoin/bips/pull/923#discussion_r434682357\r\n\r\nI am not really thrilled by it, as it decrease the number of suspected payjoin, but I feel the sender would be way too tricky to code properly, making it prone to loss of fund if the receiver is malicious.\r\n\r\nI am thinking changing the following:\r\n\r\n* No output substitution\r\n* The receiver can't change outputs\r\n* No reordering of inputs and outputs\r\n* The receiver can't reorder outputs or inputs (it can only insert new inputs)\r\n* No spare change case to handle\r\n* Only exception is change of value to the change output\r\n\r\nThis would make it way more easy for the sender to check that the receiver is not malicious.\r\n\r\nA sender could just remove the added input, and verify that the resulting PSBT is identical to the original PSBT.\r\n\r\nIt also greatly simplify fee verification (ping @instagibbs )\r\n\r\n@Kukks @junderw @lukechilds @lontivero @AdamISZ @ncoelho @nopara73 @RHavar @andrewkozlik\r\n\r\nHaving coded both receiver and sender, I found out that the sender is actually harder to code and review than the receiver, this should not be the case.\r\n\r\nI am also concerned that those edge cases are not correctly tested by senders, and as soon as the receiver take advantage of it, it will break senders, losing the opportunity to coinjoin. (https://github.com/bitcoin/bips/pull/923#discussion_r434685523)\r\n\r\nNote:\r\nWe could always allow support for the other corner cases later by introducing more optional parameter where the client can signal what it supports. But I think at this stage, this may be premature.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639184873",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3409196098,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwOTE5NjA5OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409196098",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:16:05Z"
    },
    {
      "event": "subscribed",
      "id": 3409196100,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDkxOTYxMDA=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409196100",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:16:05Z"
    },
    {
      "event": "mentioned",
      "id": 3409197888,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwOTE5Nzg4OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197888",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:01Z"
    },
    {
      "event": "subscribed",
      "id": 3409197891,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDkxOTc4OTE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197891",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:01Z"
    },
    {
      "event": "mentioned",
      "id": 3409197892,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwOTE5Nzg5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197892",
      "actor": {
        "login": "junderw",
        "id": 11246316,
        "node_id": "MDQ6VXNlcjExMjQ2MzE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/junderw",
        "html_url": "https://github.com/junderw",
        "followers_url": "https://api.github.com/users/junderw/followers",
        "following_url": "https://api.github.com/users/junderw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/junderw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/junderw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
        "organizations_url": "https://api.github.com/users/junderw/orgs",
        "repos_url": "https://api.github.com/users/junderw/repos",
        "events_url": "https://api.github.com/users/junderw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/junderw/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:01Z"
    },
    {
      "event": "subscribed",
      "id": 3409197898,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDkxOTc4OTg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197898",
      "actor": {
        "login": "junderw",
        "id": 11246316,
        "node_id": "MDQ6VXNlcjExMjQ2MzE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/junderw",
        "html_url": "https://github.com/junderw",
        "followers_url": "https://api.github.com/users/junderw/followers",
        "following_url": "https://api.github.com/users/junderw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/junderw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/junderw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
        "organizations_url": "https://api.github.com/users/junderw/orgs",
        "repos_url": "https://api.github.com/users/junderw/repos",
        "events_url": "https://api.github.com/users/junderw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/junderw/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:02Z"
    },
    {
      "event": "mentioned",
      "id": 3409197900,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwOTE5NzkwMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197900",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:02Z"
    },
    {
      "event": "subscribed",
      "id": 3409197901,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDkxOTc5MDE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197901",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:02Z"
    },
    {
      "event": "mentioned",
      "id": 3409197904,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwOTE5NzkwNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197904",
      "actor": {
        "login": "lontivero",
        "id": 127973,
        "node_id": "MDQ6VXNlcjEyNzk3Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127973?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lontivero",
        "html_url": "https://github.com/lontivero",
        "followers_url": "https://api.github.com/users/lontivero/followers",
        "following_url": "https://api.github.com/users/lontivero/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lontivero/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lontivero/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lontivero/subscriptions",
        "organizations_url": "https://api.github.com/users/lontivero/orgs",
        "repos_url": "https://api.github.com/users/lontivero/repos",
        "events_url": "https://api.github.com/users/lontivero/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lontivero/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:02Z"
    },
    {
      "event": "subscribed",
      "id": 3409197906,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDkxOTc5MDY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197906",
      "actor": {
        "login": "lontivero",
        "id": 127973,
        "node_id": "MDQ6VXNlcjEyNzk3Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127973?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lontivero",
        "html_url": "https://github.com/lontivero",
        "followers_url": "https://api.github.com/users/lontivero/followers",
        "following_url": "https://api.github.com/users/lontivero/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lontivero/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lontivero/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lontivero/subscriptions",
        "organizations_url": "https://api.github.com/users/lontivero/orgs",
        "repos_url": "https://api.github.com/users/lontivero/repos",
        "events_url": "https://api.github.com/users/lontivero/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lontivero/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:02Z"
    },
    {
      "event": "mentioned",
      "id": 3409197909,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwOTE5NzkwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197909",
      "actor": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:02Z"
    },
    {
      "event": "subscribed",
      "id": 3409197912,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDkxOTc5MTI=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197912",
      "actor": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:02Z"
    },
    {
      "event": "mentioned",
      "id": 3409197916,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwOTE5NzkxNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197916",
      "actor": {
        "login": "ncoelho",
        "id": 1238429,
        "node_id": "MDQ6VXNlcjEyMzg0Mjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1238429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ncoelho",
        "html_url": "https://github.com/ncoelho",
        "followers_url": "https://api.github.com/users/ncoelho/followers",
        "following_url": "https://api.github.com/users/ncoelho/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ncoelho/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ncoelho/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ncoelho/subscriptions",
        "organizations_url": "https://api.github.com/users/ncoelho/orgs",
        "repos_url": "https://api.github.com/users/ncoelho/repos",
        "events_url": "https://api.github.com/users/ncoelho/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ncoelho/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:02Z"
    },
    {
      "event": "subscribed",
      "id": 3409197917,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDkxOTc5MTc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197917",
      "actor": {
        "login": "ncoelho",
        "id": 1238429,
        "node_id": "MDQ6VXNlcjEyMzg0Mjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1238429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ncoelho",
        "html_url": "https://github.com/ncoelho",
        "followers_url": "https://api.github.com/users/ncoelho/followers",
        "following_url": "https://api.github.com/users/ncoelho/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ncoelho/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ncoelho/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ncoelho/subscriptions",
        "organizations_url": "https://api.github.com/users/ncoelho/orgs",
        "repos_url": "https://api.github.com/users/ncoelho/repos",
        "events_url": "https://api.github.com/users/ncoelho/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ncoelho/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:02Z"
    },
    {
      "event": "mentioned",
      "id": 3409197920,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwOTE5NzkyMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197920",
      "actor": {
        "login": "nopara73",
        "id": 9156103,
        "node_id": "MDQ6VXNlcjkxNTYxMDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9156103?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nopara73",
        "html_url": "https://github.com/nopara73",
        "followers_url": "https://api.github.com/users/nopara73/followers",
        "following_url": "https://api.github.com/users/nopara73/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nopara73/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nopara73/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nopara73/subscriptions",
        "organizations_url": "https://api.github.com/users/nopara73/orgs",
        "repos_url": "https://api.github.com/users/nopara73/repos",
        "events_url": "https://api.github.com/users/nopara73/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nopara73/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:02Z"
    },
    {
      "event": "subscribed",
      "id": 3409197921,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDkxOTc5MjE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197921",
      "actor": {
        "login": "nopara73",
        "id": 9156103,
        "node_id": "MDQ6VXNlcjkxNTYxMDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9156103?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nopara73",
        "html_url": "https://github.com/nopara73",
        "followers_url": "https://api.github.com/users/nopara73/followers",
        "following_url": "https://api.github.com/users/nopara73/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nopara73/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nopara73/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nopara73/subscriptions",
        "organizations_url": "https://api.github.com/users/nopara73/orgs",
        "repos_url": "https://api.github.com/users/nopara73/repos",
        "events_url": "https://api.github.com/users/nopara73/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nopara73/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:02Z"
    },
    {
      "event": "mentioned",
      "id": 3409197926,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwOTE5NzkyNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197926",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:02Z"
    },
    {
      "event": "subscribed",
      "id": 3409197929,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDkxOTc5Mjk=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409197929",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:17:02Z"
    },
    {
      "event": "mentioned",
      "id": 3409202626,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwOTIwMjYyNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409202626",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:19:40Z"
    },
    {
      "event": "subscribed",
      "id": 3409202629,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDkyMDI2Mjk=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409202629",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:19:40Z"
    },
    {
      "event": "commented",
      "id": 639196563,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTE5NjU2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639196563",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T00:58:54Z",
      "updated_at": "2020-06-05T00:58:54Z",
      "author_association": "CONTRIBUTOR",
      "body": ">  - No output substitution\r\n>  - The receiver can't change outputs\r\n>  - No reordering of inputs and outputs\r\n>  - The receiver can't reorder outputs or inputs (it can only insert new inputs)\r\n>  - No spare change case to handle\r\n> \r\n> \r\n> This would make it way more easy for the sender to check that the receiver is not malicious.\r\n> \r\n> A sender could just remove the added input, and verify that the resulting PSBT is identical to the original PSBT.\r\n\r\nTo avoid the new inputs going to fees purely, the receiver also must be allowed to change the outputs in some fashion. The simplest thing would be to allow increasing the value of existing outputs but nothing else. Is this what you have in mind?",
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639196563",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 639197118,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTE5NzExOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639197118",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T01:01:02Z",
      "updated_at": "2020-06-05T01:01:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "@SomberNight you are right fixing my comment.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639197118",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3409271554,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwOTI3MTU1NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409271554",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T01:01:02Z"
    },
    {
      "event": "subscribed",
      "id": 3409271558,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDkyNzE1NTg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409271558",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T01:01:02Z"
    },
    {
      "event": "commented",
      "id": 639266898,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTI2Njg5OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639266898",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T05:25:54Z",
      "updated_at": "2020-06-05T05:48:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "I agree with the additional restrictions. Although:\r\n\r\n> The receiver can't change outputs\r\n> The receiver can't reorder outputs or inputs (it can only insert new inputs)\r\n\r\nMight be going a little too far? For obvious privacy reasons the receiver can't simply add his input to the end; so he has to do insertion at randomized locations. That's probably not too hard to do, but requires slightly more thinking than receiver adding their inputs, and simply shuffle the entire list. \r\n\r\nI've helped with several implementations, and I'd still advocate the same bip79 (bustpay) [restrictions](https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki#Sender_Validation) which I think are pretty straight forward for a [sender to verify](https://github.com/RHavar/bustapay/blob/b69a49d0b658c01c6cf133212d5505e62bdadef6/send/send.go#L113)\r\n\r\nAlthough to be honest, I can't say I feel too strongly about it. I think requiring the original order is fine too\r\n\r\n---\r\n\r\nBut:\r\n>  (it can only insert new inputs)\r\n\r\nI think is overly restrictive. I prefer the BIP79 rule:\r\n\r\n> All outputs from the template transaction exist in the partial transaction, except they are allowed to be reordered and have their amounts increased (but *never* decreased)\r\n\r\nWhich I don't think puts any extra burden on the sender to verify while allowing interesting use cases. A couple that come to mind: the receiver adds a extra output to pay a 3rd party in the same transaction the receiver is getting paid. Or a merchant outsources the payjoin to a 3rd party who can return some of the contributed funds back to themselves.  \r\n",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639266898",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 639278741,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTI3ODc0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639278741",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T06:07:15Z",
      "updated_at": "2020-06-05T06:07:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "@RHavar I think randomizing the input/output order does not improve anything, while making it a bit harder for someone to verify the transaction is correct.\r\n\r\nThat said, for adding output I think this is fine indeed. (outside the change of value in the change output to pay for the additional fee)\r\n\r\nI wanted to remove this ability, because we don't want the receiver to bundle output for free, paid by the sender. We mention that in the BIP, but it is actually quite difficult to verify for the sender.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639278741",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3409817385,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwOTgxNzM4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409817385",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T06:07:15Z"
    },
    {
      "event": "subscribed",
      "id": 3409817386,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDk4MTczODY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409817386",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T06:07:15Z"
    },
    {
      "event": "commented",
      "id": 639295271,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTI5NTI3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639295271",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T06:55:20Z",
      "updated_at": "2020-06-05T06:55:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I wanted to remove this ability, because we don't want the receiver to bundle output for free, paid by the sender. We mention that in the BIP, but it is actually quite difficult to verify for the sender.\r\n\r\nI don't think this makes it any more simple or more complicated. Even without making _any_ changes to the outputs ... the receiver can lower the fee-rate by just simply adding (dust) inputs. So feerate related stuff is something that always needs to be done, regardless of any output related stuff.\r\n\r\n---\r\n\r\n> @RHavar I think randomizing the input/output order does not improve anything, \r\n\r\nAgree\r\n\r\n> while making it a bit harder for someone to verify the transaction is correct.\r\n\r\nI disagree. In pretty much every mainstream programming language, it's simpler to do `shuffle(concat(listA, listB))` than `randomlyIntercalate(listA, shuffle(listB))` with the later being complicated enough I'd have to stop and think to implement correctly (as I couldn't just call a couple builtin functions).  So from the receiver side, shuffling is clearly simpler.\r\n\r\nAnd from the sender side, the verification is actually simpler too, for the shuffle approach:\r\n\"for each input in original transaction, check it exists in the Payjoin Proposal\" [1]  while the preserving order requires an additional thing to check.\r\n\r\nThat said, this is probably the most trivial detail. Don't really think this matters at all.\r\n\r\n\r\n\r\n[1] This is generally going to be accidentally-quadratic time. But it's impossible to ever be big enough to matter. And it's pretty easy to turn into linear time by using a hash lookup.\r\n",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639295271",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3409939232,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwOTkzOTIzMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409939232",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T06:55:20Z"
    },
    {
      "event": "subscribed",
      "id": 3409939235,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDk5MzkyMzU=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409939235",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T06:55:20Z"
    },
    {
      "event": "commented",
      "id": 639298171,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTI5ODE3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639298171",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T07:02:41Z",
      "updated_at": "2020-06-05T07:03:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Actually I am thinking: The payment output's value can be decreased to pay for fee as well. (if that's overpaid)\r\n\r\nSo @RHavar and @andrewkozlik, if I understand, the only complain you have is on the address substitution?\r\n\r\nAbout adding output, I am really unsure about it now though. While it is useful for receiver, it is hard for the sender to calculate that the receiver is not making him pay for the additional outputs...\r\n",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639298171",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3409960651,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwOTk2MDY1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409960651",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T07:02:41Z"
    },
    {
      "event": "subscribed",
      "id": 3409960654,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDk5NjA2NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409960654",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T07:02:41Z"
    },
    {
      "event": "mentioned",
      "id": 3409960659,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQwOTk2MDY1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409960659",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T07:02:41Z"
    },
    {
      "event": "subscribed",
      "id": 3409960661,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MDk5NjA2NjE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3409960661",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T07:02:41Z"
    },
    {
      "event": "commented",
      "id": 639303270,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTMwMzI3MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639303270",
      "actor": {
        "login": "MaxHillebrand",
        "id": 30683012,
        "node_id": "MDQ6VXNlcjMwNjgzMDEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/30683012?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MaxHillebrand",
        "html_url": "https://github.com/MaxHillebrand",
        "followers_url": "https://api.github.com/users/MaxHillebrand/followers",
        "following_url": "https://api.github.com/users/MaxHillebrand/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MaxHillebrand/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MaxHillebrand/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MaxHillebrand/subscriptions",
        "organizations_url": "https://api.github.com/users/MaxHillebrand/orgs",
        "repos_url": "https://api.github.com/users/MaxHillebrand/repos",
        "events_url": "https://api.github.com/users/MaxHillebrand/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MaxHillebrand/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T07:15:29Z",
      "updated_at": "2020-06-05T07:15:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "> * No output substitution\r\n> * The receiver can't change outputs\r\n> * No reordering of inputs and outputs\r\n> * The receiver can't reorder outputs or inputs (it can only insert new inputs) \r\n> * No spare change case to handle\r\n> * Only exception is change of value to the change output\r\n\r\nAlthough this would simplify the integration, I think this will reduce the privacy benefits and incentives to use PayJoin drastically. This means...\r\n\r\n- Receiver cannot change output address to be same address type [bad for privacy]\r\n- No reordering can lead to fingerprinting that this might be a PayJoin, compared to value ordering or shuffling\r\n- It entirely prevents use cases like batching other transactions in this PayJoin. This prevents a great trinity of blockspace efficiency improvement, a privacy improvement, and usability improvement.\r\n\r\nTo remove this numerous benefits would be a shame indeed.",
      "user": {
        "login": "MaxHillebrand",
        "id": 30683012,
        "node_id": "MDQ6VXNlcjMwNjgzMDEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/30683012?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MaxHillebrand",
        "html_url": "https://github.com/MaxHillebrand",
        "followers_url": "https://api.github.com/users/MaxHillebrand/followers",
        "following_url": "https://api.github.com/users/MaxHillebrand/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MaxHillebrand/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MaxHillebrand/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MaxHillebrand/subscriptions",
        "organizations_url": "https://api.github.com/users/MaxHillebrand/orgs",
        "repos_url": "https://api.github.com/users/MaxHillebrand/repos",
        "events_url": "https://api.github.com/users/MaxHillebrand/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MaxHillebrand/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639303270",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 639305746,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTMwNTc0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639305746",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T07:21:27Z",
      "updated_at": "2020-06-05T07:21:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "> No reordering can lead to fingerprinting that this might be a PayJoin, compared to value ordering or shuffling\r\n\r\nI don't think so, on the contrary, it makes sure the payjoin adopt the fingerprint of the sender's wallet. But yeah @RHavar think that it does not make the sender's implementation too much more complicated, so maybe I am overshooting.\r\n\r\n> It entirely prevents use cases like batching other transactions in this PayJoin. This prevents a great trinity of blockspace efficiency improvement, a privacy improvement, and usability improvement.\r\n\r\nIt does not prevent the sender from batching though.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639305746",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3410017333,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQxMDAxNzMzMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3410017333",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T07:21:27Z"
    },
    {
      "event": "subscribed",
      "id": 3410017338,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MTAwMTczMzg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3410017338",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T07:21:27Z"
    },
    {
      "event": "commented",
      "id": 639309786,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTMwOTc4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639309786",
      "actor": {
        "login": "MaxHillebrand",
        "id": 30683012,
        "node_id": "MDQ6VXNlcjMwNjgzMDEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/30683012?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MaxHillebrand",
        "html_url": "https://github.com/MaxHillebrand",
        "followers_url": "https://api.github.com/users/MaxHillebrand/followers",
        "following_url": "https://api.github.com/users/MaxHillebrand/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MaxHillebrand/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MaxHillebrand/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MaxHillebrand/subscriptions",
        "organizations_url": "https://api.github.com/users/MaxHillebrand/orgs",
        "repos_url": "https://api.github.com/users/MaxHillebrand/repos",
        "events_url": "https://api.github.com/users/MaxHillebrand/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MaxHillebrand/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T07:30:55Z",
      "updated_at": "2020-06-05T07:30:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "> It does not prevent the sender from batching though.\r\n\r\nBut what about `No output substitution. The receiver can't change outputs.`? \r\nDoesn't this exclude adding new outputs that pay the batched transaction output?",
      "user": {
        "login": "MaxHillebrand",
        "id": 30683012,
        "node_id": "MDQ6VXNlcjMwNjgzMDEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/30683012?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MaxHillebrand",
        "html_url": "https://github.com/MaxHillebrand",
        "followers_url": "https://api.github.com/users/MaxHillebrand/followers",
        "following_url": "https://api.github.com/users/MaxHillebrand/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MaxHillebrand/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MaxHillebrand/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MaxHillebrand/subscriptions",
        "organizations_url": "https://api.github.com/users/MaxHillebrand/orgs",
        "repos_url": "https://api.github.com/users/MaxHillebrand/repos",
        "events_url": "https://api.github.com/users/MaxHillebrand/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MaxHillebrand/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639309786",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 639315492,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTMxNTQ5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639315492",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T07:43:56Z",
      "updated_at": "2020-06-05T07:43:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "I was thinking about excluding adding output, but you and @RHavar does not seem to think it is a good idea and make things necessarily easier.\r\n\r\nI am open to restrict some freedom of the receiver in order to make the sender easier to implement, also I am worried that some freedom that are not being taken advantage of now end up breaking senders who did not tested it.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639315492",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3410088007,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQxMDA4ODAwNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3410088007",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T07:43:56Z"
    },
    {
      "event": "subscribed",
      "id": 3410088014,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MTAwODgwMTQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3410088014",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T07:43:56Z"
    },
    {
      "event": "commented",
      "id": 639412914,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTQxMjkxNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639412914",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T11:04:09Z",
      "updated_at": "2020-06-05T11:04:09Z",
      "author_association": "NONE",
      "body": "> Actually I am thinking: The payment output's value can be decreased to pay for fee as well. (if that's overpaid)\r\n> So @RHavar and @andrewkozlik, if I understand, the only complain you have is on the address substitution?\r\n\r\nI find that changing an output's address, decreasing an output's amount or removing an output are all problematic in terms of user experience. See https://github.com/bitcoin/bips/pull/923/files#r435831538. \r\n\r\n> About adding output, I am really unsure about it now though. While it is useful for receiver, it is hard for the sender to calculate that the receiver is not making him pay for the additional outputs...\r\n\r\nI see no problem with the receiver adding outputs, it seems like a useful feature. As long as the original outputs are not decreased or removed and the sender doesn't have to sign for any additional UTXO's than those he already signed for in the original transaction, he can rest assured that he is not paying more than he agreed to.\r\n\r\n> @RHavar I think randomizing the input/output order does not improve anything, while making it a bit harder for someone to verify the transaction is correct.\r\n\r\nI am inclined to agree. Maintaining the order (while allowing insertions) would make the verification I [mentioned](https://github.com/bitcoin/bips/pull/923/files#r435831538) easier to implement in hardware wallets, because transactions are not loaded into the wallet's RAM, but are streamed. Without going into details, verifying that the conditions are satisfied in case of randomly reordered inputs and outputs can be solved in hardware wallets by implementing some kind of unordered hash function. So it's not an obstacle, but makes the implementation more complicated. (The verification would need to be done by the hardware wallet itself if we want to make PayJoin both user friendly and secure for the sender.)",
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639412914",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3410816899,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQxMDgxNjg5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3410816899",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T11:04:10Z"
    },
    {
      "event": "subscribed",
      "id": 3410816901,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MTA4MTY5MDE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3410816901",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T11:04:10Z"
    },
    {
      "event": "mentioned",
      "id": 3410816906,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQxMDgxNjkwNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3410816906",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T11:04:10Z"
    },
    {
      "event": "subscribed",
      "id": 3410816910,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MTA4MTY5MTA=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3410816910",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T11:04:10Z"
    },
    {
      "event": "commented",
      "id": 639457330,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTQ1NzMzMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639457330",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T12:42:10Z",
      "updated_at": "2020-06-05T12:42:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I find that changing an output's address, decreasing an output's amount or removing an output are all problematic in terms of user experience.\r\n\r\nAbout changing the output's amount, we have no choice, as the sender need to pay for the input of the receiver.\r\n\r\nRemoving output is not possible in the protocol.\r\n\r\nChanging output address is only limited to the paid output, so easy to check. But I agree, if the signature is on a hardware wallet, this would be confusing to the user...",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639457330",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 639458593,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTQ1ODU5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639458593",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T12:45:12Z",
      "updated_at": "2020-06-05T12:45:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I am inclined to agree. Maintaining the order (while allowing insertions) would make the verification I mentioned easier to implement in hardware wallets, because transactions are not loaded into the wallet's RAM, but are streamed.\r\n\r\nI think it is true as well, because you only have to check within a simple loop. I am tempted to rewrite my client for this as this is less error prone.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639458593",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 639460408,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTQ2MDQwOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639460408",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T12:49:40Z",
      "updated_at": "2020-06-05T12:49:40Z",
      "author_association": "MEMBER",
      "body": "I think for v1 this type of simplification can make a lot of sense. There\nare use cases for more extensive transaction changes but may hinder\nadoption due to sender complexity.\n\nOn Fri, Jun 5, 2020, 8:45 AM Nicolas Dorier <notifications@github.com>\nwrote:\n\n> I am inclined to agree. Maintaining the order (while allowing insertions)\n> would make the verification I mentioned easier to implement in hardware\n> wallets, because transactions are not loaded into the wallet's RAM, but are\n> streamed.\n>\n> I think it is true as well, because you only have to check within a simple\n> loop. I am tempted to rewrite my client for this as this is less error\n> prone.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bips/pull/923#issuecomment-639458593>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABMAFU6LAFDK4S25QWONQMDRVDSGPANCNFSM4NDBRK6Q>\n> .\n>\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639460408",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 639676195,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTY3NjE5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639676195",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T18:09:45Z",
      "updated_at": "2020-06-05T18:09:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think @andrewkozlik makes a good point about hardware wallets wanting to be able to stream transactions. So my refined opinion is the restrictions should be:\r\n\r\n* All inputs from the original must be in the payjoin proposal, with the exact same sequence numbers. The inputs MUST be in the same order, and the sender must verify this.\r\n\r\n* The receiver should randomly intercalate their added inputs, and not simply append to the end. The sender is not able to verify this.\r\n\r\n* All outputs from the original transaction must be in the payjoin proposal. The receiver is allowed to insert new outputs (at any location) but like inputs, must preserve order. The receiver must leave the existing output amounts the same or increase them, but NEVER decrease.",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639676195",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3412553041,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQxMjU1MzA0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3412553041",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T18:09:45Z"
    },
    {
      "event": "subscribed",
      "id": 3412553045,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MTI1NTMwNDU=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3412553045",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T18:09:45Z"
    },
    {
      "event": "reviewed",
      "id": 425529346,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTI5MzQ2",
      "url": null,
      "actor": null,
      "commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-425529346",
      "submitted_at": "2020-06-05T18:24:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "commented",
      "id": 639695665,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTY5NTY2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639695665",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T18:36:35Z",
      "updated_at": "2020-06-05T18:45:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "On a different note, I also disagree with everything about \"spare change\". I think it should be completely purged from the spec.  I don't believe the premise that it's better for a receiver to turn a changeless-transaction into one that looks like it has change. I would even go as far as argue it's harmful, because if you require it  then any transaction with 1 output _cannot_ be a payjoin.\r\n\r\nUnder the rules I proposed in my last comment, creating a fake-change output is completely allowed if a receiver feels it's useful (although personally I would be inclined to mildly advise against). But it's no longer a special case, just a receiver implementation detail.\r\n\r\n\r\nP.S. The reason \"change-less transactions\" are so uncommon is actually because wallet implementations (currently) suck at coin-selection, not because they are inherently rare. I wrote the payment processing system for bustabit.com which supports instant withdrawals and (partial) batched  (user choice) and fires it through a commercial constraint solver. They report that >80% of the transactions they make have no change output. And the solver gives _no_ extra weighting to a transaction with no change. It is creating changeless transactions _purely_ because it is more economical to do so. If other wallets upped their game, we would see a staggeringly higher amount of changless transactions.",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639695665",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 639885650,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTg4NTY1MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639885650",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T23:10:04Z",
      "updated_at": "2020-06-05T23:10:04Z",
      "author_association": "NONE",
      "body": "> All outputs from the original transaction must be in the payjoin proposal. The receiver is allowed to insert new outputs (at any location) but like inputs, must preserve order. The receiver must leave the existing output amounts the same or increase them, but NEVER decrease.\r\n\r\n@RHavar, I actually have to rectify my [statement](https://github.com/bitcoin/bips/pull/923#issuecomment-639412914) about not decreasing any output's amount. As @NicolasDorier correctly [pointed out](https://github.com/bitcoin/bips/pull/923#issuecomment-639457330), if the sender offers to pay for the receiver's added inputs, then indeed that has to be taken out of `additionalfeeoutputindex`. So that is the one exception, but ALL other outputs must not decrease.",
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639885650",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3413653165,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQxMzY1MzE2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3413653165",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T23:10:05Z"
    },
    {
      "event": "subscribed",
      "id": 3413653168,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MTM2NTMxNjg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3413653168",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T23:10:05Z"
    },
    {
      "event": "mentioned",
      "id": 3413653170,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQxMzY1MzE3MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3413653170",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T23:10:05Z"
    },
    {
      "event": "subscribed",
      "id": 3413653173,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MTM2NTMxNzM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3413653173",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T23:10:05Z"
    },
    {
      "event": "commented",
      "id": 639914584,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTkxNDU4NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639914584",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-06T00:24:59Z",
      "updated_at": "2020-06-06T00:24:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "> All outputs from the original transaction must be in the payjoin proposal. The receiver is allowed to insert new outputs (at any location) but like inputs, must preserve order. The receiver must leave the existing output amounts the same or increase them, but NEVER decrease.\r\n\r\nWe can't do this, as we need to decrease for paying fee.\r\n\r\n>  I would even go as far as argue it's harmful, because if you require it then any transaction with 1 output cannot be a payjoin.\r\n\r\nNo, this is not deterministic, the receiver don't have to add an output.\r\nNote that if you allow the addition of new output you allow the spare change behavior. As you say `But it's no longer a special case, just a receiver implementation detail.`.\r\n\r\n> So that is the one exception, but ALL other outputs must not decrease.\r\n\r\nSo there is only two output which can actually decrease: The change output and the payment output. All the rest should stay the same.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639914584",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 639915195,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTkxNTE5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639915195",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-06T00:26:48Z",
      "updated_at": "2020-06-06T00:26:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "Btw, I think I will add a \"reference implementation\"in pseudo code to help senders to implement correctly. I think that by keeping order of output and input, it becomes sort of easier.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639915195",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 639966692,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTk2NjY5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/639966692",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-06T03:07:47Z",
      "updated_at": "2020-06-06T03:07:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "I will give a try at the implementation of those suggestions and report if it is easier. Will publish the sender code here just to make sure I don't miss anything.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-639966692",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 640573101,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDU3MzEwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/640573101",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-08T12:30:15Z",
      "updated_at": "2020-06-08T12:30:15Z",
      "author_association": "NONE",
      "body": "> > So that is the one exception, but ALL other outputs must not decrease.\r\n> \r\n> So there is only two output which can actually decrease: The change output and the payment output. All the rest should stay the same.\r\n\r\nThe payment output should not decrease. Once we allow that, we might as well allow removing outputs or changing the output address, because there would be nothing stopping the receiver from decreasing the output's amount to 1 satoshi and introducing a new output with a different address. This would again mean that the user would have to reconfirm a completely different transaction, which is what I am trying to avoid.\r\n\r\nI advocate that as a basis this specification should maintain the rules given in BIP-0079, because these were well thought out to allow for simple verification of the transaction details in the final signing stage. The new features provided by this specification should be extending BIP-0079 on an opt-in basis. I would also like to see some consideration given to shifting the responsibility for choosing the destination script type to the sender as I mentioned [here](https://github.com/bitcoin/bips/pull/923/files#r435863910).",
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-640573101",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 641954254,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTk1NDI1NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/641954254",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T11:56:10Z",
      "updated_at": "2020-06-10T11:56:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "@andrewkozlik the case of giving away dust from your wallet to prevent further tainting is an important one. If we do so, there is a single output, so the protocol should be allowed to bump fee.\r\n\r\nAlso it is important that the merchant can incur the fee bump cost to the sender, as if the original PSBT is equal to the min relay tx fee, the payjoin proposal is unbroadcastable.\r\nWe can't either to take the money from the merchant: If the merchant ask for 0.1 BTC, he expects receiving 0.1 BTC (or more).\r\n\r\nIf a sender does not want to support it, should we add a optional parameter?",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-641954254",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3429277067,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQyOTI3NzA2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3429277067",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T11:56:11Z"
    },
    {
      "event": "subscribed",
      "id": 3429277070,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MjkyNzcwNzA=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3429277070",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T11:56:11Z"
    },
    {
      "event": "reviewed",
      "id": 428031303,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MDMxMzAz",
      "url": null,
      "actor": null,
      "commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-428031303",
      "submitted_at": "2020-06-10T13:05:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "commented",
      "id": 641994912,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTk5NDkxMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/641994912",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T13:08:53Z",
      "updated_at": "2020-06-10T13:08:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "> The payment output should not decrease. [...]\r\n\r\nI concur.\r\n\r\n> Also it is important that the merchant can incur the fee bump cost to the sender, as if the original PSBT is equal to the min relay tx fee, the payjoin proposal is unbroadcastable.\r\nWe can't either to take the money from the merchant: If the merchant ask for 0.1 BTC, he expects receiving 0.1 BTC (or more).\r\n\r\nWhy can't the merchant pay part of the fee, for the newly added inputs/outputs?\r\nIf the merchant wants to add a new input, the overall size of the tx will increase. I don't see why it must be the customer who pays the fee for the merchant's input. The merchant can pay the fee by increasing whichever output they want to increase by a smaller value than the value of the input they added. (unless they added an input that costs more to spend than its value... do we really care about this edge-case?)",
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-641994912",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 642000056,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjAwMDA1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/642000056",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T13:14:20Z",
      "updated_at": "2020-06-10T13:14:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "@SomberNight relevant previous discussion here: https://github.com/NicolasDorier/bips/pull/3#discussion_r422847859",
      "user": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-642000056",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3429583889,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQyOTU4Mzg4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3429583889",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T13:14:20Z"
    },
    {
      "event": "subscribed",
      "id": 3429583893,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0Mjk1ODM4OTM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3429583893",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T13:14:20Z"
    },
    {
      "event": "commented",
      "id": 642000108,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjAwMDEwOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/642000108",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T13:14:24Z",
      "updated_at": "2020-06-10T13:14:24Z",
      "author_association": "MEMBER",
      "body": "@SomberNight PayJoin for the most part is a privacy boon for sender, not receiver. The sender pays some fees for privacy, the receiver gets to do a bit of consolidation, in the average case.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-642000108",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3429584206,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQyOTU4NDIwNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3429584206",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T13:14:24Z"
    },
    {
      "event": "subscribed",
      "id": 3429584209,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0Mjk1ODQyMDk=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3429584209",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T13:14:24Z"
    },
    {
      "event": "commented",
      "id": 642196218,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjE5NjIxOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/642196218",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T18:57:00Z",
      "updated_at": "2020-06-10T18:57:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @SomberNight PayJoin for the most part is a privacy boon for sender, not receiver. \r\n\r\nI don't really wanna derail this discussion, but I don't think this is true. I'd assume in normal usage it benefits the receiver more than the sender. Just the receiver might not actually care about privacy and just want consolidation benefits. And the receiver also does expose themselves to a privacy risk (i.e. a malicious entity aborting the coinjoin to learn a receivers utxo) that they would otherwise not be exposed to.",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-642196218",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3431031157,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQzMTAzMTE1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3431031157",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T18:57:00Z"
    },
    {
      "event": "subscribed",
      "id": 3431031161,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MzEwMzExNjE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3431031161",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T18:57:00Z"
    },
    {
      "event": "commented",
      "id": 642198084,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjE5ODA4NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/642198084",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T19:01:22Z",
      "updated_at": "2020-06-10T19:01:22Z",
      "author_association": "MEMBER",
      "body": "Well even if you're right and they simply don't care about privacy the\ndownstream incentives are effected similarly with respect to allowing\nsender to pay for the privacy. Not trying to derail it's just an important\nconsideration.\n\nOn Wed, Jun 10, 2020, 2:57 PM Ryan Havar <notifications@github.com> wrote:\n\n> @SomberNight <https://github.com/SomberNight> PayJoin for the most part\n> is a privacy boon for sender, not receiver.\n>\n> I don't really wanna derail this discussion, but I don't think this is\n> true. I'd assume in normal usage it benefits the receiver more than the\n> sender. Just the receiver might not actually care about privacy and just\n> want consolidation benefits. And the receiver also does expose themselves\n> to a privacy risk (i.e. a malicious entity aborting the coinjoin to learn a\n> receivers utxo) that they would otherwise not be exposed to.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bips/pull/923#issuecomment-642196218>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABMAFU3P6HYUJA5HBXWG2ALRV7JQVANCNFSM4NDBRK6Q>\n> .\n>\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-642198084",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3431045737,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQzMTA0NTczNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3431045737",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T19:01:23Z"
    },
    {
      "event": "subscribed",
      "id": 3431045739,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MzEwNDU3Mzk=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3431045739",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T19:01:23Z"
    },
    {
      "event": "commented",
      "id": 642198859,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjE5ODg1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/642198859",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T19:02:47Z",
      "updated_at": "2020-06-10T19:02:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "It's important to note or mandate behavior that prevents a nasty reentrancy attack: where the sender submits a (signed, but not broadcasted) payjoin proposal as a new original payjoin transaction. If the receiver isn't careful it'll treat it as a new payjoin and credit the person for the wrong sum of money.\r\n\r\n\r\n",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-642198859",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 642210834,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjIxMDgzNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/642210834",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T19:27:44Z",
      "updated_at": "2020-06-10T19:27:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Well even if you're right and they simply don't care about privacy the downstream incentives are effected similarly with respect to allowing sender to pay for the privacy.\r\n\r\nI agree with you in theory\r\n\r\n/tip 0.01 dollars \r\n\r\nbut the whole idea of trying to allow the sender to pay the receiver for a coinjoin is over-engineering and silly. It's akin to allowing people to add a micropayments to tinder profile to incentivize the person to swipe right. Either the person wants to fuck you or not, and you're not going to move the needle with some micropayment. Instead you devalue a simple mutually beneficial interaction by adding pennies. Unless you want to turn it into a full blown prostitution service (i.e. an actual mixing service) you are adding cognitive overhead and engineering complexity for nothing.\r\n\r\n\r\n--\r\n\r\nThat said, it's so bad that I don't really care if it's left in the proposal. Pretty much no wallet is ever going to want to give a user this UX lol:\r\n\r\n\"I want to send $X to $Y, and I'm willing to pay $Z in fees and pay up to an extra $P for it to be a payjoin\" \r\n\r\nso I think all implementations will just ignore it and we can safely pretend it doesn't exist. If it was better designed (e.g. the receiver encoded a \"payjoinfee=$P\" in the  BIP 21, and then wallets could say: \"The receiver wants $P to do this payjoin, wanna do it?\" I might have an objection as that's a passable UX that people might actually use.",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-642210834",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 642221052,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjIyMTA1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/642221052",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T19:49:13Z",
      "updated_at": "2020-06-10T20:14:55Z",
      "author_association": "MEMBER",
      "body": ">UX lol\r\n\r\nThat's not how anything else in wallets works, the hyperbole doesn't help. edit: to be clear I'm saying that hiding fee amounts in defaults is *completely normalized* in bitcoin wallets. Feerate, dust amounts, not to mention the various constants in LN wallets. It's not a new UX burden at all.\r\n\r\nThat said, if you think merchants will do it for free/privacy, great sign me up. I'm definitely not an expert in that respect. I will stop polluting this thread since I at least understand the position now.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-642221052",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 642231734,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjIzMTczNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/642231734",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T20:11:30Z",
      "updated_at": "2020-06-10T20:20:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "> That's not how anything else in wallets works, the hyperbole doesn't help.\r\n\r\nWell nothing in bitcoin works like \"I am willing to pay up to $X\", so, no surprise. The only thing I can think works like that is ethereums gas limits. And it's universal UX disaster when it needs to be exposed. But this is even worse, cause the only way you can sanely hide it is if `maxadditionalfeecontribution=0` (which everyone will do, lol).\r\n\r\nBut nah, this is even worse because the receiver has to communicate OOB what their expectation for \"incentives\" are.  It simply makes no sense. ( although maxadditionalfeecontribution could still have utility in the receiver carefully engineering their output-amounts to create confusing analysis. But let's get realistic, no one will do that either). \r\n\r\n\r\n> That said, if you think merchants will do it for free/privacy, great sign me up.\r\n\r\nI guess my point is that merchants will either do it, or not do it. No one's behavior is going to be modified by senders willing to chip in a few cents. And no senders are going to be willing to pay real amounts of money, as you don't even know what guarantees you're getting. \r\n\r\n> edit: to be clear I'm saying that hiding fee amounts in defaults is completely normalized in bitcoin wallets. \r\n\r\nIf the amounts involved are so small that you can sanely just hide it (e.g. lightning actual routing fee) then you're not going to incentivize shit.\r\n\r\n\r\nI feel like maxadditionalfeecontribution has some pretty elegant properties, but it's doomed in practice. ( I also believe the same thing about micro-tipping in online communities) \r\n\r\n>  I will stop polluting this thread since I at least understand the position now.\r\n\r\nMe too. I don't really care much, because it's easy to ignore. As a receiver you can always safely just ignore it. And as a sender, you can just not support setting it, which then reverts the harmful side-effects of it (no longer need to worry about output amounts dropping). \r\n",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-642231734",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 642335976,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjMzNTk3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/642335976",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T00:30:15Z",
      "updated_at": "2020-06-11T00:34:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "From UX perspective of the merchant, the merchant says: The invoice is 0.1 BTC he expects the sender to pay for the fees.\r\n\r\nI explained the reason why in the BIP, and I don't see any reason to come back on this decision.\r\n\r\nFor BTCpay Server point of view, there is a way to set a \"Network fee\" if the user is paying on-chain (those network fee are 0 for lightning), this is so the merchant can make the customer pay for dealing with on-chain UTXO.\r\n\r\n![image](https://user-images.githubusercontent.com/3020646/84331415-09d3bd80-abc5-11ea-8225-4afbe1cc2634.png)\r\n\r\nSee the \"Network cost here\".\r\n\r\nLightning on the other hand don't propose it.\r\n\r\n![image](https://user-images.githubusercontent.com/3020646/84331453-24a63200-abc5-11ea-914f-1df82df7bbd3.png)\r\n\r\nIf the receiver was not bumping the fee, it means that the merchant would need to have a different \"Network cost\" for sending with or without payjoin to get money back.\r\nThere is two problems with this:\r\n1. We don't know the payjoin network cost in advance, we know it only when the sender actually pay.\r\n2. It means that we would not be able to expose the pj endpoint as BIP21, because we would need another \"payment method\" so we can reflect this different \"network cost\" to the sender.\r\n\r\nLast, if the receiver was paying the fees. It means he would have to manually approve it, which is not possible as he might not be online when he actually receive the payment. On the other hand, the sender is online.\r\n\r\nI don't want to come back on this decision to make the sender pays for the fees.\r\n\r\nIf you really don't want, as a sender, to not pay fees, just use `maxadditionalfeecontribution=0`, this is perfectly fine, we support it. It just means the receiver will add his inputs and not bump the fees. The fee rate will drop, if it goes below min relay fee the proposal will fail. The only thing to make sure for the sender is to disable RBF.\r\n\r\nHowever, it means that anytimes you want to attempt a payjoin, you will have to pay fees slightly above the min relay tx fee. Also, the transaction will be slightly slower to confirm.\r\nNote that a nice receiver can still decide to pay from his pocket in this situation. (maybe we will add a setting for this in btpcay)",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-642335976",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "reviewed",
      "id": 428521219,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTIxMjE5",
      "url": null,
      "actor": null,
      "commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-428521219",
      "submitted_at": "2020-06-11T00:49:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "commented",
      "id": 642358735,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjM1ODczNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/642358735",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T01:57:01Z",
      "updated_at": "2020-06-11T02:03:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "I can't help feel `maxadditionalfeecontribution` is poorly designed, even for it stated purpose. As a sender wtf should I even pick?  No seriously; I'm not even being facetious; I actually don't know what value to use..\r\n\r\nIf I was writing a sender and someone put a gun-to-my-head (or paid me by the hour) and really wanted to support this, I'd probably set it to 99999999999999 and then when the receiver returned a proposal prompt the user: \"Receiver wants to charge you $X and do $Y to your fee rate. You cool with that?\". If the user wasn't cool with it, I'd send the original transaction. If the user was, I'd send the payjoin\r\n\r\n\r\nBut the reason it feels silly, is that you already have a \"round\" of communication. Namely the bip21 string. The receiver can encode it's fee policy / expectation in it (i.e. I'm going to add N weight and M fee) and the sender could just plan around that without the goofy interaction.\r\n\r\n---\r\n\r\nProbably the best way to find out what is best, is just ask the green-wallet people for their opinion and then do the exact opposite. I am confident we will arrive at the correct decision, even if they know what we're doing.",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-642358735",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 642375087,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjM3NTA4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/642375087",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T02:56:18Z",
      "updated_at": "2020-06-11T03:05:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "Regarding sender complexity:\r\n\r\n>If you really don't want, as a sender, to not pay fees, just use maxadditionalfeecontribution=0, this is perfectly fine, we support it. It just means the receiver will add his inputs and not bump the fees. The fee rate will drop, if it goes below min relay fee the proposal will fail. The only thing to make sure for the sender is to disable RBF.\r\n>\r\n>However, it means that anytimes you want to attempt a payjoin, you will have to pay fees slightly above the min relay tx fee. Also, the transaction will be slightly slower to confirm.\r\nNote that a nice receiver can still decide to pay from his pocket in this situation. (maybe we will add a setting for this in btpcay)\r\n\r\nTo resolve the  unpredictable confirmation time issue the sender could just set both `maxadditionalfeecontribution=0` and `minfeerate=originaltxfeerate`.\r\n\r\nThat way any receivers that support bumping fees from their own funds can propose valid payjoins and any that don't will just reject the proposal and broadcast the original transaction.\r\n\r\nNo need for the sender wallet to implement complex `maxadditionalfeecontribution` stuff, and they can also be sure the transaction will confirm in a predictable time frame that the user expects.\r\n\r\nThe downside is you'll be limiting the amount of receivers you can successfully payjoin with to the amount of receivers willing to bump fees which could be pretty small.",
      "user": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-642375087",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 642382601,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjM4MjYwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/642382601",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T03:23:55Z",
      "updated_at": "2020-06-11T03:39:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Also regarding payjoin being mostly a benefit to the sender, I'm not sure I agree with that.\r\n\r\nI think the direct privacy gain to the actual sender is relatively small. The big privacy benefit of payjoin is that with enough usage it breaks the common-input-ownership heuristic, which is a general privacy gain to all Bitcoin users, of which both the sender and receiver benefit from equally.\r\n\r\nHowever, from the sender perspective, if payjoin is not used carefully it has the potential to result in significant privacy loss.\r\n\r\nConsider the following scenario:\r\n\r\n- User visits clearnet merchant webite\r\n- User uses Tor Browser to hide their IP from merchant\r\n- User makes a purchase by scanning a QR code with their mobile wallet\r\n- Mobile wallet is not using Tor\r\n- User DOES NOT opt in to payjoin\r\n- Mobile wallet broadcasts a transaction\r\n\r\nThe merchant learns nothing about the sender's identity.\r\n\r\nNow using payjoin:\r\n\r\n- User visits clearnet merchant webite\r\n- User uses Tor Browser to hide their IP from merchant\r\n- User makes a purchase by scanning a QR code with their mobile wallet\r\n- Mobile wallet is not using Tor\r\n- User DOES opt in to payjoin\r\n- Mobile wallet requests clearnet payjoin endpoint\r\n- Mobile wallet broadcasts a payjoin transaction\r\n\r\nThe merchant learns the sender's mobile device's IP from the clearnet payjoin request.\r\n\r\nIn this scenario the user experienced a significant reduction in privacy when using payjoin compared to when not using payjoin.",
      "user": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-642382601",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 642617721,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjYxNzcyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/642617721",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T12:41:34Z",
      "updated_at": "2020-06-11T12:44:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "@RHavar before `maxadditionalfeecontribution` I was explicitly saying \"The sender can't pay more than 2 times the fee\". I think this is a good rule of thumb, the sender now can decide if that's a good rule or not by setting this parameter. \r\n\r\nOn top of this, the sender is actually checking that the fee rate did not increase already. So `maxadditionalfeecontribution` is only controlling the max number of inputs that the merchant can add. What about instead of `maxadditionalfeecontribution` we should have `maxadditionalinputs`?\r\n\r\nThe downside is that this prevent the merchant adding them at his own cost.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-642617721",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3433966805,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQzMzk2NjgwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3433966805",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T12:41:34Z"
    },
    {
      "event": "subscribed",
      "id": 3433966809,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MzM5NjY4MDk=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3433966809",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T12:41:34Z"
    },
    {
      "event": "commented",
      "id": 642745555,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mjc0NTU1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/642745555",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T15:38:53Z",
      "updated_at": "2020-06-11T15:38:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @RHavar before maxadditionalfeecontribution I was explicitly saying \"The sender can't pay more than 2 times the fee\". I think this is a good rule of thumb, the sender now can decide if that's a good rule or not by setting this parameter.\r\n\r\nYeah, I get what you're doing; and it makes sense for sure, I just don't get how it works nicely. Like say the transaction fee is $1, if you double that it's now $2 -- which is a significant enough amount of money that wallets can't hide it. So the sender is like \"ok, I'm fine willing to pay $2 for a payjoin\" and then it turns out it only costs $1.50 (say because the receiver added only 1 input, and the original transaction had 2).\r\n\r\nI mean it all works fine, but picking upper-bounds is always going to be a little clumsy. I would just get rid of all the \"max\" stuff, and provide the *actual* value as a hint. Like the bip21 URL the receiver tells the sender it's \"fee policy\". (i.e. how much weight it'll add to a transaction, and how much fees it'll add to a transaction).\r\n\r\nI understand it's a bit less flexible as now the receiver can't dynamically adjust it on a per-transaction level. But it's flexibility that realistically no one will use.\r\n\r\nAnd now the sender can plan around that exactly, and give that information to the user. \r\n\r\n---\r\nI think that's all you really need to do; but it does come with a significant drawback; that in the (normal) sender-pays case, the sender might end up paying (in tx fees) for a payjoin but ends up falling back to the original transaction. \r\n\r\nBut you can pretty much fully mitigate this by just saying that a well-behaved receiver should never propagate the original transaction unless the sender does something wrong (e.g. not go through with the payjoin). And say a receiver is not in a position to do payjoins (e.g. has no inputs, or some other internal problem) it just gives an error to the sender and the sender is responsible for sending a normal payment (which may or may not be the original transaction)  ",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-642745555",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3434746888,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQzNDc0Njg4OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3434746888",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T15:38:53Z"
    },
    {
      "event": "subscribed",
      "id": 3434746891,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MzQ3NDY4OTE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3434746891",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T15:38:53Z"
    },
    {
      "event": "renamed",
      "id": 3436437449,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MzQzNjQzNzQ0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3436437449",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T00:29:59Z",
      "rename": {
        "from": "Add payjoin proposal",
        "to": "BIP 78: Add payjoin proposal"
      }
    },
    {
      "event": "commented",
      "id": 643000275,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzAwMDI3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643000275",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T00:31:40Z",
      "updated_at": "2020-06-12T00:31:40Z",
      "author_association": "MEMBER",
      "body": "Assigned BIP 78",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643000275",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643024287,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzAyNDI4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643024287",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T02:07:39Z",
      "updated_at": "2020-06-12T02:07:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "@RHavar the problem is that the receiver don't really know the actual value until he actually receive the original transaction.\r\n\r\nI think from UX experience, in a nutshell of all you said, this is the flow you would want:\r\n\r\n```\r\nBroadcast via Payjoin: 2.5$ of fee\r\nNormal broadcast: 2.0$ of fee\r\n```\r\n\r\nversus what we have now (without `maxadditionalfeecontribution`):\r\n\r\n```\r\nBroadcast via Payjoin: Continue.\r\nNormal broadcast: 2.0$ of fee\r\n```\r\n\r\nThen a second screen\r\n\r\n```\r\nBroadcast via Payjoin: 2.5$ of fee\r\nNormal broadcast: 2.0$ of fee\r\n```\r\n\r\n@lukechilds also wanted to remove this second confirmation. Which is why I created `maxadditionalfeecontribution`.\r\n\r\nWith `maxadditionalfeecontribution` you can have the exact same experience with a single screen\r\n\r\n```\r\nBroadcast via Payjoin: Maximum 2.5$ of fee\r\nNormal broadcast: 2.0$ of fee\r\n```\r\n\r\nThe main problem you are pointing out is that this estimated value is hard coded in the wallet via `maxadditionalfeecontribution` and that there is no way to know which value would be right.\r\n\r\nBut the problem is that from the receiver side, the problem is the same. We have no way to know what is the actual fee unless we receive the original transaction. (This is not mentioning part of the fee may be paid by receiver)\r\n\r\nWhich is why, I think a better way of dealing completely with this problem is to have a `maxadditionalinputs`. If you set that to `1`, you know exactly how the weight will be affected in advance. You know the weigth, you know the rate BTC/USD, you can show exactly the fee that the user should expect if he tried payjoin without any surprise. @lukechilds what do you think about `maxadditionalinputs` ?",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643024287",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3436621066,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQzNjYyMTA2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3436621066",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T02:07:40Z"
    },
    {
      "event": "subscribed",
      "id": 3436621068,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MzY2MjEwNjg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3436621068",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T02:07:40Z"
    },
    {
      "event": "mentioned",
      "id": 3436621072,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQzNjYyMTA3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3436621072",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T02:07:40Z"
    },
    {
      "event": "subscribed",
      "id": 3436621074,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MzY2MjEwNzQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3436621074",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T02:07:40Z"
    },
    {
      "event": "commented",
      "id": 643061267,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzA2MTI2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643061267",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T04:42:30Z",
      "updated_at": "2020-06-12T04:43:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "`maxadditionalinputs` certainly seems like a simpler solution, solves all the confusing UX implications, we just show users two options, with two different fees, and they pick one.\r\n\r\nPlus I imagine `maxadditionalinputs=1` is unlikely to be rejected by most merchants so shouldn't have much impact on the success rate of the payjoin.\r\n\r\nAlthough aren't we still allowing the receiver to add additional outputs for things like payment batching? This could also effect the fee if we're trying to maintain a specific fee rate.",
      "user": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643061267",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643064039,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzA2NDAzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643064039",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T04:53:20Z",
      "updated_at": "2020-06-12T04:53:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "@lukechilds the BIP is specifying that the receiver should not free ride on this.\r\nAs such, for a sender here are the only point to check:\r\n\r\n* `maxadditionalinputs` is respected.\r\n* The fee rate is not increasing.\r\n* The amount of additional money sent is less or equal to the Actual Additional Inputs size * fee rate.\r\n",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643064039",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3436893018,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQzNjg5MzAxOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3436893018",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T04:53:21Z"
    },
    {
      "event": "subscribed",
      "id": 3436893020,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MzY4OTMwMjA=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3436893020",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T04:53:21Z"
    },
    {
      "event": "commented",
      "id": 643071005,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzA3MTAwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643071005",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T05:20:37Z",
      "updated_at": "2020-06-12T05:20:37Z",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> @RHavar the problem is that the receiver don't really know the actual value until he actually receive the original transaction.\r\n> \r\n> I think from UX experience, in a nutshell of all you said, this is the flow you would want:\r\n> \r\n> ```\r\n> Broadcast via Payjoin: 2.5$ of fee\r\n> Normal broadcast: 2.0$ of fee\r\n> ```\r\n> \r\n> versus what we have now (without `maxadditionalfeecontribution`):\r\n> \r\n> ```\r\n> Broadcast via Payjoin: Continue.\r\n> Normal broadcast: 2.0$ of fee\r\n> ```\r\n> \r\n> Then a second screen\r\n> \r\n> ```\r\n> Broadcast via Payjoin: 2.5$ of fee\r\n> Normal broadcast: 2.0$ of fee\r\n> ```\r\n> \r\n> @lukechilds also wanted to remove this second confirmation. Which is why I created `maxadditionalfeecontribution`.\r\n> \r\n> With `maxadditionalfeecontribution` you can have the exact same experience with a single screen\r\n> \r\n> ```\r\n> Broadcast via Payjoin: Maximum 2.5$ of fee\r\n> Normal broadcast: 2.0$ of fee\r\n> ```\r\n> \r\n> The main problem you are pointing out is that this estimated value is hard coded in the wallet via `maxadditionalfeecontribution` and that there is no way to know which value would be right.\r\n> \r\n> But the problem is that from the receiver side, the problem is the same. We have no way to know what is the actual fee unless we receive the original transaction. (This is not mentioning part of the fee may be paid by receiver)\r\n> \r\n> Which is why, I think a better way of dealing completely with this problem is to have a `maxadditionalinputs`. If you set that to `1`, you know exactly how the weight will be affected in advance. You know the weigth, you know the rate BTC/USD, you can show exactly the fee that the user should expect if he tried payjoin without any surprise. @lukechilds what do you think about `maxadditionalinputs` ?\r\n\r\nIf you are changing and adding outputs, the fee rate would still vary though. \r\n\r\nAlso, if `maxadditionalinputs=5`, but the receiver adds only 3, the fee rate would be different from what the sender was shown. Could a receiver attempt to game  the difference in input to themselves?\r\n\r\nIf `maxadditionalinputs` is used, I would still recommend to allow additional inputs, only paid for by the receiver (eg `maxadditionalinputs` is only to compute the sender max fee). Without this, payment batching could be severely restricted as you could only batch payments when sufficiently larger utxos are available. ",
      "user": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643071005",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3436940462,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQzNjk0MDQ2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3436940462",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T05:20:37Z"
    },
    {
      "event": "subscribed",
      "id": 3436940463,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MzY5NDA0NjM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3436940463",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T05:20:37Z"
    },
    {
      "event": "mentioned",
      "id": 3436940464,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQzNjk0MDQ2NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3436940464",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T05:20:37Z"
    },
    {
      "event": "subscribed",
      "id": 3436940468,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MzY5NDA0Njg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3436940468",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T05:20:37Z"
    },
    {
      "event": "commented",
      "id": 643094936,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzA5NDkzNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643094936",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T06:38:07Z",
      "updated_at": "2020-06-12T06:38:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @RHavar the problem is that the receiver don't really know the actual value until he actually receive the original transaction.\r\n\r\nI think we're talking past each other. My idea is that the receiver communicates to the sender its policy on how it modifies the transaction fee and weight.. The most general way of doing this (which to be clear, i'm not advocating), would be the the receiver gives (via bip21 url) an arbitrary function, like:\r\n\r\n```modificationPolicy :: transaction ->  (feeChange, weightChange)```\r\n\r\n\r\nGiven this function (`modificationPolicy`)  the sender knows what the receiver plans on doing, and can plan around it. \r\n\r\nSo let's say I'm a sender. And I know the receiver is going to add `$N` of weight, and `$F` of fees. I want to send a transaction with `$FEERATE`. I know a payjoin is going to cost me:  `($BASEWEIGHT + $N) * $FEERATE - $F` and a normal transaction will cost `$BASEWEIGHT * $FEERATE`\r\n\r\nNow I can tell the user exactly how much they're going to have to pay for a normal transaction and how much for a payjoin. If the user picks a payjoin, I create an \"original transaction\" with a fee of `($BASEWEIGHT + $N) * $FEERATE - $F` and send it to the payjoin endpoint. If a user doesn't want to create a payjoin, I create a transaction with a fee of `$BASEWEIGHT * $FEERATE`\r\n\r\n\r\nBy doing this, you can both have a nice UX and sidestep a lot of complexity. The only downside I really see, is that a sender might pay extra for a payjoin but end up not getting it. But you can pretty much fully mitigate this by just saying that a well-behaved receiver should never propagate the original transaction unless the sender does something wrong (e.g. not go through with the payjoin). \r\n\r\n---\r\n\r\nAnd for obvious reasons, you don't want the receiver to pass an arbitrary function modificationPolicy. You kind of want to \"Whitelist\" some functions that make sense. I'm going to go on a limb here, and say the \"modificationPolicy\" of 99.9%+ of all senders can be expressed with two constants: how much weight they will add to a transaction. And how much fees they will contribute to a transaction (which will generally be zero).",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643094936",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3437106679,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQzNzEwNjY3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3437106679",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T06:38:07Z"
    },
    {
      "event": "subscribed",
      "id": 3437106684,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MzcxMDY2ODQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3437106684",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T06:38:07Z"
    },
    {
      "event": "commented",
      "id": 643155203,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzE1NTIwMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643155203",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T08:48:48Z",
      "updated_at": "2020-06-12T08:48:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Kukks \r\n\r\n> Also, if maxadditionalinputs=5, but the receiver adds only 3, the fee rate would be different from what the sender was shown. Could a receiver attempt to game the difference in input to themselves?\r\n\r\nSo what? There is no reason for the sender to refuse a transaction in which he pays less than the expected fee.\r\n\r\n> If you are changing and adding outputs, the fee rate would still vary though.\r\n\r\nNo, the fee rate should not vary, and only contributed inputs should be payable by the sender, not the rest.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643155203",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3437520850,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQzNzUyMDg1MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3437520850",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T08:48:48Z"
    },
    {
      "event": "subscribed",
      "id": 3437520852,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0Mzc1MjA4NTI=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3437520852",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T08:48:48Z"
    },
    {
      "event": "commented",
      "id": 643155431,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzE1NTQzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643155431",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T08:49:16Z",
      "updated_at": "2020-06-12T08:49:16Z",
      "author_association": "CONTRIBUTOR",
      "body": ">Also, if maxadditionalinputs=5, but the receiver adds only 3, the fee rate would be different from what the sender was shown. Could a receiver attempt to game the difference in input to themselves?\r\n\r\nThis is an interesting point, it messes up the incentives.\r\n\r\nIf a sender sets `maxadditionalinputs` to a value more than one, why would a receiver ever bother adding more than one input if they can just stick to one and then take the extra sender fees for themselves.\r\n\r\nIf receivers do this, then all sender implementations would probably just limit to `maxadditionalinputs=1` to prevent it, essentially making it a hard limit.",
      "user": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643155431",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643155796,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzE1NTc5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643155796",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T08:50:00Z",
      "updated_at": "2020-06-12T08:50:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "> why would a receiver ever bother adding more than one input if they can just stick to one and then take the extra sender fees for themselves.\r\n\r\nThey can't. The fees are on the actual added input count.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643155796",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643157125,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzE1NzEyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643157125",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T08:52:44Z",
      "updated_at": "2020-06-12T08:54:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "@RHavar I am not too queen to rewrite a whole new BIP on this idea, reimplementing from everything scratch when the `maxadditionalinputs` I suggest allow you to have the exact same UX you want.\r\n\r\nThink from the user's perspective. What you want is to give him a choice of 2 fee amount that he will pay and let him choose, and not ask him to confirm a second time. The `maxadditionalinputs` achieve exactly this.\r\n\r\nIn case the receiver contribute less than the `maxadditionalinputs`, this is not a problem. The user should only care about paying  the actual added inputs. He would just pay less fee than he would have expected, and no need to ask for a second confirmation.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643157125",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3437534874,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQzNzUzNDg3NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3437534874",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T08:52:44Z"
    },
    {
      "event": "subscribed",
      "id": 3437534878,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0Mzc1MzQ4Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3437534878",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T08:52:44Z"
    },
    {
      "event": "commented",
      "id": 643165337,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzE2NTMzNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643165337",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T09:09:02Z",
      "updated_at": "2020-06-12T09:10:29Z",
      "author_association": "CONTRIBUTOR",
      "body": ">They can't. The fees are on the actual added input count.\r\n\r\nAhh, yes! I was confusing myself thinking the sender needs to pay the fees for the potential max number of inputs on the initial TX for some reason.\r\n\r\nSo:\r\n- Sender sets desired fee rate on initial TX and sets `maxadditionalinputs=n`.\r\n- Receiver adds <= n inputs and takes required funds from senders change output to maintain the same fee rate.\r\n- Sender checks, signs, and broadcasts.\r\n\r\nIf receiver adds n inputs the tx will require the maximum amount fee the sender confirmed was ok for a payjoin tx. If the receiver adds <n inputs the sender pays less fees than they confirmed but still gets the same fee rate they confirmed.\r\n\r\nIs my understanding correct now?",
      "user": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643165337",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643570939,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzU3MDkzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643570939",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T05:07:51Z",
      "updated_at": "2020-06-13T05:12:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "@lukechilds \r\n\r\nCorrect. Basically, as far as the sender is concerned, he can say: \"Ok, 1 input = 300 weight, so I must pay at most for 900 weight if my maxadditionalinputs=3\" now if the actual inputs is 2, the max the sender will agree to pay for 600 weight maximum.\r\n\r\nHe can check that those 600 weight has actually been sent to fee by making sure the absolute fee at least increase from 600 weight.\r\n\r\nBy doing this, he can make sure that the receiver don't abuse by consolidating too much or bundling his own outputs. And it gives the freedom to the receiver to increase fee as he see fit.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643570939",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3440471341,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ0MDQ3MTM0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3440471341",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T05:07:51Z"
    },
    {
      "event": "subscribed",
      "id": 3440471342,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NDA0NzEzNDI=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3440471342",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T05:07:51Z"
    },
    {
      "event": "commented",
      "id": 643575277,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzU3NTI3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643575277",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T05:56:38Z",
      "updated_at": "2020-06-13T05:57:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm probably missing something, but doesn't `maxadditionalinputs` makes things worse than before?\r\n\r\nFirstly it's a bit confusing because it's actually \"maxadditionalinputsthatthesenderwillpayfor\" and then secondly, the first thing a receiver then just needs to do some maths with the `minfeerate` to figure out how much the sender is willing to pay, then use that. The receiver then also needs to do the maths to verify the receiver did it correctly.\r\n\r\nSo at that point, why not just send \"payjoinExtraFee\" (along with minfeerate?) directly? It's actually less confusing (as the sender is directly saying how much extra they will pay for a payjoin, which will generally be enough for the receiver to add 1 extra input at minfeerate) and allows more precision.  ",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643575277",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643575925,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzU3NTkyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643575925",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T06:03:36Z",
      "updated_at": "2020-06-13T06:05:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "Are you really sure you don't just want to do the bip79 way?  It's so much simpler, it's easier to verify and it's more general. It is also a lot more elegant than trying to deduct amounts from outputs. Like if transaction has multiple outputs, which to deduct from? (ok fine: add that as a param as part of the request)  But what if the transaction has no output?? (which isn't that rare. It happens often if you're using good coin selection, or sending your entire wallet balance)",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643575925",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643578847,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzU3ODg0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643578847",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T06:32:52Z",
      "updated_at": "2020-06-13T06:32:52Z",
      "author_association": "NONE",
      "body": "@NicolasDorier  would `maxadditionalinputs`  replace `maxadditionalfeecontribution`?\r\n\r\n",
      "user": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643578847",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3440522203,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ0MDUyMjIwMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3440522203",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T06:32:52Z"
    },
    {
      "event": "subscribed",
      "id": 3440522204,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NDA1MjIyMDQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3440522204",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T06:32:53Z"
    },
    {
      "event": "commented",
      "id": 643580256,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzU4MDI1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643580256",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T06:47:00Z",
      "updated_at": "2020-06-13T06:47:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @NicolasDorier would maxadditionalinputs replace maxadditionalfeecontribution?\r\n\r\nYes I don't see any reason to keep `maxadditionalfeecontribution` as I added it to solve the UX issue @lukechilds was complaining about, but which can be better solved via `maxadditionalinputs`.\r\n\r\n> So at that point, why not just send \"payjoinExtraFee\" (along with minfeerate?) directly? \r\n\r\nThat was what the `maxadditionalfeecontribution` was about, but as you said, it has a difficult UX. At least `maxadditionalinputs` is pretty clear: The receiver can add x inputs at the fee rate of the original transaction. This also better explains that the sender is only supposed to pay for additional inputs.\r\n\r\nActually we should allow the receiver to add inputs as long as he pays for the fee. I think it is easy to verify.\r\n\r\n> But what if the transaction has no output??\r\n\r\nThis is the spare change case. The receiver can decrease the amount on the only output. This basically mean the receiver pays for fee. (In BTCPay we allow it, if the sender pays 0.11 for a 0.1 invoice, then the receiver will use the 0.01 surplus to pay for the fee)\r\nIf there is no surplus, then we still create the payjoin proposal, as long as it meet the min relay fee rate.\r\n\r\n> Are you really sure you don't just want to do the bip79 way?\r\n\r\nThis is really crucial for us that the senders can pay for it.\r\n\r\nI will reimplement our receiver/sender based on all this feedback.\r\nMy goal is to make a reference implementation I can copy/paste in this BIP to demonstrate that making the sender is easy.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643580256",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3440530162,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ0MDUzMDE2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3440530162",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T06:47:00Z"
    },
    {
      "event": "subscribed",
      "id": 3440530164,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NDA1MzAxNjQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3440530164",
      "actor": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T06:47:00Z"
    },
    {
      "event": "mentioned",
      "id": 3440530165,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ0MDUzMDE2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3440530165",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T06:47:00Z"
    },
    {
      "event": "subscribed",
      "id": 3440530166,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NDA1MzAxNjY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3440530166",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T06:47:01Z"
    },
    {
      "event": "commented",
      "id": 643582379,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzU4MjM3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643582379",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T07:08:58Z",
      "updated_at": "2020-06-13T07:11:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "> That was what the `maxadditionalfeecontribution` was about, but as you said, it has a difficult UX. \r\n\r\nI still don't love it, but it's not so bad if you provide a sensible suggested value (\"use minFeeRate * expected input weight). And I'd also prefer not having \"max\" but providing `additionalfeecontribution`\r\n\r\n> At least `maxadditionalinputs` is pretty clear: The receiver can add x inputs at the fee rate of the original transaction. This also better explains that the sender is only supposed to pay for additional inputs.\r\n\r\nI don't think it's very clear, it's more \"im willing to pay for X inputs\" an indirect way. And that's even less clear what it means for for mixed input cases etc.\r\n\r\n> This is the spare change case. The receiver can decrease the amount on the only output. This basically mean the receiver pays for fee. (In BTCPay we allow it, if the sender pays 0.11 for a 0.1 invoice, then the receiver will use the 0.01 surplus to pay for the fee)\r\n\r\nWoah, Hang on....... This is starting to get awful. You are now having wildly different behavior and fee-burden depending on if the transaction happens to have change or not. And you're giving extra incentive for the sender to now use a changeless transaction, cause they know the extra fees will instead be paid for by the other party. I know of two coinselection algorithms that would allow simply encoding this and would allow picking changeless solutions with even higher frequency.\r\n\r\nBTW what happens if I send a 1-input-1-output payjoin to BTCPay and pay $500 in fees.   Is BTCPay going to chip in another ~$500 to match the fee rate? Or do you also now need some sort of maxfeerate?\r\n\r\n\r\n\r\n\r\n\r\n\r\nI like what you're doing with this, but I feel like you've generalized stuff that doesn't need to be generalized. And somehow managed to not handle common cases elegantly (like changeless transactions, and the ability for the receiver to communicate he'll chip in a fixed amount because he either likes payjoins or because he won't have to consolidate)\r\n\r\n\r\n\r\n> > Are you really sure you don't just want to do the bip79 way?\r\n> \r\n> This is really crucial for us that the senders can pay for it.\r\n\r\nHm? I think I've mentioned quite a few times now that bip79 allows this, and it's the common case and in fact how even the reference implementation works. bip79 just also allows the flexibility for the receiver to chip in if they want",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643582379",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643585471,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzU4NTQ3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643585471",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T07:36:48Z",
      "updated_at": "2020-06-13T07:36:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "Another annoying case: You payjoin 1 BTC to X. Your wallet was able to send it without change. The receiver replies back with the coinjoin proposal with you paying 1 satoshi to X and the rest to tx fees. Should the sender sign it? \r\n\r\nIf yes, from a practical point of view that's annoying because if a payjoin receiver can be malicious it's harder to outsource and now part of the critical infrastructure to be secured. If the payjoin (receiver) server is not capable of being malicious, a business is able to deploy it in production a lot easier setting (and provide it with some imported funds it can mix into payments). \r\n\r\n--\r\n\r\nbip79 is dead, so I very much support your proposal because it seems to likely have momentum to be implemented; but I think you'd probably be better off just taking bip79 and make the following changes:\r\n\r\n* stop using hex-encoded transactions, and use PSBT  (this is a nice improvement that makes a lot more sense considering its support now)\r\n* enforce that the receiver doesn't shuffle inputs/output (as per earlier discussion for hardware wallets) and only randomly insert\r\n* maybe standardize error codes (if that's useful, then go for it)\r\n\r\n\r\nAnd I think it's pretty solid. I think the rest of the stuff in this bip is kinda useless, worse or over-engineered. A good example is trying to introduce versioning before you have anything to version, when if you find there are things you want to version it's just trivial to add \"&v=2\" to the bip21 URL if you want backwards compatibility, or change \"pj\" to \"pj2\" if you want backwards incompatibility depending on the exact change.\r\n\r\n\r\nAnd then if you want to hit a stretch-goal, I'd add a feature I regret not adding to bip79: The bip21 URL should encode the \"modificationPolicy\" (as I discussed earlier, which I'd do just via 2 constants)\r\n\r\n\r\n",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643585471",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643588966,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzU4ODk2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643588966",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T08:08:51Z",
      "updated_at": "2020-06-13T08:08:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "> And you're giving extra incentive for the sender to now use a changeless transaction, \r\n\r\nNo we don't.\r\nWhat happen is: If you need to pay an invoice 0.1 BTC, and don't want change back, you will probably pay 0.11 BTC. The receiver substract the fee from the single output, up to 0.1 BTC. Which is basically the receiver paying for the fee up to 0.01 BTC. There is no incentive for the sender as it is possible only because the sender is over paying in the first place.\r\n\r\n> stop using hex-encoded transactions, and use PSBT (this is a nice improvement that makes a lot more sense considering its support now)\r\n\r\nYes, I agree, this is already the case. We support hex in BTCPayServer, but not in the BIP.\r\n\r\n> enforce that the receiver doesn't shuffle inputs/output (as per earlier discussion for hardware wallets) and only randomly insert\r\n\r\nAgree\r\n\r\n> maybe standardize error codes (if that's useful, then go for it)\r\n\r\nI did, I tried to keep only errors which are relevant for the sender.\r\n\r\n>  A good example is trying to introduce versioning before you have anything to version, when if you find there are things you want to version it's just trivial to add \"&v=2\"\r\n\r\nI introduced that just so supporter of v1 can show a proper error message instead if there is an incompatible version. IMHO, it can be ignored by implementer for now.\r\n\r\nAbout `modificationPolicy`, I understand your point, but you can already reach the same UX with the `maxAdditionalInputs`. (Where you show the user two choices with precisely how much fee he is expected to pay, with pretty good accuracy)\r\n\r\n> Another annoying case: You payjoin 1 BTC to X. Your wallet was able to send it without change. The receiver replies back with the coinjoin proposal with you paying 1 satoshi to X and the rest to tx fees. Should the sender sign it?\r\n\r\nI would say: As long as the sender sends the amount of money, or less, than what he wanted to, he should accept it.\r\n\r\nI really need to implement all the suggestions we talked about to see if this is easily implementable. And if not, see what are the pain point.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643588966",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643602316,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzYwMjMxNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643602316",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T10:13:55Z",
      "updated_at": "2020-06-13T10:13:55Z",
      "author_association": "NONE",
      "body": "I think `maxadditionalinputs` is misleading in its naming: I would expect that the receiver can only add x amount of inputs. As @RHavar said, it's more like `maxadditionalinputsthatthesenderwillpayfor`. \r\n\r\nI also cannot see any incentive for a sender to set `maxadditionalinputs` to anything over 1. It basically tells the receiver \"I don't want to pay for anything beyond the bare essential to create a payjoin (add one input)\".  ",
      "user": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643602316",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3440666107,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ0MDY2NjEwNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3440666107",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T10:13:55Z"
    },
    {
      "event": "subscribed",
      "id": 3440666109,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NDA2NjYxMDk=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3440666109",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T10:13:55Z"
    },
    {
      "event": "commented",
      "id": 643638266,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzYzODI2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643638266",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T15:26:19Z",
      "updated_at": "2020-06-13T22:32:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "> What happen is: If you need to pay an invoice 0.1 BTC, and don't want change back, you will probably pay 0.11 BTC. The receiver substract the fee from the single output, up to 0.1 BTC. Which is basically the receiver paying for the fee up to 0.01 BTC. There is no incentive for the sender as it is possible only because the sender is over paying in the first place.\r\n\r\nOk, this makes sense. But (AFAICT) strictly worse than BIP79, unless I'm missing something (which is quite likely) I actually don't single a single advantage. \r\n\r\nLet's imagine greenaddress wanted to (or more likely: was forced to) return the [0.1 BTC of mine](https://blockstream.info/address/37LkKYcwtZv2bsEbGZhGtGdYwvWGmv3L6f?output:1)  that they first blacklisted and then assumed de facto custodial control of and decided the best way to do this was with a 0.1 bitcoin changeless payjoin. \r\n\r\n\r\nIn your scheme they would send me an original transaction for `0.11 BTC`, I would add my input of `$N` amount and then modify the output  to something like `0.11 + $N - 0.01`. But in BIP79: they would send me an original transaction for `0.1 BTC` with an extra (on top of the normal feerate) `0.01 BTC` in fees. I would add my input, and modify the output to `0.1 + $N`\r\n\r\n\r\nSo why is BIP79 vastly better at handling this?\r\n* The receiver has less incentive to screw the sender. In your proposal if the receiver broadcasts the original-transaction (i.e. doesn't complete the payjoin) they will literally get to pocket more money. While in BIP79 if the receiver broadcasts the original transaction  (i.e. doesn't complete the payjoin) it will get the same amount of money (just faster, as the txfee is higher).\r\n\r\n* It is simpler for the sender. In this proposal the sender the sender needs to use a customized coinselection to say: \"I want to pay 0.11 if the transaction is changeless, but 0.1 if it has change\" vs bip79 which you run coinselection as normal\r\n\r\n* It is far simpler for the receiver, not requiring access to information it quite likely doesn't have. For this to work well, the receiver ('s payjoin server) needs aware of the invoice-amount to know the \"extra\" the sender added. In practice, this is very awkward to do. Because normally in bitcoin wallets you just add/create addresses, but don't attach an expected-invoice amount to them. So where I have deployed bip79 it just sits as a little layer above the wallet and needs no information the wallet doesn't already have.\r\n",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643638266",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643869688,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mzg2OTY4OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643869688",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T02:31:56Z",
      "updated_at": "2020-06-15T02:32:55Z",
      "author_association": "CONTRIBUTOR",
      "body": ">  But in BIP79: they would send me an original transaction for 0.1 BTC with an extra (on top of the normal feerate) 0.01 BTC in fees. I would add my input, and modify the output to 0.1 + $N\r\n\r\nThe issue is that if the original transaction is RBF, the payjoin transaction will be replaced by the original.\r\n\r\nAlso, this scenario is actually supported by this BIP. As a sender, you can do what you just said.\r\nThe way the receiver behave is: If it is not possible to bump the fees because of some constraints (say maxadditionalfeecontribution set to 0, or, as you in this case, not having change outputs to substract money from), the receiver will not bump the fee and attempt the payjoin if it has fee above min relay tx fee.\r\n\r\nThis is a decision from the sender.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643869688",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643870086,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mzg3MDA4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643870086",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T02:33:37Z",
      "updated_at": "2020-06-15T02:33:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I also cannot see any incentive for a sender to set maxadditionalinputs to anything over 1. It basically tells the receiver \"I don't want to pay for anything beyond the bare essential to create a payjoin (add one input)\".\r\n\r\nI don't see either, but if you force the BIP by saying \"there is only 1 input\" this is an important information that can be used by chain analysis.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643870086",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643877082,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mzg3NzA4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643877082",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T03:03:27Z",
      "updated_at": "2020-06-15T04:39:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "> The issue is that if the original transaction is RBF, the payjoin transaction will be replaced by the original.\r\n\r\nThis isn't a problem. In more ways than one:\r\n\r\nFirstly, the _only reason_ the original transaction should be broadcasted after the payjoin is broadcasted is if one of the parties is a dickface. But if one of the parties is a dickface they can *always* broadcast the original transaction without completing the payjoin. So, really, who cares?\r\n\r\nSecondly, I don't believe your reading of bip125 is correct. The original transaction and payjoin transaction pay an identical amount of fees, and the bip125 rules say that a replacement transaction must pay `(minFeeRate * sizeOf(replacementTransaction)) + originalTransactionFee`  and `minFeeRate` is never zero, so it'll never work.\r\n\r\nThirdly, designing around a protocol around bip125 is probably practical but not ideal or extremely future-proof. bip125 is kind of like a \"minimal viable product\" imo, and could radically be improved to allow vastly more transactions be eligible for replacement. \r\n",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643877082",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643880256,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mzg4MDI1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643880256",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T03:17:54Z",
      "updated_at": "2020-06-15T03:17:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I don't see either, but if you force the BIP by saying \"there is only 1 input\" this is an important information that can be used by chain analysis.\r\n\r\nYou might as well just remove the (confusing) param and specify something like: \"If the receiver adds more than MAX(inputWeights) weight to a transaction, it is expected to pay for it\". \r\n\r\nIt really makes no difference from a blockchain analysis point of view, as the receiver is still allowed to add more than 1 input.\r\n\r\n\r\nBTW probably the only reason blockchain analysis even works is because of the assumptions they make based on observing how people actually use bitcoin vs. what is allowed. Merely allowing a behavior that no one uses isn't going to make a difference.",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643880256",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643883648,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mzg4MzY0OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643883648",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T03:32:32Z",
      "updated_at": "2020-06-15T03:33:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Also, this scenario is actually supported by this BIP.\r\n\r\nIt's not that it isn't supported, it's just that it's strictly worse at it than the BIP it replaces. I [outlined](https://github.com/bitcoin/bips/pull/923#issuecomment-643638266) some reasons it's worse, and I still haven't been able to see a single advantage. \r\n\r\nYou are doing great work, and I support your BIP regardless of the outcome of this point.  And I have enough self-awareness to know I sound like a dick, but not enough self-control to stop myself: but I wonder if your reason for making these changes were due to misunderstanding of the original BIP? If so, you shouldn't feel bad -- I am pretty bad at the English -- but you shouldn't let that stop you just reverting to how BIP79 does it. I saw it deployed in a production environment, and how it handles fees/who-pays really quite well. There's really no point complicating it.\r\n",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643883648",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643899286,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mzg5OTI4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643899286",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T04:45:12Z",
      "updated_at": "2020-06-15T04:47:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "> \"If the receiver adds more than MAX(inputWeights) weight to a transaction, it is expected to pay for it\".\r\n\r\nNo, because the sender is then unable to know the fees before making the payjoin. Which is what we want to fix in the first place.\r\n\r\n> It's not that it isn't supported, it's just that it's strictly worse at it than the BIP it replaces.\r\n\r\nI do not understand your point. What is possible in BIP79 is still possible in BIP78 with the right parameters (which can be hard coded in the sender).\r\nThe sender has the choice. ~The only complication is on the receiver side, but frankly the receiver is not that complicated to do right compared to the sender~ (EDIT: Actually let me think about this point, because I receiver seems to be able to behave like BIP79 without breaking the sender either.)\r\n\r\n> Secondly, I don't believe your reading of bip125 is correct. The original transaction and payjoin transaction pay an identical amount of fees, and the bip125 rules say that a replacement transaction must pay (minFeeRate * sizeOf(replacementTransaction)) + originalTransactionFee and minFeeRate is never zero, so it'll never work.\r\n\r\nThat is interesting, I need to look more how the code behave in Bitcoin Core.\r\nIf you are right, it means that the policy is not enforcing the best interest of the miner! In the case where the block space is scare, the miner want to maximize the fee rate, not the absolute fee.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643899286",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 643901876,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzkwMTg3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/643901876",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T04:55:19Z",
      "updated_at": "2020-06-15T05:00:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "> No, because the sender is then unable to know the fees before making the payjoin. Which is what we want to fix in the first place.\r\n\r\nYeah it does. The sender should be able to assume the receiver will add: `MAX(inputWeights)` of weight and `0` of fees, and plan according. If the receiver does add more, it should pay additional fees to keep the fee rate the same as if it just added `MAX(inputWeights)` of weight and `0` in fees.\r\n\r\n\r\n> If you are right, it means that the policy is not enforcing the best interest of the miner! In the case where the block space is scare, the miner want to maximize the fee rate, not the absolute fee.\r\n\r\nThat's correct. Hence why I think of bip125 as a  \"minimal viable product\", rather than a finished one. It's a set of rules that is obviously robust against relay spam, but it does so in an overly restrictive way. Although it's not particularly easy to solve well. Like you don't really want someone replacing a 100KB transaction paying N feerate, with a 100 byte transaction paying N+1 feerate. It might be in miners interests to do so, but the relay network will go to hell.\r\n\r\n A few weeks ago I was discussing an idea with some people that drastically changing how the bitcoin relay network works, would be able to obsolete all the hardcoded rules like min-relay-fee, bip125 replacement rules, etc. into something that would always be optimal for miners. But even if the idea is solid, the amount of engineering effort required to implement it would be staggering (which I don't think anyone is remotely volunteering ) . ",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-643901876",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 644016779,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDAxNjc3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/644016779",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T09:31:20Z",
      "updated_at": "2020-06-15T09:31:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "> That is interesting, I need to look more how the code behave in Bitcoin Core.\r\nIf you are right, it means that the policy is not enforcing the best interest of the miner! In the case where the block space is scare, the miner want to maximize the fee rate, not the absolute fee.\r\n\r\nI have already [pointed this out above](https://github.com/bitcoin/bips/pull/923#discussion_r438483643)... :P The BIP is about the absolute fee, and that paragraph in this text is redundant and confusing.",
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-644016779",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 644023037,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDAyMzAzNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/644023037",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T09:43:42Z",
      "updated_at": "2020-06-15T09:43:42Z",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> > I also cannot see any incentive for a sender to set maxadditionalinputs to anything over 1. It basically tells the receiver \"I don't want to pay for anything beyond the bare essential to create a payjoin (add one input)\".\r\n> \r\n> I don't see either, but if you force the BIP by saying \"there is only 1 input\" this is an important information that can be used by chain analysis.\r\n\r\n`\"there is only 1 input\"` The property is only to tell the receiver of how many inputs they can \"freeload\" off the sender, if a receiver wanted to add more inputs, they can just pay the feerate difference. \r\n\r\nIt becomes a well known assumption that no sender would set this to >1 then.\r\n\r\nIf I'm understanding this right, `maxadditionalinputs` is a useless configuration and the codebase should just assume that the sender will ALWAYS only pay for 1 contributed input and the receiver pays the rest. This makes it easy enough for the sender to show the user what they can expect to pay in total with no hassle. ",
      "user": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-644023037",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 644094803,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDA5NDgwMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/644094803",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T12:13:03Z",
      "updated_at": "2020-06-15T12:52:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "~So in summary we remove `maxadditionalinputs`  and `maxfeecontribution` and hardcode in the BIP the fact that the sender expect at least 1 input and will pay for it.\r\nAnd can pay only for that. That's fine to me.~\r\n~Actually @Kukks the sender may want to put at `maxadditionalinputs` 0 to say to the receiver he won't  pay for anything. Which is also fine.~\r\n\r\n@RHavar @SomberNight you are right concerning BIP125, and it seems the only reason to bump the fee is actually to be able to reach minrelayfee! It is painful to handle this case. We can't pay on the receiver case without massive pain in the butt UX wise either.\r\n\r\nTheir is also the case that some wallet (wasabi) have round fee rate and thus, not bumping fee would create fee that stand out.\r\n\r\nGiven that now, with `maxfeecontribution` it is already possible for a sender to order the receiver to not bump the fee, I wonder if we need change the BIP at all. Maybe just specify that if `maxfeecontribution` is not specified, it should be considered 0. This would make everybody happy.\r\n\r\nYou expect to pay for 0 inputs? just set `maxfeecontribution` to `0`. If you do that today in btcpayserver, the receiver would still add 1 inputs, not bumping the fee.\r\n\r\nIf you create a receiver, you can also just ignore `maxfeecontribution` completely without breaking senders: Senders do not care about paying less.\r\n\r\nThere is reason to set `maxfeecontribution` to something other than zero: The minrelaytxfee case and the \"round fee rate\" case.\r\nThis should really satisfy all cases.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-644094803",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3444116307,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ0NDExNjMwNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3444116307",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T12:17:59Z"
    },
    {
      "event": "subscribed",
      "id": 3444116311,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NDQxMTYzMTE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3444116311",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T12:17:59Z"
    },
    {
      "event": "mentioned",
      "id": 3444136229,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ0NDEzNjIyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3444136229",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T12:23:21Z"
    },
    {
      "event": "subscribed",
      "id": 3444136233,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NDQxMzYyMzM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3444136233",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T12:23:21Z"
    },
    {
      "event": "mentioned",
      "id": 3444136243,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ0NDEzNjI0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3444136243",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T12:23:21Z"
    },
    {
      "event": "subscribed",
      "id": 3444136247,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NDQxMzYyNDc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3444136247",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T12:23:21Z"
    },
    {
      "event": "commented",
      "id": 644128884,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDEyODg4NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/644128884",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T13:17:02Z",
      "updated_at": "2020-06-15T13:19:49Z",
      "author_association": "NONE",
      "body": "Something unrelated to current discussion but would this scenario be possible:\r\n\r\n\r\n* Person A requests a payment from Merchant of 0.05BTC\r\n* Person A requests a payment from Merchant of 0.05BTC\r\n* Customer C payjoin with merchant of 0.1BTC payment\r\n* Merchant coordinates payjoin to pay for payment requests of Person A and Person B in payjoin, without even needing to add an input!\r\n\r\nThis effectively ends up being one transaction with 4 parties involved, where the merchant basically becomes a coordinator and never touches the money.\r\n\r\n",
      "user": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-644128884",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 644135257,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDEzNTI1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/644135257",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T13:28:36Z",
      "updated_at": "2020-06-15T13:28:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "Ok give me a week to rewrite this BIP with all the feedback and reimplement things in BTCPay. @RHavar I think the disagreement we have is actually not a problem at all, even for the UX you expect. You can basically take same implementation of BIP79's receiver, replace with PSBT,  and it would just work fine, minus some corner cases.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-644135257",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3444405293,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ0NDQwNTI5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3444405293",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T13:28:36Z"
    },
    {
      "event": "subscribed",
      "id": 3444405295,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NDQ0MDUyOTU=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3444405295",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T13:28:36Z"
    },
    {
      "event": "commented",
      "id": 644206664,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDIwNjY2NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/644206664",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T15:31:45Z",
      "updated_at": "2020-06-15T15:51:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think that `maxfeecontribution` is unnecessary and overkill. I agree it has some (marginal) upsides, so I don't mind too much either way, but I think you should carefully consider if you really want to complicate the protocol with it. \r\n\r\nI'm not sure if you're planning on keeping it in the revised protocol, but what I am **strongly** against is if the invoice is for $X, allowing, or expecting the sender to send $Y (e.g. changeless case) with the expectation that ($Y-$X) is used as a fee contribution.\r\n\r\nWhile it seems innocuous, this has pretty drastic consequences to the protocol. And the exact same thing can be done by the sender by using a higher-fee-original-transaction.\r\n\r\n--\r\n\r\nP.S. I think the protocol should make an explicit assumption that the sender will pay for 1 (MAX(inputWeights)) worth of extra weight, and that the receiver should be allowed to add more weight but there's an assumption that if he does so, he'll chip in the fees required to not lower the feerate. This will add a lot of predictability for everyone",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-644206664",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 644501919,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDUwMTkxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/644501919",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-16T02:59:30Z",
      "updated_at": "2020-06-16T03:02:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "@RHavar I don't see how it has drastic consequence as both receiver implementation AND sender implementation can completely ignore it without being incompatible with those who does not ignore it.\r\n\r\n> I think the protocol should make an explicit assumption that the sender will pay for 1 (MAX(inputWeights)) worth of extra weight, \r\n\r\nI disagree. A sender might wants to pay for 0 of extra weight, and that's fine. There is several reason where he agree to pay for more:\r\n* Min fee rate\r\n* Spare change\r\n* Obfuscation of round fee rate\r\n\r\nBut outside those, with BIP125 only caring about absolute fee, it is perfectly fine to not want to pay any additional fee (I would say advised to!), does not mean the receiver has to pay either.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-644501919",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3446997661,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ0Njk5NzY2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3446997661",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-16T02:59:32Z"
    },
    {
      "event": "subscribed",
      "id": 3446997665,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NDY5OTc2NjU=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3446997665",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-16T02:59:32Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NzNhNGQ3YzRiYWE3MTM1NWUxNDUxNTgxNTZkNDEyMzg3MjJmNThhMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/73a4d7c4baa71355e145158156d41238722f58a1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/73a4d7c4baa71355e145158156d41238722f58a1",
      "tree": {
        "sha": "69ffb2969cea250e2048386faf487e62ceb08d6e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/69ffb2969cea250e2048386faf487e62ceb08d6e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 69ffb2969cea250e2048386faf487e62ceb08d6e\nparent 8ce60865178b46f0d420dde5c5bc373cc17a22da\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592278662 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592278691 +0900\n\nRename to BIP78\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7oPqMACgkQZhh2PvCR\nhv41JA//d77L6PWhxeusFkhTlvuwC16UHMnaOc9FlxeRwUlV278mngxpJo1WdrnI\nrto8NIzEhA0LLxQA6TKOa4W3vBVgRaI+fDiMgooa6jzD75Tl62vS6pFN+b+QOGwq\nNxBznDExx2bdpn40F2q4igEhJb0irDAZUsT+iJl6bhpv933+hZBjti6aZL0wskDu\nEgxcsoSIdUEle6Ua4aA5W76XkAfunazRHPvMCSIToMTWvtA7qi2esWJ8yAyZBF/8\n09ioVVdIaQFvlYeIfpvAR/IbDBej9x4uhq1AwoaCHDTmtvYOp1vzLEDzQ5ybLWkY\nIee7kSyfL0KDw6rtcMmGXqK32dcqPIdjTW2FIfGV7sHjTatkMAi0MJkTwkdGQGNp\nNdlYGKNaVdtH3ZhruoBV9BEbTFzyHdWPp03rs6NS7iwH+7HAT7QZxrdfbvAKUeF/\nIgdENTBwd7um3pX0bWfjN80OHKoeuXX5MPexT+d/dAxxs0IMnqHgBaDwbvR92UXz\nyck6CtJsa9IjELvZGhIY0CuGi0rRAeK9ijRyuwRKQJ9JVQDo9EUXJ8OOYZmAS+Nf\nJeZGMiQNJ4IgpSQTCj52cP2dLFYwgQ+kQSlLMnkX5Rgxex5hjCllI7RhoBPxbFog\nKR0/dGP2lozxRYihVHmEEknVlWdEYLnW4XyvplaISpt4aeXpc3I=\n=XEBu\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8ce60865178b46f0d420dde5c5bc373cc17a22da",
          "sha": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
          "html_url": "https://github.com/bitcoin/bips/commit/8ce60865178b46f0d420dde5c5bc373cc17a22da"
        }
      ],
      "message": "Rename to BIP78",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-16T03:38:11Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-16T03:37:42Z"
      },
      "sha": "73a4d7c4baa71355e145158156d41238722f58a1"
    },
    {
      "event": "commented",
      "id": 644520075,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDUyMDA3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/644520075",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-16T04:12:14Z",
      "updated_at": "2020-06-16T04:13:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @RHavar I don't see how it has drastic consequence as both receiver implementation AND sender implementation can completely ignore it without being incompatible with those who does not ignore it.\r\n\r\nI think I'll let you first revise your spec and solidify these things, and these things should become a bit more clear and I can be clear I'm understanding what you're proposing.\r\n\r\nBut giving the sender two very different, but equivalent, ways to \"pay for\" a payjoin is a disaster. There's no realistic way to sanely handle this as a receiver without knowing the \"invoice amount\" (or if there is one)  and I've explained why that's very annoying. And in the most general cases, the sender will actually need to figure out which way the sender is \"paying for\" the payjoin to process it. That is just a bizarre burden to shove on people. \r\n\r\nAnd I don't want to repeat myself by enumerating all the other disadvantages for both the sender and receiver (even if I concede it works and is possible). \r\n\r\nBut let me put it another way: Unless you can tell me a single advantage (which I don't believe one exists) this proposal is _objectively_ worse than the BIP79 way for changeless transactions.\r\n\r\n\r\n\r\n> I disagree. A sender might wants to pay for 0 of extra weight, and that's fine. \r\n\r\nSure, I agree. But this is a pretty niche case, and in theory already supported without any protocol changes. Basically just the sender looks at the payjoin proposal and based on that decided to go ahead with it or not.\r\n\r\nIt's pretty barebones, but I think it's good enough for now. If it's something you really want to support, you should do it properly ... which I imagine means the receiver first (via bip21?) communicates it's fee policy and then the sender decides if they want to do a payjoin or normal transaction.\r\n\r\n\r\n> But outside those, with BIP125 only caring about absolute fee, it is perfectly fine to not want to pay any additional fee (I would say advised to!), does not mean the receiver has to pay either.\r\n\r\nIn the BIP79 implementations I was involved in, the receiver always adds 1 input and increase the payment output the value of that input. (i.e. leaves the absolute fee the same, but lowers the fee rate by a predictable amount)  and the sender knows how much the receiver is going to lower the feerate by, so it plans accordingly. [But that's not required by the spec]\r\n\r\nIt's not perfect, but it's good and works well. It's also stupidly simple and has very nice properties. I really urge you to use it as the base for your work, as frankly it's just better and simpler :D ",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-644520075",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3447125695,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ0NzEyNTY5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3447125695",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-16T04:12:14Z"
    },
    {
      "event": "subscribed",
      "id": 3447125698,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NDcxMjU2OTg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3447125698",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-16T04:12:14Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZDEzYzc4NDY3MTkxZmZlOWJlYjI0ODIzY2U3ZGQ3ZTEyZWM2MzE5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d13c78467191ffe9beb24823ce7dd7e12ec63199",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d13c78467191ffe9beb24823ce7dd7e12ec63199",
      "tree": {
        "sha": "91cbc20a328a83354e82cd82d22ef77d3e953ac7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/91cbc20a328a83354e82cd82d22ef77d3e953ac7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 91cbc20a328a83354e82cd82d22ef77d3e953ac7\nparent 73a4d7c4baa71355e145158156d41238722f58a1\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592282367 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592282367 +0900\n\nRemove parts refering to RBF, add recommendations for maxadditionalfeecontribution\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7oTP8ACgkQZhh2PvCR\nhv445RAAj0Je2DBVh++frCUBsdTgv8WoIiDsU1qQB+K5S/tkeFCPYnhi8Ye/yqrn\niqQgwfHUpLTTcq+wWgYJ+8P8Je/BWdsov37nzmQ5lCqPlizzmTiD8DnlzBce8QFz\nUUkR8pl/hmArVWpTGCVt1AcJUPY1RCclWHpN+tPp0nvRgOSl3J+OEKFTXDdW+vzj\ntTbo1jUWKloz2aXRMNsM9Ak0YT7Q+99D+AdPgkTsaG/X/1QTz1484Dz/7wCHAJ8W\nG+UvK80pWi+qJbKkQFD3MRkz5BSz6M+KnJ2bvnjVy3csyBGsLh3AgI17QN2wuDVa\n/8yavwDs7XEhEUt9gITVQ+GACMO+lqfr7cwsdEupKQ3lCRjb2hHN8PCxUQ6Cn8ni\nW0G6SYkDeUPNM1WFVEX7cmj0GI7ptDoWPKP4sh4njCesykjOLTLZl2fNFzelyEND\nrM7BMOfWQpulfdxaDvPnJfGe0g2w1ikFhITuyGsRnplF52fqyQz54TBDbtP6PFaY\nypF/FpkiCNN2hl6Fel2DA485UgG/G5irVX0BCh/KuY3CQFbKcEc1auXuvb+D1N+j\nafabiBEBIka5lNW7kEFfs0xBPedbixGUOzvVDKvydNZZvx+pgulz+Si8kvXZLDcG\nmToZDJH/59efNE3ZmEzZL9J5v0jCL6JTh3fsfN/8Ikp3JywepKw=\n=qoXa\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/73a4d7c4baa71355e145158156d41238722f58a1",
          "sha": "73a4d7c4baa71355e145158156d41238722f58a1",
          "html_url": "https://github.com/bitcoin/bips/commit/73a4d7c4baa71355e145158156d41238722f58a1"
        }
      ],
      "message": "Remove parts refering to RBF, add recommendations for maxadditionalfeecontribution",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-16T04:39:27Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-16T04:39:27Z"
      },
      "sha": "d13c78467191ffe9beb24823ce7dd7e12ec63199"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NjMxZDhlNjVjZDAxYmRjYjhkNmUwYjkzYzRjMzZmZDAzOWQ1NzQ0Yg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/631d8e65cd01bdcb8d6e0b93c4c36fd039d5744b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/631d8e65cd01bdcb8d6e0b93c4c36fd039d5744b",
      "tree": {
        "sha": "c7cfa1e53e89c049166c0d5539190cb125376282",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c7cfa1e53e89c049166c0d5539190cb125376282"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c7cfa1e53e89c049166c0d5539190cb125376282\nparent d13c78467191ffe9beb24823ce7dd7e12ec63199\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592284656 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592284656 +0900\n\nSimplifies sender recommendation\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7oVfAACgkQZhh2PvCR\nhv4mUw//TCS0GR1ErqCTvi1Dovy+eBPHfxo//ssGKR7LrUuNYFAoMuG1fvYfsKoG\ntSxj6WpO66qbrqRMp6esrEuwVJMmgVeDLpv5aIjy9Uf2dLeoKNty1De01Gcahlt1\ntl8rz5scAwmdFRO/3NqJRH0AQUDGF8TVLVwKO2XbLTo1y9w7EkzDfehk4W3eZHBS\n3h6Qno80YA2EvSz7fgYn4fqlbCwvuL8ZinPcvojHHDJFqv1aXMmNvyKx14xiGqam\nXrZ7+MLPBnKMt3VUEAzx7xUAxkcej3yunEtMp8LhJi4JZotcHi7edud2XWPevUba\nN5C6JB8HJxiJo4/QBmeReWl7zOfgZvSu1eCn2TpnLzX8qHmzPcH83/3pXX7cApBr\nP+r8ZyA6fcuvaM8S0WlfOEU0JmIXWQyt3lkkVsFXgKC+mkRYCnL0tCA/duv/JIgq\nFAF5dTF9DTqE9ksL9eHjb1opu4cip1hLYEQ4HczjCEhCMgyDLPXheo9YP7XCTCnE\nLx5Lm29Gqw6/T2wyq2ECckpUn8CJbRlXDE6auDbeXt0ySj3zly7G/slwgtdx5PtI\n9ubagvGtXQK2H2PnMpHiD+ZR4fesoB22EA01mrC4m9A2dG9o1vsXDvwiCXHZn+ZN\niv6cJWYsMQXs/rR02Ad9GYWNXRK3rYRCkNWZvZ6iXz0VKRTgFiI=\n=of3x\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d13c78467191ffe9beb24823ce7dd7e12ec63199",
          "sha": "d13c78467191ffe9beb24823ce7dd7e12ec63199",
          "html_url": "https://github.com/bitcoin/bips/commit/d13c78467191ffe9beb24823ce7dd7e12ec63199"
        }
      ],
      "message": "Simplifies sender recommendation",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-16T05:17:36Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-16T05:17:36Z"
      },
      "sha": "631d8e65cd01bdcb8d6e0b93c4c36fd039d5744b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6Mjg3ZTNjMjM0NmRiOTMxNjE0ZGEzMTE4MmQ0ODVlMGE5ZDA3YWJiZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/287e3c2346db931614da31182d485e0a9d07abbe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/287e3c2346db931614da31182d485e0a9d07abbe",
      "tree": {
        "sha": "ee775ec4b62f3027f5459bba2cbb15c3c29fd457",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ee775ec4b62f3027f5459bba2cbb15c3c29fd457"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ee775ec4b62f3027f5459bba2cbb15c3c29fd457\nparent 631d8e65cd01bdcb8d6e0b93c4c36fd039d5744b\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592284699 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592284699 +0900\n\nFix README\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7oVhsACgkQZhh2PvCR\nhv5crhAAoFWNZv8pEad2UAACSkm30U4YgkIFLZSvEsWHxJlUhDKaZBgVsTyC2eYJ\nZb5iia8hOB7uyOpWXd2rEino/U+lVdfRgW/omEa1CCAa+8tWv6wv/A8U9blUSN6l\nl8F0kw296U8p7tWQe7jBCr6INsBjBJhJPLJl+fhX8Ew/uWc4wTbSEDMpfoDN0KN+\nApJy2m0izfVTF24WnGlutSaKCdaeXbkzPufLG0nTQe7luPq4cV8CDyU4WewllepU\np5NbGrlVLKsA22dR+054P5CoZR1i9MBKbmgBG3O9agsTwgA38DL5zJhks1H736jN\n4oLANnLL7U6iJJr/A2O4kwRAXU64L7BFfsxxSgMXPt/DzueEUwKjZYS7nNGHd7PH\nMVsNNYXOLzjEPu4u4M3xyChyt3SG5TKj/LuJtk+CrnnQOuW6pIBBCwXD0J4L1dlZ\nidhQeLOgDjvtE1+oYlgpaVu3xH2wJkJ9ZQDSAd7PGs/4qpWIdwhL286B7i7mRSsE\npa79OHiruizi7nf3g94DPYQzrhXzqJiP6aWf8+KrYXNSCo4wbH0lDed/yZT6e66a\nXaf3/+RxNUhpewiPNMj8oTndCKzWxOY6sy8nGKGdu4yLdI3eW6zZOfHsYLW1JJ0c\ndXm+KudcqP7X2uPy9preoK02yJKQtUfAynJuHZo4wzPw2cxpHuA=\n=XJVU\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/631d8e65cd01bdcb8d6e0b93c4c36fd039d5744b",
          "sha": "631d8e65cd01bdcb8d6e0b93c4c36fd039d5744b",
          "html_url": "https://github.com/bitcoin/bips/commit/631d8e65cd01bdcb8d6e0b93c4c36fd039d5744b"
        }
      ],
      "message": "Fix README",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-16T05:18:19Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-16T05:18:19Z"
      },
      "sha": "287e3c2346db931614da31182d485e0a9d07abbe"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ODAxY2M3MTExNGQyYzc2MzBmMGI1ODEyMmVmYjlmYWNiMzkwZjRmMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/801cc71114d2c7630f0b58122efb9facb390f4f0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/801cc71114d2c7630f0b58122efb9facb390f4f0",
      "tree": {
        "sha": "60183852fecf48b9a788984197e758b7786ebcc6",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/60183852fecf48b9a788984197e758b7786ebcc6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 60183852fecf48b9a788984197e758b7786ebcc6\nparent 287e3c2346db931614da31182d485e0a9d07abbe\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592285152 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592285229 +0900\n\nUpdate PSBT invariants\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7oWC0ACgkQZhh2PvCR\nhv4HPRAAmMpxJ2egUPZE0hd6PT8zu06/jy29rfKjEeeD2416CzAcdxeS0Np9ALwI\nsXC+t/zsfK5Yq5RVGJLdtBwGnmFxCoXDP2l8BFByPCDaG8IErmx3lLgSFOxCazVe\ng1FKzUS3KC6UaGs3Y4wKU2AscZkVaA5k+it03hAtshGYh5jYgOAyeLkMn76p+96X\nG4te0Pqs5SV6GCpI9XPNRbc6on/+qMe0wDoA7uEPrgcQ1T8fKMYomEoK934/pvTV\nma3JTztnW94S1/YQSjKb6FOy6UhZPQqSvdKYz43R7Yx7Yb9L2iVI58NDGcIjiiM6\n6B70TxDDW9pN34RPRiiwuDANco7vdW1s3vxgi+5zdX0lTUh2SIIxaTvr0PDFdc3P\nd1jw0YtsTMuvgT3G6CXxlb4h/QODrcoIoSrZOOCmzq+R98tTf0eC7rDmlv8SECgZ\nZOucGHHGCTmeko4vpd56IVAEVItKa1y87nEY4Mqda9MqpLHzihQkbtpttT04Eicr\nvf5BQNgGIOaACLxIC0ArR37jZiRIVjVSenxEOTmrMsDlUUfAsjnioD/KfNUiq9ab\nLxHcPTfPAN5w6ZiAqEVaRkuVkck3dSCcZDPIQJTH6g2NluOX+VPe/xCEGYQF42Xk\naEuJUkV6nMzKPlxUi4IZQsFbf7vS1x6jqOxjdLns8APQng7HAHE=\n=hBCu\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/287e3c2346db931614da31182d485e0a9d07abbe",
          "sha": "287e3c2346db931614da31182d485e0a9d07abbe",
          "html_url": "https://github.com/bitcoin/bips/commit/287e3c2346db931614da31182d485e0a9d07abbe"
        }
      ],
      "message": "Update PSBT invariants",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-16T05:27:09Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-16T05:25:52Z"
      },
      "sha": "801cc71114d2c7630f0b58122efb9facb390f4f0"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3447267659,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ0NzI2NzY1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3447267659",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-16T05:27:19Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZDcyZTI3NTM1ZWQ3ZWMzZDcwYzE0ODk3NTE5Y2VmNzc5YmQ5MzQwOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d72e27535ed7ec3d70c14897519cef779bd93408",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d72e27535ed7ec3d70c14897519cef779bd93408",
      "tree": {
        "sha": "25a6a3393f3aca52be65687002c0ac6dabe07a55",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/25a6a3393f3aca52be65687002c0ac6dabe07a55"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 25a6a3393f3aca52be65687002c0ac6dabe07a55\nparent 801cc71114d2c7630f0b58122efb9facb390f4f0\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592373988 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592373988 +0900\n\n[MoveOnly] Move optional parameters at the beginning\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7psuQACgkQZhh2PvCR\nhv4wQxAAheX7tXcd64rQyPVK34lF/kEqipHx0qmq0px7/l9yCP/sReLsPrznnAE0\n+/rj0JeXYBMisJdIPheJjDrjivBPeiYjs4BppbWuFyA00YRWfds8lEbT0pau5gz4\npdUpCbjJWBJpVk2Fvv3rhNj76uMx3E2DD0/2DmKnWeZgp8/ndQT8I1FiPuCGVJdf\nAKS54nYLLX5O8UFGnd1ssLXilRwjjQTRqe/8Ff314zn1bZakG37h4Xb/DgIyIXRz\nGDwXoljG8R7sE1ifqtxWjiY1aza9y9qYmgDY1lGYS0pp1M3gldAJ7ZQbwfNVHMqH\nW1uRAes+VOTfVR+pASH4p7dwCOrqNMe0aAaOgiejrcBrp8777NnGWyEIO7bWrQTU\ngvOlThzB5F0tbUc8BGWDOtIW1+toJDXRz0ShmuQDA7/oCabLVjohlRGHkn0ncqI7\neQzNf13fIjkVnbGUVy26cD3gUEhaQb5KJJuQj91xcOQfDksmm8ZuBpKoO5Q3tCdF\nWh5QAQX1hBoRorf0ge5MY7tM2LGhbSgbzGuCOq5sOheSjF+2nGVfHQ8+KQZ6eV/O\nS06FMfWaUzlyEoNkPZnE9d/2oGg91/VAV+aOgNKjD4PupDoQUE6B0b/sGm6jAWjH\nCyYy0+lWFPYAtPSDsVOO9iCIHZQFGg19HLF5lsA854EVqjOl6cY=\n=RMoa\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/801cc71114d2c7630f0b58122efb9facb390f4f0",
          "sha": "801cc71114d2c7630f0b58122efb9facb390f4f0",
          "html_url": "https://github.com/bitcoin/bips/commit/801cc71114d2c7630f0b58122efb9facb390f4f0"
        }
      ],
      "message": "[MoveOnly] Move optional parameters at the beginning",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-17T06:06:28Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-17T06:06:28Z"
      },
      "sha": "d72e27535ed7ec3d70c14897519cef779bd93408"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3452137823,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ1MjEzNzgyMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3452137823",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T07:09:08Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YTA3ZmVmNTc5Nzc1Y2Q4MGFlMzEwYjkxZDAyNzdhOTc2YjRlZjgzYg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a07fef579775cd80ae310b91d0277a976b4ef83b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a07fef579775cd80ae310b91d0277a976b4ef83b",
      "tree": {
        "sha": "2c0d99b5c6cbddf96b8b81bd402ed166fb6f8572",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2c0d99b5c6cbddf96b8b81bd402ed166fb6f8572"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2c0d99b5c6cbddf96b8b81bd402ed166fb6f8572\nparent d72e27535ed7ec3d70c14897519cef779bd93408\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592377489 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592377775 +0900\n\nAdd fee output section\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7pwa8ACgkQZhh2PvCR\nhv5wChAAszxIGVQSXhrspwvQ5hLgPQogMAOR8PHbh82R7rNF608ampAmAV8BYl2H\n6w9mOWhlEtuRAzr/QwZygxR0e9qTtz5H/GCEhM8yUiB/Q6jRADC8iwasMCcAUso1\n0u3nmKSbljllmpNiNlWIdTY98fIluGgi+H99qXJdr6utwBkiwPlrAe9l1Uko/iiI\nk2FaP0l+XyuWf0ZQgc+yL0gI3uzJJjqJWjGSy2aILQ35li4BwTZl065SENrjb6yJ\n9G0K396eliD78h1ajL0SSVEZnrrcGgqqLpt4HW+OuhfqPH8YqeSApWD0HZPQYizY\nmo/CzOzaia7a6c6uVoKwGq1CNuvkjwjS9pMLL6et58eUdvVkSQ4MOBzMhoSmnirl\nyjQuO7522i7VMN+fSfH36RjbUE9nn1JZyW8b7pcUklU/RK+9wEIq+0Qiak/IUmkl\nQHnNN1WwmSripY94+59+/PkTSZOODRvzmTUPabmGs39j8HFD3b9JIJtJCtN4kRh7\nAK32eqMOGbALnQRRE47waquFIc35wuownCxc7G9ypdw3UNAH29+Ws9X8dVlkqaVV\nvTt9RCIVD2SfgXxORSUn+hadqAErbcz1w71sMcgetLaNkg7HUxgiMe1oQy8CF6EI\naC7n2kw4TKm2NnvpjEr2vDBJXV8bb5kKI5CPT75gneA91+O9zlk=\n=BDXu\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d72e27535ed7ec3d70c14897519cef779bd93408",
          "sha": "d72e27535ed7ec3d70c14897519cef779bd93408",
          "html_url": "https://github.com/bitcoin/bips/commit/d72e27535ed7ec3d70c14897519cef779bd93408"
        }
      ],
      "message": "Add fee output section",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-17T07:09:35Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-17T07:04:49Z"
      },
      "sha": "a07fef579775cd80ae310b91d0277a976b4ef83b"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3452139629,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ1MjEzOTYyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3452139629",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T07:09:45Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZjM2Y2E4ZjQzZDUxYTcxYjZmNTUyOGJhYTY1MDkxZTc1NDMzZWQ0NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f36ca8f43d51a71b6f5528baa65091e75433ed44",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f36ca8f43d51a71b6f5528baa65091e75433ed44",
      "tree": {
        "sha": "b7d64c56351c74e799ef41d40895ee347215a4df",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b7d64c56351c74e799ef41d40895ee347215a4df"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b7d64c56351c74e799ef41d40895ee347215a4df\nparent a07fef579775cd80ae310b91d0277a976b4ef83b\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592378153 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592378153 +0900\n\nUpdate recommendation for receiver and sender\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7pwykACgkQZhh2PvCR\nhv66FxAAzOT0yPfw9kyYFPlzfpFzrDxlp3sLw8GlfIXClX+SYLTEkFbyzMHQwPY5\n+2ugv7O7L2S0C5LwlggmN4f5G5We4ZDgY06CayceIAApOPRcybaAeXz4Xj2v3o8L\nsYj2X5o0nMoMcFubnX49PLUAjcVK1xO1fD85wY6aTr5VpygGAgvT8hYxDNma6oDY\nITkqGKZCUVRSfZ2Me1XLjwrvVHAZyMLosBF/VpMGyFSDnt/AbE2HrhmpyLGpLHQV\n8BAJ0J9vUw9WAR+gx+FmqXLaudMhj0dXMwlBhpsfxFRItCp9vmNlzxvBCCLxRdcn\nuaYJDKia9all9WBLyT+4KdzsubGvWvCFuKsxuCtL9nAU9rkm66o2Q5qKiTGRlaMO\nQ83nIwva65QCLjPS8L7n4gw+4ojYbfYGARj39l6OiJtD6usOu/5Xo+7xGgwjUb78\nvv94IZCgVE/5e/zyby9RpsKPVK2RT2O2EobwUdrbH0YpcGP0y3jXvXZdly0o3Mcr\nEKsgnMMTqi8udtwqKcj6OGcNGtQSWixB2HroXA4KUumU7SdGrkL0uWI+jiYddlPR\nQRUbjTDA1NLxcIn9NKL6A0BLiQH83AgCtWh3u6wYeFcC+laJUti8imFcuK/gw3/H\n0eLPEvSfLTLaB4gUR2Yiinnvm5q1j/hsgstgnPM+yIwU8IuW1fQ=\n=e4xO\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a07fef579775cd80ae310b91d0277a976b4ef83b",
          "sha": "a07fef579775cd80ae310b91d0277a976b4ef83b",
          "html_url": "https://github.com/bitcoin/bips/commit/a07fef579775cd80ae310b91d0277a976b4ef83b"
        }
      ],
      "message": "Update recommendation for receiver and sender",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-17T07:15:53Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-17T07:15:53Z"
      },
      "sha": "f36ca8f43d51a71b6f5528baa65091e75433ed44"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6M2ZjNzAzMmVjMzM3MjRlYjlhNzk5MzkzNThkYjY3MjlmZDNkODdjMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3fc7032ec33724eb9a79939358db6729fd3d87c2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3fc7032ec33724eb9a79939358db6729fd3d87c2",
      "tree": {
        "sha": "925d04108a9360e37dd78091c2eb040eb1235b44",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/925d04108a9360e37dd78091c2eb040eb1235b44"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 925d04108a9360e37dd78091c2eb040eb1235b44\nparent f36ca8f43d51a71b6f5528baa65091e75433ed44\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592378438 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592378438 +0900\n\nFix some formatting\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7pxEYACgkQZhh2PvCR\nhv65Hw/+K91Odkidll7HTxNNbhMQqOHsEHYZmLaVMuP+YQKMaSV4XM6y8/yk5UYh\nNbTos5FQaUx4sxC++Emrc+wip9taJEVmO0kF0pgdg0o+G/ojOHrPohHpyOwyAar3\n/echeCGJu4TMbknNiqtetyHjN3Af7MZsZvUyLGKPu4kP1ohiyHppHamrkVYO8LUU\nBPLnSpvirILKX1r++7H9Tmdw9lWy+yb2IVZVtHUCO7UR0EZZvKZH3bERiWjemiID\ng9paEjmnACqJOnozb1WkDArw26KhvAw/DkhHeDaW61sPeWEHFtWGMHsw2uqCVQIb\na5zhQYiaZdci5IpvkHIJfapssRmdoWfjkdHlvcPqongF7hiWKpirzgWekpQkGD3+\nx7PczfNN8+pTPgDicJRR2yBagxwMjpB4P4O101Ydo6aQbKJhVlQdTGLsC2B650hE\nvDaiuOi0LvILbZBpCNUwSOeRFlVFH4xndq2lxI4NFc20KrjXusbCRLLTUmFzO2uf\nOCZ66i6besdPzDohYr3RLUN9KCmZCuw7ZZP1vaBnyPfyBWnsOH2Zu/gFZ/1DOu/D\nCd7rPLh33gjwdomy/eIE+hA7jp7MP3xQWn/7gAid2H1y/7zM2rDTRV0d7sa9FZQw\nSkvHjYK5KHBxS0/dDYkIx7UK21pfDesbSHWT57vYiyxjiVI9gZY=\n=ItYr\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f36ca8f43d51a71b6f5528baa65091e75433ed44",
          "sha": "f36ca8f43d51a71b6f5528baa65091e75433ed44",
          "html_url": "https://github.com/bitcoin/bips/commit/f36ca8f43d51a71b6f5528baa65091e75433ed44"
        }
      ],
      "message": "Fix some formatting",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-17T07:20:38Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-17T07:20:38Z"
      },
      "sha": "3fc7032ec33724eb9a79939358db6729fd3d87c2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZWE3NTYyZmM5MDU1MjI3YWRiMTI5YmEwMTQ0NTU2ZTNiZTA1MGQ3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ea7562fc9055227adb129ba0144556e3be050d77",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ea7562fc9055227adb129ba0144556e3be050d77",
      "tree": {
        "sha": "e4490d593a0b826b1a084eef6e01cfd5b4131c32",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e4490d593a0b826b1a084eef6e01cfd5b4131c32"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e4490d593a0b826b1a084eef6e01cfd5b4131c32\nparent 3fc7032ec33724eb9a79939358db6729fd3d87c2\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592398269 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592398269 +0900\n\nFix old error code\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7qEb0ACgkQZhh2PvCR\nhv7Lew//VnfGzRKjIBw1XzI/OK7BbYISIFNQ5463IIiRpDIIbH8gsbOuWAQ/xIyS\nAGu85MPHV3q2Lytr4ANgdftwM47koiV45+OzIs71Z+V8KrJbG79Sn6VNsU9VY2og\n7c6Jxc6wZTa7Ib6XJ5suTC5hvVRfgOJTbUejaUfILiTvpq8IeizdXNhYttUPAF7X\nqFbWHiZEqblnjteFGQ/GdD5twJmoYYktbaxfHDrDKJiub5hn43z3UlrZX2Wgsm4p\nVvv/Gfenvp0at9rK/lZosgR6kzSTlLC9BRpFykt/f9B3C9foCPJARSJRpL1zJ1/v\n5yEAE93bliyGzel8bPVkTwVnTNR7AaYZwTje7FIng9fmLJrajJijmuaepajpc9qy\n0bkRlKHnHrK1QXV4w8oTZUWtsikp0KHAhRWCyvg0zMo28aEZTRmhlHWv75dyFmOk\nnkwxApP8QrpEv0XhLChhhtx0F7ungltCv5vMMHJ5EXKFC7W1gLN/gKZXXaIZ0D2/\nIOXvKctBUtkruqtAiX/KctQffGRAb7MULeY93o8yFL5dowdmG/ZWkiDM3ut8seIe\ncCTWvl27qsLRHlo8DtNcQj3+fywZadlOzQE3gh8/wEz0qjYby5infihn1yZlsbbl\nYVT1GihTP1swdG89KrM7VYOA5jYtxXGjZ7X5xMIUfcTgsiB5INM=\n=dpgJ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3fc7032ec33724eb9a79939358db6729fd3d87c2",
          "sha": "3fc7032ec33724eb9a79939358db6729fd3d87c2",
          "html_url": "https://github.com/bitcoin/bips/commit/3fc7032ec33724eb9a79939358db6729fd3d87c2"
        }
      ],
      "message": "Fix old error code",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-17T12:51:09Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-17T12:51:09Z"
      },
      "sha": "ea7562fc9055227adb129ba0144556e3be050d77"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3453630169,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ1MzYzMDE2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3453630169",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T13:36:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3454084303,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ1NDA4NDMwMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3454084303",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T15:09:28Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MzQ4NWFmNzA4Y2U1YTQ4NWQzMGNkOGY2MGVmZTAwMDRlOWI0NTY2Yw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3485af708ce5a485d30cd8f60efe0004e9b4566c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3485af708ce5a485d30cd8f60efe0004e9b4566c",
      "tree": {
        "sha": "0efd54bfcdd240446db1329140218df3b8b7e0f3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/0efd54bfcdd240446db1329140218df3b8b7e0f3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0efd54bfcdd240446db1329140218df3b8b7e0f3\nparent ea7562fc9055227adb129ba0144556e3be050d77\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592400363 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592406749 +0900\n\nAdd reference implementation\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7qMt0ACgkQZhh2PvCR\nhv5n6RAArB2fk0X+t730euLDDVdROox+z2P+AyRMaqbVMFF8mBscCR24GekrQv5U\ne6Og5JjMs/SxIizjOlR7YiCUhwqBJlnyA3LgjOW8ETjYQQ+mG+8CmoY8S6/85JGM\nX0Lp3DQN0hRJshj/30CYf0wHTsyuFVkNootLHdxmYxn65gzcjMDfH9Xy6UVXoHcb\nTs9n+zkswa95HNwwT6VvVrraZBjxYpsqKf1CQlED68kU1hwUU6T0E+qp7Du9G3mB\nTLbGrjJ19GQC/X/FoBMpu38tqo639tDr9Lpto22mmv3yvY1p4Hm32mahzOiovfxD\n7+IkbBtv+cdrgyyzgi2KyEakigmAaZe562OBe4Z8iDjare8obhgABAgK4QwywMNW\nlrjLie4uvPA0FknZJr9HgtjHBuXvlfefDMF395I7q1U43BrHON/WIM8kBS6bTkgY\n4hrrd5FIGcOBbYY4TPWsrk3f7ia3VUzA3YDSQ28OMscDu73UUhSNgYgQ+UxuXE21\nw4oyvvcng6kUZwH0G43tedkFKifF2nteIotqXWm8yRFKi2UySJzNWbrUKSGDlXdR\nF6sh0SFGRbfTkcXWjGF6JcVN2NI+SJq+HxBAIpWa3u4WqRhQqY35rKGmvWZtwOOv\nQNTbt8RkFH0qpA2wWftOLKhtNpev0ykdqIq5dTM2UrhhMIlYkRk=\n=4QQL\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ea7562fc9055227adb129ba0144556e3be050d77",
          "sha": "ea7562fc9055227adb129ba0144556e3be050d77",
          "html_url": "https://github.com/bitcoin/bips/commit/ea7562fc9055227adb129ba0144556e3be050d77"
        }
      ],
      "message": "Add reference implementation",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-17T15:12:29Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-17T13:26:03Z"
      },
      "sha": "3485af708ce5a485d30cd8f60efe0004e9b4566c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3454099619,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ1NDA5OTYxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3454099619",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T15:12:40Z"
    },
    {
      "event": "commented",
      "id": 645437629,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTQzNzYyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645437629",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T15:14:51Z",
      "updated_at": "2020-06-17T15:14:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "I added a reference implementation and rewrote the sender's checklist.\r\nI implemented it on my side, and I confirm that the sender is now way more easy to write correctly and the additional fee predictable.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645437629",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "reviewed",
      "id": 432572550,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNTcyNTUw",
      "url": null,
      "actor": null,
      "commit_id": "3485af708ce5a485d30cd8f60efe0004e9b4566c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-432572550",
      "submitted_at": "2020-06-17T16:47:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "commented",
      "id": 645497376,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTQ5NzM3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645497376",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T16:59:00Z",
      "updated_at": "2020-06-17T16:59:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, looking a lot better for sure 👍  I'll stop commenting on the fee stuff.\r\n\r\nBut circling back to \"output substitution\" -- can we please just get rid of it? It has some obvious upsides, but it does contain some very significant downsides. And not just from the sender, but the receiver too. If the payment output can be substituted, now the payjoin server is far more security sensitive and going to be far harder to get deployed.\r\n\r\nMy strong preference would be for for the rule to say the only thing the receiver is allowed to do to outputs is increase or leave the amount the same.\r\n\r\nBut if this is really feature you really want, why not add it as a \"feature flag\" sort of thing? So say the receiver (might) do output substitution, in the bip21 URL it adds \"os=1\" and know the sender knows the reciever supports it. And if the sender also supports it (e.g. it's not a hardware wallet) it also adds \"os=1\" when sending the request.\r\n\r\nThat I think pretty much has all the advantages of output substitution, but also allows both sender and receivers who don't want it, to sort of opt out.\r\n ",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645497376",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 645516464,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTUxNjQ2NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645516464",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T17:32:40Z",
      "updated_at": "2020-06-17T17:32:40Z",
      "author_association": "NONE",
      "body": "> Yeah, looking a lot better for sure 👍 I'll stop commenting on the fee stuff.\r\n> \r\n> But circling back to \"output substitution\" -- can we please just get rid of it? It has some obvious upsides, but it does contain some very significant downsides. And not just from the sender, but the receiver too. If the payment output can be substituted, now the payjoin server is far more security sensitive and going to be far harder to get deployed.\r\n> \r\n> My strong preference would be for for the rule to say the only thing the receiver is allowed to do to outputs is increase or leave the amount the same.\r\n> \r\n> But if this is really feature you really want, why not add it as a \"feature flag\" sort of thing? So say the receiver (might) do output substitution, in the bip21 URL it adds \"os=1\" and know the sender knows the reciever supports it. And if the sender also supports it (e.g. it's not a hardware wallet) it also adds \"os=1\" when sending the request.\r\n> \r\n> That I think pretty much has all the advantages of output substitution, but also allows both sender and receivers who don't want it, to sort of opt out.\r\n\r\nWhy do you feel that output substitution is bad? I fail to see the downsides around it. ",
      "user": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645516464",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 645677270,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTY3NzI3MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645677270",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-17T23:24:32Z",
      "updated_at": "2020-06-17T23:24:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Why do you feel that output substitution is bad? I fail to see the downsides around it.\r\n\r\nThere are certainly pros and cons.\r\n\r\n-----\r\n\r\n(1) If output substitution is allowed, a merchant/receiver can't really give you signed invoices. Let's say a merchant signs a message saying they will deliver goods upon receiving X bitcoins to address A, and they put a bip21 URI in the signed message too.\r\nIf the URI uses payjoin, and payjoin allows replacing output addresses then the user would need to be prompted to verify the replaced address as part of the flow.\r\n\r\nE.g. the user starts a payment, verifies the address, it matches with the signed address, clicks \"send\", and the payjoin flow starts.\r\nThe receiver replaces the address, and either\r\n- the user now needs to be prompted again to manually verify the payjoin tx\r\n- or if the software accepts any substitution then the merchant can trick the user by having them pay to a different address that they did not sign\r\n\r\n-----\r\n\r\n(2) Without output substitution, and assuming the receiver is not allowed to decrease output amounts, I imagine it would be possible for hardware wallets to auto-sign (without prompts) the payjoin tx -- only prompting the user once, at the beginning, to confirm the original tx.",
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645677270",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NjNhYTU3NmZhY2M4MTZiZDc4ZTQxYjQxNDExYzE1YmZjYTVjODk1ZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/63aa576facc816bd78e41b41411c15bfca5c895e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/63aa576facc816bd78e41b41411c15bfca5c895e",
      "tree": {
        "sha": "1bf0f4c8eeb994d68fd506b3e3a595059f308537",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1bf0f4c8eeb994d68fd506b3e3a595059f308537"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1bf0f4c8eeb994d68fd506b3e3a595059f308537\nparent 3485af708ce5a485d30cd8f60efe0004e9b4566c\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592441984 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592441984 +0900\n\nUpdate from RHavar remarks\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7qvIAACgkQZhh2PvCR\nhv5mKA//SXlZDETgDbXSizD88oe+0fak4S6Ko0p6WH01998TLKtp3K/5oTVVfCBu\nTFhgNom4SfycbDuWXy8OqImC4u4u3bwkyQkGPpfXfnuMTxiW9RPrWnvTI2JMNm3x\nfGXlZee3YrNRoKx9NwfITSMUNXx5aFDjQ8ctnuFZogAx4mCH3G11C77l/v11xumL\nGHymMNpuQVEVuIlDnUwF5QKqeGBzji93LC1bBVLeC8Z3zX83umW07nxQ4ZZ1qI+G\ni8YtFxtQ/M8rKTHDUtiVZTr3Dy0WUDZSEpCj+8wgaPBgGq5bsAbysoQbnObBGRKt\n3xkmG0rXDTqRZerbMfGS32lw6U37ELVvERg53U16iNrpV2gcn4vDHiC9DZQWOur7\nkcnqYckWKf+fz050c6o452G4jxwF+65WHFjv2aoMseHsiPuBRYmaKzVDjsINsl2A\nd1ZAp6+tpOcu5ytBETk4aCfdCtsxbx4/VsVBoXVS2aLBvtlXdKfBtrSQayg6PtGz\nX2azJVlEJiIDOU+nJ3Yi7yX1PV+W1BLXGIuk6J0o7NSYXJZ0lCSujfie87Bx37Sa\ngZEXtO+hGStFtrx9dHhuiQc0HpuAdVk3tRoCI3I60Ozr7Qh/IiHGwiEjGn68TYcp\nqg273vuXluyGdmuBBeja14/ON3pdcGWVI5isOo3N2fX6LQHnvaQ=\n=iH15\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3485af708ce5a485d30cd8f60efe0004e9b4566c",
          "sha": "3485af708ce5a485d30cd8f60efe0004e9b4566c",
          "html_url": "https://github.com/bitcoin/bips/commit/3485af708ce5a485d30cd8f60efe0004e9b4566c"
        }
      ],
      "message": "Update from RHavar remarks",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-18T00:59:44Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-18T00:59:44Z"
      },
      "sha": "63aa576facc816bd78e41b41411c15bfca5c895e"
    },
    {
      "event": "commented",
      "id": 645706718,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTcwNjcxOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645706718",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:03:46Z",
      "updated_at": "2020-06-18T01:04:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "@RHavar for output substitution:\r\n* If the receiver think it has downside, he should not use it. This is not a mandatory feature.\r\n\r\n>  if the sender also supports it (e.g. it's not a hardware wallet) it also adds \"os=1\" when sending the request.\r\n\r\nI think that is a good idea. Would fix the concerns enumerated by @SomberNight. This is very easy to implement on both side.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645706718",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3455931352,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NTkzMTM1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3455931352",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:03:46Z"
    },
    {
      "event": "subscribed",
      "id": 3455931355,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTU5MzEzNTU=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3455931355",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:03:46Z"
    },
    {
      "event": "mentioned",
      "id": 3455931358,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NTkzMTM1OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3455931358",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:03:46Z"
    },
    {
      "event": "subscribed",
      "id": 3455931359,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTU5MzEzNTk=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3455931359",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:03:46Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YTJhMDg1Y2RiNDU5MGE1MjE5MjkyNTIyZTUyOTU5MDNkNTE1N2U5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a2a085cdb4590a5219292522e5295903d5157e99",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a2a085cdb4590a5219292522e5295903d5157e99",
      "tree": {
        "sha": "b8d2262c47f0a4ca0bd6ade6dfc6f6648ef18cd6",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b8d2262c47f0a4ca0bd6ade6dfc6f6648ef18cd6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b8d2262c47f0a4ca0bd6ade6dfc6f6648ef18cd6\nparent 63aa576facc816bd78e41b41411c15bfca5c895e\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592442680 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592442680 +0900\n\nAdd disableoutputsubstitution= optional parameter\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7qvzgACgkQZhh2PvCR\nhv74DhAAnG36awADQq3aJwcm7QhY/5HSwt7fhpQDU5OeS0OFgf2iC+btEm0CWyul\nDE6K72BMvK9KFlCb1YDPOaBfkEjKkk5GvBAxZhGTngX7/uOIvMfh7lbwGxJDIVM7\n66b6spI1HYfVP12ugCuMhVRnBU8diy3qmBpnQSXzU2914zND2A+31ALXfklntuzw\npZua35MidLEGTktFwSwINXT/9cv1NUiaY9PANCVwwYjbX5tgFHdeeb6868K+9es2\nGOcJH9rSYMHjFBA/FTfEh5F8A+S0nqnWLOOXHmzHveMnuUlDgYlqDQSkAUFpANyC\nuLY6t570Cvo/s2CiDNjRpVSPg03LOOQgOrhYZe+OZYYU0ZzGZR83Lj7SrWkCNDFF\n+0n14qc4VwY8LxLUC4LosYszJ86LYXaFL1B+x7WMDnn6aLKmLIb2WtLylr5LSdJ2\nLxZpp23PfrWqA6VYYj+DIWz04I8Sc3MYIKbDrP/BLpYkcdv4gT9jD1ABuCCtOVqf\n0AtBjp5gvayjiy9k1HgXMp6NlAa48EvSRcMS+YVjlzyKGrDJ1GoC1BnyJKAL2PTP\nLTYs2tpwYCkQ+W110YK7kX2q1VdvrICN9z2F0cAiI/xGYhrJQQ4keYQTh79tzy1E\ndULt1w5aqYUhhERgp6fiURi5tv0Lhrbb6nvIZrhivnfRhRRIhj4=\n=opbL\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/63aa576facc816bd78e41b41411c15bfca5c895e",
          "sha": "63aa576facc816bd78e41b41411c15bfca5c895e",
          "html_url": "https://github.com/bitcoin/bips/commit/63aa576facc816bd78e41b41411c15bfca5c895e"
        }
      ],
      "message": "Add disableoutputsubstitution= optional parameter",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-18T01:11:20Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-18T01:11:20Z"
      },
      "sha": "a2a085cdb4590a5219292522e5295903d5157e99"
    },
    {
      "event": "commented",
      "id": 645709291,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTcwOTI5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645709291",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:12:35Z",
      "updated_at": "2020-06-18T01:12:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "@NicolasDorier  Not quite. The receiver suffers the disadvantages regardless if they use the feature. They suffer merely because it's possible. \r\n\r\nTrivial example: Receiver wants payments to their cold wallet. BIP79 makes this possible, because there's nothing bad/hacked/outsourced/malicious payjoin server can really do.  But this BIP makes it impossible, because say the payjoin server was hacked it could see a large payment came in and just steal it. (So it is no longer sending to a cold-wallet really. It is more like sending to a hot wallet that immediately forwards it to a cold wallet).\r\n\r\nAnd that's not even that contrived. By making it impossible for the payjoin server to steal money, you make it more likely people will want to use payoin because implementing/supporting it is not as risky. ",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645709291",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3455946355,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NTk0NjM1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3455946355",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:12:35Z"
    },
    {
      "event": "subscribed",
      "id": 3455946356,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTU5NDYzNTY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3455946356",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:12:35Z"
    },
    {
      "event": "commented",
      "id": 645711406,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTcxMTQwNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645711406",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:19:28Z",
      "updated_at": "2020-06-18T01:19:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "If the payment server is compromised, the malicious actor can already substitute any information he want in the BIP21, there is nothing the spec specifically enable him to do.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645711406",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 645712342,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTcxMjM0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645712342",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:22:58Z",
      "updated_at": "2020-06-18T01:22:58Z",
      "author_association": "MEMBER",
      "body": "Address reuse can sometimes stop substitution...\n\n*ducks*\n\nOn Wed, Jun 17, 2020, 9:19 PM Nicolas Dorier <notifications@github.com>\nwrote:\n\n> If the payment server is compromised, the malicious actor can already\n> substitute any information he want in the BIP21, there is nothing the spec\n> specifically enable him to do.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bips/pull/923#issuecomment-645711406>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABMAFUZ7LD74G65HUBOR6MLRXFTS3ANCNFSM4NDBRK6Q>\n> .\n>\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645712342",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 645712418,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTcxMjQxOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645712418",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:23:12Z",
      "updated_at": "2020-06-18T01:23:12Z",
      "author_association": "MEMBER",
      "body": "Substitution attacks*\n\nOn Wed, Jun 17, 2020, 9:22 PM Greg Sanders <gsanders87@gmail.com> wrote:\n\n> Address reuse can sometimes stop substitution...\n>\n> *ducks*\n>\n> On Wed, Jun 17, 2020, 9:19 PM Nicolas Dorier <notifications@github.com>\n> wrote:\n>\n>> If the payment server is compromised, the malicious actor can already\n>> substitute any information he want in the BIP21, there is nothing the spec\n>> specifically enable him to do.\n>>\n>> —\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/bitcoin/bips/pull/923#issuecomment-645711406>, or\n>> unsubscribe\n>> <https://github.com/notifications/unsubscribe-auth/ABMAFUZ7LD74G65HUBOR6MLRXFTS3ANCNFSM4NDBRK6Q>\n>> .\n>>\n>\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645712418",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 645716275,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTcxNjI3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645716275",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:36:39Z",
      "updated_at": "2020-06-18T01:36:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "@instagibbs yeah, if the sender is using the payment address twice in same TX. Well I think we can ignore this case :p",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645716275",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3455991441,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NTk5MTQ0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3455991441",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:36:39Z"
    },
    {
      "event": "subscribed",
      "id": 3455991445,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTU5OTE0NDU=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3455991445",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:36:39Z"
    },
    {
      "event": "commented",
      "id": 645720482,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTcyMDQ4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645720482",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:50:55Z",
      "updated_at": "2020-06-18T01:50:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "> If the payment server is compromised, the malicious actor can already substitute any information he want in the BIP21, there is nothing the spec specifically enable him to do.\r\n\r\nThe systems responsible for giving users a bip21 invoices is often radically different than the part of the system responsible for running a payjoin server. And securely generating/showing/giving bip21 invoices an existing burden that all bitcoin services have.\r\n\r\nImagine you were approaching X company to support payjoin. You will get a lot better reception by saying: \"This is sandbox'd such that the worst case is it loses funds in the wallet which it has access to. This can just be some random shit you want to consolidate anyway\"  vs \"Oh yeah, consider this part of your critical infrastructure. And don't even try use this with cold storage, cause it largely breaks that\"\r\n\r\n\r\nI can also do stuff like \"Don't pay the invoice, unless you receive it in a pgp signed message from me\" with BIP79, but not really possible here..\r\n\r\n**And** even if they were theoretically the same system, and an attacker completely pwnd it --  this bip would make the problem worse, because the attacker could selectively only steal large amounts of money, instead of blowing his load and being immediately noticed by doing bip21 substitutions. \r\n\r\n---\r\n\r\nI get that there are upsides to output substitution. But you really need to allow _both_ the sender and receiver opt out.  Or consider if it's even worth the complexity of supporting in the first place, for a pretty niche feature. ",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645720482",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 645721948,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTcyMTk0OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645721948",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T01:56:05Z",
      "updated_at": "2020-06-18T01:56:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "What about using `pj+` in the bip21 URL to indicate that the receiver will only increase output amounts (bip79 style)? And `pj-` in the bip21 URL To indicate that the receiver is allowed to decrease/remove/replace their output.  And when the sender makes the payjoin, if the receiver is using `pj-` it can use the param `disableoutputsubstitution=true` to force the receiver to not substitute/remove/decrease any output (e.g. it's a hardware wallet, that doesn't want to require 2 authorizations from a user)",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645721948",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YTNmYmM2YzYyMDNlZjdkZWQ4Nzk2MjZlZTJmY2I2ODkxOTVhN2VjMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a3fbc6c6203ef7ded879626ee2fcb689195a7ec1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a3fbc6c6203ef7ded879626ee2fcb689195a7ec1",
      "tree": {
        "sha": "75f79dbc62efe49e1a17b61d7f38b1fb0cb27345",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/75f79dbc62efe49e1a17b61d7f38b1fb0cb27345"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 75f79dbc62efe49e1a17b61d7f38b1fb0cb27345\nparent a2a085cdb4590a5219292522e5295903d5157e99\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592445899 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592445899 +0900\n\nDo not crash reference implementation if there is no address in the bip21\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7qy8sACgkQZhh2PvCR\nhv4mOA//eH1/jqbT4fzXtJVxH7+QIdra0yKpsLGNnl4MPt508U1HGX97RBn7vHz1\nAy/olZw98xoH92xO/0gHDAVEV3G3ElJhoQuPUdWWsQXrKZpEz7tytxeNA2XYEkJp\nTXsw0BVFDetEEPYrzhSGcF0BNvYCygKSf6lNFxbaH4O5czhTUQ+2FhVg+luuBx/x\noQFvGnWQEPz8L6HJOJodmpzvPcmtnKxzXTcDIyyGmVMTwv2re4AH7VrBvnxLS871\nyGAIArR+d6XnPOr2PAeyVxoyX/Pt1Tip1nYhzlr2UlPRV6yyl61TmsIMSruQSX/z\nMZYCmmF4EM92FpdTrJkJWTXEkBbGi5F5vewr5QAYuWJC955ZuFYgxYIGd2Fth2VC\nIMfXrI0yR+hSx+x9arLMJNvyzjj+0zpFVKl8fTx4FwBP84nzE2AQmjUDVAoRvATy\nTbgYn4bAS5WZuuvI0ZC6vgDZa7f0nFVpQ6X1ZHbPWYMDitnUCSMCJbIqQimBi03J\nY0gTvIiSLEhBRDgQSb4rvVvmoj5q9F6Col4bQObgBwlQg6HQ+YtoCULy4Ej5kH+u\nWZwP5PmUFEX6buAv/bO+ocrwNvdJZng90VC0FYX1gFcAJVDe0P6Y9pVegJqcpGAP\n92+iAMDFgU7JP+U5z2nuJcOtKNXo9ZtRVSD6nBRTxT8ez04IZxo=\n=9Lo8\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a2a085cdb4590a5219292522e5295903d5157e99",
          "sha": "a2a085cdb4590a5219292522e5295903d5157e99",
          "html_url": "https://github.com/bitcoin/bips/commit/a2a085cdb4590a5219292522e5295903d5157e99"
        }
      ],
      "message": "Do not crash reference implementation if there is no address in the bip21",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-18T02:04:59Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-18T02:04:59Z"
      },
      "sha": "a3fbc6c6203ef7ded879626ee2fcb689195a7ec1"
    },
    {
      "event": "commented",
      "id": 645749672,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTc0OTY3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645749672",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T03:30:36Z",
      "updated_at": "2020-06-18T03:31:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "@RHavar I disagree, this is just overkill. \"What if only the payjoin server is compromised, but not the payment server, we should have an option for that\" is not worth planning for.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645749672",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3456200540,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NjIwMDU0MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3456200540",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T03:30:37Z"
    },
    {
      "event": "subscribed",
      "id": 3456200542,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTYyMDA1NDI=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3456200542",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T03:30:37Z"
    },
    {
      "event": "commented",
      "id": 645762483,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTc2MjQ4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645762483",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T04:20:24Z",
      "updated_at": "2020-06-18T04:44:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @RHavar I disagree, this is just overkill.\r\n\r\nMaybe, but overkill is better than half-assed. You're adding a pretty niche feature (output substitution) which has a considerable amount of downsides for both the sender and receiver. And then providing only a way for the sender to mitigate those downsides, but not the receiver. You should either do it properly, or not at all.  (My vote would be for: not-at-all).\r\n\r\nAnd it's not just a theoretical concern:  I am aware of two different services that would be unable to deploy this proposal if output substitution is allowed. One is a privacy-oriented service which provides a signed, non-repudiable message that says: \"If you send X bitcoin to Y address by Z time, we promise will do A\".  Output substitution would completely break this. The other is an exchange with a pretty serious and well defined security model where all deposits are first sent to cold-storage where they are later processed. They are not going to change their security models because you feel its not worth planning for.\r\n\r\nAnd of the people who are able to implement it, you will significantly increase the operational burden. When I operated a high-volume site (i.e. processed literally hundreds of millions USD worth of bitcoin deposits+withdrawals), I saw some pretty nasty attacks (including an AWS employee violating company protocol, which I suspect he was probably bribed into doing so).  There's no way I'd considering trying to support this BIP in its current form. It wouldn't be because it's impossible (it would be) but because I don't want yet-another-critically-important part of infrastructure to secure and maintain. It's even harder for me to pay people to work on, because now I have to be ultra-careful of (intentional) backdoors etc. \r\n\r\n BIP79 on the other hand is pretty easy to support, and you can even outsource it to someone who is just going to consolidate some dust lol.\r\n\r\n---\r\n\r\nOn a side note, the output-substitution  almost feels like you're trying to shoe-horn in an orthogonal idea, which could be better addressed by a BIP covering something like \"alternate addresses\" in which a sender can pick an alternate address for compatibility or privacy reasons.",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645762483",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3456286496,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NjI4NjQ5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3456286496",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T04:20:24Z"
    },
    {
      "event": "subscribed",
      "id": 3456286502,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTYyODY1MDI=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3456286502",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T04:20:24Z"
    },
    {
      "event": "commented",
      "id": 645831275,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTgzMTI3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645831275",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T07:21:47Z",
      "updated_at": "2020-06-18T07:21:47Z",
      "author_association": "NONE",
      "body": "@SomberNight \r\n> \r\n> \r\n> > Why do you feel that output substitution is bad? I fail to see the downsides around it.\r\n> \r\n> There are certainly pros and cons.\r\n> \r\n> (1) If output substitution is allowed, a merchant/receiver can't really give you signed invoices. Let's say a merchant signs a message saying they will deliver goods upon receiving X bitcoins to address A, and they put a bip21 URI in the signed message too.\r\n> If the URI uses payjoin, and payjoin allows replacing output addresses then the user would need to be prompted to verify the replaced address as part of the flow.\r\n> \r\n> E.g. the user starts a payment, verifies the address, it matches with the signed address, clicks \"send\", and the payjoin flow starts.\r\n> The receiver replaces the address, and either\r\n> \r\n>     * the user now needs to be prompted again to manually verify the payjoin tx\r\n> \r\n>     * or if the software accepts any substitution then the merchant can trick the user by having them pay to a different address that they did not sign\r\n> \r\n> \r\n> (2) Without output substitution, and assuming the receiver is not allowed to decrease output amounts, I imagine it would be possible for hardware wallets to auto-sign (without prompts) the payjoin tx -- only prompting the user once, at the beginning, to confirm the original tx.\r\n\r\nFor 2, I don't think that is the case at all, all HWs I tried with payjoin (no output substitution) required 2 confirmations.\r\n\r\n\r\nFor 1, I agree, it is a harder flow for the end user to verify against the original payment request ( send X to Y).\r\nWhat if we add a header value with the payjoin proposal response to the sender: a message (payjoin proposal tx hash + the bip21 sender was given)  signed by the private key of the original payment address?\r\n\r\n* Server creates payjoin BIP21 `bitcoin:AddressA?amount=1&pj=https://gozo.com`\r\n* Sender reads BIP21, creates original PSBT paying `AddressA` `1BTC`, sends to `http://gozo.com`\r\n* Receives creates a payjoin proposal with output substitution where it nows pays `AddressB` `0.5BTC` and `AddressC` `0.5BTC`. \r\n* Receiver sends payjoin proposal to sender BUT also sends a message signed with `AddressA` and its content being the payjoin proposal transaction hash + the BIP21 sender was given\r\n\r\nThis should allow you to verify that the output substitution was not a malicious action from merchant to customer and is verifiably linked to the original BIP21 payment request.\r\n\r\n----\r\n@RHavar\r\n\r\n>And it's not just a theoretical concern: I am aware of two different services that would be unable to deploy this proposal if output substitution is allowed. One is a privacy-oriented service which provides a signed, non-repudiable message that says: \"If you send X bitcoin to Y address by Z time, we promise will do A\". Output substitution would completely break this. The other is an exchange with a pretty serious and well defined security model where all deposits are first sent to cold-storage where they are later processed. They are not going to change their security models because you feel its not worth planning for.\r\n\r\nThis is not really a good argument IMO: this is not part of any specification used by this BIP: of course very specific workflows may need to adapt to use Payjoin.\r\n\r\nIf there is a signed message stating \"If you send X bitcoin to Y address by Z time, we promise will do A\", you can add \" If Y address signed alternative destinations B,C for X bitcoin, also do A on X bitcoin sent to  B,C \" \r\n\r\nServices where the money is sent to cold storage directly cannot use Payjoin anyway as you need the BIP21 destination address private key to partially sign payjoin proposal. And let's face it, I doubt most exchanges would even consider using Payjoin unless it could benefit them in some way (privacy is not a benefit to them since they are required to deal with analysis companies anyway). One benefit of payjoin for exchanges actually comes from output substitution, where the exchange would show a p2sh address (for compatibility) and substitute it with native segwit for savings.\r\n\r\n\r\n----\r\n>And of the people who are able to implement it, you will significantly increase the operational burden. When I operated a high-volume site (i.e. processed literally hundreds of millions USD worth of bitcoin deposits+withdrawals), I saw some pretty nasty attacks (including an AWS employee violating company protocol, which I suspect he was probably bribed into doing so). There's no way I'd considering trying to support this BIP in its current form. It wouldn't be because it's impossible (it would be) but because I don't want yet-another-critically-important part of infrastructure to secure and maintain. It's even harder for me to pay people to work on, because now I have to be ultra-careful of (intentional) backdoors etc.\r\n\r\nI still fail to see the operation burden increase when compared to BIP79. The biggest difference in implementation is the fee burden decision (to which I think I am more on your side) and the forced upgrade to PSBT (good for everyone anyway).\r\n\r\n----\r\n\r\nFor me, output substitution creates a whole array of use-cases, both for privacy and for block space efficiency. It would be a huge downgrade to cripple this BIP on such an niche case. \r\n\r\n",
      "user": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645831275",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3456728587,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NjcyODU4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3456728587",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T07:21:47Z"
    },
    {
      "event": "subscribed",
      "id": 3456728592,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTY3Mjg1OTI=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3456728592",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T07:21:47Z"
    },
    {
      "event": "mentioned",
      "id": 3456728596,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NjcyODU5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3456728596",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T07:21:48Z"
    },
    {
      "event": "subscribed",
      "id": 3456728599,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTY3Mjg1OTk=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3456728599",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T07:21:48Z"
    },
    {
      "event": "commented",
      "id": 645882975,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTg4Mjk3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645882975",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T08:59:58Z",
      "updated_at": "2020-06-18T08:59:58Z",
      "author_association": "NONE",
      "body": "> > (2) Without output substitution, and assuming the receiver is not allowed to decrease output amounts, I imagine it would be possible for hardware wallets to auto-sign (without prompts) the payjoin tx -- only prompting the user once, at the beginning, to confirm the original tx.\r\n> \r\n> For 2, I don't think that is the case at all, all HWs I tried with payjoin (no output substitution) required 2 confirmations.\r\n\r\nWhat @SomberNight is saying is that it *would be possible*, not that it's currently implemented in any hardware wallet. I agree that it's possible to implement the automated signing relatively easily if the receiver respects the BIP79 rules (no output substitution, no output removal, no decreasing of output amounts). We can allow decreasing the output amount for `additionalfeeoutputindex`, but that's about it.\r\n\r\nI think that this is quite important, because implementing automated signing of the PayJoin proposal is key to making it user-friendly and secure, which in turn is critical to achieve any sort of wider adoption.",
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645882975",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3457112488,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzExMjQ4OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457112488",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T08:59:58Z"
    },
    {
      "event": "subscribed",
      "id": 3457112491,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTcxMTI0OTE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457112491",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T08:59:58Z"
    },
    {
      "event": "commented",
      "id": 645917512,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTkxNzUxMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645917512",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T10:01:24Z",
      "updated_at": "2020-06-18T10:01:24Z",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> > > (2) Without output substitution, and assuming the receiver is not allowed to decrease output amounts, I imagine it would be possible for hardware wallets to auto-sign (without prompts) the payjoin tx -- only prompting the user once, at the beginning, to confirm the original tx.\r\n> > \r\n> > \r\n> > For 2, I don't think that is the case at all, all HWs I tried with payjoin (no output substitution) required 2 confirmations.\r\n> \r\n> What @SomberNight is saying is that it _would be possible_, not that it's currently implemented in any hardware wallet. I agree that it's possible to implement the automated signing relatively easily if the receiver respects the BIP79 rules (no output substitution, no output removal, no decreasing of output amounts). We can allow decreasing the output amount for `additionalfeeoutputindex`, but that's about it.\r\n> \r\n> I think that this is quite important, because implementing automated signing of the PayJoin proposal is key to making it user-friendly and secure, which in turn is critical to achieve any sort of wider adoption.\r\n\r\nThe biggest challenge is having the user know they need to use the device twice which means the sender needs to show a UI telling the user what needs to happen. Telling the user they will sign twice is fine as long as the sender can verify that the payjoin proposal is not malicious (if payjoin proposal is signed by BIP21 original destination, it can only be as malicious as the BIP21 creator is). \r\nEven if they could get it automatically signed the second time, you would need to communicate to the user to leave the device plugged in and most likely would want to show to user that it is being signed automatically for a special reason. I don't think the small UX benefit (on probably a very small minority of HW devices that would add such a feature) is worth crippling Payjoin functionality.",
      "user": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645917512",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3457360999,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzM2MDk5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457360999",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T10:01:24Z"
    },
    {
      "event": "subscribed",
      "id": 3457361003,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTczNjEwMDM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457361003",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T10:01:24Z"
    },
    {
      "event": "commented",
      "id": 645946553,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTk0NjU1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645946553",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:05:14Z",
      "updated_at": "2020-06-18T11:07:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "I don't understand any of the arguments right now...\r\n1. The receiver don't have to use output substitution if he does not want to.\r\n2. Nor does the sender.\r\n\r\n@RHavar  please explain\r\n\r\n> And it's not just a theoretical concern: I am aware of two different services that would be unable to deploy this proposal if output substitution is allowed. One is a privacy-oriented service which provides a signed, non-repudiable message that says: \"If you send X bitcoin to Y address by Z time, we promise will do A\". Output substitution would completely break this. The other is an exchange with a pretty serious and well defined security model where all deposits are first sent to cold-storage where they are later processed. They are not going to change their security models because you feel its not worth planning for.\r\n\r\nThis is addressed by `disableoutputsubstitution=true` set on the sender.\r\n@andrewkozlik, the point raised by @SomberNight is solved by this flag as well.\r\n\r\n> Or consider if it's even worth the complexity of supporting in the first place, for a pretty niche feature.\r\n\r\nActually this is not a niche feature. We plan to integrate it next next release in BTCPay.\r\nImagine the merchant need to pay Bob. Alice sends a payjoin to merchant. Merchant can decide to use Alice's payment output to pay Bob.\r\nThe payjoin transaction becomes a three party coinjoin without Alice even knowing.\r\n\r\n@RHavar your only point, if I understand is that this feature prevent the delegation of payjoin to an untrusted payjoin server.\r\n\r\nI think having an untrusted payjoin server is actually an interesting usecase. As it would mean that a payjoin can be a three party coinjoin where the untrusted payjoin server is the merchant but somebody else wanting to mix his coins. It may create an interesting market where the merchant get paid out of band for providing such service to the third party.\r\n\r\nIf such is the goal, we can indeed think about a way for the merchant to signal the payjoin server is untrusted and thus, output substituion is not possible. Would it suit you?",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645946553",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3457589848,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzU4OTg0OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457589848",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:05:15Z"
    },
    {
      "event": "subscribed",
      "id": 3457589849,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc1ODk4NDk=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457589849",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:05:15Z"
    },
    {
      "event": "mentioned",
      "id": 3457589852,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzU4OTg1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457589852",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:05:15Z"
    },
    {
      "event": "subscribed",
      "id": 3457589854,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc1ODk4NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457589854",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:05:15Z"
    },
    {
      "event": "mentioned",
      "id": 3457589855,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzU4OTg1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457589855",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:05:15Z"
    },
    {
      "event": "subscribed",
      "id": 3457589860,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc1ODk4NjA=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457589860",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:05:15Z"
    },
    {
      "event": "commented",
      "id": 645952665,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTk1MjY2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645952665",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:19:12Z",
      "updated_at": "2020-06-18T11:19:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Kukks \r\n> For 1, I agree, it is a harder flow for the end user to verify against the original payment request ( send X to Y).\r\nWhat if we add a header value with the payjoin proposal response to the sender: a message (payjoin proposal tx hash + the bip21 sender was given) signed by the private key of the original payment address?\r\n[...]\r\nThis should allow you to verify that the output substitution was not a malicious action from merchant to customer and is verifiably linked to the original BIP21 payment request.\r\n\r\nYes, this could mitigate the issue for the sender. Although note that now the sender client UI will have to expose this new signed message to the user, and also the user needs to be aware that this kind of substitution can happen, and they need to export and store this signed message alongside the original signed invoice they got out of band from the receiver.\r\n\r\n> Services where the money is sent to cold storage directly cannot use Payjoin anyway as you need the BIP21 destination address private key to partially sign payjoin proposal\r\n\r\nWhy would the receiver need to sign anything with the key used for one of the outputs?\r\n(apart from your proposal in same comment to try to solve my output substitution concern)\r\n",
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645952665",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3457638235,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzYzODIzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457638235",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:19:12Z"
    },
    {
      "event": "subscribed",
      "id": 3457638238,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc2MzgyMzg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457638238",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:19:12Z"
    },
    {
      "event": "commented",
      "id": 645959271,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTk1OTI3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645959271",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:34:26Z",
      "updated_at": "2020-06-18T11:34:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "@andrewkozlik @SomberNight can you confirm your issue is solved by `disableoutputsubstitution=true` at the client level?\r\n\r\n@RHavar by thinking more about it, the only useful point for an untrusted payjoin server is for having another party than the receiver mixing his inputs.\r\n\r\nBut by thinking more about it, this is already possible with the current protocol!\r\n\r\n1. The receiver send bip21 with pj going to his own trusted server\r\n2. The sender send a original PSBT\r\n3. The receiver forward the original PSBT as-is to a `mixing party` with `disableoutputsubstitution=true`.\r\n4. The receiver send back the proposal to the sender.\r\n\r\n\r\n\r\n",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645959271",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3457690891,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzY5MDg5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457690891",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:34:26Z"
    },
    {
      "event": "subscribed",
      "id": 3457690893,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc2OTA4OTM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457690893",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:34:26Z"
    },
    {
      "event": "mentioned",
      "id": 3457690900,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzY5MDkwMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457690900",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:34:27Z"
    },
    {
      "event": "subscribed",
      "id": 3457690903,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc2OTA5MDM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457690903",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:34:27Z"
    },
    {
      "event": "mentioned",
      "id": 3457690911,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzY5MDkxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457690911",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:34:27Z"
    },
    {
      "event": "subscribed",
      "id": 3457690912,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc2OTA5MTI=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457690912",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:34:27Z"
    },
    {
      "event": "commented",
      "id": 645961533,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTk2MTUzMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645961533",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:39:55Z",
      "updated_at": "2020-06-18T11:39:55Z",
      "author_association": "NONE",
      "body": "> Why would the receiver need to sign anything with the key used for one of the outputs?\r\n> (apart from your proposal in same comment to try to solve my output substitution concern)\r\n\r\n@SomberNight  Brainfart from my end. I understand it a bit more now",
      "user": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645961533",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3457709616,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzcwOTYxNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457709616",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:39:55Z"
    },
    {
      "event": "subscribed",
      "id": 3457709620,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc3MDk2MjA=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457709620",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:39:55Z"
    },
    {
      "event": "commented",
      "id": 645962951,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTk2Mjk1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645962951",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:43:15Z",
      "updated_at": "2020-06-18T11:43:15Z",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> I don't understand any of the arguments right now...\r\n> \r\n>     1. The receiver don't have to use output substitution if he does not want to.\r\n> \r\n>     2. Nor does the sender.\r\n> \r\n> \r\n> @RHavar please explain\r\n> \r\n> > And it's not just a theoretical concern: I am aware of two different services that would be unable to deploy this proposal if output substitution is allowed. One is a privacy-oriented service which provides a signed, non-repudiable message that says: \"If you send X bitcoin to Y address by Z time, we promise will do A\". Output substitution would completely break this. The other is an exchange with a pretty serious and well defined security model where all deposits are first sent to cold-storage where they are later processed. They are not going to change their security models because you feel its not worth planning for.\r\n> \r\n> This is addressed by `disableoutputsubstitution=true` set on the sender.\r\n> @andrewkozlik, the point raised by @SomberNight is solved by this flag as well.\r\n> \r\n> > Or consider if it's even worth the complexity of supporting in the first place, for a pretty niche feature.\r\n> \r\n> Actually this is not a niche feature. We plan to integrate it next next release in BTCPay.\r\n> Imagine the merchant need to pay Bob. Alice sends a payjoin to merchant. Merchant can decide to use Alice's payment output to pay Bob.\r\n> The payjoin transaction becomes a three party coinjoin without Alice even knowing.\r\n> \r\n> @RHavar your only point, if I understand is that this feature prevent the delegation of payjoin to an untrusted payjoin server.\r\n> \r\n> I think having an untrusted payjoin server is actually an interesting usecase. As it would mean that a payjoin can be a three party coinjoin where the untrusted payjoin server is the merchant but somebody else wanting to mix his coins. It may create an interesting market where the merchant get paid out of band for providing such service to the third party.\r\n> \r\n> If such is the goal, we can indeed think about a way for the merchant to signal the payjoin server is untrusted and thus, output substituion is not possible. Would it suit you?\r\n\r\nI don't think this is what he meant, It's not that his payjoin endpoint is untrusted but that it may or may not be compromised and starts routing selective payments to a malicious destination.",
      "user": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645962951",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3457720507,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzcyMDUwNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457720507",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:43:15Z"
    },
    {
      "event": "subscribed",
      "id": 3457720508,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc3MjA1MDg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457720508",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:43:15Z"
    },
    {
      "event": "mentioned",
      "id": 3457720513,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzcyMDUxMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457720513",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:43:15Z"
    },
    {
      "event": "subscribed",
      "id": 3457720516,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc3MjA1MTY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457720516",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:43:15Z"
    },
    {
      "event": "mentioned",
      "id": 3457720521,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzcyMDUyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457720521",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:43:15Z"
    },
    {
      "event": "subscribed",
      "id": 3457720523,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc3MjA1MjM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457720523",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:43:15Z"
    },
    {
      "event": "commented",
      "id": 645963246,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTk2MzI0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645963246",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:43:55Z",
      "updated_at": "2020-06-18T11:43:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "@RHavar sorry to spam the conversation here, by thinking about it more (actually @nopara73 pointed it out to me), having an untrusted party contributing inputs make no sense as the output back to him would be equal to the sum of the input he contributed...\r\n\r\nKnowing no other party than the receiver can contribute input, such \"untrusted payjoin server\" would need the private key of the receiver to sign inputs... not so much untrusted then.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645963246",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3457722806,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzcyMjgwNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457722806",
      "actor": {
        "login": "nopara73",
        "id": 9156103,
        "node_id": "MDQ6VXNlcjkxNTYxMDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9156103?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nopara73",
        "html_url": "https://github.com/nopara73",
        "followers_url": "https://api.github.com/users/nopara73/followers",
        "following_url": "https://api.github.com/users/nopara73/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nopara73/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nopara73/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nopara73/subscriptions",
        "organizations_url": "https://api.github.com/users/nopara73/orgs",
        "repos_url": "https://api.github.com/users/nopara73/repos",
        "events_url": "https://api.github.com/users/nopara73/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nopara73/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:43:56Z"
    },
    {
      "event": "subscribed",
      "id": 3457722812,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc3MjI4MTI=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457722812",
      "actor": {
        "login": "nopara73",
        "id": 9156103,
        "node_id": "MDQ6VXNlcjkxNTYxMDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9156103?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nopara73",
        "html_url": "https://github.com/nopara73",
        "followers_url": "https://api.github.com/users/nopara73/followers",
        "following_url": "https://api.github.com/users/nopara73/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nopara73/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nopara73/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nopara73/subscriptions",
        "organizations_url": "https://api.github.com/users/nopara73/orgs",
        "repos_url": "https://api.github.com/users/nopara73/repos",
        "events_url": "https://api.github.com/users/nopara73/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nopara73/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:43:56Z"
    },
    {
      "event": "mentioned",
      "id": 3457722815,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzcyMjgxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457722815",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:43:56Z"
    },
    {
      "event": "subscribed",
      "id": 3457722817,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc3MjI4MTc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457722817",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:43:56Z"
    },
    {
      "event": "commented",
      "id": 645964066,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTk2NDA2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645964066",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:46:03Z",
      "updated_at": "2020-06-18T11:46:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Kukks I don't believe the \"Only payjoin server is compromised, not the payment server\" is a very realistic worry. Even if it was, the payjoin server has access to the private keys of the merchant to be able to contribute inputs so if it is compromised, output substitution or not, you lost money.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645964066",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3457729897,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1NzcyOTg5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457729897",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:46:03Z"
    },
    {
      "event": "subscribed",
      "id": 3457729902,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc3Mjk5MDI=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457729902",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:46:03Z"
    },
    {
      "event": "commented",
      "id": 645965753,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTk2NTc1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645965753",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:49:59Z",
      "updated_at": "2020-06-18T11:49:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Knowing no other party than the receiver can contribute input, such \"untrusted payjoin server\" would need the private key of the receiver to sign inputs... not so much untrusted then.\r\n\r\n> I don't believe the \"Only payjoin server is compromised, not the payment server\" is a very realistic worry. Even if it was, the payjoin server has access to the private keys of the merchant to be able to contribute inputs so if it is compromised, output substitution or not, you lost money.\r\n\r\nAs @RHavar pointed out above, some receivers might want to receive payments to their cold storage, and only use a small value hot wallet that the PJ server has access to.\r\nWith a trusted invoicing server, and a less-trusted PJ server, the idea is that the invoicing server creates the bip21 URIs with cold storage addresses, and the PJ server uses the hot wallet to contribute inputs.\r\nCompromise of PJ server would not compromise the cold storage, nor the future received payments (they would still go to the cold storage, or worst case rejected: DOS), only the hot wallet would be lost.",
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645965753",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3457743078,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1Nzc0MzA3OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457743078",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:49:59Z"
    },
    {
      "event": "subscribed",
      "id": 3457743080,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc3NDMwODA=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457743080",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:49:59Z"
    },
    {
      "event": "commented",
      "id": 645966893,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTk2Njg5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645966893",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:52:37Z",
      "updated_at": "2020-06-18T11:52:37Z",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> @Kukks I don't believe the \"Only payjoin server is compromised, not the payment server\" is a very realistic worry. Even if it was, the payjoin server has access to the private keys of the merchant to be able to contribute inputs so if it is compromised, output substitution or not, you lost money.\r\n\r\nI agree. Even if it is the case, the hacker would have to decide between:\r\n* emptying out available hot wallet funds\r\n* taking the next payjoin payment but risk detection before then\r\n* waiting for a big payjoin payment but risk detection before then x2\r\n\r\n",
      "user": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645966893",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3457751912,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1Nzc1MTkxMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457751912",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:52:37Z"
    },
    {
      "event": "subscribed",
      "id": 3457751914,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc3NTE5MTQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457751914",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:52:37Z"
    },
    {
      "event": "commented",
      "id": 645969528,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTk2OTUyOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645969528",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:58:22Z",
      "updated_at": "2020-06-18T11:58:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "@NicolasDorier \r\n> can you confirm your issue is solved by disableoutputsubstitution=true at the client level?\r\n\r\nI believe that solves the hardware wallet issue (referred above as (2)).\r\n\r\nRe issue (1), the merchant giving out a signed invoice, the user might still need to know that the receiver might be able to substitute output addresses if it is allowed in the spec at all. Still, for a sender point of view, if the client defaults to `disableoutputsubstitution=true` that seems good enough for me.\r\nHowever, ideally, the receiver should be able to disable output substitution and sign the fact they disabled it. One way to do that would be to signal this in the bip21 URI. If it was signalled in the URI, the client could also enforce that regardless of what the client might do by default. I guess this is similar to @RHavar's `pj-`/`pj+` or `os=1` idea.",
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645969528",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3457771742,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1Nzc3MTc0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457771742",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:58:22Z"
    },
    {
      "event": "subscribed",
      "id": 3457771746,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc3NzE3NDY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457771746",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:58:22Z"
    },
    {
      "event": "mentioned",
      "id": 3457771750,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1Nzc3MTc1MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457771750",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:58:22Z"
    },
    {
      "event": "subscribed",
      "id": 3457771754,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc3NzE3NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457771754",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:58:22Z"
    },
    {
      "event": "commented",
      "id": 645970117,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTk3MDExNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/645970117",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:59:46Z",
      "updated_at": "2020-06-18T12:00:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "@SomberNight ok, so why the payment server can't, in this case, act as a middle man (the `pj=` still point to the payment server) but just delegate the proposal creation to such server by forwarding the original PSBT, and add `disableoutputsubstitution=true` to the request.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-645970117",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3457776434,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1Nzc3NjQzNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457776434",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:59:46Z"
    },
    {
      "event": "subscribed",
      "id": 3457776435,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTc3NzY0MzU=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3457776435",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T11:59:46Z"
    },
    {
      "event": "commented",
      "id": 646030903,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjAzMDkwMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646030903",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T13:52:56Z",
      "updated_at": "2020-06-18T13:52:56Z",
      "author_association": "MEMBER",
      "body": "> sender forbids the receiver to modify his own output,\r\n\r\nI understand what it's saying but I think it's slightly ambiguous who \"his\" is.\r\n\r\nSuggestion:\r\n\r\n> sender forbids the receiver to modify sender's output,",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646030903",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 646042093,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjA0MjA5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646042093",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:06:44Z",
      "updated_at": "2020-06-18T14:06:44Z",
      "author_association": "NONE",
      "body": "@NicolasDorier \r\n> can you confirm your issue is solved by `disableoutputsubstitution=true` at the client level?\r\n\r\nYes, this solution is good enough and it is what we would use in Trezor if we decide to implement this BIP.\r\n\r\nThere is however the broader issue that the concept of output substitution as defined in the spec is half-baked. So far I see two uses for output substitution:\r\n1. For the receiver's output to match the sender's input script types in order to improve privacy.\r\n2. To allow the receiver to use the PayJoin transaction to make a payment to a third party.\r\n\r\nUsing output substitution for (1) is unreasonably complex. The proper solution is for the BIP21 URI to contain an `alt-address` field so that the sender may choose an address with a script type matching his inputs.\r\n\r\nAs for (2), I have my doubts as to how realistic and practical this scenario is, not to mention the issues with sending the payment to a different address than the one given in the invoice. Nevertheless, assuming it's practical, then the BIP should also define how to construct the message signed using the private key to the original destination address as @kukks proposed. \r\n\r\nTo summarize, `disableoutputsubstitution` makes the BIP acceptable, but there is room for improvement.\r\n\r\n@Kukks \r\n> Even if they could get it automatically signed the second time, you would need to communicate to the user to leave the device plugged in and most likely would want to show to user that it is being signed automatically for a special reason.\r\n\r\nIn standard situations I would expect the communication with the receiver to be pretty swift, so the second signing would take place within seconds and the user would perceive the whole process as one uninterrupted flow. If there are situations where it takes longer, then indeed the desktop software would prompt the user to replug the HW wallet if it had been unplugged and give an explanation as to why.\r\n\r\n> I don't think the small UX benefit (on probably a very small minority of HW devices that would add such a feature) is worth crippling Payjoin functionality.\r\n\r\nI suppose this is just a matter of opinion, because I would say that a niche feature is not worth crippling the UX and security (given that matching the script types can be solved by an `alt-address` field in the BIP21 URI).\r\n\r\nBTW the automated signing is in no way special to HW wallets, it can be implemented in any wallet. All I was saying is that we can do it in HW wallets *too*.",
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646042093",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3458303381,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1ODMwMzM4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458303381",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:06:44Z"
    },
    {
      "event": "subscribed",
      "id": 3458303389,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTgzMDMzODk=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458303389",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:06:44Z"
    },
    {
      "event": "mentioned",
      "id": 3458303397,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1ODMwMzM5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458303397",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:06:44Z"
    },
    {
      "event": "subscribed",
      "id": 3458303402,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTgzMDM0MDI=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458303402",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:06:44Z"
    },
    {
      "event": "reviewed",
      "id": 433310536,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMzEwNTM2",
      "url": null,
      "actor": null,
      "commit_id": "a3fbc6c6203ef7ded879626ee2fcb689195a7ec1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-433310536",
      "submitted_at": "2020-06-18T14:07:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "commented",
      "id": 646046553,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjA0NjU1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646046553",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:14:21Z",
      "updated_at": "2020-06-18T14:14:21Z",
      "author_association": "CONTRIBUTOR",
      "body": ">>  I don't think the small UX benefit (on probably a very small minority of HW devices that would add such a feature) is worth crippling Payjoin functionality.\r\n>\r\n> I suppose this is just a matter of opinion, because I would say that a niche feature is not worth crippling the UX and security (given that matching the script types can be solved by an alt-address field in the BIP21 URI).\r\n> \r\n> BTW the automated signing is in no way special to HW wallets, it can be implemented in any wallet. All I was saying is that we can do it in HW wallets too.\r\n\r\nYes I agree with @andrewkozlik, if we implement the sender in Electrum, I would want to set all params in such a way by default that the user would not need to be prompted a second time. This implies `disableoutputsubstitution=true`, only sane modifications to output amounts, and only sane changes in overall fee/feerate.",
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646046553",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3458337864,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1ODMzNzg2NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458337864",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:14:21Z"
    },
    {
      "event": "subscribed",
      "id": 3458337868,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTgzMzc4Njg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458337868",
      "actor": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:14:21Z"
    },
    {
      "event": "commented",
      "id": 646046738,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjA0NjczOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646046738",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:14:41Z",
      "updated_at": "2020-06-18T14:15:08Z",
      "author_association": "MEMBER",
      "body": "> then the BIP should also define how to construct the message signed using the private key to the original destination address as @Kukks proposed.\r\n\r\nThis cannot be done in a number of interesting use-cases:\r\n1) Paying to a cold address, and the deposit being re-routed to a withdrawing party.\r\n2) Directly opening an LN channel from a user deposit\r\n3) Any use-case that isn't single-signature\r\n\r\nI think output substitution is a pretty powerful primitive and would be a huge shame if removed as an optional extension for senders who bother to support it.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646046738",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3458339531,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1ODMzOTUzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458339531",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:14:41Z"
    },
    {
      "event": "subscribed",
      "id": 3458339535,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTgzMzk1MzU=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458339535",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:14:41Z"
    },
    {
      "event": "commented",
      "id": 646048525,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjA0ODUyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646048525",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:17:45Z",
      "updated_at": "2020-06-18T14:21:40Z",
      "author_association": "MEMBER",
      "body": "> I would want to set all params in such a way by default that the user would not need to be prompted a second time. This implies disableoutputsubstitution=true, only sane modifications to output amounts, and only sane changes in overall fee/feerate.\r\n\r\nCertainly your prerogative(complexity has cost and I'll likely do an implentation as you suggest to start) but there's no real reason the user has to be confronted twice and allow output substitution(well, outside of \"current hww firmware limitations!). An updated hww could certainly handle both cleanly(doing the same analysis as listed in the BIP).",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646048525",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 646056257,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjA1NjI1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646056257",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:30:19Z",
      "updated_at": "2020-06-18T14:30:19Z",
      "author_association": "NONE",
      "body": "> \r\n> \r\n> @NicolasDorier\r\n> \r\n> > can you confirm your issue is solved by `disableoutputsubstitution=true` at the client level?\r\n> \r\n> Yes, this solution is good enough and it is what we would use in Trezor if we decide to implement this BIP.\r\n> \r\n> There is however the broader issue that the concept of output substitution as defined in the spec is half-baked. So far I see two uses for output substitution:\r\n> \r\n>     1. For the receiver's output to match the sender's input script types in order to improve privacy.\r\n> \r\n>     2. To allow the receiver to use the PayJoin transaction to make a payment to a third party.\r\n> \r\n> \r\n> Using output substitution for (1) is unreasonably complex. The proper solution is for the BIP21 URI to contain an `alt-address` field so that the sender may choose an address with a script type matching his inputs.\r\n> \r\n> As for (2), I have my doubts as to how realistic and practical this scenario is, not to mention the issues with sending the payment to a different address than the one given in the invoice. Nevertheless, assuming it's practical, then the BIP should also define how to construct the message signed using the private key to the original destination address as @Kukks proposed.\r\n> \r\n> To summarize, `disableoutputsubstitution` makes the BIP acceptable, but there is room for improvement.\r\n> \r\n> @Kukks\r\n> \r\n> > Even if they could get it automatically signed the second time, you would need to communicate to the user to leave the device plugged in and most likely would want to show to user that it is being signed automatically for a special reason.\r\n> \r\n> In standard situations I would expect the communication with the receiver to be pretty swift, so the second signing would take place within seconds and the user would perceive the whole process as one uninterrupted flow. If there are situations where it takes longer, then indeed the desktop software would prompt the user to replug the HW wallet if it had been unplugged and give an explanation as to why.\r\n> \r\n> > I don't think the small UX benefit (on probably a very small minority of HW devices that would add such a feature) is worth crippling Payjoin functionality.\r\n> \r\n> I suppose this is just a matter of opinion, because I would say that a niche feature is not worth crippling the UX and security (given that matching the script types can be solved by an `alt-address` field in the BIP21 URI).\r\n> \r\n> BTW the automated signing is in no way special to HW wallets, it can be implemented in any wallet. All I was saying is that we can do it in HW wallets _too_.\r\n\r\nOne more use-case, similar to 1), is to have a store use p2sh-segwit as a default for compatibility's sake and the payjoin would substitute it to native segwit. As a merchant, this is awesome, as older, unwilling clients can stay using p2sh while allowing newer clients with payjoin support switch to a more efficient format.",
      "user": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646056257",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3458416785,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1ODQxNjc4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458416785",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:30:20Z"
    },
    {
      "event": "subscribed",
      "id": 3458416790,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTg0MTY3OTA=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458416790",
      "actor": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:30:20Z"
    },
    {
      "event": "mentioned",
      "id": 3458416801,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1ODQxNjgwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458416801",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:30:20Z"
    },
    {
      "event": "subscribed",
      "id": 3458416811,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTg0MTY4MTE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458416811",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:30:20Z"
    },
    {
      "event": "commented",
      "id": 646063587,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjA2MzU4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646063587",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:40:59Z",
      "updated_at": "2020-06-18T14:40:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "@instagibbs \r\n> Certainly your prerogative(complexity has cost and I'll likely do an implentation as you suggest to start) but there's no real reason the user has to be confronted twice and allow output substitution(well, outside of \"current hww firmware limitations!). \r\n\r\nI gave an example above for a valid reason. The merchant might have given the sender a signed invoice including the address, out of band. The wallet software has no way of knowing this. Hence, the only sane default is to either not allow output substitution or to prompt the user to confirm the updated output.",
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646063587",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3458470516,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1ODQ3MDUxNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458470516",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:40:59Z"
    },
    {
      "event": "subscribed",
      "id": 3458470523,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTg0NzA1MjM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458470523",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:40:59Z"
    },
    {
      "event": "commented",
      "id": 646067474,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjA2NzQ3NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646067474",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:47:06Z",
      "updated_at": "2020-06-18T14:47:06Z",
      "author_association": "MEMBER",
      "body": "Sounds like a reason to add the optional params and support both under\ndifferent modes of operation?\n\nOn Thu, Jun 18, 2020, 10:41 AM ghost43 <notifications@github.com> wrote:\n\n> @instagibbs <https://github.com/instagibbs>\n>\n> Certainly your prerogative(complexity has cost and I'll likely do an\n> implentation as you suggest to start) but there's no real reason the user\n> has to be confronted twice and allow output substitution(well, outside of\n> \"current hww firmware limitations!).\n>\n> I gave an example above for a valid reason. The merchant might have given\n> the sender a signed invoice including the address, out of band. The wallet\n> software has no way of knowing this. Hence, the only sane default is to\n> either not allow output substitution or to prompt the user to confirm the\n> updated output.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bips/pull/923#issuecomment-646063587>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABMAFUY3SDDQTJWT5XLFGODRXIRQXANCNFSM4NDBRK6Q>\n> .\n>\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646067474",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3458501476,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1ODUwMTQ3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458501476",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:47:07Z"
    },
    {
      "event": "subscribed",
      "id": 3458501480,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTg1MDE0ODA=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3458501480",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T14:47:07Z"
    },
    {
      "event": "commented",
      "id": 646210478,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjIxMDQ3OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646210478",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T17:41:20Z",
      "updated_at": "2020-06-18T17:41:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @RHavar sorry to spam the conversation here, by thinking about it more (actually @nopara73 pointed it out to me), having an untrusted party contributing inputs make no sense as the output back to him would be equal to the sum of the input he contributed...\r\n\r\nNah, it's pretty realistic. I can think of a few examples:\r\n\r\na) Dust elimination. i.e. my wallet has >1000 dust inputs in it (as I modified my wallet to ignore dust). I'd be happy to donate it to someone via payjoin, cause I know it'll fuck up analysis rofl\r\n\r\nb) Limited Trust. You outsource the payjoin server to someone who trusts you (but you don't trust them) and then after X time they ask you to comp them the amount extra they sent you\r\n\r\n\r\nc) Coinjoin Puzzle. (i wrote something about this and wrote a minizinc solver for it) but you could out source the payjoin server to someone who needs to consolidate. They add 2 inputs and 1 output. There's a technique (which is a bit of out scope) where the person can search for input amounts (if they have any) that would be ambigious so even if an analytics engine knows what they're doing, it's ambigious which inputs are which. It works extremely well [1] even with a small amount of inputs to select from.\r\n\r\n\r\n\r\n[1] In theory it should work amazing when you have even more amount of inputs, but my solver isn't very production worthy and can't handle a wallet with more than ~20 utxos. I'm kind of out of ideas of how to solve it, but an optimization expert probably has some.",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646210478",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3459372399,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1OTM3MjM5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3459372399",
      "actor": {
        "login": "nopara73",
        "id": 9156103,
        "node_id": "MDQ6VXNlcjkxNTYxMDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9156103?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nopara73",
        "html_url": "https://github.com/nopara73",
        "followers_url": "https://api.github.com/users/nopara73/followers",
        "following_url": "https://api.github.com/users/nopara73/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nopara73/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nopara73/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nopara73/subscriptions",
        "organizations_url": "https://api.github.com/users/nopara73/orgs",
        "repos_url": "https://api.github.com/users/nopara73/repos",
        "events_url": "https://api.github.com/users/nopara73/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nopara73/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T17:41:20Z"
    },
    {
      "event": "subscribed",
      "id": 3459372403,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTkzNzI0MDM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3459372403",
      "actor": {
        "login": "nopara73",
        "id": 9156103,
        "node_id": "MDQ6VXNlcjkxNTYxMDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9156103?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nopara73",
        "html_url": "https://github.com/nopara73",
        "followers_url": "https://api.github.com/users/nopara73/followers",
        "following_url": "https://api.github.com/users/nopara73/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nopara73/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nopara73/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nopara73/subscriptions",
        "organizations_url": "https://api.github.com/users/nopara73/orgs",
        "repos_url": "https://api.github.com/users/nopara73/repos",
        "events_url": "https://api.github.com/users/nopara73/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nopara73/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T17:41:20Z"
    },
    {
      "event": "mentioned",
      "id": 3459372406,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ1OTM3MjQwNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3459372406",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T17:41:20Z"
    },
    {
      "event": "subscribed",
      "id": 3459372407,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NTkzNzI0MDc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3459372407",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T17:41:20Z"
    },
    {
      "event": "commented",
      "id": 646213552,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjIxMzU1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646213552",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T17:47:28Z",
      "updated_at": "2020-06-18T18:12:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think output substitution is a pretty powerful primitive and would be a huge shame if removed as an optional extension for senders who bother to support it.\r\n\r\nI agree it's actually pretty cool. Like making a deposit pay out a pending withdrawal is actually super neat. That's something I'd actually very much consider doing.\r\n\r\nBut I'll just restate my earlier objection: It comes with some significant downsides for both the sender and the receiver. I think either *both* the sender and receiver should be able to opt out (or opt into) this feature.  Or it's simply just not included in the spec, and address adding it with a v2 (or even a different BIP like \"alt-addresses\" in the bip21 url)\r\n\r\nAnyway, I'm beating a bit of a dead horse and it's not my BIP. So I'll leave it :D\r\n\r\n\r\n",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646213552",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 646234902,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjIzNDkwMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646234902",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T18:31:08Z",
      "updated_at": "2020-06-18T18:31:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "A super minor issue:  I'd also like the receiver to be allowed to change any output amount (even if it's the senders) as long as the value goes up.  It allows the receiver the freedom to donate a few satoshis to the sender. This could be useful for two reasons, if the sender's change is like 0.09999 (like some wallet i know :D ) the receiver might feel generous and want to bump it to 0.1  (and now it'll look like a payment and not change).  Also makes it a tiny bit easier for the sender (at least wallets that want to disable output substitution) as you can apply the same rule (verify that amounts are `>= original.output`) and don't need to check whose it is. ",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646234902",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 646328682,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjMyODY4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646328682",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T22:04:38Z",
      "updated_at": "2020-06-18T22:04:38Z",
      "author_association": "CONTRIBUTOR",
      "body": ">  I'd also like the receiver to be allowed to change any output amount (even if it's the senders) as long as the value goes up.\r\n\r\nLooks ok to me, as long as there is some sanity check for the fee; at minimum, the absolute fee should not decrease.",
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646328682",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 646412370,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjQxMjM3MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646412370",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T03:17:18Z",
      "updated_at": "2020-06-19T03:17:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Looks ok to me, as long as there is some sanity check for the fee; at minimum, the absolute fee should not decrease.\r\n\r\nIs there something that (currently) stops the receiver lowering the absolute fee? (I very quickly scanned the BIP, but didn't see the rule that restricted it)",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646412370",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NzgwM2JmODMzNTc4MGFlMmZkY2MyNTZlNGVkZDgxYmI5NjgxMDg5ZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7803bf8335780ae2fdcc256e4edd81bb9681089d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7803bf8335780ae2fdcc256e4edd81bb9681089d",
      "tree": {
        "sha": "16d7a7627c264759cae0f8df63f40ecbd6a8b139",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/16d7a7627c264759cae0f8df63f40ecbd6a8b139"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 16d7a7627c264759cae0f8df63f40ecbd6a8b139\nparent a3fbc6c6203ef7ded879626ee2fcb689195a7ec1\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592540176 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592540254 +0900\n\nReformat the check list for sender\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7sPF4ACgkQZhh2PvCR\nhv41Cw//R1l5l1Qc49gZPICJN2RBUmabEELqnqdp5uZofU/jRxb3wSvVYq0M99VK\niuzJCUdDmZIzZDidHyn1/jVnkPrmDwW8g8+bY57H5n102VR1sYRf/Y88Ul0aHsQX\nYYIUhaCRpTDUG92nwT7VEL10umNZMlIK6v6+0dEU2Si/gLiFwGvVMrOdXHM2aCaY\n5DcaZaRgHDbo41yy+efg8JGtgkMy7ncb9P1T93CHvytTtb3bJ1YCkcv5roUr+ita\nH6HsAZBm5gc9742uTEKIRiz0il9gyfAeeHqb8To9pY604WJqNJjOqN+VAu0vNFiW\ndqGjjl1kdnL97J/sKVAMmScQhzwOtc+rhd5+rdn+51ufR6Qv5u1JBw2ZZuzDsIgH\nM3DdZRgjkb01rDJgDwu6VM4G9t+0tjd0k/ZElTi4ucLDBVLbTHsdfQZegH0aDm68\nyAgHnJSiXmKS3L1BITTpQUHmbwNk53yIdVG3EH0eMjI+Z0jRHxbNIdlxE8vpFKwp\nScaZv8TDo/vqiKc9ZpWdPVAn+AAp3iSpzqUAyS4LYszEs8kqZEX7VxTN0Yx60aK1\naCBr2amjvyQoYa7nRxjtR/Pq6+G8PclIca/n52zrqz9mlclraFmZGU3+IZjshrFi\nVsi3ny8gsfyffB48p2WL2mxAGHpdevpPwtKdT8cSlOdpqeXITC8=\n=phBi\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a3fbc6c6203ef7ded879626ee2fcb689195a7ec1",
          "sha": "a3fbc6c6203ef7ded879626ee2fcb689195a7ec1",
          "html_url": "https://github.com/bitcoin/bips/commit/a3fbc6c6203ef7ded879626ee2fcb689195a7ec1"
        }
      ],
      "message": "Reformat the check list for sender",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T04:17:34Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T04:16:16Z"
      },
      "sha": "7803bf8335780ae2fdcc256e4edd81bb9681089d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3460884243,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ2MDg4NDI0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3460884243",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T04:17:42Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6M2ExNmMyNGY1ZTg3NjE0YWM0MjE3MzkyNzI5N2YwZDAxM2ZkYzBmMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3a16c24f5e87614ac42173927297f0d013fdc0f2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3a16c24f5e87614ac42173927297f0d013fdc0f2",
      "tree": {
        "sha": "e61767e0fd9043b6d6d1a0a2b6c6a41c871538d0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e61767e0fd9043b6d6d1a0a2b6c6a41c871538d0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e61767e0fd9043b6d6d1a0a2b6c6a41c871538d0\nparent 7803bf8335780ae2fdcc256e4edd81bb9681089d\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592540617 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592540617 +0900\n\nAdditional note for HW\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7sPckACgkQZhh2PvCR\nhv4nFRAAt+nT5HECpJv7BnXg9ThKQfhkjBv+heVGbEXQt30q/uHgBPbM9Y8cmgYm\n8BUcJ6U4ggNuo6INHx8d+jS6HQp8nClhgo+rEjXiuykEDTC2tcyU05zWCxqEzSj+\npFxLhwQrk/q7tDqhiCDeNhOyM92HvuvVJYKyj0rBVxBfX4hUStQ4o8su8SXjLHmR\nxctw6e5uCH7L8yETrI0M1/2h2UF/5ssp8AtnC+shCSDpDZixnhu2P1YuX57Sv6LX\ngfr/4ZlYiX/A/k3RPmFM8Nyh2k0D8TkL7Sxlm0XjdqUSsgtWNZSBkWWlZsrnTZSG\nloeGpnoujwlwWXWnuyqmr+kifLzDoHGNNDxKHcyd18Ftytp5HRfoYBh2oypP7Sy0\n5ON4MxcGx7bXBCJY8LAf/0avofiDrdyb50fYRH+B0w1a/T0tHuns6t8RDweKqRTy\n6SR5euXgdtSoVwDryGK+icJfgedaKpCv/rTUzaMwuZxvrMvsDPMkK2A/xvjBT9zd\n6nB9ovsYuRu63iP+IV+R/Vij9R2QNur2GG90OzGuI6dnyswbAXrljRL2ZO+YIDzO\naX0eLvlPWVjmDnf1PugzazfP15K3sFoSYxUUNGkzpmrzF4GJNl3nlh2TJj1l9tKl\n1don7ZOpS8gGnKfCwmCYU5+FFL8iTvbtPea96Pg9V1LmMi0sBFY=\n=qAIU\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7803bf8335780ae2fdcc256e4edd81bb9681089d",
          "sha": "7803bf8335780ae2fdcc256e4edd81bb9681089d",
          "html_url": "https://github.com/bitcoin/bips/commit/7803bf8335780ae2fdcc256e4edd81bb9681089d"
        }
      ],
      "message": "Additional note for HW",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T04:23:37Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T04:23:37Z"
      },
      "sha": "3a16c24f5e87614ac42173927297f0d013fdc0f2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OTNjNjU1YTE0OTViNjFhZmI5ZGUzMDk3MGRiOTM1Mzg3MjE0NWU0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/93c655a1495b61afb9de30970db9353872145e42",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/93c655a1495b61afb9de30970db9353872145e42",
      "tree": {
        "sha": "69b082dc3db599ab0d7116988e0302aaee67cb5f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/69b082dc3db599ab0d7116988e0302aaee67cb5f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 69b082dc3db599ab0d7116988e0302aaee67cb5f\nparent 3a16c24f5e87614ac42173927297f0d013fdc0f2\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592540654 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592540699 +0900\n\nFix typo\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7sPhsACgkQZhh2PvCR\nhv6y/g//WGLmSv2qY7tfTNT11u4E7WBwHAAYsBzbNv8kVXLRG3ggIQuwhjnRla+p\npSwwQAhcqyS6b1U40dAerYUZIgni6A2kng3yjTLmmFBbUA6YXb307B2YqQyFsM0q\nSooMVKCESSl/318L6irBzROHvGEQosm8VAK0KJTPI2fm3AuKHSAf1VPvYd86ujkb\nXRMZx9jePqUyS0LqeVg/BwG3KwOemwfqpLKnrEAsg44Om47Sqz0hyU6EN9GprdAC\n53+P1RwDohQx8DODD+Ancly9rjAiozs3b0dedfEJJMNapzyog7zEZhjSTBMv/9zH\ngsU4CcWS/v8+gHxM1BjmisZgZovxEHWU9qSTrl9B161A/qLbGV19YICVjOoLg31i\nbrUMThRVWzeWUSvyzRR9aNieyDGTBCYDgdGadY9CMpjuDudWntw2zrJCuJ8xDXH7\n5q+Nj5SAoItTJcG9RAOaZupyE3/W5ca3IK4E4lVenx5XQgCdJzsW3Rv5AZSw8xVb\nVyShJ5axF1cPoUi30gmEv49uKomUWGJv2Jof8A6nHh61Zu7MfZr5yFc26BA6R0HL\n1NVNReF4Om+zccxtyMyq1IoCkrBi2ikAN0YxV0COeWtLypf6ZQZv3OcXCDYDze9I\nGkt7oU4lfd5Ov6qhV2mKyh25AeDYNc66jTWSFPpOID+/iYE5Hiw=\n=2lmK\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3a16c24f5e87614ac42173927297f0d013fdc0f2",
          "sha": "3a16c24f5e87614ac42173927297f0d013fdc0f2",
          "html_url": "https://github.com/bitcoin/bips/commit/3a16c24f5e87614ac42173927297f0d013fdc0f2"
        }
      ],
      "message": "Fix typo",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T04:24:59Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T04:24:14Z"
      },
      "sha": "93c655a1495b61afb9de30970db9353872145e42"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3460895460,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ2MDg5NTQ2MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3460895460",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T04:25:08Z"
    },
    {
      "event": "commented",
      "id": 646433107,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjQzMzEwNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646433107",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T04:51:28Z",
      "updated_at": "2020-06-19T04:55:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "@RHavar @SomberNight the sender can use minFeeRate to put bounds on how low the fee rate can be.\r\nWhy putting a limit on absolute fee? If the objective is to prevent the receiver to direct fees into his own pocket, this is solved by using minFeeRate == originalFeeRate. (or minFeeRate slighlty below originalFeeRate if no fee output)\r\n\r\nThe absolute fee can realistically be lower, if there is an address substitution to a smaller output. (say going from P2SH-P2WPKH to P2WPKH, which save 12 vbytes)",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646433107",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3460936251,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ2MDkzNjI1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3460936251",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T04:51:28Z"
    },
    {
      "event": "subscribed",
      "id": 3460936254,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NjA5MzYyNTQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3460936254",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T04:51:28Z"
    },
    {
      "event": "mentioned",
      "id": 3460936256,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ2MDkzNjI1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3460936256",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T04:51:29Z"
    },
    {
      "event": "subscribed",
      "id": 3460936257,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NjA5MzYyNTc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3460936257",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T04:51:29Z"
    },
    {
      "event": "commented",
      "id": 646438290,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjQzODI5MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646438290",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T05:10:47Z",
      "updated_at": "2020-06-19T05:10:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "@NicolasDorier I agree with you. I was only asking because of @SomberNight's comment, which made it sound like such a restriction currently existed ",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646438290",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3460970135,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ2MDk3MDEzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3460970135",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T05:10:47Z"
    },
    {
      "event": "subscribed",
      "id": 3460970137,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NjA5NzAxMzc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3460970137",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T05:10:47Z"
    },
    {
      "event": "mentioned",
      "id": 3460970141,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ2MDk3MDE0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3460970141",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T05:10:47Z"
    },
    {
      "event": "subscribed",
      "id": 3460970143,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NjA5NzAxNDM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3460970143",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T05:10:47Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NmQ0YjQ5MWIzMTU1NGI3OGQzYzY2MjQ4OWNhM2VlNzQ2ZWM5NDY1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6d4b491b31554b78d3c662489ca3ee746ec94651",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6d4b491b31554b78d3c662489ca3ee746ec94651",
      "tree": {
        "sha": "414332d49b2890cd27de95b7a0d72a5de400b521",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/414332d49b2890cd27de95b7a0d72a5de400b521"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 414332d49b2890cd27de95b7a0d72a5de400b521\nparent 93c655a1495b61afb9de30970db9353872145e42\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592544411 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592544411 +0900\n\nSimplify sender's implementation, fix typos\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7sTJsACgkQZhh2PvCR\nhv40Lw//WoDBPH33IIx0AlRlA7j0p0GViTzMsqogmi9xWwqGwRgI2Crt+/4PCw/o\nvr2Y1sy/ES7ePVK7hoE0UoABA4Pu/2NvMZ+wSsfRoaulCpyJowoXYSeqepraAean\n4fmax9CaZ4ZxR9FmfBfZC9ocpxdMsvxXDKlgOCHL4XJZB9Dl180ENtbNUE4b8mk5\nZBuePn/a8VdnTlAXzzU3jDfZKWItr/Is2CVBWAtscLEm4MO9M2fTUNOztslSYXm4\nVblhJ4QySFpxnxiirYcv+nLzvtFwtVkSdfxyLVUcuGmccWeGE7rmLutix/T8eNBU\nFL+5lUX0bFRfsuhL0fgIXzrmIv8aUXJQ25XFjmZN4PKprK2wBCuE4G2NyPi4Ohrr\nwfosYtXT+eqdhP+a9vfqKoFZXM1r3WOenAqXAYLN7olnLCjF6yyOSsx8KEKqJEka\nSP5pwiY4JPB2sIKajnq8i7XP2hShmRc6dcCeR6MWTFsJRJhC8POW/+n77gwqWKko\nmPDZKU+XHSPLL0QOXvaZHeUnyfR4sqOh6WBSWRbpV79xrE+IwF7pNddhmuzeA/t5\ngRG3X/H9+i1CFvnMY3f6xrLJNjTUBkf1krDqDpzGLDme0XBtVHAsQzQVg74rpvK2\nH4XKNI4f1ROntbK62YM6/TZhffTdMFXH91NIGk/9hwww3R6y9O4=\n=tDOM\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/93c655a1495b61afb9de30970db9353872145e42",
          "sha": "93c655a1495b61afb9de30970db9353872145e42",
          "html_url": "https://github.com/bitcoin/bips/commit/93c655a1495b61afb9de30970db9353872145e42"
        }
      ],
      "message": "Simplify sender's implementation, fix typos",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T05:26:51Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T05:26:51Z"
      },
      "sha": "6d4b491b31554b78d3c662489ca3ee746ec94651"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZTI3NzhiYWJmYjk5ZWYwMTEyNzBmY2RhMmUyOWNlMDc2ZDM4MzUyNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e2778babfb99ef011270fcda2e29ce076d383527",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e2778babfb99ef011270fcda2e29ce076d383527",
      "tree": {
        "sha": "76d13dc9b82b3ce290639be904660dc0e52e35e0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/76d13dc9b82b3ce290639be904660dc0e52e35e0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 76d13dc9b82b3ce290639be904660dc0e52e35e0\nparent 6d4b491b31554b78d3c662489ca3ee746ec94651\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592544679 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592544679 +0900\n\nadditional comments\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7sTacACgkQZhh2PvCR\nhv6JGQ//Y5NNsoQYfRxlV2X/2EALnasYB4d4W1bdG1/xn6A+LYW9SnpX7AecCc96\nmgO6wkvCfOziGRVqtDXmIfpeEgk7BQd/BPwYX7qJ1hlwIHVH/s/2dalNKWOXG9pf\nby5uTaX3prCyBhpxRcKD2K+YxzT9janU2JrmfMh3iNUE1FDiNaMRInyj9ts5UeX5\nkZtxeI52HB+ckUn5l+q3l5SLbXbw2WS22o4WzztqKsWM7ugTKCaV53XyE2EDU0UO\nQt/Pnn0G6MBMuHWHdrVSqG/+xlaJKMcr5MZ2xoLO1F3PhaP4+5JpqgYXBsWqIjtz\nLUZGVMbu1sUf2HZL69DcdBGjVqSkVMC1krJi10M7rMpwKjNMJjvKfJGE7asNVCwp\n6IQYRn+PQFhdY2x+xSH9Yu9RDyckAWF2SVyeAZqMjtxbuzNJ//HSWQEzcwFF60tY\nzJCgZXu/ZXmKgOFqxPEyQPkxZ4zrYmQ8VIMxXIVPDyp6AV5bpL9yxmnPYcMLkxSo\n1SQawwIitPuW53G2yvAiNA3nZ3VOnXyeVsgYtTRL0F1nOBcIbqnCUqco6VG9kTV5\nWS0or4Snlv+AeQ/tsI8rtHIChPI/kuSJnECLmohRSAOT7g5do7gPxCaLnXapQ5Ok\nYsBUKLhqX8hiFlFF4EOcYHNNQKXnxWE8PuNBBan6wHY5F/2nDvs=\n=ECAr\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6d4b491b31554b78d3c662489ca3ee746ec94651",
          "sha": "6d4b491b31554b78d3c662489ca3ee746ec94651",
          "html_url": "https://github.com/bitcoin/bips/commit/6d4b491b31554b78d3c662489ca3ee746ec94651"
        }
      ],
      "message": "additional comments",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T05:31:19Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T05:31:19Z"
      },
      "sha": "e2778babfb99ef011270fcda2e29ce076d383527"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YmQ5NzQwMDc0MzM4NTkzYzU5NDM5NGJlMzY1YzNiZWQxYjZjYzNkZg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/bd9740074338593c594394be365c3bed1b6cc3df",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/bd9740074338593c594394be365c3bed1b6cc3df",
      "tree": {
        "sha": "86b8f0a7bf17ab3b82983de1c3cbd74689a9984f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/86b8f0a7bf17ab3b82983de1c3cbd74689a9984f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 86b8f0a7bf17ab3b82983de1c3cbd74689a9984f\nparent e2778babfb99ef011270fcda2e29ce076d383527\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592545667 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592546419 +0900\n\nIntroduce pjos=0\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7sVHMACgkQZhh2PvCR\nhv6OqBAAuI3SzKHM7XRYsp/3O4a5KOBFFM+7Y72BCL1EjtNeO0Bv3bXJU2A90vdN\nu8pZU4mYxj3d7VLilChyVmcLnsA2i5g+IxcYvLUmRjEfWyz4cEWAb3l0anKH/erV\nieCXmn0f2c3aq+PFK75//KjAFDvnyOKMFbFkX2lMKsK/PSax72J+ve94rHSZ6qhQ\nQ40u9FEoiI4Tf3bb06EJF8SLJNcx4dlrAwIjQxijy9nTLm1bywyAoDAcol+9oRzr\n0Q07txCTg0dLi446PRewMfrmjgIgIvU3V64HVq8Ac69vNo75BVgwNZVL7799Vxw/\nU0oS2F7feLRazXHq3zSYy4bgAobr/Y4PNT6WvNWzoHgjNvW2SfKXxpoDtObCyMLH\nzpZwgP4cMWJPoFr0BbY/6/NCp/rZJhdwSWxKylTkTKxhPzbZC3dbgKmd9I695Y7L\n0KyKhHOo+U8c6LRn6EAiMLJTVOFX5b/0J+BzQBM3mlWS5tuJQ2vyWn7XEy3A43mo\nq2Zwuh996nBJ9iEvm0OsnX2K4cmZDTaRwq48n5ZMHPIcN5KRCahLO6ZGbohbZdJ/\ndSbIGYSpDgC7tfU6PD+sxXLgNX3VR/W1aXC/eKfUZMoOof7kTyaqNJksj9eB1Iqv\nma4IBqoQvhBXM0zVmycllJeqtUvWJNQR0ENwBhHY3O0Fvt58lEM=\n=ntF+\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e2778babfb99ef011270fcda2e29ce076d383527",
          "sha": "e2778babfb99ef011270fcda2e29ce076d383527",
          "html_url": "https://github.com/bitcoin/bips/commit/e2778babfb99ef011270fcda2e29ce076d383527"
        }
      ],
      "message": "Introduce pjos=0",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T06:00:19Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T05:47:47Z"
      },
      "sha": "bd9740074338593c594394be365c3bed1b6cc3df"
    },
    {
      "event": "commented",
      "id": 646452017,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjQ1MjAxNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646452017",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T06:01:05Z",
      "updated_at": "2020-06-19T06:01:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "@RHavar I added `pjos`, you seems having strong plan about it and it is not like it is difficult to implement. Please review.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646452017",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3461067412,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ2MTA2NzQxMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3461067412",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T06:01:06Z"
    },
    {
      "event": "subscribed",
      "id": 3461067414,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NjEwNjc0MTQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3461067414",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T06:01:06Z"
    },
    {
      "event": "reviewed",
      "id": 433825220,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODI1MjIw",
      "url": null,
      "actor": null,
      "commit_id": "bd9740074338593c594394be365c3bed1b6cc3df",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Sweet. Thanks. I am happy with the BIP. Might want to consider https://github.com/bitcoin/bips/pull/923#issuecomment-646234902 but don't see it a big deal either way",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-433825220",
      "submitted_at": "2020-06-19T06:12:17Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NTQ5MTA3OTMzY2ZhMWMzMDgxZmNhMjQxZjUwMGIwMmMwZWUzYjM1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/549107933cfa1c3081fca241f500b02c0ee3b353",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/549107933cfa1c3081fca241f500b02c0ee3b353",
      "tree": {
        "sha": "2986285df945fe2eddb6d165afc64844da94a310",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2986285df945fe2eddb6d165afc64844da94a310"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2986285df945fe2eddb6d165afc64844da94a310\nparent bd9740074338593c594394be365c3bed1b6cc3df\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592547562 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592547562 +0900\n\nAllow outputs to be increased\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7sWOoACgkQZhh2PvCR\nhv5TCRAAhy2i7Z+zSocNgYNmuCn2miM9SfSUjC+Cu+Pbh0baROaiyg82mL3Oz7ke\nSvn10JwMTdogosHXlT2nawoguq38nt2VuYWmT1G79UzoaRFhKv58vlPdjI4LD3kq\nhi4CTahgnN7NWo+TYteCMEodkVVfUOtWRxI99TUXSagiHK9ctkr9vgtLut4Nc4mO\nU7PrYcnd0JUdpbrOgC6hw8CAmLMELH+bLKyPIwBQmkQ1CXRxiLRFBHbFL6TwVmD1\nVi7eAgd6z8vl9kuTaKAhaZjUl3bM4WaJkkmlQrTgOHHOF7OmK1k0vqZZARPOvw0h\nHHGwLNPFUpDNYRcNn8ZuDJMfLeyHf+AJXtp+5VijnSSLuaCccRkdtcjZXc1OWr9O\nmVNqsyEOW8KCrzN7WnwNM4p/pPJBAsgdKAuDJ/6vZLkZA6pfr6oTbrxJqSsCn6/s\nkegignbp3aac7R2a+tvKHptwNLloT5Xh1JDXkEZXzsIsK5zSahL8X3h5Wfsdvp+i\nSQRKW1Aas9PrFaUUg0t7oyZevvA0uF60ShkMmLwzeihWzm2zuugv11rf5B6RIDpw\nc90EkWzppIzWcRA8C15evzI7GYN11OhBalCXINqdsvFH5P6bqS7k45tXXQQdXk1F\nrn/psF8ePhWH5F1dl+dKjqxFLhdLkUfW0W0Re/y60aeTfQpkwzc=\n=aLIj\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/bd9740074338593c594394be365c3bed1b6cc3df",
          "sha": "bd9740074338593c594394be365c3bed1b6cc3df",
          "html_url": "https://github.com/bitcoin/bips/commit/bd9740074338593c594394be365c3bed1b6cc3df"
        }
      ],
      "message": "Allow outputs to be increased",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T06:19:22Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T06:19:22Z"
      },
      "sha": "549107933cfa1c3081fca241f500b02c0ee3b353"
    },
    {
      "event": "commented",
      "id": 646457834,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjQ1NzgzNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646457834",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T06:19:52Z",
      "updated_at": "2020-06-19T06:19:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think it is a good idea to let output to be increased. Please take a look at the implementation reference as well.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646457834",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 646462236,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjQ2MjIzNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646462236",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T06:32:44Z",
      "updated_at": "2020-06-19T06:33:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "@RHavar @SomberNight  I think it is a good idea to prevent the receiver from pocketing fees. While it is possible via a good value of minFeeRate, it should actually be enforced at protocol level.\r\n\r\nI was thinking we could just ignore the case where an output become smaller because of substitution, but that may show up if the sender's fee are round. :/\r\n\r\nThe check need to be simple, thinking about it...",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646462236",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3461139779,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ2MTEzOTc3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3461139779",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T06:32:44Z"
    },
    {
      "event": "subscribed",
      "id": 3461139781,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NjExMzk3ODE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3461139781",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T06:32:44Z"
    },
    {
      "event": "mentioned",
      "id": 3461139782,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ2MTEzOTc4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3461139782",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T06:32:44Z"
    },
    {
      "event": "subscribed",
      "id": 3461139785,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NjExMzk3ODU=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3461139785",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T06:32:44Z"
    },
    {
      "event": "commented",
      "id": 646464511,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjQ2NDUxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646464511",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T06:38:42Z",
      "updated_at": "2020-06-19T06:58:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "What about this: Allow the absolute fee to fall as much as the size of the payment output at the original transaction fee rate? (As in the best case scenario, receiver might decide to just completely remove his output)\r\n\r\nI would like to make it easy to review and check. That's not perfect, but good enough.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646464511",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "commented",
      "id": 646473514,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjQ3MzUxNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646473514",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T07:01:56Z",
      "updated_at": "2020-06-19T07:02:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "@RHavar @SomberNight thinking about it, it is not worth the pain. In case of output substitution resulting in smaller output, the receiver should just give the money back to the sender.\r\nI will add a condition: No drop in absolute fee.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646473514",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "mentioned",
      "id": 3461217373,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ2MTIxNzM3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3461217373",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T07:01:56Z"
    },
    {
      "event": "subscribed",
      "id": 3461217374,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NjEyMTczNzQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3461217374",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T07:01:56Z"
    },
    {
      "event": "mentioned",
      "id": 3461217377,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ2MTIxNzM3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3461217377",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T07:01:56Z"
    },
    {
      "event": "subscribed",
      "id": 3461217379,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NjEyMTczNzk=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3461217379",
      "actor": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T07:01:56Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YzQ0OWMwMTlmNjExMmNmYjJhY2YxNmQ4MTI0MjllOWRmMGYxNDdlOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c449c019f6112cfb2acf16d812429e9df0f147e8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c449c019f6112cfb2acf16d812429e9df0f147e8",
      "tree": {
        "sha": "37f88abd53cae6fa3d61dd4a8426e67077e76e41",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/37f88abd53cae6fa3d61dd4a8426e67077e76e41"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 37f88abd53cae6fa3d61dd4a8426e67077e76e41\nparent 549107933cfa1c3081fca241f500b02c0ee3b353\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592550379 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592550379 +0900\n\nDo not allow decrease in absolute fee\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7sY+sACgkQZhh2PvCR\nhv4+Og/+IHji3Xj/VpHVaXFi/ZRBC8FhYJZTrt4sQzzUVLIYBFbnX+tDhubRm19z\nd/m1AtVQ7OwZv8AmOy08fJACI8Is4vMU0onkMIiG6R9uK1qq1oZN6y2Xe7MPyFHg\nkPIH5TGn5Z+GK43Jd1v5bjLpdqdUA4XGIITFNy8JsmOidv6u2gOtin6dGssz7sHh\nBdLbgQQJMRs8QNFa1wWPdAOU8tWWf0m+774SadxvJgZ0tcSexy3ojrdNOmuea7sB\nBxWwaMda8j3IsMyxelknmsTbcMxXOIBFPJL7wfJK6UqCuBZg3Dv2IKrIBb/GIfkC\nyMvpHmOtzvKOJtz61zkOjzf080rkphQf6QzhPyT9ye/m+Znt4ztA7+pTzc7oN3wc\nUz4ywEx1S5C7TpNErscAKEIqu9FlxtnD/Mgi8/3Mf5UZmrQAPdO6H+C70uU+v8tw\n14GimggKOOtQdKVibOatvW6Vp/majQcccGuQ9pOMjl/8j5xMEy3RaH3mfwkxvJap\nnet/BO0R44OyOxOQvLZnFxqpl0NpDeYxoOCJGTcm9SZZkHHeyrASWWmHKH85hn3t\ng+7xwVrBx1UVzueUHZUuKd/NgFaoOviXkhWiArft4cB219diHV3oZSpv/VeQuLYi\nYIsq+Yw/Fw2ReEe5c2b/UxVsud7y2aKBmj1Siv6hbUBWcLcFJac=\n=mIgO\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/549107933cfa1c3081fca241f500b02c0ee3b353",
          "sha": "549107933cfa1c3081fca241f500b02c0ee3b353",
          "html_url": "https://github.com/bitcoin/bips/commit/549107933cfa1c3081fca241f500b02c0ee3b353"
        }
      ],
      "message": "Do not allow decrease in absolute fee",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T07:06:19Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T07:06:19Z"
      },
      "sha": "c449c019f6112cfb2acf16d812429e9df0f147e8"
    },
    {
      "event": "commented",
      "id": 646475479,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjQ3NTQ3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/646475479",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T07:06:33Z",
      "updated_at": "2020-06-19T07:06:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "please review.",
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#issuecomment-646475479",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/923"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZmVhYzNkMDAzNWIzMmRjYzhkNjZkNDE1ZmU5NTljNTMzYjM4ZDIyOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/feac3d0035b32dcc8d66d415fe959c533b38d228",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/feac3d0035b32dcc8d66d415fe959c533b38d228",
      "tree": {
        "sha": "f0c6c73f7a1639d27e2bbe0a2cf678214536c476",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f0c6c73f7a1639d27e2bbe0a2cf678214536c476"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f0c6c73f7a1639d27e2bbe0a2cf678214536c476\nparent c449c019f6112cfb2acf16d812429e9df0f147e8\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592550749 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592550749 +0900\n\nUpdate special thanks\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7sZV0ACgkQZhh2PvCR\nhv7Xdw//a/FGiuv433ZwbzXMUCRSf6YjHUG7TcdtfkpJtaOxxeGRfkHq30PpRHfo\nrKNT28KGRZEnQJucPkky9vAaVa6pTd7eKBb/yTxCABt8ju5KdfnXxsB2ZCFDe5Vx\nflDJilpedv+JAxnBA7tDUJhbxVo70UKvDnxwIHIa4OFB2wL/3mPo5U306zCkRKlZ\nG1DrCTikVemkRcOJRrOxdBueHgBlqR4+7D6f7yPm/rzfDuebD15C84AQfGG5QHMT\nUD1qnZjOXdfoUmmjZMkSylhkI4cBfVW9hm60BHCCEV/eBFmiLxttr7A8qQHcjNsw\nFod+tOdKiiCPNLtmjJUI7i339P7thEI+bJnaSlszsYGQKlwWzxzoZRNfLspLJjVM\nLC5uVtgHgdoS34qxsCPdiYhnhdS6eups9t4/LBsnX5g+zgxbSlxFcYAfQoJNNlsM\nFva7aq8ngsp/LNjratTYG1bFrHt0UXQ/o+t2tKbdn1Gh3OKVj3JGUu+8mCtIAZSs\n/ynHAw/i2AiCId31D4fhEKpxzf3Dq6h56GAxnmOmq91Hi0BaqaIRviBDBlldd2lL\n/E6LSbjm4g6NzJzmMi1FaAlYkf9uQuvQM7slQcFncbZYTVxkQKlUdQKARYz84009\nMeOPA75o4h+Vtq7pGRtnyqFMGIsO3yHiGxsNQ3zgc8lp6dYjdf0=\n=8KJj\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c449c019f6112cfb2acf16d812429e9df0f147e8",
          "sha": "c449c019f6112cfb2acf16d812429e9df0f147e8",
          "html_url": "https://github.com/bitcoin/bips/commit/c449c019f6112cfb2acf16d812429e9df0f147e8"
        }
      ],
      "message": "Update special thanks",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T07:12:29Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-19T07:12:29Z"
      },
      "sha": "feac3d0035b32dcc8d66d415fe959c533b38d228"
    },
    {
      "event": "reviewed",
      "id": 433960157,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzOTYwMTU3",
      "url": null,
      "actor": null,
      "commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-433960157",
      "submitted_at": "2020-06-19T10:11:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "reviewed",
      "id": 433967624,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzOTY3NjI0",
      "url": null,
      "actor": null,
      "commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-433967624",
      "submitted_at": "2020-06-19T10:23:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "reviewed",
      "id": 433980232,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzOTgwMjMy",
      "url": null,
      "actor": null,
      "commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-433980232",
      "submitted_at": "2020-06-19T10:45:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "reviewed",
      "id": 434051739,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MDUxNzM5",
      "url": null,
      "actor": null,
      "commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-434051739",
      "submitted_at": "2020-06-19T12:52:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "reviewed",
      "id": 434072057,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MDcyMDU3",
      "url": null,
      "actor": null,
      "commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-434072057",
      "submitted_at": "2020-06-19T13:21:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "reviewed",
      "id": 434074173,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MDc0MTcz",
      "url": null,
      "actor": null,
      "commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-434074173",
      "submitted_at": "2020-06-19T13:24:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "reviewed",
      "id": 434074712,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MDc0NzEy",
      "url": null,
      "actor": null,
      "commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/923#pullrequestreview-434074712",
      "submitted_at": "2020-06-19T13:25:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/923"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NWU0Y2M2ZDgxMjlhOTRjNjUzMTg3YzM4YzBiYjRhMTEyMjcyMmE2MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5e4cc6d8129a94c653187c38c0bb4a1122722a60",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5e4cc6d8129a94c653187c38c0bb4a1122722a60",
      "tree": {
        "sha": "33ba250c850f4886d6b5cb2b6a0726f62fd4d693",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/33ba250c850f4886d6b5cb2b6a0726f62fd4d693"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 33ba250c850f4886d6b5cb2b6a0726f62fd4d693\nparent feac3d0035b32dcc8d66d415fe959c533b38d228\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592790982 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592790982 +0900\n\nFix grammar, additional note on ability to increase output of the receiver\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7wD8YACgkQZhh2PvCR\nhv54dRAAlNAcEzuNCYzUz82lr0eiFauzlPnDEYc39XxNgCs+LpexH3o4qVQx9DAw\nJBO5I1GPWYtixAGpugN+UA1o8kA/weNsDorKDmsg4hNwP/heq3If7e2O5EsSHWa0\n/BsxDtYI9OelL+rHOrah04LySSA501abxlFdidrpnos3+2D+jn7qbUX7qCts8taM\nAuSTFU9qh7fznBtP8P8lJDQ0ml+FKgTWEwuUCCTHOR36S/eCMU8J3YiVFESJsmKq\nD3rTY51YerRs9Li2JBiZ8uiMfdaO9E994IO0eaZOKwdCILbAeahPFNH9YRQiuhBI\nSA4+XBZg3UlGyUqLhtp2OD/PQXPB2O/E3TOnXQOP8kYBfbSyrBOCchm5pwMdw6IF\neHIq7KVqdFdQpCP++tYSB/jk+H4kny8IB4D16gA+/Zb9G5QKFFm/SAQPDF+CHNj8\nWmLLhTUGrt+MuwXjUaPJPS7K5iItkee14iWBlZSs6Ei68cYOhoEq3aQN4H8GxjO0\ni1eoIu1cEN98IQLffzoXtdDXv5XB1CY4b0hNtNz8+GYip8khRu5DyC5NkBxfR9bD\n8apmpsltPUNSgX4n8w5ry0OmDY6YxsktFExLev7WafWxAWDA3DWnhkXpr47uz1AP\nv1CcCz95hQlPPRHWHKK5d56yjmy2SKLyoJpAhARH9NK4hYu8ZAA=\n=UhCK\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/feac3d0035b32dcc8d66d415fe959c533b38d228",
          "sha": "feac3d0035b32dcc8d66d415fe959c533b38d228",
          "html_url": "https://github.com/bitcoin/bips/commit/feac3d0035b32dcc8d66d415fe959c533b38d228"
        }
      ],
      "message": "Fix grammar, additional note on ability to increase output of the receiver",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-22T01:56:22Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-22T01:56:22Z"
      },
      "sha": "5e4cc6d8129a94c653187c38c0bb4a1122722a60"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZTY0MThlNWE3NjlkNzYzNTgyNGYyYWQxYmNmZTRjNzIwYmU4OTdjMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e6418e5a769d7635824f2ad1bcfe4c720be897c2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e6418e5a769d7635824f2ad1bcfe4c720be897c2",
      "tree": {
        "sha": "4afa2f7b070e74036e6f4c96ac1621ea0bba2738",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4afa2f7b070e74036e6f4c96ac1621ea0bba2738"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4afa2f7b070e74036e6f4c96ac1621ea0bba2738\nparent 5e4cc6d8129a94c653187c38c0bb4a1122722a60\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592791088 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592791120 +0900\n\nFix missing word\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7wEFAACgkQZhh2PvCR\nhv7HAQ//c3yUfpaLkobcLho+mnPJsZ/c8Tz9UX9FS3KqC2OECswsLEEzDWNnNxki\nhSo9EnjEJ37i1oXN1pircMuH/pNmURPEaXpSVAz3uQH2OLh+mPtCK0WbgfPc1KGO\ng+FhYRIejfK1eV2b8ruW0k3TFRUf6ff144xOIPjzOl5LgnDkzlzeQ/wKqRxftEnQ\nDTL0GiBdWlUUQKvO/H62jJ5lIfPxMGT2YQJorIvJBNMtl6zvIb7ez+aVO/FLtTRo\nISwE5jsx0QqEyxSsNIboIAEQ/c+GKePV7Ler4Hglgp6HDXFSABkb6w7SyMnTFuAa\nVAnHbicZwyFCiVBl26sINoTkX2lE+8pSam9Oat6hK7unxdUdz3rBcW5+1x4sWugB\nPuOIyIy3m9NZhckY9iOy2CjKpNu6H+Cvh6nMc08CIcjPXy5GxnSTyeUpwS3rwXcw\ntbIR3YHrBSYhyBp8j9FZxMwfa5KUFZNsuTaIhqItPHFS6mvWxuzzDcD5vUDGwoz/\nz5RRFb3YZN8d6LVM7yB80cE300Hhho0L66pEnExVkkBpMFm/XD0jyV6FXaFIxlcH\nP27xTmNy65O/PVu8c5a3FkiVt0neyzresL0wFVmfNsp2V6KHe1Ee6ovshtqFOsJD\nI4+OWQGxZ80l+53CCnxpsUS7aqs+Ep1NdksX9WGCjx03p+2HWzw=\n=ntL0\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5e4cc6d8129a94c653187c38c0bb4a1122722a60",
          "sha": "5e4cc6d8129a94c653187c38c0bb4a1122722a60",
          "html_url": "https://github.com/bitcoin/bips/commit/5e4cc6d8129a94c653187c38c0bb4a1122722a60"
        }
      ],
      "message": "Fix missing word",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-22T01:58:40Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-22T01:58:08Z"
      },
      "sha": "e6418e5a769d7635824f2ad1bcfe4c720be897c2"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3466134649,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ2NjEzNDY0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3466134649",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-22T01:58:48Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YjBiZTc3Zjk5ZWVlNjc5ZWJmZmUwNTUyZDc1YTRkZGNhM2E2ZDYyZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b0be77f99eee679ebffe0552d75a4ddca3a6d62e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b0be77f99eee679ebffe0552d75a4ddca3a6d62e",
      "tree": {
        "sha": "3d4c577e8c68528db5b65ae2aa6edf0c7fb70db0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3d4c577e8c68528db5b65ae2aa6edf0c7fb70db0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3d4c577e8c68528db5b65ae2aa6edf0c7fb70db0\nparent e6418e5a769d7635824f2ad1bcfe4c720be897c2\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592791617 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592791617 +0900\n\nRemoving non-sense paragraph\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7wEkEACgkQZhh2PvCR\nhv63MRAA0SBus1YMczABiio9W7Cmk0o4Xlyc6XqG2cU2xfvCAVTOAljMi3r7c2Gf\ngoX/kK6xo0abpl0oFKs/44GQtCxqqITd6XYf4avFBvRI8C3A0TS3vL+GGFh/wdA2\nJtP/tXMKR+rR26Oxx9fzycJzcwo+IzTvTIJGckY1p7exYkSuIcH0uvLFVZARaBQT\ne89XyUaJBQvFkCv+7jEIhbqnl7V+S2jMLjDICzieY5rLXHxDEvhMZyyghBC2QfKq\nMlbIrhKo7OBIPyL44e8zUvuO8PBVMDs4q1aVQAltIWse0IJWzXKYQ9lZdJIdQ0Mn\nSSGNfTh0Fi96IQTTRdQIQdZ/cNvVRQg/a/MufdTMizydECz1zoTI16mX7HVHvf7Q\ngNYOoxK+N4XCIiZXLEY/l7NrFNd1oKAp7Rjs8yx8DVCH+6b+fn7sl52oxpNQVjC/\nLd+EXUK/83Xtx4KqcOkmg9cO0D52YvFoD+tDpO29zPyW6LcdAQOf3kBlOi3mF0o7\nK6Qf+TukI8G7bvif41d03Kk9+tFkckI/3OUp2mWvJcz9fwOx5zH4xwAkSqLgIHtl\nSRPdonumHSSydTSylk2S2TuNNHNawmPArVrVj/KlAg63azUjAMIFH6xqkU+M9HAx\nx/PWwFi37F7eoPiTwp7tFHrfArlCnvY6gShMECYi97jXvmJZ3+Y=\n=HBJy\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e6418e5a769d7635824f2ad1bcfe4c720be897c2",
          "sha": "e6418e5a769d7635824f2ad1bcfe4c720be897c2",
          "html_url": "https://github.com/bitcoin/bips/commit/e6418e5a769d7635824f2ad1bcfe4c720be897c2"
        }
      ],
      "message": "Removing non-sense paragraph",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-22T02:06:57Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-22T02:06:57Z"
      },
      "sha": "b0be77f99eee679ebffe0552d75a4ddca3a6d62e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YTc2ZjVlNDMzNTkxYTQxNWZkOWQ2YjVhYjhjMjZlMGVjMzdjYzZkZg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "tree": {
        "sha": "04c35e69de2ce7ac41058e916a0f6642aaaad2c6",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/04c35e69de2ce7ac41058e916a0f6642aaaad2c6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 04c35e69de2ce7ac41058e916a0f6642aaaad2c6\nparent b0be77f99eee679ebffe0552d75a4ddca3a6d62e\nauthor nicolas.dorier <nicolas.dorier@gmail.com> 1592901978 +0900\ncommitter nicolas.dorier <nicolas.dorier@gmail.com> 1592901978 +0900\n\nClarify test vector\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEq0z6mJWsoNvif2s0Zhh2PvCRhv4FAl7xwVoACgkQZhh2PvCR\nhv4JBQ//UHvch847/AfekEbZM2FD0qPy6pd/OQi8iVwhh5+oo5gTJtFEqeln1X+U\nFU/C5lolGviW8FSP966G9m618c+4RO30unco7z1/tGag1PnYGWC0oL8fttQZ6uZp\n18IxkCi9r6Fe3tWPA1rxBbzIigPaeQgrFxK0QuJJAMNtnj0J6h03TAjYAcSUtEiB\nQzcGSqQNZAxGqeiXX3NRZyG8QwO1oe7zzltg3qZ5h97EbNzFDgxsa2w24RhcAtJp\nYLnNSODpzIhD+z+MDWhvjdwI6QyMewfEd4vFSBCFQql1gmJZqmJRlxMgqnjzmRyM\nTmo9OUycrZJEzQJMj6Yb5I7PEcg5YQpx//+YOENi5wC0kbg/e4vU9zAP4xfqlhFj\nOsafLiA3UCTLBPWge3dSC0/lc71l+9kluqAcSEfHmGFuqFzXgYwDSWW4YZKgrAyK\nwRnMQgicSDOpWksMTb+y5UxK3H7fCCqxbc4c6Y2NDxDSk+5spWw8ut5xjCCx1dOM\n59wONKVcS9p/xzwC9iiiuiAMJaCo5cgrHFlPt17IXBFQ9o6ucgFStoVob0S5MYvy\nx0LwOT66W90bQREkCmZt98gzAUkSOOEEguY7TauIzsqZPcvOlaMvKZml7aClCLMn\nKPsAOMi6a610p3obIMVVg//0T8E7DyW6z+tW0KW3SWjO/Gd7cFM=\n=qJFM\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b0be77f99eee679ebffe0552d75a4ddca3a6d62e",
          "sha": "b0be77f99eee679ebffe0552d75a4ddca3a6d62e",
          "html_url": "https://github.com/bitcoin/bips/commit/b0be77f99eee679ebffe0552d75a4ddca3a6d62e"
        }
      ],
      "message": "Clarify test vector",
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-23T08:46:18Z"
      },
      "author": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2020-06-23T08:46:18Z"
      },
      "sha": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "yahiheb",
        "id": 52379387,
        "node_id": "MDQ6VXNlcjUyMzc5Mzg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/52379387?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yahiheb",
        "html_url": "https://github.com/yahiheb",
        "followers_url": "https://api.github.com/users/yahiheb/followers",
        "following_url": "https://api.github.com/users/yahiheb/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yahiheb/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yahiheb/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yahiheb/subscriptions",
        "organizations_url": "https://api.github.com/users/yahiheb/orgs",
        "repos_url": "https://api.github.com/users/yahiheb/repos",
        "events_url": "https://api.github.com/users/yahiheb/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yahiheb/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-24T18:14:23Z",
      "updated_at": "2020-06-24T18:14:23Z",
      "source": {
        "issue": {
          "id": 614775102,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDE1MjYwOTg0",
          "url": "https://api.github.com/repos/zkSNACKs/WalletWasabi/issues/3638",
          "repository_url": "https://api.github.com/repos/zkSNACKs/WalletWasabi",
          "labels_url": "https://api.github.com/repos/zkSNACKs/WalletWasabi/issues/3638/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/zkSNACKs/WalletWasabi/issues/3638/comments",
          "events_url": "https://api.github.com/repos/zkSNACKs/WalletWasabi/issues/3638/events",
          "html_url": "https://github.com/zkSNACKs/WalletWasabi/pull/3638",
          "number": 3638,
          "state": "closed",
          "state_reason": null,
          "title": "Refactor TransactionBuilder to be able to add different signers",
          "body": "I've also got another commit on top of this that gets rid of `GetAwaiter().GetResult()` as per https://github.com/zkSNACKs/WalletWasabi/pull/3626#discussion_r422109510 but it's a bit big (https://github.com/Kukks/WalletWasabi/tree/builder-different-signers-async) \r\nLet me know if i should include it or open it as a separate PR after this",
          "user": {
            "login": "Kukks",
            "id": 1818366,
            "node_id": "MDQ6VXNlcjE4MTgzNjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Kukks",
            "html_url": "https://github.com/Kukks",
            "followers_url": "https://api.github.com/users/Kukks/followers",
            "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
            "organizations_url": "https://api.github.com/users/Kukks/orgs",
            "repos_url": "https://api.github.com/users/Kukks/repos",
            "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/Kukks/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1322193788,
              "node_id": "MDU6TGFiZWwxMzIyMTkzNzg4",
              "url": "https://api.github.com/repos/zkSNACKs/WalletWasabi/labels/waiting%20for%20dependency",
              "name": "waiting for dependency",
              "description": "",
              "color": "88cbea",
              "default": false
            },
            {
              "id": 1811665061,
              "node_id": "MDU6TGFiZWwxODExNjY1MDYx",
              "url": "https://api.github.com/repos/zkSNACKs/WalletWasabi/labels/size/L",
              "name": "size/L",
              "color": "A14C05",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 11,
          "pull_request": {
            "url": "https://api.github.com/repos/zkSNACKs/WalletWasabi/pulls/3638",
            "html_url": "https://github.com/zkSNACKs/WalletWasabi/pull/3638",
            "diff_url": "https://github.com/zkSNACKs/WalletWasabi/pull/3638.diff",
            "patch_url": "https://github.com/zkSNACKs/WalletWasabi/pull/3638.patch"
          },
          "closed_at": "2022-01-25T14:28:46Z",
          "created_at": "2020-05-08T14:24:03Z",
          "updated_at": "2022-01-25T14:28:46Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "merged",
      "id": 3480381913,
      "node_id": "MDExOk1lcmdlZEV2ZW50MzQ4MDM4MTkxMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3480381913",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "commit_url": "https://api.github.com/repos/bitcoin/bips/commits/a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "created_at": "2020-06-25T05:15:16Z"
    },
    {
      "event": "closed",
      "id": 3480381918,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzQ4MDM4MTkxOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3480381918",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-25T05:15:16Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 3622975693,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQzNjIyOTc1Njkz",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3622975693",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-05T04:43:21Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "yahiheb",
        "id": 52379387,
        "node_id": "MDQ6VXNlcjUyMzc5Mzg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/52379387?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yahiheb",
        "html_url": "https://github.com/yahiheb",
        "followers_url": "https://api.github.com/users/yahiheb/followers",
        "following_url": "https://api.github.com/users/yahiheb/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yahiheb/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yahiheb/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yahiheb/subscriptions",
        "organizations_url": "https://api.github.com/users/yahiheb/orgs",
        "repos_url": "https://api.github.com/users/yahiheb/repos",
        "events_url": "https://api.github.com/users/yahiheb/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yahiheb/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-05T19:27:43Z",
      "updated_at": "2020-08-05T19:27:43Z",
      "source": {
        "issue": {
          "id": 673792297,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NDYzNTk2NDU4",
          "url": "https://api.github.com/repos/bitcoin/bips/issues/965",
          "repository_url": "https://api.github.com/repos/bitcoin/bips",
          "labels_url": "https://api.github.com/repos/bitcoin/bips/issues/965/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/965/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bips/issues/965/events",
          "html_url": "https://github.com/bitcoin/bips/pull/965",
          "number": 965,
          "state": "closed",
          "state_reason": null,
          "title": "Update bip79 status",
          "body": "Bip78 now replaces bip79. https://github.com/bitcoin/bips/pull/923#issuecomment-634928082\r\n\r\n@RHavar",
          "user": {
            "login": "yahiheb",
            "id": 52379387,
            "node_id": "MDQ6VXNlcjUyMzc5Mzg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/52379387?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yahiheb",
            "html_url": "https://github.com/yahiheb",
            "followers_url": "https://api.github.com/users/yahiheb/followers",
            "following_url": "https://api.github.com/users/yahiheb/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/yahiheb/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/yahiheb/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/yahiheb/subscriptions",
            "organizations_url": "https://api.github.com/users/yahiheb/orgs",
            "repos_url": "https://api.github.com/users/yahiheb/repos",
            "events_url": "https://api.github.com/users/yahiheb/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/yahiheb/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 1,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bips/pulls/965",
            "html_url": "https://github.com/bitcoin/bips/pull/965",
            "diff_url": "https://github.com/bitcoin/bips/pull/965.diff",
            "patch_url": "https://github.com/bitcoin/bips/pull/965.patch"
          },
          "closed_at": "2020-08-20T22:14:00Z",
          "created_at": "2020-08-05T19:27:43Z",
          "updated_at": "2020-08-20T22:54:21Z"
        },
        "type": "issue"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/426469791",
      "pull_request_review_id": 413396288,
      "id": 426469791,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ2OTc5MQ==",
      "diff_hunk": "@@ -0,0 +1,338 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing an https (or http if it is a Tor hidden service) link to the payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders MUST NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|out-of-utxos",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 128,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "233c0946674c7818a65695344bd823fd8da989a7",
      "in_reply_to_id": null,
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suggest removing this; functionally, to the sender, \"unavailable\" and \"out of utxos\" are the same, but the latter is more explicitly leaking information to the sender about the receiver's wallet. The same might apply to `not-enough-money`, I'm not sure.\r\n\r\n( note that in TLS the sending of error messages from a server like \"invalid padding\" led to actual attacks on security, because it was giving the client information about how the failure occurred. Clearly there is nowhere near as much danger here from leaking a bit or two of info about the wallet, and equally clearly some error messages can be very useful. So this is only a suggestion.)\r\n\r\nThe error messages which are telling the client/sender that some aspect of their request (e.g. psbt not finalized) is invalid are clearly not a problem.",
      "created_at": "2020-05-18T08:54:27Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r426469791",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/426469791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/426473670",
      "pull_request_review_id": 413401111,
      "id": 426473670,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3MzY3MA==",
      "diff_hunk": "@@ -0,0 +1,338 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing an https (or http if it is a Tor hidden service) link to the payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders MUST NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|out-of-utxos\n+|The receiver does not have any UTXO to contribute in a payjoin proposal.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|insane-psbt\n+|Some consistency check on the PSBT failed.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|need-utxo-information\n+|The witness UTXO or non witness UTXO is missing\n+|-\n+|invalid-transaction\n+|The original transaction is invalid for payjoin\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>out-of-utxos</code>.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers the homogenous, check that the receiver's contributed inputs match those.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 175,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "233c0946674c7818a65695344bd823fd8da989a7",
      "in_reply_to_id": null,
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/the homogeneous/are homogeneous/ but to be honest I think \"homogeneous\" is an unnecessarily fancy word choice here, to be ultra clear I prefer \"If the sender's inputs' sequence numbers are all the same, ...\"",
      "created_at": "2020-05-18T09:00:30Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r426473670",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/426473670"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/426494444",
      "pull_request_review_id": 413427035,
      "id": 426494444,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ5NDQ0NA==",
      "diff_hunk": "@@ -0,0 +1,338 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing an https (or http if it is a Tor hidden service) link to the payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders MUST NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|out-of-utxos",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 128,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "233c0946674c7818a65695344bd823fd8da989a7",
      "in_reply_to_id": 426469791,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with out-of-utxos, but for not-enough-money, this is an error that can be fixed by the sender, so he need to be aware of it.",
      "created_at": "2020-05-18T09:34:05Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r426494444",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/426494444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/426537472",
      "pull_request_review_id": 413480615,
      "id": 426537472,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNzQ3Mg==",
      "diff_hunk": "@@ -0,0 +1,338 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing an https (or http if it is a Tor hidden service) link to the payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders MUST NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|out-of-utxos",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 128,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "233c0946674c7818a65695344bd823fd8da989a7",
      "in_reply_to_id": 426469791,
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah. Because of the change output size being too small? So if it's a function of the sender's proposal, then for sure that is fine, agreed.",
      "created_at": "2020-05-18T10:49:41Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r426537472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/426537472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/426538252",
      "pull_request_review_id": 413481530,
      "id": 426538252,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzODI1Mg==",
      "diff_hunk": "@@ -0,0 +1,338 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing an https (or http if it is a Tor hidden service) link to the payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 69,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "3836ef65342ff44628a70ddf859e428a69753c5e",
      "in_reply_to_id": null,
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do I understand from this sentence (`or previous transactions`) that this BIP is not requiring segwit-only inputs?",
      "created_at": "2020-05-18T10:51:11Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r426538252",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/426538252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/426541400",
      "pull_request_review_id": 413485295,
      "id": 426541400,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0MTQwMA==",
      "diff_hunk": "@@ -0,0 +1,338 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing an https (or http if it is a Tor hidden service) link to the payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 69,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "3836ef65342ff44628a70ddf859e428a69753c5e",
      "in_reply_to_id": 426538252,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "While the receiver in BTCPayServer does not support it, there is no reason to rule it out. We want to give as much freedom as possible so blockchain analyst can't assume that all p2pkh are not payjoin.",
      "created_at": "2020-05-18T10:57:01Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r426541400",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/426541400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/426567304",
      "pull_request_review_id": 413517946,
      "id": 426567304,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2NzMwNA==",
      "diff_hunk": "@@ -0,0 +1,338 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing an https (or http if it is a Tor hidden service) link to the payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 69,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "3836ef65342ff44628a70ddf859e428a69753c5e",
      "in_reply_to_id": 426538252,
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agreed.",
      "created_at": "2020-05-18T11:48:50Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r426567304",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/426567304"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/427141185",
      "pull_request_review_id": 414240794,
      "id": 427141185,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MTE4NQ==",
      "diff_hunk": "@@ -0,0 +1,335 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing an https (or http if it is a Tor hidden service) link to the payjoin endpoint.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "dd9193fd1d370194ffed58d231b7aa75d72e3273",
      "in_reply_to_id": null,
      "user": {
        "login": "Kukks",
        "id": 1818366,
        "node_id": "MDQ6VXNlcjE4MTgzNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1818366?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Kukks",
        "html_url": "https://github.com/Kukks",
        "followers_url": "https://api.github.com/users/Kukks/followers",
        "following_url": "https://api.github.com/users/Kukks/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Kukks/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Kukks/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Kukks/subscriptions",
        "organizations_url": "https://api.github.com/users/Kukks/orgs",
        "repos_url": "https://api.github.com/users/Kukks/repos",
        "events_url": "https://api.github.com/users/Kukks/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Kukks/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just some \"out there\" thoughts. What if the `pj` key is not strictly defined as an \"http(s)\" endpoint but as \"an instruction of establishing a communication with the receiver's endpoint\". This would enable receiver scenarios of devices not having a reachable tor or http endpoint such as using QR codes, Bluetooth, NFC, etc\r\n\r\n\r\nQR Code Payjoin\r\n\r\n* Receiver generates BIP21 payment request with a payjoin flag: bitcoin:abc?amount=1&pj=qrcode. Sender shows a QR code with bip21\r\n* Sender scans BIP21 and recognizes qrcode pj flag. Sender generates an original PSBT and encodes it in qr code\r\n* Receiver scans QR code, generates ne PJ PSBT, shows it in QR\r\n* Sender scans, signs, broadcasts\r\n\r\nBluetooth Payjoin\r\n\r\n* Receiver generates BIP21 payment request with a payjoin flag: `bitcoin:abc?amount=1&pj=bluetooth:devicefingerprint`. Sender shows a QR code with bip2 ( or BIP21 is transmitted through bluetoooth on an already establish connection)\r\n* Sender scans BIP21 and recognizes bluetoothpj flag. Sender scans bluetooth devices for identifier, connects and sends original psbt\r\n* Receiver generates new PJ PSBT, and sends it back to connected device\r\n* Sender signs, broadcasts\r\n\r\nNFC Payjoin\r\n\r\n* Receiver generates BIP21 payment request with a payjoin flag: `bitcoin:abc?amount=1&pj=nfc`. Sender shows a QR code with bip21 (or sender taps device with receiver's nfc device)\r\n* Sender scans BIP21 and recognizes NFCpj flag. Sender scans bluetooth devices for identifier, connects and sends original psbt\r\n* Receiver generates new PJ PSBT, and sends it back to connected device with NFC tap\r\n* Sender signs, broadcasts",
      "created_at": "2020-05-19T08:57:10Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r427141185",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/427141185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/427367114",
      "pull_request_review_id": 414530984,
      "id": 427367114,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2NzExNA==",
      "diff_hunk": "@@ -0,0 +1,335 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing an https (or http if it is a Tor hidden service) link to the payjoin endpoint.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "dd9193fd1d370194ffed58d231b7aa75d72e3273",
      "in_reply_to_id": 427141185,
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Just some \"out there\" thoughts. What if the pj key is not strictly defined as an \"http(s)\" endpoint but as \"an instruction of establishing a communication with the receiver's endpoint\". This would enable receiver scenarios of devices not having a reachable tor or http endpoint such as using QR codes, Bluetooth, NFC, etc\r\n\r\nBut I thought the point of line https://github.com/bitcoin/bips/pull/923/files#diff-bab55ce4db24c444e852baf3d7ddfefaR99 was to state that https/onion are *examples* of urls, and another scheme could be put there? (i.e. I thought the doc already encompassed this eventuality like bluetooth etc)",
      "created_at": "2020-05-19T14:53:32Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r427367114",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/427367114"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/427438328",
      "pull_request_review_id": 414623218,
      "id": 427438328,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzODMyOA==",
      "diff_hunk": "@@ -0,0 +1,335 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing an https (or http if it is a Tor hidden service) link to the payjoin endpoint.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "dd9193fd1d370194ffed58d231b7aa75d72e3273",
      "in_reply_to_id": 427141185,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It does. But I think in the context of the sentence, this was not clear.\r\n\r\nI relaxed the authenticated channel because I think it is safe as long as no address substitution is allowed... what do you think?",
      "created_at": "2020-05-19T16:31:16Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r427438328",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/427438328"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/427517565",
      "pull_request_review_id": 414721135,
      "id": 427517565,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxNzU2NQ==",
      "diff_hunk": "@@ -0,0 +1,335 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing an https (or http if it is a Tor hidden service) link to the payjoin endpoint.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "dd9193fd1d370194ffed58d231b7aa75d72e3273",
      "in_reply_to_id": 427141185,
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, I saw. It makes sense but I probably wouldn't add that to the doc. If people have a way to be secure without following the recommendation, they can, but that would be like a custom implementation, in my view it's better not to make it \"official\" that transmitting over non-encrypted-and-authenticated channels is \"supported\" somehow as part of the publically-consensus protocol for payjoin.",
      "created_at": "2020-05-19T18:36:56Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r427517565",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/427517565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/427602127",
      "pull_request_review_id": 414826048,
      "id": 427602127,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYwMjEyNw==",
      "diff_hunk": "@@ -0,0 +1,335 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing an https (or http if it is a Tor hidden service) link to the payjoin endpoint.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "dd9193fd1d370194ffed58d231b7aa75d72e3273",
      "in_reply_to_id": 427141185,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fair point, will not mention.",
      "created_at": "2020-05-19T21:10:50Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r427602127",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/427602127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/428217365",
      "pull_request_review_id": 415600183,
      "id": 428217365,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxNzM2NQ==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|insane-psbt\n+|Some consistency check on the PSBT failed.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|need-utxo-information\n+|The witness UTXO or non witness UTXO is missing\n+|-\n+|invalid-transaction\n+|The original transaction is invalid for payjoin\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any change in the output list.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment ouptut meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 223,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/is willing to contribute towards fees for the additional inputs/is willing to contribute towards fees for the additional inputs and outputs/",
      "created_at": "2020-05-20T18:22:56Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r428217365",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/428217365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429165630",
      "pull_request_review_id": 416804985,
      "id": 429165630,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE2NTYzMA==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|insane-psbt\n+|Some consistency check on the PSBT failed.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|need-utxo-information\n+|The witness UTXO or non witness UTXO is missing\n+|-\n+|invalid-transaction\n+|The original transaction is invalid for payjoin\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any change in the output list.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 204,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "in_reply_to_id": null,
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we think `v=` in the BIP21 uri actually makes sense? This is a version specific to the payjoin feature; what if the URI contains other features which themselves might be versioned? I mean `pjv=` could kinda work but it almost seems like the versioning should be embedded within the `pj=` field. Don't want to open a can of worms there, but `v=` seems .. \"off\" somehow. No?",
      "created_at": "2020-05-22T10:21:21Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r429165630",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429165630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429296628",
      "pull_request_review_id": 416976091,
      "id": 429296628,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5NjYyOA==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|insane-psbt\n+|Some consistency check on the PSBT failed.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|need-utxo-information\n+|The witness UTXO or non witness UTXO is missing\n+|-\n+|invalid-transaction\n+|The original transaction is invalid for payjoin\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any change in the output list.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 204,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "in_reply_to_id": 429165630,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry email broke thread.\r\n\r\nOk so you're saying the sender would modify the `pj=` string potentially?",
      "created_at": "2020-05-22T14:56:06Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r429296628",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429296628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429299370",
      "pull_request_review_id": 416979795,
      "id": 429299370,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5OTM3MA==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|insane-psbt\n+|Some consistency check on the PSBT failed.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|need-utxo-information\n+|The witness UTXO or non witness UTXO is missing\n+|-\n+|invalid-transaction\n+|The original transaction is invalid for payjoin\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any change in the output list.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 204,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "in_reply_to_id": 429165630,
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Either that or just make it `pjver=` not `v=` (really, it's not crucially needed perhaps ... I'm saying it's weird to specify \"version\" to only a part of what the URI is).\r\nChanging the syntax of what `pj=` contains is a more complex suggestion ... I think it makes more sense (encapsulation), but I'm guessing it's too much of a change so maybe, can of worms, and maybe `pjver=` is fine.\r\nSoftware that gets written should also make sure to reject stuff that has the version part but not the payjoin part .. which is a trivial point in a way, but illustrates what I'm getting at.",
      "created_at": "2020-05-22T15:00:47Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r429299370",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429299370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429311795",
      "pull_request_review_id": 416996753,
      "id": 429311795,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMTc5NQ==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|insane-psbt\n+|Some consistency check on the PSBT failed.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|need-utxo-information\n+|The witness UTXO or non witness UTXO is missing\n+|-\n+|invalid-transaction\n+|The original transaction is invalid for payjoin\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any change in the output list.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 204,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "in_reply_to_id": 429165630,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think making the version required fixes any confusion? It's a version agreement protocol, of which \"v=1\" is the only understood thing currently?",
      "created_at": "2020-05-22T15:24:21Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r429311795",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429311795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429314282",
      "pull_request_review_id": 417000069,
      "id": 429314282,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNDI4Mg==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|insane-psbt\n+|Some consistency check on the PSBT failed.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|need-utxo-information\n+|The witness UTXO or non witness UTXO is missing\n+|-\n+|invalid-transaction\n+|The original transaction is invalid for payjoin\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any change in the output list.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 204,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "in_reply_to_id": 429165630,
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So, I'm saying: taken in isolation, what is in this document is already fine. It's unambiguous. What I am worrying about is some kind of interference between this specification (for payjoin, within BIP21) with any other new protocol which also uses BIP21 and might also want to specify a version.\r\nCome to think of it, maybe that question is generalisable: given *any* parameter specification `xyz=`, how do we make sure it doesn't conflict with someone else's use of `xyz=`? Perhaps the argument is: well any server is going to figure out for itself what each possible parameter it serves up, means. So maybe not a problem at all ... just `v=` seems weird in context. Perhaps I'm worrying about nothing, not sure.",
      "created_at": "2020-05-22T15:28:54Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r429314282",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429314282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429314854",
      "pull_request_review_id": 417000879,
      "id": 429314854,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNDg1NA==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|insane-psbt\n+|Some consistency check on the PSBT failed.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|need-utxo-information\n+|The witness UTXO or non witness UTXO is missing\n+|-\n+|invalid-transaction\n+|The original transaction is invalid for payjoin\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any change in the output list.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 204,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "in_reply_to_id": 429165630,
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suppose if there were ever to be a point of confusion it would be more likely in the client, which might have code supporting other parameter sets than the server does. So better to be as unambiguous as possible, just in case.",
      "created_at": "2020-05-22T15:30:01Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r429314854",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429314854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429316039",
      "pull_request_review_id": 417002481,
      "id": 429316039,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNjAzOQ==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|insane-psbt\n+|Some consistency check on the PSBT failed.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|need-utxo-information\n+|The witness UTXO or non witness UTXO is missing\n+|-\n+|invalid-transaction\n+|The original transaction is invalid for payjoin\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any change in the output list.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 204,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "in_reply_to_id": 429165630,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah sorry, yes. That makes sense. `pjver=` as an additional required field or something sounds fine",
      "created_at": "2020-05-22T15:32:18Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r429316039",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429316039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429564079",
      "pull_request_review_id": 417295025,
      "id": 429564079,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NDA3OQ==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|insane-psbt\n+|Some consistency check on the PSBT failed.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|need-utxo-information\n+|The witness UTXO or non witness UTXO is missing\n+|-\n+|invalid-transaction\n+|The original transaction is invalid for payjoin\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any change in the output list.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment ouptut meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 223,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "in_reply_to_id": 428217365,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@instagibbs I actually specified that the receiver should not free ride, except in the case of spare change (https://github.com/bitcoin/bips/pull/923/commits/5a337c6fc6104fc31eff0ecbb654e9580af4f907)\r\n\r\nMy client implementation don't enforce it yet, because the maximum fee is already limited, but it should, and it also should be specified.",
      "created_at": "2020-05-23T17:33:48Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r429564079",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429564079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429564132",
      "pull_request_review_id": 417295096,
      "id": 429564132,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NDEzMg==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|insane-psbt\n+|Some consistency check on the PSBT failed.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|need-utxo-information\n+|The witness UTXO or non witness UTXO is missing\n+|-\n+|invalid-transaction\n+|The original transaction is invalid for payjoin\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any change in the output list.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment ouptut meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 223,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "in_reply_to_id": 428217365,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What about\r\n\r\n>  amount in satoshis that the sender is willing to contribute towards fees for the additional inputs and spare change's fake output",
      "created_at": "2020-05-23T17:34:51Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r429564132",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429564132"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429564544",
      "pull_request_review_id": 417295483,
      "id": 429564544,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NDU0NA==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|insane-psbt\n+|Some consistency check on the PSBT failed.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|need-utxo-information\n+|The witness UTXO or non witness UTXO is missing\n+|-\n+|invalid-transaction\n+|The original transaction is invalid for payjoin\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any change in the output list.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment ouptut meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 223,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "in_reply_to_id": 428217365,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Actually I don't even need to specify this, as in the case of spare change, the sender can't actually pay any fee since there is no change back to him! I think the sentence should not be changed.",
      "created_at": "2020-05-23T17:41:09Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r429564544",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429564544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429566520",
      "pull_request_review_id": 417297459,
      "id": 429566520,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NjUyMA==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|insane-psbt\n+|Some consistency check on the PSBT failed.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|need-utxo-information\n+|The witness UTXO or non witness UTXO is missing\n+|-\n+|invalid-transaction\n+|The original transaction is invalid for payjoin\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any change in the output list.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment ouptut meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 223,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "in_reply_to_id": 428217365,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm confused. For example, the receiver could do something like swap out p2pkh in favor of p2wsh deposit address, increasing the transaction's output by a few bytes. Are you saying that the current spec forbids the additional bytes being paid by the sender?",
      "created_at": "2020-05-23T18:10:16Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r429566520",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/429566520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431430299",
      "pull_request_review_id": 419593224,
      "id": 431430299,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMDI5OQ==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "387d5e1b12eaf06f4d454e1e53e3465c25a9fa53",
      "in_reply_to_id": null,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I would remove this line. In Bip79 the receiver is very explicitly allowed to not contribute an input and broadcast the template transaction.",
      "created_at": "2020-05-27T20:43:56Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r431430299",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431430299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431492840",
      "pull_request_review_id": 419670721,
      "id": 431492840,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5Mjg0MA==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 122,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "387d5e1b12eaf06f4d454e1e53e3465c25a9fa53",
      "in_reply_to_id": null,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What's the point of errors like this? Wouldn't it better for the receiver to just use `invalid-transaction` ? Any sender smart enough to handle an error like this, is also smart enough to not make the error in the first place -- so I don't understand what it could be useful for",
      "created_at": "2020-05-27T23:08:56Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r431492840",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431492840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431502544",
      "pull_request_review_id": 419682375,
      "id": 431502544,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMjU0NA==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 122,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "387d5e1b12eaf06f4d454e1e53e3465c25a9fa53",
      "in_reply_to_id": 431492840,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So you would remove `insane-psbt`, `psbt-not-finalized` `leaking-data` and `need-utxo-information` ? All of them are sender coding errors.",
      "created_at": "2020-05-27T23:39:02Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r431502544",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431502544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431507180",
      "pull_request_review_id": 419687668,
      "id": 431507180,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwNzE4MA==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 122,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "387d5e1b12eaf06f4d454e1e53e3465c25a9fa53",
      "in_reply_to_id": 431492840,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah I would. It's not feasible to enumerate all the possible ways a sender will screw up, so just having a single \"you screwed up\" error with a free form description is a lot more practical. And it's a code-path that's much easier to test works (for both sides). I think having a defined error code is only practical when there's a realistic action the other party can take",
      "created_at": "2020-05-27T23:53:53Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r431507180",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431507180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431553070",
      "pull_request_review_id": 419742321,
      "id": 431553070,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MzA3MA==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 122,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "387d5e1b12eaf06f4d454e1e53e3465c25a9fa53",
      "in_reply_to_id": 431492840,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@RHavar yeah I think you are right. I will change that. In BTCPay SErver implementation I want to do what I can to help sender implementers to debug their stuff without exposing the receiver too much. I can use `message` for that.",
      "created_at": "2020-05-28T02:51:35Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r431553070",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431553070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431571003",
      "pull_request_review_id": 419764372,
      "id": 431571003,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU3MTAwMw==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 122,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "387d5e1b12eaf06f4d454e1e53e3465c25a9fa53",
      "in_reply_to_id": 431492840,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Mmmh so it means I need to add a chapter explaining what the original PSBT should exactly contain.",
      "created_at": "2020-05-28T04:11:58Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r431571003",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431571003"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431577435",
      "pull_request_review_id": 419772132,
      "id": 431577435,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU3NzQzNQ==",
      "diff_hunk": "@@ -98,6 +98,26 @@ To ensure compatibility with web-wallets and browser-based-tools, all responses\n \n The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n \n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not including fields unneeded for the receiver such as global xpubs or keypath information.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 7,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "f62ceee781ae80ca704effb15dc35ab1eebade1a",
      "in_reply_to_id": null,
      "user": {
        "login": "yahiheb",
        "id": 52379387,
        "node_id": "MDQ6VXNlcjUyMzc5Mzg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/52379387?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yahiheb",
        "html_url": "https://github.com/yahiheb",
        "followers_url": "https://api.github.com/users/yahiheb/followers",
        "following_url": "https://api.github.com/users/yahiheb/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yahiheb/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yahiheb/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yahiheb/subscriptions",
        "organizations_url": "https://api.github.com/users/yahiheb/orgs",
        "repos_url": "https://api.github.com/users/yahiheb/repos",
        "events_url": "https://api.github.com/users/yahiheb/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yahiheb/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Not include fields unneeded for the receiver such as global xpubs or keypath information.\r\n```",
      "created_at": "2020-05-28T04:40:32Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r431577435",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431577435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431577474",
      "pull_request_review_id": 419772132,
      "id": 431577474,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU3NzQ3NA==",
      "diff_hunk": "@@ -147,7 +155,7 @@ However, it is important that error codes that are not well-known and that the m\n Such error codes or messages could be used maliciously to phish a non technical user.\n Instead those errors or messages can only appear in debug logs.\n \n-It is advised to hard code the description of the error codes into the sender's software.\n+It is advised to hard code the description of the wellknown error codes into the sender's software.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 64,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "f62ceee781ae80ca704effb15dc35ab1eebade1a",
      "in_reply_to_id": null,
      "user": {
        "login": "yahiheb",
        "id": 52379387,
        "node_id": "MDQ6VXNlcjUyMzc5Mzg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/52379387?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yahiheb",
        "html_url": "https://github.com/yahiheb",
        "followers_url": "https://api.github.com/users/yahiheb/followers",
        "following_url": "https://api.github.com/users/yahiheb/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yahiheb/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yahiheb/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yahiheb/subscriptions",
        "organizations_url": "https://api.github.com/users/yahiheb/orgs",
        "repos_url": "https://api.github.com/users/yahiheb/repos",
        "events_url": "https://api.github.com/users/yahiheb/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yahiheb/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nIt is advised to hard code the description of the well known error codes into the sender's software.\r\n```",
      "created_at": "2020-05-28T04:40:47Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r431577474",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/431577474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/432200392",
      "pull_request_review_id": 420585563,
      "id": 432200392,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMDM5Mg==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 122,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "387d5e1b12eaf06f4d454e1e53e3465c25a9fa53",
      "in_reply_to_id": 431492840,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@RHavar can you review?",
      "created_at": "2020-05-29T00:51:00Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r432200392",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/432200392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/432629435",
      "pull_request_review_id": 421145485,
      "id": 432629435,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyOTQzNQ==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 122,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "387d5e1b12eaf06f4d454e1e53e3465c25a9fa53",
      "in_reply_to_id": 431492840,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks good 👍 ",
      "created_at": "2020-05-29T17:21:56Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r432629435",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/432629435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/433194445",
      "pull_request_review_id": 421789988,
      "id": 433194445,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5NDQ0NQ==",
      "diff_hunk": "@@ -0,0 +1,352 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When fees are low, the original transaction is already 1 satoshi per virtual byte, so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below 1 satoshi per virtual byte.\n+\n+===Preventing mempool replacement===\n+\n+A safe way to implement payjoin, is for both the sender and receiver to try broadcasting the original transaction at some fixed interval period regardless of the state of the payjoin.\n+\n+If the receiver was not properly adding fees to the payjoin transaction, the original transaction would end up replacing the payjoin transaction in the mempool.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+\n+===Receiver does not need to be a full node===\n+\n+Because the receiver needs to bump the fee to keep the same fee rate as the original PSBT, it needs the input's UTXO information to know what is the original fee rate. Without PSBT, light wallets like Wasabi Wallet would not be able to receive a payjoin transaction.\n+\n+The validation (policy and consensus) of the original transaction is optional: a receiver without a full node can decide to create the payjoin transaction and automatically broadcast the original transaction after a timeout of 1 minute, and only verify that it has been propagated in the network.\n+\n+However, non-interactive receivers (like a payment processor) need to verify the transaction to prevent UTXO probing attacks. \n+\n+This is not a concern for interactive receivers like Wasabi Wallet, because those receivers can just limit the number of original PSBT proposals of a specific address to one. With such wallets, the attacker has no way to generate new deposit addresses to probe the UTXOs.\n+\n+===<span id=\"spare-change\"></span>Spare change donation===\n+\n+Small change inside wallets are detrimental to privacy. Mixers like Wasabi wallet, because of its protocol, eventually generate such [[https://docs.wasabiwallet.io/using-wasabi/ChangeCoins.html#first-round-coinjoin-change|small change]].\n+\n+A common way to protect your privacy is to donate those spare changes, to deposit them in an exchange or on your favorite merchant's store account. Those kind of transactions can easily be spotted on the blockchain: There is only one output.\n+\n+However, if you donate via payjoin, it will look like a normal transaction.\n+\n+On top of this the receiver can poison analysis by randomly faking a round amount of satoshi for the additional output.\n+\n+===<span id=\"output-substitution\"></span>Payment output substitution===\n+\n+The receiver is free to change the output paying to himself.\n+For example, if the sender's scriptPubKey type is P2WPKH while the receiver's payment output in the original PSBT is P2SH, then the receiver can substitute the payment output to be P2WPKH to match the sender's scriptPubKey type.\n+\n+===Impacted heuristics===\n+\n+Our proposal of payjoin is breaking the following blockchain heuristics:\n+\n+* Common inputs heuristics.\n+\n+Because payjoin is mixing the inputs of the sender and receiver, this heuristic becomes unreliable.\n+\n+* Change identification from scriptPubKey type heuristics\n+\n+When Alice pays Bob, if Alice is using P2SH but Bob's deposit address is P2WPKH, the heuristic would assume that the P2SH output is the change address of Alice.\n+This is now however a broken assumption, as the payjoin receiver has the freedom to mislead analytics by purposefully changing the invoice's address in the payjoin transaction.\n+\n+Alternatively, if the original address of Bob is P2WPKH and Alice's address is also P2WPKH, Bob can change the receiving address in the payjoin to P2SH. The heuristic would wrongfully identify the payjoin's receiving address as the change address of the transaction.\n+\n+See [[#output-substitution|payment output substitution]].\n+\n+* Change identification from round change amount\n+\n+If Alice pays Bob, she might be tempted to pay him a round amount, like <code>1.23000000 BTC</code>. When this happens, blockchain analysis often identifies the output without the round amount as the change of the transaction.\n+\n+For this reason, during a [[#spare-change|spare change]] case, the receiver may add an output with a rounded amount randomly.\n+\n+==Attack vectors==\n+\n+===On the receiver side: UTXO probing attack===\n+\n+When the receiver creates a payjoin proposal, they expose one or more inputs belonging to them.\n+\n+An attacker could create multiple original transactions in order to learn the UTXOs of the receiver, while not broadcasting the payjoin proposal.\n+\n+While we cannot prevent this type of attack entirely, we implemented the following mitigations:\n+\n+* When the receiver detects an original transaction being broadcast, or if the receiver detects that the original transaction has been double spent, then they will reuse the UTXO that was exposed for the next payjoin.\n+* While the exposed UTXO will be reused in priority to not leak other UTXOs, there is no strong guarantee about it. This prevents the attacker from detecting with certainty the next payjoin of the merchant to another peer.\n+\n+Note that probing attacks are only a problem for automated payment systems such as BTCPay Server. End-user wallets with payjoin capabilities are not affected, as the attacker can't create multiple invoices to force the receiver to expose their UTXOs.\n+\n+===On the sender side: Double payment risk for hardware wallets===\n+\n+For a successful payjoin to happen, the sender needs to sign two transactions double spending each other: The original transaction and the payjoin proposal.\n+\n+The sender's software wallet can verify that the payjoin proposal is legitimate by the sender's checklist.\n+\n+However, a hardware wallet can't verify that this is indeed the case. This means that the security guarantee of the hardware wallet is decreased. If the sender's software is compromised, the hardware wallet would sign two valid transactions, thus sending two payments.\n+\n+Without payjoin, the maximum amount of money that could be lost by a compromised software is equal to one payment (via address substitution).\n+\n+With payjoin, the maximum amount of money that can be lost is equal to two payments.\n+\n+==Implementations==\n+\n+* [[https://github.com/BlueWallet/BlueWallet|BlueWallet]] is in the process of implementing the protocol.\n+* [[https://github.com/btcpayserver/btcpayserver|BTCPay Server]] has implemented sender and receiver side of this protocol.\n+* [[https://github.com/zkSNACKs/WalletWasabi/|Wasabi Wallet]] has merged sender's support.\n+* [[https://github.com/JoinMarket-Org/joinmarket-clientserver|Join Market]] is in the process of implementing the protocol.\n+* [[https://github.com/junderw/payjoin-client-js|JavaScript sender implementation]].",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 347,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "5db1b99504958a808b96692fca872474bf2ecfda",
      "in_reply_to_id": null,
      "user": {
        "login": "junderw",
        "id": 11246316,
        "node_id": "MDQ6VXNlcjExMjQ2MzE2",
        "avatar_url": "https://avatars.githubusercontent.com/u/11246316?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/junderw",
        "html_url": "https://github.com/junderw",
        "followers_url": "https://api.github.com/users/junderw/followers",
        "following_url": "https://api.github.com/users/junderw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/junderw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/junderw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/junderw/subscriptions",
        "organizations_url": "https://api.github.com/users/junderw/orgs",
        "repos_url": "https://api.github.com/users/junderw/repos",
        "events_url": "https://api.github.com/users/junderw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/junderw/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've moved this over to bitcoinjs\r\n\r\nhttps://github.com/bitcoinjs/payjoin-client\r\n\r\nI also published an empty v0.0.1 on npm just to grab the package name.",
      "created_at": "2020-06-01T12:02:42Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r433194445",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/433194445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/434678603",
      "pull_request_review_id": 423705732,
      "id": 434678603,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY3ODYwMw==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When fees are low, the original transaction is already 1 satoshi per virtual byte, so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below 1 satoshi per virtual byte.\n+\n+===Preventing mempool replacement===\n+\n+A safe way to implement payjoin, is for both the sender and receiver to try broadcasting the original transaction at some fixed interval period regardless of the state of the payjoin.\n+\n+If the receiver was not properly adding fees to the payjoin transaction, the original transaction would end up replacing the payjoin transaction in the mempool.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+\n+===Receiver does not need to be a full node===\n+\n+Because the receiver needs to bump the fee to keep the same fee rate as the original PSBT, it needs the input's UTXO information to know what is the original fee rate. Without PSBT, light wallets like Wasabi Wallet would not be able to receive a payjoin transaction.\n+\n+The validation (policy and consensus) of the original transaction is optional: a receiver without a full node can decide to create the payjoin transaction and automatically broadcast the original transaction after a timeout of 1 minute, and only verify that it has been propagated in the network.\n+\n+However, non-interactive receivers (like a payment processor) need to verify the transaction to prevent UTXO probing attacks. \n+\n+This is not a concern for interactive receivers like Wasabi Wallet, because those receivers can just limit the number of original PSBT proposals of a specific address to one. With such wallets, the attacker has no way to generate new deposit addresses to probe the UTXOs.\n+\n+===<span id=\"spare-change\"></span>Spare change donation===\n+\n+Small change inside wallets are detrimental to privacy. Mixers like Wasabi wallet, because of its protocol, eventually generate such [[https://docs.wasabiwallet.io/using-wasabi/ChangeCoins.html#first-round-coinjoin-change|small change]].\n+\n+A common way to protect your privacy is to donate those spare changes, to deposit them in an exchange or on your favorite merchant's store account. Those kind of transactions can easily be spotted on the blockchain: There is only one output.\n+\n+However, if you donate via payjoin, it will look like a normal transaction.\n+\n+On top of this the receiver can poison analysis by randomly faking a round amount of satoshi for the additional output.\n+\n+===<span id=\"output-substitution\"></span>Payment output substitution===\n+\n+The receiver is free to change the output paying to himself.\n+For example, if the sender's scriptPubKey type is P2WPKH while the receiver's payment output in the original PSBT is P2SH, then the receiver can substitute the payment output to be P2WPKH to match the sender's scriptPubKey type.\n+\n+===Impacted heuristics===\n+\n+Our proposal of payjoin is breaking the following blockchain heuristics:\n+\n+* Common inputs heuristics.\n+\n+Because payjoin is mixing the inputs of the sender and receiver, this heuristic becomes unreliable.\n+\n+* Change identification from scriptPubKey type heuristics\n+\n+When Alice pays Bob, if Alice is using P2SH but Bob's deposit address is P2WPKH, the heuristic would assume that the P2SH output is the change address of Alice.\n+This is now however a broken assumption, as the payjoin receiver has the freedom to mislead analytics by purposefully changing the invoice's address in the payjoin transaction.\n+\n+Alternatively, if the original address of Bob is P2WPKH and Alice's address is also P2WPKH, Bob can change the receiving address in the payjoin to P2SH. The heuristic would wrongfully identify the payjoin's receiving address as the change address of the transaction.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 304,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This needs clarification. What script type is Alice using for the input? If she is using a P2WPKH input, then changing the receiving address in the PayJoin to P2SH would actually cause the heuristic to correctly identify the receiving address, because it's type would differ from the input type. So is the assumption that Alice is using a P2SH input and a P2WPKH change address?",
      "created_at": "2020-06-03T16:00:16Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r434678603",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/434678603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/434682357",
      "pull_request_review_id": 423708975,
      "id": 434682357,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4MjM1Nw==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 197,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I am not at all thrilled about the possibility of replacing outputs, it seems to create too many complications. In any case, I think several clarifications are needed here:\r\n1. If the recipient modifies the output's script type, do the two scripts (the original and the modified) have to be using the same public key? If yes, then that might be problematic for some wallets in terms of account discovery, because the script type is often linked to the BIP32 path (m/49' for P2SH-P2WPKH and m/84' for P2WPKH). If no, then I can imagine some UX problems. Consider for example a sender who verifies the recipient's address using a second channel before signing the original transaction. Afterwards, the recipient's address is modified in the CoinJoin proposal, so the sender needs to go through another round of address verification.\r\n2. What do the words \"should allow\" exactly mean? To me it says that the recipient can't rely on the sender allowing output replacement, so it's probably better not to even try it unless absolutely necessary. I think it should be either formulated as \"must allow\" or preferably, there should be a HTTP query string parameter telling the recipient whether the sender allows output replacement or not.",
      "created_at": "2020-06-03T16:04:04Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r434682357",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/434682357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/434685523",
      "pull_request_review_id": 423712363,
      "id": 434685523,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTUyMw==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 197,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 434682357,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the sender can just shoot off the original as soon as it gets a proposal it doesn't like if it wants. Is that not enough?",
      "created_at": "2020-06-03T16:07:54Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r434685523",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/434685523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/434756990",
      "pull_request_review_id": 423804131,
      "id": 434756990,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1Njk5MA==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 197,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 434682357,
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I assume you are referring to point 2. The sender certainly can shoot off the original, but it's a wasted opportunity. The recipient attempts to improve an already good CoinJoin proposal by replacing one of it's outputs, but by doing so it causes it to fail and revert to a standard transaction.",
      "created_at": "2020-06-03T18:04:57Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r434756990",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/434756990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435105348",
      "pull_request_review_id": 424248106,
      "id": 435105348,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNTM0OA==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When fees are low, the original transaction is already 1 satoshi per virtual byte, so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below 1 satoshi per virtual byte.\n+\n+===Preventing mempool replacement===\n+\n+A safe way to implement payjoin, is for both the sender and receiver to try broadcasting the original transaction at some fixed interval period regardless of the state of the payjoin.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 255,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "By broadcasting the original transaction, you are revealing information about the ownership of the inputs and outputs. So I would say that broadcasting the original transaction is something you should do as a last resort if the sender fails to sign and publish the PayJoin transaction or if the PayJoin transaction is failing to get mined by the network and the original transaction has a higher fee rate than the PayJoin transaction. I liked the way this was [documented](https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki#transaction-publishing) in BustaPay. The same comment applies to the section \"Receiver does not need to be a full node\", where it is stated that a receiver can \"automatically broadcast the original transaction after a timeout of 1 minute\".\r\n\r\nOf course if the PayJoin transaction is good, then the original transaction is revealed only to a limited set of individuals and won't go on permanent record, so it's not a deal breaker, but I don't think it should be encouraged \"regardless of the state of the payjoin\". The participants should determine the state of the PayJoin and then decide whether to broadcast.",
      "created_at": "2020-06-04T09:07:55Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r435105348",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435105348"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435443576",
      "pull_request_review_id": 424693024,
      "id": 435443576,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ0MzU3Ng==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When fees are low, the original transaction is already 1 satoshi per virtual byte, so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below 1 satoshi per virtual byte.\n+\n+===Preventing mempool replacement===\n+\n+A safe way to implement payjoin, is for both the sender and receiver to try broadcasting the original transaction at some fixed interval period regardless of the state of the payjoin.\n+\n+If the receiver was not properly adding fees to the payjoin transaction, the original transaction would end up replacing the payjoin transaction in the mempool.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+\n+===Receiver does not need to be a full node===",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 266,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is a bad thing. Can we fix it?",
      "created_at": "2020-06-04T17:56:02Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r435443576",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435443576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435487693",
      "pull_request_review_id": 424747999,
      "id": 435487693,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NzY5Mw==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When fees are low, the original transaction is already 1 satoshi per virtual byte, so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below 1 satoshi per virtual byte.\n+\n+===Preventing mempool replacement===\n+\n+A safe way to implement payjoin, is for both the sender and receiver to try broadcasting the original transaction at some fixed interval period regardless of the state of the payjoin.\n+\n+If the receiver was not properly adding fees to the payjoin transaction, the original transaction would end up replacing the payjoin transaction in the mempool.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+\n+===Receiver does not need to be a full node===",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 266,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 435443576,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No.  Any attempt at \"fixing\" it would only make the problem substantially worse. You could for instance omit information (e.g. what BIP79 does) that a full-node can easily access; but if you do that, and the person doesn't want to run a full-node they will get that information elsewhere (and that information is made available by a dozen  API providers). And now you are in a vastly worse situation.\r\n\r\nThis problem belongs in a separate discussion. But if you want people to run full nodes, you need to make it as easy and practical as possible. From talking to people, 90%+ of the reason people don't want to run a full-node is cause they don't want to go through the IBD and would like to jump-start with a snapshot of a pruned node.\r\n\r\nAnd of course, you need to educate people on the benefits of running a full node. But gimmicks like making it harder for people who don't want to run a full node to need a full node will only backfire with unintended consequences. ",
      "created_at": "2020-06-04T19:05:51Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r435487693",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435487693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435499526",
      "pull_request_review_id": 424763346,
      "id": 435499526,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ5OTUyNg==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 197,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 434682357,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I also think replacing outputs is a bad idea.\r\n\r\nOne really nice thing about BIP79 imho is that a secure connection to the receiver is not critical. Even if the \"payjoin\" server (or connection) is compromised, it is just limited to causing privacy loss. If replacing outputs is allowed, the funds can just be redirected wholesale. From a practical point of view, this can make it a lot more difficult to deploy (or outsource)",
      "created_at": "2020-06-04T19:28:54Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r435499526",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435499526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435549271",
      "pull_request_review_id": 424833748,
      "id": 435549271,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0OTI3MQ==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When fees are low, the original transaction is already 1 satoshi per virtual byte, so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below 1 satoshi per virtual byte.\n+\n+===Preventing mempool replacement===\n+\n+A safe way to implement payjoin, is for both the sender and receiver to try broadcasting the original transaction at some fixed interval period regardless of the state of the payjoin.\n+\n+If the receiver was not properly adding fees to the payjoin transaction, the original transaction would end up replacing the payjoin transaction in the mempool.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+\n+===Receiver does not need to be a full node===",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 266,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 435443576,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's a way of incentivizing full nodes.\r\n\r\n>if you want people to run full nodes, you need to make it as easy and practical as possible.\r\n\r\nThere is nothing that can be done to make it easier. The only alternative is to create bigger incentives.",
      "created_at": "2020-06-04T21:07:14Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r435549271",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435549271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435622712",
      "pull_request_review_id": 424916240,
      "id": 435622712,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyMjcxMg==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 197,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 434682357,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you are right. Actually we could activate it later via an additional optional parameter.",
      "created_at": "2020-06-05T00:06:57Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r435622712",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435622712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435623124",
      "pull_request_review_id": 424916718,
      "id": 435623124,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyMzEyNA==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When fees are low, the original transaction is already 1 satoshi per virtual byte, so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below 1 satoshi per virtual byte.\n+\n+===Preventing mempool replacement===\n+\n+A safe way to implement payjoin, is for both the sender and receiver to try broadcasting the original transaction at some fixed interval period regardless of the state of the payjoin.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 255,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 435105348,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">  The participants should determine the state of the PayJoin and then decide whether to broadcast.\r\n\r\nThis is very tricky code here. What about I change it to: \"A safe way to implement payjoin if you have a full node\"",
      "created_at": "2020-06-05T00:08:36Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r435623124",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435623124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435623730",
      "pull_request_review_id": 424917476,
      "id": 435623730,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyMzczMA==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When fees are low, the original transaction is already 1 satoshi per virtual byte, so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below 1 satoshi per virtual byte.\n+\n+===Preventing mempool replacement===\n+\n+A safe way to implement payjoin, is for both the sender and receiver to try broadcasting the original transaction at some fixed interval period regardless of the state of the payjoin.\n+\n+If the receiver was not properly adding fees to the payjoin transaction, the original transaction would end up replacing the payjoin transaction in the mempool.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+\n+===Receiver does not need to be a full node===",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 266,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 435443576,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This is a bad thing. Can we fix it?\r\n\r\nSadly, this would limit the users of this protocol to a ridiculous number.",
      "created_at": "2020-06-05T00:11:04Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r435623730",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435623730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435624379",
      "pull_request_review_id": 424918277,
      "id": 435624379,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNDM3OQ==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When fees are low, the original transaction is already 1 satoshi per virtual byte, so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below 1 satoshi per virtual byte.\n+\n+===Preventing mempool replacement===\n+\n+A safe way to implement payjoin, is for both the sender and receiver to try broadcasting the original transaction at some fixed interval period regardless of the state of the payjoin.\n+\n+If the receiver was not properly adding fees to the payjoin transaction, the original transaction would end up replacing the payjoin transaction in the mempool.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+\n+===Receiver does not need to be a full node===",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 266,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 435443576,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Only if Bitcoin has already failed anyway.",
      "created_at": "2020-06-05T00:13:44Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r435624379",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435624379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435735589",
      "pull_request_review_id": 425054257,
      "id": 435735589,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczNTU4OQ==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 197,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 434682357,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> If the recipient modifies the output's script type, do the two scripts (the original and the modified) have to be using the same public ke\r\n\r\nThis is up to the receiver to handle that, this should not be part of the BIP how he achieves this. (That said, we don't support it yet in btcpayserver)\r\n\r\n> so the sender needs to go through another round of address verification.\r\n\r\nWell, in any case, the sender need to do two verifications. Especially with hardware wallet.",
      "created_at": "2020-06-05T07:23:07Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r435735589",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435735589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435831538",
      "pull_request_review_id": 425179701,
      "id": 435831538,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzMTUzOA==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 197,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 434682357,
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Well, in any case, the sender need to do two verifications. Especially with hardware wallet.\r\n\r\nNot necessarily. If some basic rules are respected, then the hardware wallet can be given the original signed transaction, verify the signatures and verify that the PayJoin proposal only extends the original transaction without modifying the original destination address or the amount that the user agreed to spend. Thus it can safely re-sign the inputs with minimal or no burden to the user. The basic rules that I am referring to are effectively those formulated in the [Output Adjustment](https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki#output-adjustment) section of BIP-0079: The receiver MUST NOT remove any inputs or outputs and MUST NOT decrease any output amount.",
      "created_at": "2020-06-05T10:24:44Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r435831538",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435831538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435863910",
      "pull_request_review_id": 425222352,
      "id": 435863910,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg2MzkxMA==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 197,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 434682357,
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> > If the recipient modifies the output's script type, do the two scripts (the original and the modified) have to be using the same public key?\r\n\r\n> This is up to the receiver to handle that, this should not be part of the BIP how he achieves this. (That said, we don't support it yet in btcpayserver)\r\n\r\nOne of the reasons why I ask about this is that if both script types could use the same public key, then we could leave the choice about which one to use to the sender, which means that the receiver wouldn't need to modify the outputs. The receiver would always provide a P2WPKH and the sender would be free to change it to P2SH if the sender's inputs are P2SH. On the other hand, some recipients might not be happy about the sender changing the script type due to the reasons I explained in the first comment. The recipient could indicate his policy on this in the BIP-0021 URI. Another possibility is for the sender to provide a set of addresses in the URI, each using a different type, so that the sender can choose between them. Although BIP-0021 wasn't really built for that, it could be done by adding an \"alt-address\" parameter.",
      "created_at": "2020-06-05T11:38:11Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r435863910",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/435863910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/436012559",
      "pull_request_review_id": 425424326,
      "id": 436012559,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxMjU1OQ==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When fees are low, the original transaction is already 1 satoshi per virtual byte, so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below 1 satoshi per virtual byte.\n+\n+===Preventing mempool replacement===\n+\n+A safe way to implement payjoin, is for both the sender and receiver to try broadcasting the original transaction at some fixed interval period regardless of the state of the payjoin.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 255,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 435105348,
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess what I don't understand is the concern about being a full node or not. To me this topic seems to be out of scope of this document. In order for the recipient to decide whether to for example provide the service that was the subject of the payment, the recipient must have some means to determine whether he \"received\" the payment, i.e. whether the transaction in question was mined and perhaps its current depth. How he does that or whom he trusts is up to him. So in order to be able to operate, the recipient must have a means to determine the state of a transaction, which is why I fail to see the need for automatic broadcasts. ",
      "created_at": "2020-06-05T15:53:52Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r436012559",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/436012559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/436092284",
      "pull_request_review_id": 425529346,
      "id": 436092284,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5MjI4NA==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 236,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": null,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this is useless. If the sender isn't happy with the fee rate, they should just use the original. All this really does is just introduces a code branch that rarely gets executed as the sender needs to verify the receiver honored the minfeerate anyway..\r\n\r\nI'd also recommend \"satoshis per weight\" as a better unit, as it's the two sort of fundamental base units in bitcoin. Also if we're going with a minfeerate as a decimal (which makes sense) it's good to specify a rounding policy (i.e. floor, round, or ceil). I would suggest:\r\n\r\n\"minfeerate, a floating point number representing satoshis per weight, such that the transaction fee is `>= ROUND(minfeerate * transactionWeight)`",
      "created_at": "2020-06-05T18:24:24Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r436092284",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/436092284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/438105921",
      "pull_request_review_id": 428031303,
      "id": 438105921,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwNTkyMQ==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 11,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": null,
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "maybe 2020?",
      "created_at": "2020-06-10T13:05:56Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r438105921",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/438105921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/438483643",
      "pull_request_review_id": 428521219,
      "id": 438483643,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ4MzY0Mw==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 233,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": null,
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand this. How could the original transaction replace the payjoin transaction?\r\nBIP-0125 rule 3 says\r\n> The replacement transaction pays an absolute fee of at least the sum paid by the original transactions.\r\n\r\nWhy would the absolute fee of the original tx be higher than the absolute fee of the payjoin tx?\r\nI thought it's only the feerate that might decrease?",
      "created_at": "2020-06-11T00:49:48Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r438483643",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/438483643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/438485384",
      "pull_request_review_id": 428523158,
      "id": 438485384,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ4NTM4NA==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 233,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 438483643,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Check `incrementalRelayFee`. Basically nodes force RBFed transaction to pay more fees to prevent DDoS attack. Without doing this, an attacker could create an infinite number of RBFed transaction at no cost that the whole network would flood to everyone.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/371a73e94043761a6ac6ecdf77ae26cd1f289053/src/validation.cpp#L914",
      "created_at": "2020-06-11T00:56:26Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r438485384",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/438485384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/438487629",
      "pull_request_review_id": 428525835,
      "id": 438487629,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ4NzYyOQ==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 233,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 438483643,
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I still don't see why the absolute fee of the original tx might be higher than the absolute fee of the payjoin tx.\r\nMy premise is that that does not happen.\r\nFrom that AFAICT it follows that the original tx cannot replace the payjoin tx in the mempool via RBF rules.\r\n\r\nSee https://github.com/bitcoin/bitcoin/blob/371a73e94043761a6ac6ecdf77ae26cd1f289053/src/validation.cpp#L904",
      "created_at": "2020-06-11T01:05:35Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r438487629",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/438487629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/438492806",
      "pull_request_review_id": 428532193,
      "id": 438492806,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5MjgwNg==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 233,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 438483643,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The original transaction can't pay more absolute fees than the payjoin, unless the receiver did something really funky that it shouldn't be doing.\r\n\r\nAnd besides, the only reason the original transaction should be broadcasted if the payjoin is a success -- is if one of the parties is being a dick. And if one of the parties wants to be a dick, there's literally nothing you can do as both parties are able to broadcast the original transaction before the payjoin even finishes.",
      "created_at": "2020-06-11T01:26:02Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r438492806",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/438492806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/438495251",
      "pull_request_review_id": 428535172,
      "id": 438495251,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NTI1MQ==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 233,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 438483643,
      "user": {
        "login": "SomberNight",
        "id": 29142493,
        "node_id": "MDQ6VXNlcjI5MTQyNDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/29142493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/SomberNight",
        "html_url": "https://github.com/SomberNight",
        "followers_url": "https://api.github.com/users/SomberNight/followers",
        "following_url": "https://api.github.com/users/SomberNight/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/SomberNight/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/SomberNight/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/SomberNight/subscriptions",
        "organizations_url": "https://api.github.com/users/SomberNight/orgs",
        "repos_url": "https://api.github.com/users/SomberNight/repos",
        "events_url": "https://api.github.com/users/SomberNight/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/SomberNight/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In that case I think the remark (\"sender should create a transaction with RBF disabled\") from the text should be removed as it's simply confusing.",
      "created_at": "2020-06-11T01:36:08Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r438495251",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/438495251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/439205177",
      "pull_request_review_id": 429459150,
      "id": 439205177,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwNTE3Nw==",
      "diff_hunk": "@@ -0,0 +1,344 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* It was requiring at least one input to be contributed by the receiver.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|leaking-data\n+|Key path information or GlobalXPubs should not be included in the original PSBT.\n+|-\n+|psbt-not-finalized\n+|The original PSBT must be finalized.\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|insane-psbt\n+|Some consistency check on the PSBT failed.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|need-utxo-information\n+|The witness UTXO or non witness UTXO is missing\n+|-\n+|invalid-transaction\n+|The original transaction is invalid for payjoin\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any change in the output list.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 204,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "1251d29854c37194e5c5ad8ff5029a50196aa22e",
      "in_reply_to_id": 429165630,
      "user": {
        "login": "lukechilds",
        "id": 2123375,
        "node_id": "MDQ6VXNlcjIxMjMzNzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2123375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lukechilds",
        "html_url": "https://github.com/lukechilds",
        "followers_url": "https://api.github.com/users/lukechilds/followers",
        "following_url": "https://api.github.com/users/lukechilds/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lukechilds/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lukechilds/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lukechilds/subscriptions",
        "organizations_url": "https://api.github.com/users/lukechilds/orgs",
        "repos_url": "https://api.github.com/users/lukechilds/repos",
        "events_url": "https://api.github.com/users/lukechilds/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lukechilds/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@AdamISZ I think there might be some confusion here.\r\n\r\nThe `v=` parameter is not added to the BIP21 URI that the receiver initially creates, it's added to the payjoin endpoint request the sender makes to the receiver.",
      "created_at": "2020-06-12T04:50:54Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r439205177",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/439205177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/439730320",
      "pull_request_review_id": 430131476,
      "id": 439730320,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczMDMyMA==",
      "diff_hunk": "@@ -0,0 +1,358 @@\n+<pre>\n+  BIP: ?\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-X\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Only finalize the inputs added by the receiver.\n+* Have all the `witnessUTXO` or `nonWitnessUTXO` information filled in.\n+* Keep all the outputs unrelated to the payment.\n+\n+The payjoin proposal MAY:\n+* Add inputs.\n+* Add outputs.\n+* Modify payment's output.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>invalid-transaction</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to probing attacks.\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Check that all the spent outpoints in the original PSBT still exist in the coinjoin PSBT.\n+* Check that all the spent outpoints in the original PSBT do not have any partial signature.\n+* If the sender is not using inputs with mixed types, check that the receiver inputs type match the inputs type of the sender. (ie. both using P2SH-P2WPKH or both using P2WPKH)\n+* Check that any inputs added by the receiver are finalized.\n+* Check that the transaction version, and nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* If the sender's inputs' sequence numbers are all the same, check that the receiver's contributed inputs match those.\n+* Check that the sender's own outputs have not been modified, except for paying increased fee, or by simple shuffling.\n+* If sender specified <code>additionalfeeoutputindex=</code> (see later), the fee should have been subtracted from the output at the same index in the original PSBT.\n+* If <code>minfeerate</code> was specified, check that the estimated fee rate of the payjoin proposal is not less than this value.\n+* Check that the sent amount in the payjoin proposal is less than or equal to the sent amount of the original transaction. (Defined as the sum of the inputs' value to be signed minus the sender's ouput change)\n+\n+If the sent amount in the payjoin proposal is above the amount sent in the original PSBT\n+* Check that the additional paid amount has been add paid to the fee.\n+* Check that the estimated fee rate of the payjoin proposal is not more than the fee rate of the original PSBT. (fee estimation is hard, so we should allow ~2 satoshi per inputs as margin of error)\n+* If <code>maxadditionalfeecontribution=</code> was specified, check the additional paid amount is less than or equal to this amount.\n+* If <code>maxadditionalfeecontribution=</code> was not specified, the sender's software should ask an interactive confirmation to the user.\n+* <code>maxadditionalfeecontribution=</code> and <code>minfeerate=</code> should be ignored in the [[#spare-change|spare change]] case.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender should allow the payment output to be modified by the receiver (The receiver may substitute a P2WPKH payment to P2SH payment to increase privacy)\n+* The sender must allow the receiver to add outputs.\n+* The sender must allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+On top of those check, it is recommended, but not required for the sender to check that:\n+* If the sender is making a payjoin with a change (ie, not in the [[#spare-change|spare change]] case), make sure the receiver is paying for any batched output.\n+\n+===Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, the preferred output from which to increase the fee for the added inputs. (default: <code>-1</code>)\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>maxadditionalfeecontribution=</code>, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero. (default: -1)\n+\n+Note that if <code>maxadditionalfeecontribution</code> is too low, the sender should create a transaction with RBF disabled, as the original transaction could replace the payjoin transaction.\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+Should be ignored in the [[#spare-change|spare change]] case.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When fees are low, the original transaction is already 1 satoshi per virtual byte, so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below 1 satoshi per virtual byte.\n+\n+===Preventing mempool replacement===\n+\n+A safe way to implement payjoin, is for both the sender and receiver to try broadcasting the original transaction at some fixed interval period regardless of the state of the payjoin.\n+\n+If the receiver was not properly adding fees to the payjoin transaction, the original transaction would end up replacing the payjoin transaction in the mempool.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+\n+===Receiver does not need to be a full node===\n+\n+Because the receiver needs to bump the fee to keep the same fee rate as the original PSBT, it needs the input's UTXO information to know what is the original fee rate. Without PSBT, light wallets like Wasabi Wallet would not be able to receive a payjoin transaction.\n+\n+The validation (policy and consensus) of the original transaction is optional: a receiver without a full node can decide to create the payjoin transaction and automatically broadcast the original transaction after a timeout of 1 minute, and only verify that it has been propagated in the network.\n+\n+However, non-interactive receivers (like a payment processor) need to verify the transaction to prevent UTXO probing attacks. \n+\n+This is not a concern for interactive receivers like Wasabi Wallet, because those receivers can just limit the number of original PSBT proposals of a specific address to one. With such wallets, the attacker has no way to generate new deposit addresses to probe the UTXOs.\n+\n+===<span id=\"spare-change\"></span>Spare change donation===\n+\n+Small change inside wallets are detrimental to privacy. Mixers like Wasabi wallet, because of its protocol, eventually generate such [[https://docs.wasabiwallet.io/using-wasabi/ChangeCoins.html#first-round-coinjoin-change|small change]].\n+\n+A common way to protect your privacy is to donate those spare changes, to deposit them in an exchange or on your favorite merchant's store account. Those kind of transactions can easily be spotted on the blockchain: There is only one output.\n+\n+However, if you donate via payjoin, it will look like a normal transaction.\n+\n+On top of this the receiver can poison analysis by randomly faking a round amount of satoshi for the additional output.\n+\n+===<span id=\"output-substitution\"></span>Payment output substitution===\n+\n+The receiver is free to change the output paying to himself.\n+For example, if the sender's scriptPubKey type is P2WPKH while the receiver's payment output in the original PSBT is P2SH, then the receiver can substitute the payment output to be P2WPKH to match the sender's scriptPubKey type.\n+\n+===Impacted heuristics===\n+\n+Our proposal of payjoin is breaking the following blockchain heuristics:\n+\n+* Common inputs heuristics.\n+\n+Because payjoin is mixing the inputs of the sender and receiver, this heuristic becomes unreliable.\n+\n+* Change identification from scriptPubKey type heuristics\n+\n+When Alice pays Bob, if Alice is using P2SH but Bob's deposit address is P2WPKH, the heuristic would assume that the P2SH output is the change address of Alice.\n+This is now however a broken assumption, as the payjoin receiver has the freedom to mislead analytics by purposefully changing the invoice's address in the payjoin transaction.\n+\n+Alternatively, if the original address of Bob is P2WPKH and Alice's address is also P2WPKH, Bob can change the receiving address in the payjoin to P2SH. The heuristic would wrongfully identify the payjoin's receiving address as the change address of the transaction.",
      "path": "bip-xxxx.mediawiki",
      "position": null,
      "original_position": 304,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "8ce60865178b46f0d420dde5c5bc373cc17a22da",
      "in_reply_to_id": 434678603,
      "user": {
        "login": "AdamISZ",
        "id": 4278257,
        "node_id": "MDQ6VXNlcjQyNzgyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4278257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamISZ",
        "html_url": "https://github.com/AdamISZ",
        "followers_url": "https://api.github.com/users/AdamISZ/followers",
        "following_url": "https://api.github.com/users/AdamISZ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AdamISZ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AdamISZ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AdamISZ/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamISZ/orgs",
        "repos_url": "https://api.github.com/users/AdamISZ/repos",
        "events_url": "https://api.github.com/users/AdamISZ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AdamISZ/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with @andrewkozlik , this paragraphs reads wrong, if \"Alice's address is P2SH\" then it would read correct. (although it should probably say \"Alice's input type\".",
      "created_at": "2020-06-13T10:59:59Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r439730320",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/439730320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/441674381",
      "pull_request_review_id": 432572550,
      "id": 441674381,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NDM4MQ==",
      "diff_hunk": "@@ -0,0 +1,633 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "3485af708ce5a485d30cd8f60efe0004e9b4566c",
      "in_reply_to_id": null,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "FWIW that's not correct",
      "created_at": "2020-06-17T16:29:45Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r441674381",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/441674381"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/441680973",
      "pull_request_review_id": 432572550,
      "id": 441680973,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY4MDk3Mw==",
      "diff_hunk": "@@ -0,0 +1,633 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction has never been seen before. (Prevent [[#probing-attack|probing attacks]].)",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 235,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "3485af708ce5a485d30cd8f60efe0004e9b4566c",
      "in_reply_to_id": null,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might also be good to mention that this can prevent a sender from attemping to use payjoin as a new original transaction",
      "created_at": "2020-06-17T16:40:40Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r441680973",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/441680973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/441685319",
      "pull_request_review_id": 432572550,
      "id": 441685319,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY4NTMxOQ==",
      "diff_hunk": "@@ -0,0 +1,633 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* The receiver was responsible to pay the additional fee, not the sender.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction has never been seen before. (Prevent [[#probing-attack|probing attacks]].)\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If it is one of the sender's output\n+*** If that's the [[#fee-output|fee ouptut]]:\n+**** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+**** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+**** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+*** If it is not the fee output:\n+**** Make sure the output's value did not changed.\n+** Verify that all sender's outputs (ie, all outputs except the output actually paid to the receiver) from the original PSBT are in the proposal.\n+* Once the proposal is signed, if <code>minfeerate</code> was specified, check that the fee rate of the payjoin transaction is not less than this value.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender must allow the receiver to add/remove or modify his own outputs\n+* The sender should allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When blocks are not full, the original transaction might already at the minimum relay fee rate (currently 1 satoshi per virtual byte), so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below the minimum relay fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+See the [[#fee-output|Fee output]] section for more information.\n+\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+The recommended value <code>maxadditionalfeecontribution=</code> is explained in the [[#fee-output|Fee output]] section.\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Receiver does not need to be a full node===\n+\n+Because the receiver needs to bump the fee to keep the same fee rate as the original PSBT, it needs the input's UTXO information to know what is the original fee rate. Without PSBT, light wallets like Wasabi Wallet would not be able to receive a payjoin transaction.\n+\n+The validation (policy and consensus) of the original transaction is optional: a receiver without a full node can decide to create the payjoin transaction and automatically broadcast the original transaction after a timeout of 1 minute, and only verify that it has been propagated in the network.\n+\n+However, non-interactive receivers (like a payment processor) need to verify the transaction to prevent UTXO probing attacks. \n+\n+This is not a concern for interactive receivers like Wasabi Wallet, because those receivers can just limit the number of original PSBT proposals of a specific address to one. With such wallets, the attacker has no way to generate new deposit addresses to probe the UTXOs.\n+\n+===<span id=\"spare-change\"></span>Spare change donation===\n+\n+Small change inside wallets are detrimental to privacy. Mixers like Wasabi wallet, because of its protocol, eventually generate such [[https://docs.wasabiwallet.io/using-wasabi/ChangeCoins.html#first-round-coinjoin-change|small change]].\n+\n+A common way to protect your privacy is to donate those spare changes, to deposit them in an exchange or on your favorite merchant's store account. Those kind of transactions can easily be spotted on the blockchain: There is only one output.\n+\n+However, if you donate via payjoin, it will look like a normal transaction.\n+\n+On top of this the receiver can poison analysis by randomly faking a round amount of satoshi for the additional output.\n+\n+===<span id=\"output-substitution\"></span>Payment output substitution===\n+\n+The receiver is free to change the output paying to himself.\n+For example, if the sender's scriptPubKey type is P2WPKH while the receiver's payment output in the original PSBT is P2SH, then the receiver can substitute the payment output to be P2WPKH to match the sender's scriptPubKey type.\n+\n+===Impacted heuristics===\n+\n+Our proposal of payjoin is breaking the following blockchain heuristics:\n+\n+* Common inputs heuristics.\n+\n+Because payjoin is mixing the inputs of the sender and receiver, this heuristic becomes unreliable.\n+\n+* Change identification from scriptPubKey type heuristics\n+\n+When Alice pays Bob, if Alice is using P2SH but Bob's deposit address is P2WPKH, the heuristic would assume that the P2SH output is the change address of Alice.\n+This is now however a broken assumption, as the payjoin receiver has the freedom to mislead analytics by purposefully changing the invoice's address in the payjoin transaction.\n+\n+Alternatively, if the original address of Bob is P2WPKH and Alice's address is also P2WPKH, Bob can change the receiving address in the payjoin to P2SH. The heuristic would wrongfully identify the payjoin's receiving address as the change address of the transaction.\n+\n+See [[#output-substitution|payment output substitution]].\n+\n+* Change identification from round change amount\n+\n+If Alice pays Bob, she might be tempted to pay him a round amount, like <code>1.23000000 BTC</code>. When this happens, blockchain analysis often identifies the output without the round amount as the change of the transaction.\n+\n+For this reason, during a [[#spare-change|spare change]] case, the receiver may add an output with a rounded amount randomly.\n+\n+==Attack vectors==\n+\n+===<span id=\"probing-attack\"></span>On the receiver side: UTXO probing attack===\n+\n+When the receiver creates a payjoin proposal, they expose one or more inputs belonging to them.\n+\n+An attacker could create multiple original transactions in order to learn the UTXOs of the receiver, while not broadcasting the payjoin proposal.\n+\n+While we cannot prevent this type of attack entirely, we implemented the following mitigations:\n+\n+* When the receiver detects an original transaction being broadcast, or if the receiver detects that the original transaction has been double spent, then they will reuse the UTXO that was exposed for the next payjoin.\n+* While the exposed UTXO will be reused in priority to not leak other UTXOs, there is no strong guarantee about it. This prevents the attacker from detecting with certainty the next payjoin of the merchant to another peer.\n+\n+Note that probing attacks are only a problem for automated payment systems such as BTCPay Server. End-user wallets with payjoin capabilities are not affected, as the attacker can't create multiple invoices to force the receiver to expose their UTXOs.\n+\n+===On the sender side: Double payment risk for hardware wallets===\n+\n+For a successful payjoin to happen, the sender needs to sign two transactions double spending each other: The original transaction and the payjoin proposal.\n+\n+The sender's software wallet can verify that the payjoin proposal is legitimate by the sender's checklist.\n+\n+However, a hardware wallet can't verify that this is indeed the case. This means that the security guarantee of the hardware wallet is decreased. If the sender's software is compromised, the hardware wallet would sign two valid transactions, thus sending two payments.\n+\n+Without payjoin, the maximum amount of money that could be lost by a compromised software is equal to one payment (via address substitution).",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 380,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "3485af708ce5a485d30cd8f60efe0004e9b4566c",
      "in_reply_to_id": null,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably should be called \"output substitution\" here to match the rest of the spec)",
      "created_at": "2020-06-17T16:47:32Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r441685319",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/441685319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442246687",
      "pull_request_review_id": 433310536,
      "id": 442246687,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NjY4Nw==",
      "diff_hunk": "@@ -0,0 +1,638 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.",
      "path": "bip-0078.mediawiki",
      "position": 267,
      "original_position": 258,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "a3fbc6c6203ef7ded879626ee2fcb689195a7ec1",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/input's/inputs/ ?",
      "created_at": "2020-06-18T13:57:44Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442246687",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442246687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 267,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442246748",
      "pull_request_review_id": 433310536,
      "id": 442246748,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0Njc0OA==",
      "diff_hunk": "@@ -0,0 +1,638 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.",
      "path": "bip-0078.mediawiki",
      "position": 268,
      "original_position": 259,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "a3fbc6c6203ef7ded879626ee2fcb689195a7ec1",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/input's/inputs/ ?",
      "created_at": "2020-06-18T13:57:49Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442246748",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442246748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 268,
      "original_line": 259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442247739",
      "pull_request_review_id": 433310536,
      "id": 442247739,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NzczOQ==",
      "diff_hunk": "@@ -0,0 +1,638 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If it is one of the sender's output\n+*** If that's the [[#fee-output|fee ouptut]]:",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 264,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "a3fbc6c6203ef7ded879626ee2fcb689195a7ec1",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`fee ouptut`",
      "created_at": "2020-06-18T13:59:04Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442247739",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442247739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442252009",
      "pull_request_review_id": 433310536,
      "id": 442252009,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1MjAwOQ==",
      "diff_hunk": "@@ -0,0 +1,638 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If it is one of the sender's output\n+*** If that's the [[#fee-output|fee ouptut]]:\n+**** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+**** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+**** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+*** If it is not the fee output:\n+**** Make sure the output's value did not changed.\n+** Verify that all sender's outputs (ie, all outputs except the output actually paid to the receiver) from the original PSBT are in the proposal.\n+* Once the proposal is signed, if <code>minfeerate</code> was specified, check that the fee rate of the payjoin transaction is not less than this value.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender must allow the receiver to add/remove or modify his own outputs (Except is explicitely disabled via the optional parameter <code>disableoutputsubstitution=</code>)",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 276,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "a3fbc6c6203ef7ded879626ee2fcb689195a7ec1",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`s/his own outputs/the receiver's own outputs/`\r\n\r\n`s/Except is explicitely/Except if explicitly`",
      "created_at": "2020-06-18T14:04:52Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442252009",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442252009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442252476",
      "pull_request_review_id": 433310536,
      "id": 442252476,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1MjQ3Ng==",
      "diff_hunk": "@@ -0,0 +1,638 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If it is one of the sender's output\n+*** If that's the [[#fee-output|fee ouptut]]:\n+**** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+**** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+**** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+*** If it is not the fee output:\n+**** Make sure the output's value did not changed.\n+** Verify that all sender's outputs (ie, all outputs except the output actually paid to the receiver) from the original PSBT are in the proposal.\n+* Once the proposal is signed, if <code>minfeerate</code> was specified, check that the fee rate of the payjoin transaction is not less than this value.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender must allow the receiver to add/remove or modify his own outputs (Except is explicitely disabled via the optional parameter <code>disableoutputsubstitution=</code>)\n+* The sender should allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 277,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "a3fbc6c6203ef7ded879626ee2fcb689195a7ec1",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`s/add any input/add any inputs/`\r\n\r\n`s/Useful/This is useful`",
      "created_at": "2020-06-18T14:05:28Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442252476",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442252476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 277,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442252782",
      "pull_request_review_id": 433310536,
      "id": 442252782,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1Mjc4Mg==",
      "diff_hunk": "@@ -0,0 +1,638 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If it is one of the sender's output\n+*** If that's the [[#fee-output|fee ouptut]]:\n+**** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+**** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+**** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+*** If it is not the fee output:\n+**** Make sure the output's value did not changed.\n+** Verify that all sender's outputs (ie, all outputs except the output actually paid to the receiver) from the original PSBT are in the proposal.\n+* Once the proposal is signed, if <code>minfeerate</code> was specified, check that the fee rate of the payjoin transaction is not less than this value.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender must allow the receiver to add/remove or modify his own outputs (Except is explicitely disabled via the optional parameter <code>disableoutputsubstitution=</code>)\n+* The sender should allow the receiver to not add any input. Useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.",
      "path": "bip-0078.mediawiki",
      "position": 288,
      "original_position": 278,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "a3fbc6c6203ef7ded879626ee2fcb689195a7ec1",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`s/If no input/If no inputs`",
      "created_at": "2020-06-18T14:05:52Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442252782",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442252782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 288,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442649615",
      "pull_request_review_id": 433825220,
      "id": 442649615,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0OTYxNQ==",
      "diff_hunk": "@@ -0,0 +1,671 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+*** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+** If the output is the payment output and payment output substitution is disabled.\n+*** Do not make any check\n+** Else\n+*** Make sure the output's value did not changed.",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 277,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "bd9740074338593c594394be365c3bed1b6cc3df",
      "in_reply_to_id": null,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this allow increasing too?",
      "created_at": "2020-06-19T06:11:03Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442649615",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442649615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 277,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442649632",
      "pull_request_review_id": 433825220,
      "id": 442649632,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0OTYzMg==",
      "diff_hunk": "@@ -0,0 +1,671 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+*** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+** If the output is the payment output and payment output substitution is disabled.",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 274,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "bd9740074338593c594394be365c3bed1b6cc3df",
      "in_reply_to_id": null,
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this be \"enabled\"? ",
      "created_at": "2020-06-19T06:11:06Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442649632",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442649632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442754045",
      "pull_request_review_id": 433960157,
      "id": 442754045,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc1NDA0NQ==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* Verify that the absolute fee of the payjoin proposal is equals or higher than the original PSBT.\n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+*** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+** If the output is the payment output and payment output substitution is allowed.\n+*** Do not make any check\n+** Else\n+*** Make sure the output's value did not decreased.\n+** Verify that all sender's outputs (ie, all outputs except the output actually paid to the receiver) from the original PSBT are in the proposal.\n+* Once the proposal is signed, if <code>minfeerate</code> was specified, check that the fee rate of the payjoin transaction is not less than this value.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender must allow the receiver to add/remove or modify the receiver's own outputs (if [[#output-substitution|payment output substitution]], the payment's output should not be modified)\n+* The sender should allow the receiver to not add any inputs. This is useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When blocks are not full, the original transaction might already at the minimum relay fee rate (currently 1 satoshi per virtual byte), so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below the minimum relay fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+See the [[#fee-output|Fee output]] section for more information.\n+\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+The recommended value <code>maxadditionalfeecontribution=</code> is explained in the [[#fee-output|Fee output]] section.\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Receiver does not need to be a full node===\n+\n+Because the receiver needs to bump the fee to keep the same fee rate as the original PSBT, it needs the input's UTXO information to know what is the original fee rate. Without PSBT, light wallets like Wasabi Wallet would not be able to receive a payjoin transaction.\n+\n+The validation (policy and consensus) of the original transaction is optional: a receiver without a full node can decide to create the payjoin transaction and automatically broadcast the original transaction after a timeout of 1 minute, and only verify that it has been propagated in the network.\n+\n+However, non-interactive receivers (like a payment processor) need to verify the transaction to prevent UTXO probing attacks. \n+\n+This is not a concern for interactive receivers like Wasabi Wallet, because those receivers can just limit the number of original PSBT proposals of a specific address to one. With such wallets, the attacker has no way to generate new deposit addresses to probe the UTXOs.\n+\n+===<span id=\"spare-change\"></span>Spare change donation===\n+\n+Small change inside wallets are detrimental to privacy. Mixers like Wasabi wallet, because of its protocol, eventually generate such [[https://docs.wasabiwallet.io/using-wasabi/ChangeCoins.html#first-round-coinjoin-change|small change]].\n+\n+A common way to protect your privacy is to donate those spare changes, to deposit them in an exchange or on your favorite merchant's store account. Those kind of transactions can easily be spotted on the blockchain: There is only one output.\n+\n+However, if you donate via payjoin, it will look like a normal transaction.\n+\n+On top of this the receiver can poison analysis by randomly faking a round amount of satoshi for the additional output.\n+\n+===<span id=\"output-substitution\"></span>Payment output substitution===\n+\n+The receiver is free to change the output paying to himself.\n+For example, if the sender's scriptPubKey type is P2WPKH while the receiver's payment output in the original PSBT is P2SH, then the receiver can substitute the payment output to be P2WPKH to match the sender's scriptPubKey type.\n+\n+===<span id=\"unsecured-payjoin\"></span>Unsecured payjoin server===\n+\n+A receiver might run the payment server (generating the BIP21 invoice) on a different server than the payjoin server, which could be less trusted than the payment server.\n+\n+In such case, the payment server can signal to the sender, via the BIP21 parameter <code>pjos=0</code>, that they MUST disallow [[#output-substitution|payment output substitution]].\n+A compromised payjoin server could still the hot wallet outputs of the receiver, but would not be able to re-route payment to himself.\n+\n+===Impacted heuristics===\n+\n+Our proposal of payjoin is breaking the following blockchain heuristics:\n+\n+* Common inputs heuristics.\n+\n+Because payjoin is mixing the inputs of the sender and receiver, this heuristic becomes unreliable.\n+\n+* Change identification from scriptPubKey type heuristics\n+\n+When Alice pays Bob, if Alice is using P2SH but Bob's deposit address is P2WPKH, the heuristic would assume that the P2SH output is the change address of Alice.\n+This is now however a broken assumption, as the payjoin receiver has the freedom to mislead analytics by purposefully changing the invoice's address in the payjoin transaction.\n+\n+Alternatively, if the original address of Bob is P2WPKH and Alice's address is also P2WPKH, Bob can change the receiving address in the payjoin to P2SH. The heuristic would wrongfully identify the payjoin's receiving address as the change address of the transaction.",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 367,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This still hasn't been resolved, so I am reposting my original comment:\r\n\r\n> This needs clarification. What script type is Alice using for the input? If she is using a P2WPKH input, then changing the receiving address in the PayJoin to P2SH would actually cause the heuristic to correctly identify the receiving address, because it's type would differ from the input type. So is the assumption that Alice is using a P2SH input and a P2WPKH change address?\r\n\r\n",
      "created_at": "2020-06-19T10:11:44Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442754045",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442754045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442759854",
      "pull_request_review_id": 433967624,
      "id": 442759854,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc1OTg1NA==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* Verify that the absolute fee of the payjoin proposal is equals or higher than the original PSBT.\n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+*** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+** If the output is the payment output and payment output substitution is allowed.\n+*** Do not make any check\n+** Else\n+*** Make sure the output's value did not decreased.\n+** Verify that all sender's outputs (ie, all outputs except the output actually paid to the receiver) from the original PSBT are in the proposal.\n+* Once the proposal is signed, if <code>minfeerate</code> was specified, check that the fee rate of the payjoin transaction is not less than this value.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender must allow the receiver to add/remove or modify the receiver's own outputs (if [[#output-substitution|payment output substitution]], the payment's output should not be modified)\n+* The sender should allow the receiver to not add any inputs. This is useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When blocks are not full, the original transaction might already at the minimum relay fee rate (currently 1 satoshi per virtual byte), so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below the minimum relay fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+See the [[#fee-output|Fee output]] section for more information.\n+\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+The recommended value <code>maxadditionalfeecontribution=</code> is explained in the [[#fee-output|Fee output]] section.\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Receiver does not need to be a full node===\n+\n+Because the receiver needs to bump the fee to keep the same fee rate as the original PSBT, it needs the input's UTXO information to know what is the original fee rate. Without PSBT, light wallets like Wasabi Wallet would not be able to receive a payjoin transaction.\n+\n+The validation (policy and consensus) of the original transaction is optional: a receiver without a full node can decide to create the payjoin transaction and automatically broadcast the original transaction after a timeout of 1 minute, and only verify that it has been propagated in the network.\n+\n+However, non-interactive receivers (like a payment processor) need to verify the transaction to prevent UTXO probing attacks. \n+\n+This is not a concern for interactive receivers like Wasabi Wallet, because those receivers can just limit the number of original PSBT proposals of a specific address to one. With such wallets, the attacker has no way to generate new deposit addresses to probe the UTXOs.\n+\n+===<span id=\"spare-change\"></span>Spare change donation===\n+\n+Small change inside wallets are detrimental to privacy. Mixers like Wasabi wallet, because of its protocol, eventually generate such [[https://docs.wasabiwallet.io/using-wasabi/ChangeCoins.html#first-round-coinjoin-change|small change]].\n+\n+A common way to protect your privacy is to donate those spare changes, to deposit them in an exchange or on your favorite merchant's store account. Those kind of transactions can easily be spotted on the blockchain: There is only one output.\n+\n+However, if you donate via payjoin, it will look like a normal transaction.\n+\n+On top of this the receiver can poison analysis by randomly faking a round amount of satoshi for the additional output.\n+\n+===<span id=\"output-substitution\"></span>Payment output substitution===\n+\n+The receiver is free to change the output paying to himself.\n+For example, if the sender's scriptPubKey type is P2WPKH while the receiver's payment output in the original PSBT is P2SH, then the receiver can substitute the payment output to be P2WPKH to match the sender's scriptPubKey type.\n+\n+===<span id=\"unsecured-payjoin\"></span>Unsecured payjoin server===\n+\n+A receiver might run the payment server (generating the BIP21 invoice) on a different server than the payjoin server, which could be less trusted than the payment server.\n+\n+In such case, the payment server can signal to the sender, via the BIP21 parameter <code>pjos=0</code>, that they MUST disallow [[#output-substitution|payment output substitution]].\n+A compromised payjoin server could still the hot wallet outputs of the receiver, but would not be able to re-route payment to himself.",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 352,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This sentence seems malformed.",
      "created_at": "2020-06-19T10:23:48Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442759854",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442759854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442769148",
      "pull_request_review_id": 433980232,
      "id": 442769148,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc2OTE0OA==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 157,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The receiver should always be allowed to increase the amount for any of his outputs. (In fact it's OK to increase the amount of any output.)",
      "created_at": "2020-06-19T10:45:51Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442769148",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442769148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442822231",
      "pull_request_review_id": 434051739,
      "id": 442822231,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgyMjIzMQ==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* Verify that the absolute fee of the payjoin proposal is equals or higher than the original PSBT.\n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+*** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+** If the output is the payment output and payment output substitution is allowed.\n+*** Do not make any check\n+** Else\n+*** Make sure the output's value did not decreased.\n+** Verify that all sender's outputs (ie, all outputs except the output actually paid to the receiver) from the original PSBT are in the proposal.\n+* Once the proposal is signed, if <code>minfeerate</code> was specified, check that the fee rate of the payjoin transaction is not less than this value.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender must allow the receiver to add/remove or modify the receiver's own outputs (if [[#output-substitution|payment output substitution]], the payment's output should not be modified)",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 286,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewkozlik",
        "id": 42678794,
        "node_id": "MDQ6VXNlcjQyNjc4Nzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/42678794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewkozlik",
        "html_url": "https://github.com/andrewkozlik",
        "followers_url": "https://api.github.com/users/andrewkozlik/followers",
        "following_url": "https://api.github.com/users/andrewkozlik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewkozlik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewkozlik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewkozlik/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewkozlik/orgs",
        "repos_url": "https://api.github.com/users/andrewkozlik/repos",
        "events_url": "https://api.github.com/users/andrewkozlik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewkozlik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The statement in the parentheses doesn't make sense. It should say \"if payment output substitution **is disabled**, the **receiver**'s outputs must not be **removed or decreased in value**.\"",
      "created_at": "2020-06-19T12:52:14Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442822231",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442822231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442836046",
      "pull_request_review_id": 434071049,
      "id": 442836046,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNjA0Ng==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 157,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": 442769148,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`s/modify his own output/modify the receiver's output/`\r\n",
      "created_at": "2020-06-19T13:19:58Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442836046",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442836046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442836752",
      "pull_request_review_id": 434072057,
      "id": 442836752,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNjc1Mg==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* Verify that the absolute fee of the payjoin proposal is equals or higher than the original PSBT.\n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+*** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+** If the output is the payment output and payment output substitution is allowed.\n+*** Do not make any check\n+** Else\n+*** Make sure the output's value did not decreased.\n+** Verify that all sender's outputs (ie, all outputs except the output actually paid to the receiver) from the original PSBT are in the proposal.\n+* Once the proposal is signed, if <code>minfeerate</code> was specified, check that the fee rate of the payjoin transaction is not less than this value.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender must allow the receiver to add/remove or modify the receiver's own outputs (if [[#output-substitution|payment output substitution]], the payment's output should not be modified)\n+* The sender should allow the receiver to not add any inputs. This is useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When blocks are not full, the original transaction might already at the minimum relay fee rate (currently 1 satoshi per virtual byte), so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below the minimum relay fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+See the [[#fee-output|Fee output]] section for more information.\n+\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+The recommended value <code>maxadditionalfeecontribution=</code> is explained in the [[#fee-output|Fee output]] section.\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Receiver does not need to be a full node===\n+\n+Because the receiver needs to bump the fee to keep the same fee rate as the original PSBT, it needs the input's UTXO information to know what is the original fee rate. Without PSBT, light wallets like Wasabi Wallet would not be able to receive a payjoin transaction.\n+\n+The validation (policy and consensus) of the original transaction is optional: a receiver without a full node can decide to create the payjoin transaction and automatically broadcast the original transaction after a timeout of 1 minute, and only verify that it has been propagated in the network.\n+\n+However, non-interactive receivers (like a payment processor) need to verify the transaction to prevent UTXO probing attacks. \n+\n+This is not a concern for interactive receivers like Wasabi Wallet, because those receivers can just limit the number of original PSBT proposals of a specific address to one. With such wallets, the attacker has no way to generate new deposit addresses to probe the UTXOs.\n+\n+===<span id=\"spare-change\"></span>Spare change donation===\n+\n+Small change inside wallets are detrimental to privacy. Mixers like Wasabi wallet, because of its protocol, eventually generate such [[https://docs.wasabiwallet.io/using-wasabi/ChangeCoins.html#first-round-coinjoin-change|small change]].\n+\n+A common way to protect your privacy is to donate those spare changes, to deposit them in an exchange or on your favorite merchant's store account. Those kind of transactions can easily be spotted on the blockchain: There is only one output.\n+\n+However, if you donate via payjoin, it will look like a normal transaction.\n+\n+On top of this the receiver can poison analysis by randomly faking a round amount of satoshi for the additional output.\n+\n+===<span id=\"output-substitution\"></span>Payment output substitution===\n+\n+The receiver is free to change the output paying to himself.\n+For example, if the sender's scriptPubKey type is P2WPKH while the receiver's payment output in the original PSBT is P2SH, then the receiver can substitute the payment output to be P2WPKH to match the sender's scriptPubKey type.\n+\n+===<span id=\"unsecured-payjoin\"></span>Unsecured payjoin server===\n+\n+A receiver might run the payment server (generating the BIP21 invoice) on a different server than the payjoin server, which could be less trusted than the payment server.\n+\n+In such case, the payment server can signal to the sender, via the BIP21 parameter <code>pjos=0</code>, that they MUST disallow [[#output-substitution|payment output substitution]].\n+A compromised payjoin server could still the hot wallet outputs of the receiver, but would not be able to re-route payment to himself.\n+\n+===Impacted heuristics===\n+\n+Our proposal of payjoin is breaking the following blockchain heuristics:\n+\n+* Common inputs heuristics.\n+\n+Because payjoin is mixing the inputs of the sender and receiver, this heuristic becomes unreliable.\n+\n+* Change identification from scriptPubKey type heuristics\n+\n+When Alice pays Bob, if Alice is using P2SH but Bob's deposit address is P2WPKH, the heuristic would assume that the P2SH output is the change address of Alice.\n+This is now however a broken assumption, as the payjoin receiver has the freedom to mislead analytics by purposefully changing the invoice's address in the payjoin transaction.\n+\n+Alternatively, if the original address of Bob is P2WPKH and Alice's address is also P2WPKH, Bob can change the receiving address in the payjoin to P2SH. The heuristic would wrongfully identify the payjoin's receiving address as the change address of the transaction.\n+\n+See [[#output-substitution|payment output substitution]].\n+\n+* Change identification from round change amount\n+\n+If Alice pays Bob, she might be tempted to pay him a round amount, like <code>1.23000000 BTC</code>. When this happens, blockchain analysis often identifies the output without the round amount as the change of the transaction.\n+\n+For this reason, during a [[#spare-change|spare change]] case, the receiver may add an output with a rounded amount randomly.\n+\n+==Attack vectors==\n+\n+===<span id=\"probing-attack\"></span>On the receiver side: UTXO probing attack===\n+\n+When the receiver creates a payjoin proposal, they expose one or more inputs belonging to them.\n+\n+An attacker could create multiple original transactions in order to learn the UTXOs of the receiver, while not broadcasting the payjoin proposal.\n+\n+While we cannot prevent this type of attack entirely, we implemented the following mitigations:\n+\n+* When the receiver detects an original transaction being broadcast, or if the receiver detects that the original transaction has been double spent, then they will reuse the UTXO that was exposed for the next payjoin.\n+* While the exposed UTXO will be reused in priority to not leak other UTXOs, there is no strong guarantee about it. This prevents the attacker from detecting with certainty the next payjoin of the merchant to another peer.\n+\n+Note that probing attacks are only a problem for automated payment systems such as BTCPay Server. End-user wallets with payjoin capabilities are not affected, as the attacker can't create multiple invoices to force the receiver to expose their UTXOs.\n+\n+===On the sender side: Double payment risk for hardware wallets===\n+\n+For a successful payjoin to happen, the sender needs to sign two transactions double spending each other: The original transaction and the payjoin proposal.\n+\n+The sender's software wallet can verify that the payjoin proposal is legitimate by the sender's checklist.\n+\n+However, a hardware wallet can't verify that this is indeed the case. This means that the security guarantee of the hardware wallet is decreased. If the sender's software is compromised, the hardware wallet would sign two valid transactions, thus sending two payments.\n+\n+Without payjoin, the maximum amount of money that could be lost by a compromised software is equal to one payment (via [[#output-substitution|payment output substitution]]).\n+Note that the sender can disallow [[#output-substitution|payment output substitution]] by using the optional parameter <code>disableoutputsubstitution=true</code>.\n+\n+With payjoin, the maximum amount of money that can be lost is equal to two payments.\n+\n+==Reference sender's implementation==\n+\n+Here is pseudo code of a sender implementation.\n+<code>RequestPayjoin</code> takes the bip21 URI of the payment, the wallet and the <code>signedPSBT</code>.\n+\n+The <code>signedPSBT</code> represents a PSBT which has been fully signed, but not yet finalized.\n+We then prepare <code>originalPSBT</code> from the <code>signedPSBT</code> via the <code>CreateOriginalPSBT</code> function and get back the <code>proposal</code>.\n+\n+While we verify the <code>proposal</code>, we also import into it informations about our own inputs and outputs from the <code>signedPSBT</code>.\n+At the end of this <code>RequestPayjoin</code>, the proposal is verified and ready to be signed.\n+\n+We logged the different PSBT involved, and show the result in our [[#test-vectors|test vectors]].\n+<pre>\n+public async Task<PSBT> RequestPayjoin(\n+    BIP21Uri bip21,\n+    Wallet wallet,\n+    PSBT signedPSBT,\n+    PayjoinClientParameters optionalParameters)\n+{\n+    Log(\"signed PSBT\" + signedPSBT);\n+    // Extracting the pj link.\n+    var endpoint = bip21.ExtractPayjointEndpoint();\n+    if (signedPSBT.IsAllFinalized())\n+        throw new InvalidOperationException(\"The original PSBT should not be finalized.\");\n+    ScriptPubKeyType inputScriptType = wallet.ScriptPubKeyType();\n+    PSBTOutput feePSBTOutput = null;\n+\n+    bool allowOutputSubstitution = !optionalParameters.DisableOutputSubstitution;\n+    if (bip21.Parameters.Contains(\"pjos\") && bip21.Parameters[\"pjos\"] == \"0\")\n+        allowOutputSubstitution = false;\n+\n+    if (optionalParameters.AdditionalFeeOutputIndex != null && optionalParameters.MaxAdditionalFeeContribution != null)\n+        feePSBTOutput = signedPSBT.Outputs[optionalParameters.AdditionalFeeOutputIndex];\n+    Script paymentScriptPubKey = bip21.Address == null ? null : bip21.Address.ScriptPubKey;\n+    decimal originalFee = signedPSBT.GetFee();\n+    PSBT originalPSBT = CreateOriginalPSBT(signedPSBT);\n+    Transaction originalGlobalTx = signedPSBT.GetGlobalTransaction();\n+    TxOut feeOutput = feePSBTOutput == null ? null : originalGlobalTx.Outputs[feePSBTOutput.Index];\n+    var originalInputs = new Queue<(TxIn OriginalTxIn, PSBTInput SignedPSBTInput)>();\n+    for (int i = 0; i < originalGlobalTx.Inputs.Count; i++)\n+    {\n+        originalInputs.Enqueue((originalGlobalTx.Inputs[i], signedPSBT.Inputs[i]));\n+    }\n+    var originalOutputs = new Queue<(TxOut OriginalTxOut, PSBTOutput SignedPSBTOutput)>();\n+    for (int i = 0; i < originalGlobalTx.Outputs.Count; i++)\n+    {\n+      originalOutputs.Enqueue((originalGlobalTx.Outputs[i], signedPSBT.Outputs[i]));\n+    }\n+    // Add the client side query string parameters\n+    endpoint = ApplyOptionalParameters(endpoint, optionalParameters);\n+    Log(\"original PSBT\" + originalPSBT);\n+    PSBT proposal = await SendOriginalTransaction(endpoint, originalPSBT, cancellationToken);\n+    Log(\"payjoin proposal\" + proposal);\n+    // Checking that the PSBT of the receiver is clean\n+    if (proposal.GlobalXPubs.Any())\n+    {\n+        throw new PayjoinSenderException(\"GlobalXPubs should not be included in the receiver's PSBT\");\n+    }\n+    ////////////\n+\n+    if (proposal.CheckSanity() is List<PSBTError> errors && errors.Count > 0)\n+        throw new PayjoinSenderException($\"The proposal PSBT is not sane ({errors[0]})\");\n+\n+    var proposalGlobalTx = proposal.GetGlobalTransaction();\n+    // Verify that the transaction version, and nLockTime are unchanged.\n+    if (proposalGlobalTx.Version != originalGlobalTx.Version)\n+        throw new PayjoinSenderException($\"The proposal PSBT changed the transaction version\");\n+    if (proposalGlobalTx.LockTime != originalGlobalTx.LockTime)\n+        throw new PayjoinSenderException($\"The proposal PSBT changed the nLocktime\");\n+\n+    HashSet<Sequence> sequences = new HashSet<Sequence>();\n+    // For each inputs in the proposal:\n+    foreach (PSBTInput proposedPSBTInput in proposal.Inputs)\n+    {\n+        if (proposedPSBTInput.HDKeyPaths.Count != 0)\n+            throw new PayjoinSenderException(\"The receiver added keypaths to an input\");\n+        if (proposedPSBTInput.PartialSigs.Count != 0)\n+            throw new PayjoinSenderException(\"The receiver added partial signatures to an input\");\n+        PSBTInput proposedTxIn = proposalGlobalTx.Inputs.FindIndexedInput(proposedPSBTInput.PrevOut).TxIn;\n+        bool isOurInput = originalInputs.Count > 0 && originalInputs.Peek().OriginalTxIn.PrevOut == proposedPSBTInput.PrevOut;\n+        // If it is one of our input\n+        if (isOurInput)\n+        {\n+            OutPoint inputPrevout = ourPrevouts.Dequeue();\n+            TxIn originalTxin = originalGlobalTx.Inputs.FromOutpoint(inputPrevout);\n+            PSBTInput originalPSBTInput = originalPSBT.Inputs.FromOutpoint(inputPrevout);\n+            // Verify that sequence is unchanged.\n+            if (input.OriginalTxIn.Sequence != proposedTxIn.Sequence)\n+                throw new PayjoinSenderException(\"The proposedTxIn modified the sequence of one of our inputs\")\n+            // Verify the PSBT input is not finalized\n+            if (proposedPSBTInput.IsFinalized())\n+                throw new PayjoinSenderException(\"The receiver finalized one of our inputs\");\n+            // Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+            if (proposedPSBTInput.NonWitnessUtxo != null || proposedPSBTInput.WitnessUtxo != null)\n+                throw new PayjoinSenderException(\"The receiver added non_witness_utxo or witness_utxo to one of our inputs\");\n+            sequences.Add(proposedTxIn.Sequence);\n+            \n+            // Fill up the info from the original PSBT input so we can sign and get fees.\n+            proposedPSBTInput.NonWitnessUtxo = input.SignedPSBTInput.NonWitnessUtxo;\n+            proposedPSBTInput.WitnessUtxo = input.SignedPSBTInput.WitnessUtxo;\n+            // We fill up information we had on the signed PSBT, so we can sign it.\n+            foreach (var hdKey in input.SignedPSBTInput.HDKeyPaths)\n+            proposedPSBTInput.HDKeyPaths.Add(hdKey.Key, hdKey.Value);\n+            proposedPSBTInput.RedeemScript = signedPSBTInput.RedeemScript;\n+            proposedPSBTInput.RedeemScript = input.SignedPSBTInput.RedeemScript;\n+        }\n+        else\n+        {\n+            // Verify the PSBT input is finalized\n+            if (!proposedPSBTInput.IsFinalized())\n+                throw new PayjoinSenderException(\"The receiver did not finalized one of their input\");\n+            // Verify that non_witness_utxo or witness_utxo are filled in.\n+            if (proposedPSBTInput.NonWitnessUtxo == null && proposedPSBTInput.WitnessUtxo == null)\n+                throw new PayjoinSenderException(\"The receiver did not specify non_witness_utxo or witness_utxo for one of their inputs\");\n+            sequences.Add(proposedTxIn.Sequence);\n+            // Verify that the payjoin proposal did not introduced mixed inputs' type.\n+            if (inputScriptType != proposedPSBTInput.GetInputScriptPubKeyType())\n+                throw new PayjoinSenderException(\"Mixed input type detected in the proposal\");\n+        }\n+    }\n+\n+    // Verify that all of sender's inputs from the original PSBT are in the proposal.\n+    if (originalInputs.Count != 0)\n+        throw new PayjoinSenderException(\"Some of our inputs are not included in the proposal\");\n+\n+    // Verify that the payjoin proposal did not introduced mixed inputs' sequence.\n+    if (sequences.Count != 1)\n+        throw new PayjoinSenderException(\"Mixed sequence detected in the proposal\");\n+\n+    decimal newFee = proposal.GetFee();\n+    decimal additionalFee = newFee - originalFee;\n+    if (additionalFee < 0)\n+      throw new PayjoinSenderException(\"The receiver decreased absolute fee\");\n+    // For each outputs in the proposal:\n+    foreach (PSBTOutput proposedPSBTOutput in proposal.Outputs)\n+    {\n+        // Verify that no keypaths is in the PSBT output\n+        if (proposedPSBTOutput.HDKeyPaths.Count != 0)\n+            throw new PayjoinSenderException(\"The receiver added keypaths to an output\");\n+        bool isOriginalOutput = originalOutputs.Count > 0 && originalOutputs.Peek().OriginalTxOut.ScriptPubKey == proposedPSBTOutput.ScriptPubKey;\n+        if (isOriginalOutput)\n+        {\n+            var originalOutput = originalOutputs.Dequeue();\n+            if (output.OriginalTxOut == feeOutput)\n+            {\n+                var actualContribution = feeOutput.Value - proposedPSBTOutput.Value;\n+                // The amount that was substracted from the output's value is less or equal to maxadditionalfeecontribution\n+                if (actualContribution > optionalParameters.MaxAdditionalFeeContribution)\n+                    throw new PayjoinSenderException(\"The actual contribution is more than maxadditionalfeecontribution\");\n+                // Make sure the actual contribution is only paying fee\n+                if (actualContribution > additionalFee)\n+                    throw new PayjoinSenderException(\"The actual contribution is not only paying fee\");\n+                // Make sure the actual contribution is only paying for fee incurred by additional inputs\n+                int additionalInputsCount = proposalGlobalTx.Inputs.Count - originalGlobalTx.Inputs.Count;\n+                if (actualContribution > originalFeeRate * GetVirtualSize(inputScriptType) * additionalInputsCount)\n+                    throw new PayjoinSenderException(\"The actual contribution is not only paying for additional inputs\");\n+            }\n+            else if (allowOutputSubstitution && output.OriginalTxOut.ScriptPubKey == paymentScriptPubKey)\n+            {\n+                // That's the payment output, the receiver may have changed it.\n+            }\n+            else\n+            {\n+                if (originalOutput.OriginalTxOut.Value > proposedPSBTOutput.Value)\n+                    throw new PayjoinSenderException(\"The receiver decreased the value of one of the outputs\");\n+            }\n+            // We fill up information we had on the signed PSBT, so we can sign it.\n+            foreach (var hdKey in output.SignedPSBTOutput.HDKeyPaths)\n+                proposedPSBTOutput.HDKeyPaths.Add(hdKey.Key, hdKey.Value);\n+            proposedPSBTOutput.RedeemScript = output.SignedPSBTOutput.RedeemScript;\n+        }\n+    }\n+    // Verify that all of sender's outputs from the original PSBT are in the proposal.\n+    if (originalOutputs.Count != 0)\n+    {\n+        // The payment output may have been substituted\n+        if (!allowOutputSubstitution ||\n+            originalOutputs.Count != 1 ||\n+            originalOutputs.Dequeue().OriginalTxOut.ScriptPubKey != paymentScriptPubKey)\n+            {\n+                throw new PayjoinSenderException(\"Some of our outputs are not included in the proposal\");\n+            }\n+    }\n+\n+    // After signing this proposal, we should check if minfeerate is respected.\n+    Log(\"payjoin proposal filled with sender's information\" + proposal);\n+    return proposal;\n+}\n+\n+int GetVirtualSize(ScriptPubKeyType? scriptPubKeyType)\n+{\n+    switch (scriptPubKeyType)\n+    {\n+        case ScriptPubKeyType.Legacy:\n+            return 148;\n+        case ScriptPubKeyType.Segwit:\n+            return 68;\n+        case ScriptPubKeyType.SegwitP2SH:\n+            return 91;\n+        default:\n+            return 110;\n+    }\n+}\n+\n+// Finalize the signedPSBT and remove confidential information\n+PSBT CreateOriginalPSBT(PSBT signedPSBT)\n+{\n+    var original = signedPSBT.Clone();\n+    original = original.Finalize();\n+    foreach (var input in original.Inputs)\n+    {\n+        input.HDKeyPaths.Clear();\n+        input.PartialSigs.Clear();\n+        input.Unknown.Clear();\n+    }\n+    foreach (var output in original.Outputs)\n+    {\n+        output.Unknown.Clear();\n+        output.HDKeyPaths.Clear();\n+    }\n+    original.GlobalXPubs.Clear();\n+    return original;\n+}\n+</pre>\n+\n+==<span id=\"test-vectors\"></span>Test vectors==\n+\n+A successful exchange with:\n+\n+{| class=\"wikitable\"\n+!InputScriptType\n+!Orginal PSBT Fee rate\n+!maxadditionalfeecontribution\n+!additionalfeeoutputindex\n+|-\n+|P2SH-P2WSH\n+|2 sat/vbyte\n+|0.00000182\n+|0\n+|}\n+\n+<code>signed PSBT</code>",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 646,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "what is \"signed PSBT\"?",
      "created_at": "2020-06-19T13:21:24Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442836752",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442836752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 646,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442838290",
      "pull_request_review_id": 434074173,
      "id": 442838290,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzODI5MA==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* Verify that the absolute fee of the payjoin proposal is equals or higher than the original PSBT.\n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+*** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+** If the output is the payment output and payment output substitution is allowed.\n+*** Do not make any check\n+** Else\n+*** Make sure the output's value did not decreased.",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 279,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`s/value did not decreased/value did not decrease/`",
      "created_at": "2020-06-19T13:24:21Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442838290",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442838290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442838672",
      "pull_request_review_id": 434074712,
      "id": 442838672,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzODY3Mg==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* Verify that the absolute fee of the payjoin proposal is equals or higher than the original PSBT.\n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 274,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`s/less or equals/less than or equal/`",
      "created_at": "2020-06-19T13:25:07Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442838672",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442838672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442838950",
      "pull_request_review_id": 434075077,
      "id": 442838950,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzODk1MA==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* Verify that the absolute fee of the payjoin proposal is equals or higher than the original PSBT.\n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 274,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": 442838672,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@RHavar btw this is the line that would forbid the absolute fee going down explicitly.",
      "created_at": "2020-06-19T13:25:39Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r442838950",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/442838950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/443282339",
      "pull_request_review_id": 434559741,
      "id": 443282339,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4MjMzOQ==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* Verify that the absolute fee of the payjoin proposal is equals or higher than the original PSBT.\n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 274,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": 442838672,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, it does not. The receiver could drop the fee from say 40 sat/vbyte to 10 sat/vbyte by changing his own input, pocketing the difference.  The actual contribution would still be 0, which is fine for the sender.",
      "created_at": "2020-06-22T01:45:23Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r443282339",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/443282339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/443282631",
      "pull_request_review_id": 434560102,
      "id": 443282631,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4MjYzMQ==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* Verify that the absolute fee of the payjoin proposal is equals or higher than the original PSBT.\n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+*** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+** If the output is the payment output and payment output substitution is allowed.\n+*** Do not make any check\n+** Else\n+*** Make sure the output's value did not decreased.\n+** Verify that all sender's outputs (ie, all outputs except the output actually paid to the receiver) from the original PSBT are in the proposal.\n+* Once the proposal is signed, if <code>minfeerate</code> was specified, check that the fee rate of the payjoin transaction is not less than this value.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender must allow the receiver to add/remove or modify the receiver's own outputs (if [[#output-substitution|payment output substitution]], the payment's output should not be modified)\n+* The sender should allow the receiver to not add any inputs. This is useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When blocks are not full, the original transaction might already at the minimum relay fee rate (currently 1 satoshi per virtual byte), so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below the minimum relay fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+See the [[#fee-output|Fee output]] section for more information.\n+\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+The recommended value <code>maxadditionalfeecontribution=</code> is explained in the [[#fee-output|Fee output]] section.\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Receiver does not need to be a full node===\n+\n+Because the receiver needs to bump the fee to keep the same fee rate as the original PSBT, it needs the input's UTXO information to know what is the original fee rate. Without PSBT, light wallets like Wasabi Wallet would not be able to receive a payjoin transaction.\n+\n+The validation (policy and consensus) of the original transaction is optional: a receiver without a full node can decide to create the payjoin transaction and automatically broadcast the original transaction after a timeout of 1 minute, and only verify that it has been propagated in the network.\n+\n+However, non-interactive receivers (like a payment processor) need to verify the transaction to prevent UTXO probing attacks. \n+\n+This is not a concern for interactive receivers like Wasabi Wallet, because those receivers can just limit the number of original PSBT proposals of a specific address to one. With such wallets, the attacker has no way to generate new deposit addresses to probe the UTXOs.\n+\n+===<span id=\"spare-change\"></span>Spare change donation===\n+\n+Small change inside wallets are detrimental to privacy. Mixers like Wasabi wallet, because of its protocol, eventually generate such [[https://docs.wasabiwallet.io/using-wasabi/ChangeCoins.html#first-round-coinjoin-change|small change]].\n+\n+A common way to protect your privacy is to donate those spare changes, to deposit them in an exchange or on your favorite merchant's store account. Those kind of transactions can easily be spotted on the blockchain: There is only one output.\n+\n+However, if you donate via payjoin, it will look like a normal transaction.\n+\n+On top of this the receiver can poison analysis by randomly faking a round amount of satoshi for the additional output.\n+\n+===<span id=\"output-substitution\"></span>Payment output substitution===\n+\n+The receiver is free to change the output paying to himself.\n+For example, if the sender's scriptPubKey type is P2WPKH while the receiver's payment output in the original PSBT is P2SH, then the receiver can substitute the payment output to be P2WPKH to match the sender's scriptPubKey type.\n+\n+===<span id=\"unsecured-payjoin\"></span>Unsecured payjoin server===\n+\n+A receiver might run the payment server (generating the BIP21 invoice) on a different server than the payjoin server, which could be less trusted than the payment server.\n+\n+In such case, the payment server can signal to the sender, via the BIP21 parameter <code>pjos=0</code>, that they MUST disallow [[#output-substitution|payment output substitution]].\n+A compromised payjoin server could still the hot wallet outputs of the receiver, but would not be able to re-route payment to himself.\n+\n+===Impacted heuristics===\n+\n+Our proposal of payjoin is breaking the following blockchain heuristics:\n+\n+* Common inputs heuristics.\n+\n+Because payjoin is mixing the inputs of the sender and receiver, this heuristic becomes unreliable.\n+\n+* Change identification from scriptPubKey type heuristics\n+\n+When Alice pays Bob, if Alice is using P2SH but Bob's deposit address is P2WPKH, the heuristic would assume that the P2SH output is the change address of Alice.\n+This is now however a broken assumption, as the payjoin receiver has the freedom to mislead analytics by purposefully changing the invoice's address in the payjoin transaction.\n+\n+Alternatively, if the original address of Bob is P2WPKH and Alice's address is also P2WPKH, Bob can change the receiving address in the payjoin to P2SH. The heuristic would wrongfully identify the payjoin's receiving address as the change address of the transaction.\n+\n+See [[#output-substitution|payment output substitution]].\n+\n+* Change identification from round change amount\n+\n+If Alice pays Bob, she might be tempted to pay him a round amount, like <code>1.23000000 BTC</code>. When this happens, blockchain analysis often identifies the output without the round amount as the change of the transaction.\n+\n+For this reason, during a [[#spare-change|spare change]] case, the receiver may add an output with a rounded amount randomly.\n+\n+==Attack vectors==\n+\n+===<span id=\"probing-attack\"></span>On the receiver side: UTXO probing attack===\n+\n+When the receiver creates a payjoin proposal, they expose one or more inputs belonging to them.\n+\n+An attacker could create multiple original transactions in order to learn the UTXOs of the receiver, while not broadcasting the payjoin proposal.\n+\n+While we cannot prevent this type of attack entirely, we implemented the following mitigations:\n+\n+* When the receiver detects an original transaction being broadcast, or if the receiver detects that the original transaction has been double spent, then they will reuse the UTXO that was exposed for the next payjoin.\n+* While the exposed UTXO will be reused in priority to not leak other UTXOs, there is no strong guarantee about it. This prevents the attacker from detecting with certainty the next payjoin of the merchant to another peer.\n+\n+Note that probing attacks are only a problem for automated payment systems such as BTCPay Server. End-user wallets with payjoin capabilities are not affected, as the attacker can't create multiple invoices to force the receiver to expose their UTXOs.\n+\n+===On the sender side: Double payment risk for hardware wallets===\n+\n+For a successful payjoin to happen, the sender needs to sign two transactions double spending each other: The original transaction and the payjoin proposal.\n+\n+The sender's software wallet can verify that the payjoin proposal is legitimate by the sender's checklist.\n+\n+However, a hardware wallet can't verify that this is indeed the case. This means that the security guarantee of the hardware wallet is decreased. If the sender's software is compromised, the hardware wallet would sign two valid transactions, thus sending two payments.\n+\n+Without payjoin, the maximum amount of money that could be lost by a compromised software is equal to one payment (via [[#output-substitution|payment output substitution]]).\n+Note that the sender can disallow [[#output-substitution|payment output substitution]] by using the optional parameter <code>disableoutputsubstitution=true</code>.\n+\n+With payjoin, the maximum amount of money that can be lost is equal to two payments.\n+\n+==Reference sender's implementation==\n+\n+Here is pseudo code of a sender implementation.\n+<code>RequestPayjoin</code> takes the bip21 URI of the payment, the wallet and the <code>signedPSBT</code>.\n+\n+The <code>signedPSBT</code> represents a PSBT which has been fully signed, but not yet finalized.\n+We then prepare <code>originalPSBT</code> from the <code>signedPSBT</code> via the <code>CreateOriginalPSBT</code> function and get back the <code>proposal</code>.\n+\n+While we verify the <code>proposal</code>, we also import into it informations about our own inputs and outputs from the <code>signedPSBT</code>.\n+At the end of this <code>RequestPayjoin</code>, the proposal is verified and ready to be signed.\n+\n+We logged the different PSBT involved, and show the result in our [[#test-vectors|test vectors]].\n+<pre>\n+public async Task<PSBT> RequestPayjoin(\n+    BIP21Uri bip21,\n+    Wallet wallet,\n+    PSBT signedPSBT,\n+    PayjoinClientParameters optionalParameters)\n+{\n+    Log(\"signed PSBT\" + signedPSBT);\n+    // Extracting the pj link.\n+    var endpoint = bip21.ExtractPayjointEndpoint();\n+    if (signedPSBT.IsAllFinalized())\n+        throw new InvalidOperationException(\"The original PSBT should not be finalized.\");\n+    ScriptPubKeyType inputScriptType = wallet.ScriptPubKeyType();\n+    PSBTOutput feePSBTOutput = null;\n+\n+    bool allowOutputSubstitution = !optionalParameters.DisableOutputSubstitution;\n+    if (bip21.Parameters.Contains(\"pjos\") && bip21.Parameters[\"pjos\"] == \"0\")\n+        allowOutputSubstitution = false;\n+\n+    if (optionalParameters.AdditionalFeeOutputIndex != null && optionalParameters.MaxAdditionalFeeContribution != null)\n+        feePSBTOutput = signedPSBT.Outputs[optionalParameters.AdditionalFeeOutputIndex];\n+    Script paymentScriptPubKey = bip21.Address == null ? null : bip21.Address.ScriptPubKey;\n+    decimal originalFee = signedPSBT.GetFee();\n+    PSBT originalPSBT = CreateOriginalPSBT(signedPSBT);\n+    Transaction originalGlobalTx = signedPSBT.GetGlobalTransaction();\n+    TxOut feeOutput = feePSBTOutput == null ? null : originalGlobalTx.Outputs[feePSBTOutput.Index];\n+    var originalInputs = new Queue<(TxIn OriginalTxIn, PSBTInput SignedPSBTInput)>();\n+    for (int i = 0; i < originalGlobalTx.Inputs.Count; i++)\n+    {\n+        originalInputs.Enqueue((originalGlobalTx.Inputs[i], signedPSBT.Inputs[i]));\n+    }\n+    var originalOutputs = new Queue<(TxOut OriginalTxOut, PSBTOutput SignedPSBTOutput)>();\n+    for (int i = 0; i < originalGlobalTx.Outputs.Count; i++)\n+    {\n+      originalOutputs.Enqueue((originalGlobalTx.Outputs[i], signedPSBT.Outputs[i]));\n+    }\n+    // Add the client side query string parameters\n+    endpoint = ApplyOptionalParameters(endpoint, optionalParameters);\n+    Log(\"original PSBT\" + originalPSBT);\n+    PSBT proposal = await SendOriginalTransaction(endpoint, originalPSBT, cancellationToken);\n+    Log(\"payjoin proposal\" + proposal);\n+    // Checking that the PSBT of the receiver is clean\n+    if (proposal.GlobalXPubs.Any())\n+    {\n+        throw new PayjoinSenderException(\"GlobalXPubs should not be included in the receiver's PSBT\");\n+    }\n+    ////////////\n+\n+    if (proposal.CheckSanity() is List<PSBTError> errors && errors.Count > 0)\n+        throw new PayjoinSenderException($\"The proposal PSBT is not sane ({errors[0]})\");\n+\n+    var proposalGlobalTx = proposal.GetGlobalTransaction();\n+    // Verify that the transaction version, and nLockTime are unchanged.\n+    if (proposalGlobalTx.Version != originalGlobalTx.Version)\n+        throw new PayjoinSenderException($\"The proposal PSBT changed the transaction version\");\n+    if (proposalGlobalTx.LockTime != originalGlobalTx.LockTime)\n+        throw new PayjoinSenderException($\"The proposal PSBT changed the nLocktime\");\n+\n+    HashSet<Sequence> sequences = new HashSet<Sequence>();\n+    // For each inputs in the proposal:\n+    foreach (PSBTInput proposedPSBTInput in proposal.Inputs)\n+    {\n+        if (proposedPSBTInput.HDKeyPaths.Count != 0)\n+            throw new PayjoinSenderException(\"The receiver added keypaths to an input\");\n+        if (proposedPSBTInput.PartialSigs.Count != 0)\n+            throw new PayjoinSenderException(\"The receiver added partial signatures to an input\");\n+        PSBTInput proposedTxIn = proposalGlobalTx.Inputs.FindIndexedInput(proposedPSBTInput.PrevOut).TxIn;\n+        bool isOurInput = originalInputs.Count > 0 && originalInputs.Peek().OriginalTxIn.PrevOut == proposedPSBTInput.PrevOut;\n+        // If it is one of our input\n+        if (isOurInput)\n+        {\n+            OutPoint inputPrevout = ourPrevouts.Dequeue();\n+            TxIn originalTxin = originalGlobalTx.Inputs.FromOutpoint(inputPrevout);\n+            PSBTInput originalPSBTInput = originalPSBT.Inputs.FromOutpoint(inputPrevout);\n+            // Verify that sequence is unchanged.\n+            if (input.OriginalTxIn.Sequence != proposedTxIn.Sequence)\n+                throw new PayjoinSenderException(\"The proposedTxIn modified the sequence of one of our inputs\")\n+            // Verify the PSBT input is not finalized\n+            if (proposedPSBTInput.IsFinalized())\n+                throw new PayjoinSenderException(\"The receiver finalized one of our inputs\");\n+            // Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+            if (proposedPSBTInput.NonWitnessUtxo != null || proposedPSBTInput.WitnessUtxo != null)\n+                throw new PayjoinSenderException(\"The receiver added non_witness_utxo or witness_utxo to one of our inputs\");\n+            sequences.Add(proposedTxIn.Sequence);\n+            \n+            // Fill up the info from the original PSBT input so we can sign and get fees.\n+            proposedPSBTInput.NonWitnessUtxo = input.SignedPSBTInput.NonWitnessUtxo;\n+            proposedPSBTInput.WitnessUtxo = input.SignedPSBTInput.WitnessUtxo;\n+            // We fill up information we had on the signed PSBT, so we can sign it.\n+            foreach (var hdKey in input.SignedPSBTInput.HDKeyPaths)\n+            proposedPSBTInput.HDKeyPaths.Add(hdKey.Key, hdKey.Value);\n+            proposedPSBTInput.RedeemScript = signedPSBTInput.RedeemScript;\n+            proposedPSBTInput.RedeemScript = input.SignedPSBTInput.RedeemScript;\n+        }\n+        else\n+        {\n+            // Verify the PSBT input is finalized\n+            if (!proposedPSBTInput.IsFinalized())\n+                throw new PayjoinSenderException(\"The receiver did not finalized one of their input\");\n+            // Verify that non_witness_utxo or witness_utxo are filled in.\n+            if (proposedPSBTInput.NonWitnessUtxo == null && proposedPSBTInput.WitnessUtxo == null)\n+                throw new PayjoinSenderException(\"The receiver did not specify non_witness_utxo or witness_utxo for one of their inputs\");\n+            sequences.Add(proposedTxIn.Sequence);\n+            // Verify that the payjoin proposal did not introduced mixed inputs' type.\n+            if (inputScriptType != proposedPSBTInput.GetInputScriptPubKeyType())\n+                throw new PayjoinSenderException(\"Mixed input type detected in the proposal\");\n+        }\n+    }\n+\n+    // Verify that all of sender's inputs from the original PSBT are in the proposal.\n+    if (originalInputs.Count != 0)\n+        throw new PayjoinSenderException(\"Some of our inputs are not included in the proposal\");\n+\n+    // Verify that the payjoin proposal did not introduced mixed inputs' sequence.\n+    if (sequences.Count != 1)\n+        throw new PayjoinSenderException(\"Mixed sequence detected in the proposal\");\n+\n+    decimal newFee = proposal.GetFee();\n+    decimal additionalFee = newFee - originalFee;\n+    if (additionalFee < 0)\n+      throw new PayjoinSenderException(\"The receiver decreased absolute fee\");\n+    // For each outputs in the proposal:\n+    foreach (PSBTOutput proposedPSBTOutput in proposal.Outputs)\n+    {\n+        // Verify that no keypaths is in the PSBT output\n+        if (proposedPSBTOutput.HDKeyPaths.Count != 0)\n+            throw new PayjoinSenderException(\"The receiver added keypaths to an output\");\n+        bool isOriginalOutput = originalOutputs.Count > 0 && originalOutputs.Peek().OriginalTxOut.ScriptPubKey == proposedPSBTOutput.ScriptPubKey;\n+        if (isOriginalOutput)\n+        {\n+            var originalOutput = originalOutputs.Dequeue();\n+            if (output.OriginalTxOut == feeOutput)\n+            {\n+                var actualContribution = feeOutput.Value - proposedPSBTOutput.Value;\n+                // The amount that was substracted from the output's value is less or equal to maxadditionalfeecontribution\n+                if (actualContribution > optionalParameters.MaxAdditionalFeeContribution)\n+                    throw new PayjoinSenderException(\"The actual contribution is more than maxadditionalfeecontribution\");\n+                // Make sure the actual contribution is only paying fee\n+                if (actualContribution > additionalFee)\n+                    throw new PayjoinSenderException(\"The actual contribution is not only paying fee\");\n+                // Make sure the actual contribution is only paying for fee incurred by additional inputs\n+                int additionalInputsCount = proposalGlobalTx.Inputs.Count - originalGlobalTx.Inputs.Count;\n+                if (actualContribution > originalFeeRate * GetVirtualSize(inputScriptType) * additionalInputsCount)\n+                    throw new PayjoinSenderException(\"The actual contribution is not only paying for additional inputs\");\n+            }\n+            else if (allowOutputSubstitution && output.OriginalTxOut.ScriptPubKey == paymentScriptPubKey)\n+            {\n+                // That's the payment output, the receiver may have changed it.\n+            }\n+            else\n+            {\n+                if (originalOutput.OriginalTxOut.Value > proposedPSBTOutput.Value)\n+                    throw new PayjoinSenderException(\"The receiver decreased the value of one of the outputs\");\n+            }\n+            // We fill up information we had on the signed PSBT, so we can sign it.\n+            foreach (var hdKey in output.SignedPSBTOutput.HDKeyPaths)\n+                proposedPSBTOutput.HDKeyPaths.Add(hdKey.Key, hdKey.Value);\n+            proposedPSBTOutput.RedeemScript = output.SignedPSBTOutput.RedeemScript;\n+        }\n+    }\n+    // Verify that all of sender's outputs from the original PSBT are in the proposal.\n+    if (originalOutputs.Count != 0)\n+    {\n+        // The payment output may have been substituted\n+        if (!allowOutputSubstitution ||\n+            originalOutputs.Count != 1 ||\n+            originalOutputs.Dequeue().OriginalTxOut.ScriptPubKey != paymentScriptPubKey)\n+            {\n+                throw new PayjoinSenderException(\"Some of our outputs are not included in the proposal\");\n+            }\n+    }\n+\n+    // After signing this proposal, we should check if minfeerate is respected.\n+    Log(\"payjoin proposal filled with sender's information\" + proposal);\n+    return proposal;\n+}\n+\n+int GetVirtualSize(ScriptPubKeyType? scriptPubKeyType)\n+{\n+    switch (scriptPubKeyType)\n+    {\n+        case ScriptPubKeyType.Legacy:\n+            return 148;\n+        case ScriptPubKeyType.Segwit:\n+            return 68;\n+        case ScriptPubKeyType.SegwitP2SH:\n+            return 91;\n+        default:\n+            return 110;\n+    }\n+}\n+\n+// Finalize the signedPSBT and remove confidential information\n+PSBT CreateOriginalPSBT(PSBT signedPSBT)\n+{\n+    var original = signedPSBT.Clone();\n+    original = original.Finalize();\n+    foreach (var input in original.Inputs)\n+    {\n+        input.HDKeyPaths.Clear();\n+        input.PartialSigs.Clear();\n+        input.Unknown.Clear();\n+    }\n+    foreach (var output in original.Outputs)\n+    {\n+        output.Unknown.Clear();\n+        output.HDKeyPaths.Clear();\n+    }\n+    original.GlobalXPubs.Clear();\n+    return original;\n+}\n+</pre>\n+\n+==<span id=\"test-vectors\"></span>Test vectors==\n+\n+A successful exchange with:\n+\n+{| class=\"wikitable\"\n+!InputScriptType\n+!Orginal PSBT Fee rate\n+!maxadditionalfeecontribution\n+!additionalfeeoutputindex\n+|-\n+|P2SH-P2WSH\n+|2 sat/vbyte\n+|0.00000182\n+|0\n+|}\n+\n+<code>signed PSBT</code>",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 646,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": 442836752,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I explained in `Reference sender's implementation`, basically a s signed unfinalized psbt.",
      "created_at": "2020-06-22T01:47:18Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r443282631",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/443282631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 646,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/443283024",
      "pull_request_review_id": 434560579,
      "id": 443283024,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4MzAyNA==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* Verify that the absolute fee of the payjoin proposal is equals or higher than the original PSBT.\n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 274,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": 442838672,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't see what your comment has to do about absolute fee of the original psbt going down.",
      "created_at": "2020-06-22T01:49:34Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r443283024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/443283024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/443283351",
      "pull_request_review_id": 434560935,
      "id": 443283351,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4MzM1MQ==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* Verify that the absolute fee of the payjoin proposal is equals or higher than the original PSBT.\n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+*** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+** If the output is the payment output and payment output substitution is allowed.\n+*** Do not make any check\n+** Else\n+*** Make sure the output's value did not decreased.\n+** Verify that all sender's outputs (ie, all outputs except the output actually paid to the receiver) from the original PSBT are in the proposal.\n+* Once the proposal is signed, if <code>minfeerate</code> was specified, check that the fee rate of the payjoin transaction is not less than this value.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender must allow the receiver to add/remove or modify the receiver's own outputs (if [[#output-substitution|payment output substitution]], the payment's output should not be modified)\n+* The sender should allow the receiver to not add any inputs. This is useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When blocks are not full, the original transaction might already at the minimum relay fee rate (currently 1 satoshi per virtual byte), so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below the minimum relay fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+See the [[#fee-output|Fee output]] section for more information.\n+\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+The recommended value <code>maxadditionalfeecontribution=</code> is explained in the [[#fee-output|Fee output]] section.\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Receiver does not need to be a full node===\n+\n+Because the receiver needs to bump the fee to keep the same fee rate as the original PSBT, it needs the input's UTXO information to know what is the original fee rate. Without PSBT, light wallets like Wasabi Wallet would not be able to receive a payjoin transaction.\n+\n+The validation (policy and consensus) of the original transaction is optional: a receiver without a full node can decide to create the payjoin transaction and automatically broadcast the original transaction after a timeout of 1 minute, and only verify that it has been propagated in the network.\n+\n+However, non-interactive receivers (like a payment processor) need to verify the transaction to prevent UTXO probing attacks. \n+\n+This is not a concern for interactive receivers like Wasabi Wallet, because those receivers can just limit the number of original PSBT proposals of a specific address to one. With such wallets, the attacker has no way to generate new deposit addresses to probe the UTXOs.\n+\n+===<span id=\"spare-change\"></span>Spare change donation===\n+\n+Small change inside wallets are detrimental to privacy. Mixers like Wasabi wallet, because of its protocol, eventually generate such [[https://docs.wasabiwallet.io/using-wasabi/ChangeCoins.html#first-round-coinjoin-change|small change]].\n+\n+A common way to protect your privacy is to donate those spare changes, to deposit them in an exchange or on your favorite merchant's store account. Those kind of transactions can easily be spotted on the blockchain: There is only one output.\n+\n+However, if you donate via payjoin, it will look like a normal transaction.\n+\n+On top of this the receiver can poison analysis by randomly faking a round amount of satoshi for the additional output.\n+\n+===<span id=\"output-substitution\"></span>Payment output substitution===\n+\n+The receiver is free to change the output paying to himself.\n+For example, if the sender's scriptPubKey type is P2WPKH while the receiver's payment output in the original PSBT is P2SH, then the receiver can substitute the payment output to be P2WPKH to match the sender's scriptPubKey type.\n+\n+===<span id=\"unsecured-payjoin\"></span>Unsecured payjoin server===\n+\n+A receiver might run the payment server (generating the BIP21 invoice) on a different server than the payjoin server, which could be less trusted than the payment server.\n+\n+In such case, the payment server can signal to the sender, via the BIP21 parameter <code>pjos=0</code>, that they MUST disallow [[#output-substitution|payment output substitution]].\n+A compromised payjoin server could still the hot wallet outputs of the receiver, but would not be able to re-route payment to himself.\n+\n+===Impacted heuristics===\n+\n+Our proposal of payjoin is breaking the following blockchain heuristics:\n+\n+* Common inputs heuristics.\n+\n+Because payjoin is mixing the inputs of the sender and receiver, this heuristic becomes unreliable.\n+\n+* Change identification from scriptPubKey type heuristics\n+\n+When Alice pays Bob, if Alice is using P2SH but Bob's deposit address is P2WPKH, the heuristic would assume that the P2SH output is the change address of Alice.\n+This is now however a broken assumption, as the payjoin receiver has the freedom to mislead analytics by purposefully changing the invoice's address in the payjoin transaction.\n+\n+Alternatively, if the original address of Bob is P2WPKH and Alice's address is also P2WPKH, Bob can change the receiving address in the payjoin to P2SH. The heuristic would wrongfully identify the payjoin's receiving address as the change address of the transaction.\n+\n+See [[#output-substitution|payment output substitution]].\n+\n+* Change identification from round change amount\n+\n+If Alice pays Bob, she might be tempted to pay him a round amount, like <code>1.23000000 BTC</code>. When this happens, blockchain analysis often identifies the output without the round amount as the change of the transaction.\n+\n+For this reason, during a [[#spare-change|spare change]] case, the receiver may add an output with a rounded amount randomly.\n+\n+==Attack vectors==\n+\n+===<span id=\"probing-attack\"></span>On the receiver side: UTXO probing attack===\n+\n+When the receiver creates a payjoin proposal, they expose one or more inputs belonging to them.\n+\n+An attacker could create multiple original transactions in order to learn the UTXOs of the receiver, while not broadcasting the payjoin proposal.\n+\n+While we cannot prevent this type of attack entirely, we implemented the following mitigations:\n+\n+* When the receiver detects an original transaction being broadcast, or if the receiver detects that the original transaction has been double spent, then they will reuse the UTXO that was exposed for the next payjoin.\n+* While the exposed UTXO will be reused in priority to not leak other UTXOs, there is no strong guarantee about it. This prevents the attacker from detecting with certainty the next payjoin of the merchant to another peer.\n+\n+Note that probing attacks are only a problem for automated payment systems such as BTCPay Server. End-user wallets with payjoin capabilities are not affected, as the attacker can't create multiple invoices to force the receiver to expose their UTXOs.\n+\n+===On the sender side: Double payment risk for hardware wallets===\n+\n+For a successful payjoin to happen, the sender needs to sign two transactions double spending each other: The original transaction and the payjoin proposal.\n+\n+The sender's software wallet can verify that the payjoin proposal is legitimate by the sender's checklist.\n+\n+However, a hardware wallet can't verify that this is indeed the case. This means that the security guarantee of the hardware wallet is decreased. If the sender's software is compromised, the hardware wallet would sign two valid transactions, thus sending two payments.\n+\n+Without payjoin, the maximum amount of money that could be lost by a compromised software is equal to one payment (via [[#output-substitution|payment output substitution]]).\n+Note that the sender can disallow [[#output-substitution|payment output substitution]] by using the optional parameter <code>disableoutputsubstitution=true</code>.\n+\n+With payjoin, the maximum amount of money that can be lost is equal to two payments.\n+\n+==Reference sender's implementation==\n+\n+Here is pseudo code of a sender implementation.\n+<code>RequestPayjoin</code> takes the bip21 URI of the payment, the wallet and the <code>signedPSBT</code>.\n+\n+The <code>signedPSBT</code> represents a PSBT which has been fully signed, but not yet finalized.\n+We then prepare <code>originalPSBT</code> from the <code>signedPSBT</code> via the <code>CreateOriginalPSBT</code> function and get back the <code>proposal</code>.\n+\n+While we verify the <code>proposal</code>, we also import into it informations about our own inputs and outputs from the <code>signedPSBT</code>.\n+At the end of this <code>RequestPayjoin</code>, the proposal is verified and ready to be signed.\n+\n+We logged the different PSBT involved, and show the result in our [[#test-vectors|test vectors]].\n+<pre>\n+public async Task<PSBT> RequestPayjoin(\n+    BIP21Uri bip21,\n+    Wallet wallet,\n+    PSBT signedPSBT,\n+    PayjoinClientParameters optionalParameters)\n+{\n+    Log(\"signed PSBT\" + signedPSBT);\n+    // Extracting the pj link.\n+    var endpoint = bip21.ExtractPayjointEndpoint();\n+    if (signedPSBT.IsAllFinalized())\n+        throw new InvalidOperationException(\"The original PSBT should not be finalized.\");\n+    ScriptPubKeyType inputScriptType = wallet.ScriptPubKeyType();\n+    PSBTOutput feePSBTOutput = null;\n+\n+    bool allowOutputSubstitution = !optionalParameters.DisableOutputSubstitution;\n+    if (bip21.Parameters.Contains(\"pjos\") && bip21.Parameters[\"pjos\"] == \"0\")\n+        allowOutputSubstitution = false;\n+\n+    if (optionalParameters.AdditionalFeeOutputIndex != null && optionalParameters.MaxAdditionalFeeContribution != null)\n+        feePSBTOutput = signedPSBT.Outputs[optionalParameters.AdditionalFeeOutputIndex];\n+    Script paymentScriptPubKey = bip21.Address == null ? null : bip21.Address.ScriptPubKey;\n+    decimal originalFee = signedPSBT.GetFee();\n+    PSBT originalPSBT = CreateOriginalPSBT(signedPSBT);\n+    Transaction originalGlobalTx = signedPSBT.GetGlobalTransaction();\n+    TxOut feeOutput = feePSBTOutput == null ? null : originalGlobalTx.Outputs[feePSBTOutput.Index];\n+    var originalInputs = new Queue<(TxIn OriginalTxIn, PSBTInput SignedPSBTInput)>();\n+    for (int i = 0; i < originalGlobalTx.Inputs.Count; i++)\n+    {\n+        originalInputs.Enqueue((originalGlobalTx.Inputs[i], signedPSBT.Inputs[i]));\n+    }\n+    var originalOutputs = new Queue<(TxOut OriginalTxOut, PSBTOutput SignedPSBTOutput)>();\n+    for (int i = 0; i < originalGlobalTx.Outputs.Count; i++)\n+    {\n+      originalOutputs.Enqueue((originalGlobalTx.Outputs[i], signedPSBT.Outputs[i]));\n+    }\n+    // Add the client side query string parameters\n+    endpoint = ApplyOptionalParameters(endpoint, optionalParameters);\n+    Log(\"original PSBT\" + originalPSBT);\n+    PSBT proposal = await SendOriginalTransaction(endpoint, originalPSBT, cancellationToken);\n+    Log(\"payjoin proposal\" + proposal);\n+    // Checking that the PSBT of the receiver is clean\n+    if (proposal.GlobalXPubs.Any())\n+    {\n+        throw new PayjoinSenderException(\"GlobalXPubs should not be included in the receiver's PSBT\");\n+    }\n+    ////////////\n+\n+    if (proposal.CheckSanity() is List<PSBTError> errors && errors.Count > 0)\n+        throw new PayjoinSenderException($\"The proposal PSBT is not sane ({errors[0]})\");\n+\n+    var proposalGlobalTx = proposal.GetGlobalTransaction();\n+    // Verify that the transaction version, and nLockTime are unchanged.\n+    if (proposalGlobalTx.Version != originalGlobalTx.Version)\n+        throw new PayjoinSenderException($\"The proposal PSBT changed the transaction version\");\n+    if (proposalGlobalTx.LockTime != originalGlobalTx.LockTime)\n+        throw new PayjoinSenderException($\"The proposal PSBT changed the nLocktime\");\n+\n+    HashSet<Sequence> sequences = new HashSet<Sequence>();\n+    // For each inputs in the proposal:\n+    foreach (PSBTInput proposedPSBTInput in proposal.Inputs)\n+    {\n+        if (proposedPSBTInput.HDKeyPaths.Count != 0)\n+            throw new PayjoinSenderException(\"The receiver added keypaths to an input\");\n+        if (proposedPSBTInput.PartialSigs.Count != 0)\n+            throw new PayjoinSenderException(\"The receiver added partial signatures to an input\");\n+        PSBTInput proposedTxIn = proposalGlobalTx.Inputs.FindIndexedInput(proposedPSBTInput.PrevOut).TxIn;\n+        bool isOurInput = originalInputs.Count > 0 && originalInputs.Peek().OriginalTxIn.PrevOut == proposedPSBTInput.PrevOut;\n+        // If it is one of our input\n+        if (isOurInput)\n+        {\n+            OutPoint inputPrevout = ourPrevouts.Dequeue();\n+            TxIn originalTxin = originalGlobalTx.Inputs.FromOutpoint(inputPrevout);\n+            PSBTInput originalPSBTInput = originalPSBT.Inputs.FromOutpoint(inputPrevout);\n+            // Verify that sequence is unchanged.\n+            if (input.OriginalTxIn.Sequence != proposedTxIn.Sequence)\n+                throw new PayjoinSenderException(\"The proposedTxIn modified the sequence of one of our inputs\")\n+            // Verify the PSBT input is not finalized\n+            if (proposedPSBTInput.IsFinalized())\n+                throw new PayjoinSenderException(\"The receiver finalized one of our inputs\");\n+            // Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+            if (proposedPSBTInput.NonWitnessUtxo != null || proposedPSBTInput.WitnessUtxo != null)\n+                throw new PayjoinSenderException(\"The receiver added non_witness_utxo or witness_utxo to one of our inputs\");\n+            sequences.Add(proposedTxIn.Sequence);\n+            \n+            // Fill up the info from the original PSBT input so we can sign and get fees.\n+            proposedPSBTInput.NonWitnessUtxo = input.SignedPSBTInput.NonWitnessUtxo;\n+            proposedPSBTInput.WitnessUtxo = input.SignedPSBTInput.WitnessUtxo;\n+            // We fill up information we had on the signed PSBT, so we can sign it.\n+            foreach (var hdKey in input.SignedPSBTInput.HDKeyPaths)\n+            proposedPSBTInput.HDKeyPaths.Add(hdKey.Key, hdKey.Value);\n+            proposedPSBTInput.RedeemScript = signedPSBTInput.RedeemScript;\n+            proposedPSBTInput.RedeemScript = input.SignedPSBTInput.RedeemScript;\n+        }\n+        else\n+        {\n+            // Verify the PSBT input is finalized\n+            if (!proposedPSBTInput.IsFinalized())\n+                throw new PayjoinSenderException(\"The receiver did not finalized one of their input\");\n+            // Verify that non_witness_utxo or witness_utxo are filled in.\n+            if (proposedPSBTInput.NonWitnessUtxo == null && proposedPSBTInput.WitnessUtxo == null)\n+                throw new PayjoinSenderException(\"The receiver did not specify non_witness_utxo or witness_utxo for one of their inputs\");\n+            sequences.Add(proposedTxIn.Sequence);\n+            // Verify that the payjoin proposal did not introduced mixed inputs' type.\n+            if (inputScriptType != proposedPSBTInput.GetInputScriptPubKeyType())\n+                throw new PayjoinSenderException(\"Mixed input type detected in the proposal\");\n+        }\n+    }\n+\n+    // Verify that all of sender's inputs from the original PSBT are in the proposal.\n+    if (originalInputs.Count != 0)\n+        throw new PayjoinSenderException(\"Some of our inputs are not included in the proposal\");\n+\n+    // Verify that the payjoin proposal did not introduced mixed inputs' sequence.\n+    if (sequences.Count != 1)\n+        throw new PayjoinSenderException(\"Mixed sequence detected in the proposal\");\n+\n+    decimal newFee = proposal.GetFee();\n+    decimal additionalFee = newFee - originalFee;\n+    if (additionalFee < 0)\n+      throw new PayjoinSenderException(\"The receiver decreased absolute fee\");\n+    // For each outputs in the proposal:\n+    foreach (PSBTOutput proposedPSBTOutput in proposal.Outputs)\n+    {\n+        // Verify that no keypaths is in the PSBT output\n+        if (proposedPSBTOutput.HDKeyPaths.Count != 0)\n+            throw new PayjoinSenderException(\"The receiver added keypaths to an output\");\n+        bool isOriginalOutput = originalOutputs.Count > 0 && originalOutputs.Peek().OriginalTxOut.ScriptPubKey == proposedPSBTOutput.ScriptPubKey;\n+        if (isOriginalOutput)\n+        {\n+            var originalOutput = originalOutputs.Dequeue();\n+            if (output.OriginalTxOut == feeOutput)\n+            {\n+                var actualContribution = feeOutput.Value - proposedPSBTOutput.Value;\n+                // The amount that was substracted from the output's value is less or equal to maxadditionalfeecontribution\n+                if (actualContribution > optionalParameters.MaxAdditionalFeeContribution)\n+                    throw new PayjoinSenderException(\"The actual contribution is more than maxadditionalfeecontribution\");\n+                // Make sure the actual contribution is only paying fee\n+                if (actualContribution > additionalFee)\n+                    throw new PayjoinSenderException(\"The actual contribution is not only paying fee\");\n+                // Make sure the actual contribution is only paying for fee incurred by additional inputs\n+                int additionalInputsCount = proposalGlobalTx.Inputs.Count - originalGlobalTx.Inputs.Count;\n+                if (actualContribution > originalFeeRate * GetVirtualSize(inputScriptType) * additionalInputsCount)\n+                    throw new PayjoinSenderException(\"The actual contribution is not only paying for additional inputs\");\n+            }\n+            else if (allowOutputSubstitution && output.OriginalTxOut.ScriptPubKey == paymentScriptPubKey)\n+            {\n+                // That's the payment output, the receiver may have changed it.\n+            }\n+            else\n+            {\n+                if (originalOutput.OriginalTxOut.Value > proposedPSBTOutput.Value)\n+                    throw new PayjoinSenderException(\"The receiver decreased the value of one of the outputs\");\n+            }\n+            // We fill up information we had on the signed PSBT, so we can sign it.\n+            foreach (var hdKey in output.SignedPSBTOutput.HDKeyPaths)\n+                proposedPSBTOutput.HDKeyPaths.Add(hdKey.Key, hdKey.Value);\n+            proposedPSBTOutput.RedeemScript = output.SignedPSBTOutput.RedeemScript;\n+        }\n+    }\n+    // Verify that all of sender's outputs from the original PSBT are in the proposal.\n+    if (originalOutputs.Count != 0)\n+    {\n+        // The payment output may have been substituted\n+        if (!allowOutputSubstitution ||\n+            originalOutputs.Count != 1 ||\n+            originalOutputs.Dequeue().OriginalTxOut.ScriptPubKey != paymentScriptPubKey)\n+            {\n+                throw new PayjoinSenderException(\"Some of our outputs are not included in the proposal\");\n+            }\n+    }\n+\n+    // After signing this proposal, we should check if minfeerate is respected.\n+    Log(\"payjoin proposal filled with sender's information\" + proposal);\n+    return proposal;\n+}\n+\n+int GetVirtualSize(ScriptPubKeyType? scriptPubKeyType)\n+{\n+    switch (scriptPubKeyType)\n+    {\n+        case ScriptPubKeyType.Legacy:\n+            return 148;\n+        case ScriptPubKeyType.Segwit:\n+            return 68;\n+        case ScriptPubKeyType.SegwitP2SH:\n+            return 91;\n+        default:\n+            return 110;\n+    }\n+}\n+\n+// Finalize the signedPSBT and remove confidential information\n+PSBT CreateOriginalPSBT(PSBT signedPSBT)\n+{\n+    var original = signedPSBT.Clone();\n+    original = original.Finalize();\n+    foreach (var input in original.Inputs)\n+    {\n+        input.HDKeyPaths.Clear();\n+        input.PartialSigs.Clear();\n+        input.Unknown.Clear();\n+    }\n+    foreach (var output in original.Outputs)\n+    {\n+        output.Unknown.Clear();\n+        output.HDKeyPaths.Clear();\n+    }\n+    original.GlobalXPubs.Clear();\n+    return original;\n+}\n+</pre>\n+\n+==<span id=\"test-vectors\"></span>Test vectors==\n+\n+A successful exchange with:\n+\n+{| class=\"wikitable\"\n+!InputScriptType\n+!Orginal PSBT Fee rate\n+!maxadditionalfeecontribution\n+!additionalfeeoutputindex\n+|-\n+|P2SH-P2WSH\n+|2 sat/vbyte\n+|0.00000182\n+|0\n+|}\n+\n+<code>signed PSBT</code>",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 646,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": 442836752,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think that's clear at all from the text(all PSBTs are signed at some level), maybe drop that hint directly in the text",
      "created_at": "2020-06-22T01:51:27Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r443283351",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/443283351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 646,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/443284363",
      "pull_request_review_id": 434562149,
      "id": 443284363,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4NDM2Mw==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 157,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": 442769148,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@andrewkozlik, just added additional note about it in Output substitution part.",
      "created_at": "2020-06-22T01:57:22Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r443284363",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/443284363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/443284671",
      "pull_request_review_id": 434562550,
      "id": 443284671,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4NDY3MQ==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* Verify that the absolute fee of the payjoin proposal is equals or higher than the original PSBT.\n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+*** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+** If the output is the payment output and payment output substitution is allowed.\n+*** Do not make any check\n+** Else\n+*** Make sure the output's value did not decreased.\n+** Verify that all sender's outputs (ie, all outputs except the output actually paid to the receiver) from the original PSBT are in the proposal.\n+* Once the proposal is signed, if <code>minfeerate</code> was specified, check that the fee rate of the payjoin transaction is not less than this value.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender must allow the receiver to add/remove or modify the receiver's own outputs (if [[#output-substitution|payment output substitution]], the payment's output should not be modified)\n+* The sender should allow the receiver to not add any inputs. This is useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When blocks are not full, the original transaction might already at the minimum relay fee rate (currently 1 satoshi per virtual byte), so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below the minimum relay fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+See the [[#fee-output|Fee output]] section for more information.\n+\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+The recommended value <code>maxadditionalfeecontribution=</code> is explained in the [[#fee-output|Fee output]] section.\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Receiver does not need to be a full node===\n+\n+Because the receiver needs to bump the fee to keep the same fee rate as the original PSBT, it needs the input's UTXO information to know what is the original fee rate. Without PSBT, light wallets like Wasabi Wallet would not be able to receive a payjoin transaction.\n+\n+The validation (policy and consensus) of the original transaction is optional: a receiver without a full node can decide to create the payjoin transaction and automatically broadcast the original transaction after a timeout of 1 minute, and only verify that it has been propagated in the network.\n+\n+However, non-interactive receivers (like a payment processor) need to verify the transaction to prevent UTXO probing attacks. \n+\n+This is not a concern for interactive receivers like Wasabi Wallet, because those receivers can just limit the number of original PSBT proposals of a specific address to one. With such wallets, the attacker has no way to generate new deposit addresses to probe the UTXOs.\n+\n+===<span id=\"spare-change\"></span>Spare change donation===\n+\n+Small change inside wallets are detrimental to privacy. Mixers like Wasabi wallet, because of its protocol, eventually generate such [[https://docs.wasabiwallet.io/using-wasabi/ChangeCoins.html#first-round-coinjoin-change|small change]].\n+\n+A common way to protect your privacy is to donate those spare changes, to deposit them in an exchange or on your favorite merchant's store account. Those kind of transactions can easily be spotted on the blockchain: There is only one output.\n+\n+However, if you donate via payjoin, it will look like a normal transaction.\n+\n+On top of this the receiver can poison analysis by randomly faking a round amount of satoshi for the additional output.\n+\n+===<span id=\"output-substitution\"></span>Payment output substitution===\n+\n+The receiver is free to change the output paying to himself.\n+For example, if the sender's scriptPubKey type is P2WPKH while the receiver's payment output in the original PSBT is P2SH, then the receiver can substitute the payment output to be P2WPKH to match the sender's scriptPubKey type.\n+\n+===<span id=\"unsecured-payjoin\"></span>Unsecured payjoin server===\n+\n+A receiver might run the payment server (generating the BIP21 invoice) on a different server than the payjoin server, which could be less trusted than the payment server.\n+\n+In such case, the payment server can signal to the sender, via the BIP21 parameter <code>pjos=0</code>, that they MUST disallow [[#output-substitution|payment output substitution]].\n+A compromised payjoin server could still the hot wallet outputs of the receiver, but would not be able to re-route payment to himself.",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 352,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": 442759854,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wanted to write \"steal\", but my finger typed \"still\". :s",
      "created_at": "2020-06-22T01:59:15Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r443284671",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/443284671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/443285920",
      "pull_request_review_id": 434564088,
      "id": 443285920,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4NTkyMA==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* Verify that the absolute fee of the payjoin proposal is equals or higher than the original PSBT.\n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+*** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+** If the output is the payment output and payment output substitution is allowed.\n+*** Do not make any check\n+** Else\n+*** Make sure the output's value did not decreased.\n+** Verify that all sender's outputs (ie, all outputs except the output actually paid to the receiver) from the original PSBT are in the proposal.\n+* Once the proposal is signed, if <code>minfeerate</code> was specified, check that the fee rate of the payjoin transaction is not less than this value.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender must allow the receiver to add/remove or modify the receiver's own outputs (if [[#output-substitution|payment output substitution]], the payment's output should not be modified)\n+* The sender should allow the receiver to not add any inputs. This is useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When blocks are not full, the original transaction might already at the minimum relay fee rate (currently 1 satoshi per virtual byte), so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below the minimum relay fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+See the [[#fee-output|Fee output]] section for more information.\n+\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+The recommended value <code>maxadditionalfeecontribution=</code> is explained in the [[#fee-output|Fee output]] section.\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Receiver does not need to be a full node===\n+\n+Because the receiver needs to bump the fee to keep the same fee rate as the original PSBT, it needs the input's UTXO information to know what is the original fee rate. Without PSBT, light wallets like Wasabi Wallet would not be able to receive a payjoin transaction.\n+\n+The validation (policy and consensus) of the original transaction is optional: a receiver without a full node can decide to create the payjoin transaction and automatically broadcast the original transaction after a timeout of 1 minute, and only verify that it has been propagated in the network.\n+\n+However, non-interactive receivers (like a payment processor) need to verify the transaction to prevent UTXO probing attacks. \n+\n+This is not a concern for interactive receivers like Wasabi Wallet, because those receivers can just limit the number of original PSBT proposals of a specific address to one. With such wallets, the attacker has no way to generate new deposit addresses to probe the UTXOs.\n+\n+===<span id=\"spare-change\"></span>Spare change donation===\n+\n+Small change inside wallets are detrimental to privacy. Mixers like Wasabi wallet, because of its protocol, eventually generate such [[https://docs.wasabiwallet.io/using-wasabi/ChangeCoins.html#first-round-coinjoin-change|small change]].\n+\n+A common way to protect your privacy is to donate those spare changes, to deposit them in an exchange or on your favorite merchant's store account. Those kind of transactions can easily be spotted on the blockchain: There is only one output.\n+\n+However, if you donate via payjoin, it will look like a normal transaction.\n+\n+On top of this the receiver can poison analysis by randomly faking a round amount of satoshi for the additional output.\n+\n+===<span id=\"output-substitution\"></span>Payment output substitution===\n+\n+The receiver is free to change the output paying to himself.\n+For example, if the sender's scriptPubKey type is P2WPKH while the receiver's payment output in the original PSBT is P2SH, then the receiver can substitute the payment output to be P2WPKH to match the sender's scriptPubKey type.\n+\n+===<span id=\"unsecured-payjoin\"></span>Unsecured payjoin server===\n+\n+A receiver might run the payment server (generating the BIP21 invoice) on a different server than the payjoin server, which could be less trusted than the payment server.\n+\n+In such case, the payment server can signal to the sender, via the BIP21 parameter <code>pjos=0</code>, that they MUST disallow [[#output-substitution|payment output substitution]].\n+A compromised payjoin server could still the hot wallet outputs of the receiver, but would not be able to re-route payment to himself.\n+\n+===Impacted heuristics===\n+\n+Our proposal of payjoin is breaking the following blockchain heuristics:\n+\n+* Common inputs heuristics.\n+\n+Because payjoin is mixing the inputs of the sender and receiver, this heuristic becomes unreliable.\n+\n+* Change identification from scriptPubKey type heuristics\n+\n+When Alice pays Bob, if Alice is using P2SH but Bob's deposit address is P2WPKH, the heuristic would assume that the P2SH output is the change address of Alice.\n+This is now however a broken assumption, as the payjoin receiver has the freedom to mislead analytics by purposefully changing the invoice's address in the payjoin transaction.\n+\n+Alternatively, if the original address of Bob is P2WPKH and Alice's address is also P2WPKH, Bob can change the receiving address in the payjoin to P2SH. The heuristic would wrongfully identify the payjoin's receiving address as the change address of the transaction.",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 367,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": 442754045,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Completely removing, you are right it did not made any sense.",
      "created_at": "2020-06-22T02:06:43Z",
      "updated_at": "2020-06-23T08:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r443285920",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/443285920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/444063593",
      "pull_request_review_id": 435571850,
      "id": 444063593,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2MzU5Mw==",
      "diff_hunk": "@@ -0,0 +1,675 @@\n+<pre>\n+  BIP: 78\n+  Layer: Applications\n+  Title: A Simple Payjoin Proposal\n+  Author: Nicolas Dorier <nicolas.dorier@gmail.com>\n+  Replaces: 79\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0078\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2019-05-01\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document proposes a protocol for two parties\n+to negotiate a coinjoin transaction during a payment between them.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+When two parties (later referred to as sender and receiver) want to transact,\n+most of the time, the sender creates a transaction spending their own Unspent Transaction Outputs (UTXOs), signs\n+it and broadcasts it on the network.\n+\n+This simple model gave birth to several heuristics impacting the privacy of the parties and of the network as a whole.\n+\n+* Common input ownership heuristic: In most transactions, all the inputs belong to the same party.\n+* Change identification from scriptPubKey type: If all inputs are spending UTXOs of a certain scriptPubKey type, then the change output is likely to have the same scriptPubKey type, too.\n+* Change identification from round amount: If an output in the transaction has a round amount, it is likely an output belonging to the receiver.\n+\n+We will designate these three heuristics as <code>common-input</code>, <code>change-scriptpubkey</code>, <code>change-round-amount</code>.\n+\n+The problems we aim to solve are:\n+* For the receiver, there is a missed opportunity to consolidate their own UTXOs or making payment in the sender's transaction.\n+* For the sender, there are privacy leaks regarding their wallet that happen when someone applies the heuristics detailed above to their transaction.\n+\n+Our proposal gives an opportunity for the receiver to consolidate their UTXOs while also batching their own payments, without creating a new transaction. (Saving fees in the process)\n+For the sender, it allows them to invalidate the three heuristics above. With the receiver's involvement, the heuristics can even be poisoned. (ie, using the heuristics to intentionally mislead blockchain analysis)\n+\n+Note that the existence of this proposal is also improving the privacy of parties who are not using it by making the three heuristics unreliable to the network as a whole.\n+\n+=== Relation to BIP79 (Bustapay) ===\n+\n+Another implementation proposal has been written: [[https://github.com/bitcoin/bips/blob/master/bip-0079.mediawiki|BIP79 Bustapay]].\n+\n+We decided to deviate from it for several reasons:\n+* It was not using PSBT, so if the receiver wanted to bump the fee, they would need the full UTXO set.\n+* Inability to change the payment output to match scriptPubKey type.\n+* Lack of basic versioning negotiation if the protocol evolves.\n+* No standardization of error condition for proper feedback to the sender.\n+\n+Other than that, our proposal is very similar.\n+\n+==Specification==\n+\n+===Protocol===\n+\n+In a payjoin payment, the following steps happen:\n+\n+* The receiver of the payment, presents a [[bip-021.mediawiki|BIP 21 URI]] to the sender with a parameter <code>pj=</code> describing a payjoin endpoint.\n+* The sender creates a signed, finalized PSBT with witness UTXO or previous transactions of the inputs. We call this PSBT the <code>original</code>.\n+* The receiver replies back with a signed PSBT containing his own signed inputs/outputs and those of the sender. We call this PSBT <code>Payjoin proposal</code>.\n+* The sender verifies the proposal, re-signs his inputs and broadcasts the transaction to the Bitcoin network. We call this transaction <code>Payjoin transaction</code>.\n+<pre>\n++----------+                        +--------+         +-----------------+\n+| Receiver |                        | Sender |         | Bitcoin Network |\n++----+-----+                        +---+----+         +-------+---------+\n+     |       +-----------------+        |                      |\n+     +-------+ BIP21 with ?pj= +------->+                      |\n+     |       +-----------------+        |                      |\n+     |                                  |                      |\n+     |        +---------------+         |                      |\n+     +<-------+ Original PSBT +---------+                      |\n+     |        +---------------+         |                      |\n+     |                                  |                      |\n+     |       +------------------+       |                      |\n+     |       | Payjoin Proposal |       |                      |\n+     +-------+      PSBT        +------>+                      |\n+     |       +------------------+       |                      |\n+     |                                  |   +--------------+   |\n+     |                                  |---+ Payjoin      |   |\n+     |                                  |   | transaction  +-->+\n+     |                                  |   +--------------+   |\n+     +                                  +                      +\n+</pre>\n+The original PSBT is sent in the HTTP POST request body, base64 serialized, with <code>text/plain</code> in the <code>Content-Type</code> HTTP header and <code>Content-Length</code> set correctly.\n+The payjoin proposal PSBT is sent in the HTTP response body, base64 serialized with HTTP code 200.\n+\n+To ensure compatibility with web-wallets and browser-based-tools, all responses (including errors) must contain the HTTP header <code>Access-Control-Allow-Origin: *</code>.\n+\n+The sender must ensure that the url refers to a scheme or protocol using authenticated encryption, for example TLS with certificate validation, or a .onion link to a hidden service whose public key identifier has already been communicated via a TLS connection. Senders SHOULD NOT accept a url representing an unencrypted or unauthenticated connection.\n+\n+The original PSBT MUST:\n+* Have all the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> information filled in.\n+* Be finalized.\n+* Not include fields unneeded for the receiver such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The original PSBT MAY:\n+* Have outputs unrelated to the payment for batching purpose.\n+\n+The payjoin proposal MUST:\n+* Use all the inputs from the original PSBT.\n+* Use all the outputs which do not belongs to the receiver from the original PSBT.\n+* Only finalize the inputs added by the receiver. (Referred later as <code>additional inputs</code>)\n+* Only fill the <code>witnessUTXO</code> or <code>nonWitnessUTXO</code> for the additional inputs.\n+\n+The payjoin proposal MAY:\n+* Add, remove or modify the outputs belonging to the receiver.\n+\n+The payjoin proposal MUST NOT:\n+* Shuffle the order of inputs or outputs, the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+===BIP21 payjoin parameters===\n+\n+This proposal is defining the following new [[bip-021.mediawiki|BIP 21 URI]] parameters:\n+* <code>pj=</code>: Represents an http(s) endpoint which the sender can POST the original PSBT.\n+* <code>pjos=0</code>: Signal to the sender that they MUST disallow [[#output-substitution|payment output substitution]]. (See [[#unsecured-payjoin|Unsecured payjoin server]])\n+\n+===<span id=\"optional-params\"></span>Optional parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, he can optionally specify the following HTTP query string parameters:\n+\n+* <code>v=</code>, the version number of the payjoin protocol that the sender is using. The current version is <code>1</code>.\n+\n+This can be used in the future so the receiver can reject a payjoin if the sender is using a version which is not supported via an error HTTP 400, <code>version-unsupported</code>.\n+If not specified, the receiver will assume the sender is <code>v=1</code>.\n+\n+If the receiver does not support the version of the sender, they should send an error with the list of supported versions:\n+<pre>\n+{\n+    \"errorCode\": \"version-unsupported\",\n+    \"supported\" : [ 2, 3, 4 ],\n+    \"message\": \"The version is not supported anymore\"\n+}\n+</pre>\n+\n+* <code>additionalfeeoutputindex=</code>, if the sender is willing to pay for increased fee, this indicate output can have its value substracted to pay for it.\n+\n+If the <code>additionalfeeoutputindex</code> is out of bounds or pointing to the payment output meant for the receiver, the receiver should ignore the parameter. See [[#fee-output|fee output]] for more information.\n+\n+* <code>maxadditionalfeecontribution=</code>, if the sender is willing to pay for increased fee, an integer defining the maximum amount in satoshis that the sender is willing to contribute towards fees for the additional inputs. <code>maxadditionalfeecontribution</code> must be ignored if set to less than zero.  See [[#fee-output|fee output]] for more information.\n+\n+Note that both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code> must be specified and valid for the receiver to be allowed to decrease an output belonging to the sender.\n+This fee contribution can't be used to pay for anything else than additional input's weight.\n+\n+* <code>minfeerate=</code>, a decimal in satoshi per vbyte that the sender can use to constraint the receiver to not drop the minimum fee rate too much.\n+\n+* <code>disableoutputsubstitution=</code>, a boolean indicating if the sender forbids the receiver to modify his own output, see [[#output-substitution|payment output substitution]]. (default to <code>false</code>)\n+\n+===Receiver's well known errors===\n+\n+If for some reason the receiver is unable to create a payjoin proposal, it will reply with a HTTP code different than 200.\n+The receiver is not constrained to specific set of errors, some are specified in this proposal.\n+\n+The errors have the following format:\n+<pre>\n+{\n+    \"errorCode\": \"leaking-data\",\n+    \"message\": \"Key path information or GlobalXPubs should not be included in the original PSBT.\"\n+}\n+</pre>\n+\n+The well-known error codes are:\n+{| class=\"wikitable\"\n+!Error code\n+!Meaning\n+|-\n+|unavailable\n+|The payjoin endpoint is not available for now.\n+|-\n+|not-enough-money\n+|The receiver added some inputs but could not bump the fee of the payjoin proposal.\n+|-\n+|version-unsupported\n+|This version of payjoin is not supported.\n+|-\n+|original-psbt-rejected\n+|The receiver rejected the original PSBT.\n+|}\n+\n+The receiver is allowed to return implementation specific errors which may assist the sender to diagnose any issue.\n+\n+However, it is important that error codes that are not well-known and that the message do not appear on the sender's software user interface.\n+Such error codes or messages could be used maliciously to phish a non technical user.\n+Instead those errors or messages can only appear in debug logs.\n+\n+It is advised to hard code the description of the well known error codes into the sender's software.\n+\n+===<span id=\"fee-output\"></span>Fee output===\n+\n+In some situation, the sender might want to pay some additional fee in the payjoin proposal.\n+If such is the case, the sender must use both [[#optional-params|optional parameters]] <code>additionalfeeoutputindex=</code> and <code>maxadditionalfeecontribution=</code> to indicate which output and how much the receiver can substract fee.\n+\n+There is several cases where a fee output is useful:\n+\n+* The sender's original transaction's fee rate is at the minimum accepted by the network, aka <code>minimum relay transaction fee rate</code>, which is typically 1 satoshi per vbyte.\n+\n+In such case, the receiver will need to increase the fee of the transaction after adding his own inputs to not drop below the minimum relay transaction fee rate.\n+\n+* The sender's wallet software is using round fee rate.\n+\n+If the sender's fee rate is always round, then a blockchain analyst can easily spot the transactions of the sender involving payjoin by checking if, when removing a single input to the suspected payjoin transaction, the resulting fee rate is round.\n+To prevent this, the sender can agree to pay more more fee so the receiver make sure that the payjoin transaction fee is also round.\n+\n+* The sender's transaction is time sensitive.\n+\n+When a sender pick a specific fee rate, the sender expects the transaction to be confirmed after a specific amount of time. But if the receiver adds an input without bumping the fee of the transaction, the payjoin transaction fee rate will be lower, and thus, longer to confirm.\n+\n+Our recommendation for <code>maxadditionalfeecontribution=</code> is <code>originalPSBTFeeRate * vsize(sender_input_type)</code>.\n+\n+{| class=\"wikitable\"\n+!sender_input_type\n+!vsize(sender_input_type)\n+|-\n+|P2WPKH\n+|68\n+|-\n+|P2PKH\n+|148\n+|-\n+|P2SH-P2WPKH\n+|91\n+|}\n+\n+\n+\n+===Receiver's original PSBT checklist===\n+\n+The receiver needs to do some check on the original PSBT before proceeding:\n+\n+* Non-interactive receivers (like a payment processor) need to check that the original PSBT is broadcastable. <code>*</code>\n+* If the sender included inputs in the original PSBT owned by the receiver, the receiver must either return error <code>original-psbt-rejected</code> or make sure they do not sign those inputs in the payjoin proposal.\n+* If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type. If the receiver can't match the type, they must return error <code>unavailable</code>.\n+* Make sure that the inputs included in the original transaction have never been seen before.\n+** This prevent [[#probing-attack|probing attacks]].\n+** This prevent reentrant payjoin, where a sender attempts to use payjoin transaction as a new original transaction for a new payjoin.\n+\n+<code>*</code>: Interactive receivers are not required to validate the original PSBT because they are not exposed to [[#probing-attack|probing attacks]].\n+\n+===Sender's payjoin proposal checklist===\n+\n+The sender should check the payjoin proposal before signing it to prevent a malicious receiver from stealing money.\n+ \n+* Verify that the absolute fee of the payjoin proposal is equals or higher than the original PSBT.\n+* If the receiver's BIP21 signalled <code>pjos=0</code>, disable payment output substitution.\n+* Verify that the transaction version, and the nLockTime are unchanged.\n+* Check that the sender's inputs' sequence numbers are unchanged.\n+* For each inputs in the proposal:\n+** Verify that no keypaths is in the PSBT input\n+** Verify that no partial signature has been filled\n+** If it is one of the sender's input\n+*** Verify that input's sequence is unchanged.\n+*** Verify the PSBT input is not finalized\n+*** Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+** If it is one of the receiver's input\n+*** Verify the PSBT input is finalized\n+*** Verify that <code>non_witness_utxo</code> or <code>witness_utxo</code> are filled in.\n+** Verify that the payjoin proposal did not introduced mixed input's sequence.\n+** Verify that the payjoin proposal did not introduced mixed input's type.\n+** Verify that all of sender's inputs from the original PSBT are in the proposal.\n+* For each outputs in the proposal:\n+** Verify that no keypaths is in the PSBT output\n+** If the output is the [[#fee-output|fee output]]:\n+*** The amount that was substracted from the output's value is less or equal to <code>maxadditionalfeecontribution</code>. Let's call this amount <code>actual contribution</code>.\n+*** Make sure the actual contribution is only paying fee: The <code>actual contribution</code> is less or equals to the difference of absolute fee between the payjoin proposal and the original PSBT.\n+*** Make sure the actual contribution is only paying for fee incurred by additional inputs: <code>actual contribution</code> is less or equals to <code>originalPSBTFeeRate * vsize(sender_input_type) * (count(original_psbt_inputs) - count(payjoin_proposal_inputs))</code>. (see [[#fee-output|Fee output]] section)\n+** If the output is the payment output and payment output substitution is allowed.\n+*** Do not make any check\n+** Else\n+*** Make sure the output's value did not decreased.\n+** Verify that all sender's outputs (ie, all outputs except the output actually paid to the receiver) from the original PSBT are in the proposal.\n+* Once the proposal is signed, if <code>minfeerate</code> was specified, check that the fee rate of the payjoin transaction is not less than this value.\n+\n+The sender must be careful to only sign the inputs that were present in the original PSBT and nothing else.\n+\n+Note:\n+* The sender must allow the receiver to add/remove or modify the receiver's own outputs (if [[#output-substitution|payment output substitution]], the payment's output should not be modified)\n+* The sender should allow the receiver to not add any inputs. This is useful for the receiver to change the paymout output scriptPubKey type.\n+* If no input have been added, the sender's wallet implementation should accept the payjoin proposal, but not mark the transaction as an actual payjoin in the user interface.\n+\n+Our method of checking the fee allows the receiver and the sender to batch payments in the payjoin transaction.\n+It also allows the receiver to pay the fee for batching adding his own outputs.\n+\n+==Rationale==\n+\n+There is several consequences of our proposal:\n+\n+* The receiver can bump the fee of the original transaction.\n+* The receiver can modify the outputs of the original PSBT.\n+* The sender must provide the UTXO information (Witness or previous transaction) in the PSBT.\n+\n+===Respecting the minimum relay fee policy===\n+\n+To be properly relayed, a Bitcoin transaction needs to pay at least 1 satoshi per virtual byte.\n+When blocks are not full, the original transaction might already at the minimum relay fee rate (currently 1 satoshi per virtual byte), so if the receiver adds their own input, they need to make sure the fee is increased such that the rate does not drop below the minimum relay fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+See the [[#fee-output|Fee output]] section for more information.\n+\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Defeating heuristics based on the fee calculation===\n+\n+Most wallets are creating a round fee rate (like 2 sat/b).\n+If the payjoin transaction's fee was not increased by the added size, then those payjoin transactions could easily be identifiable on the blockchain.\n+\n+Not only would those transactions stand out by not having a round fee (like 1.87 sat/b), but any suspicion of payjoin could be confirmed by checking if removing one input would create a round fee rate.\n+In such case, the sender must set both <code>maxadditionalfeecontribution=</code> and <code>additionalfeeoutputindex=</code>.\n+\n+The recommended value <code>maxadditionalfeecontribution=</code> is explained in the [[#fee-output|Fee output]] section.\n+We also recommend the sender to set <code>minfeerate=</code>, as the sender's node policy might be different from the receiver's policy.\n+\n+===Receiver does not need to be a full node===\n+\n+Because the receiver needs to bump the fee to keep the same fee rate as the original PSBT, it needs the input's UTXO information to know what is the original fee rate. Without PSBT, light wallets like Wasabi Wallet would not be able to receive a payjoin transaction.\n+\n+The validation (policy and consensus) of the original transaction is optional: a receiver without a full node can decide to create the payjoin transaction and automatically broadcast the original transaction after a timeout of 1 minute, and only verify that it has been propagated in the network.\n+\n+However, non-interactive receivers (like a payment processor) need to verify the transaction to prevent UTXO probing attacks. \n+\n+This is not a concern for interactive receivers like Wasabi Wallet, because those receivers can just limit the number of original PSBT proposals of a specific address to one. With such wallets, the attacker has no way to generate new deposit addresses to probe the UTXOs.\n+\n+===<span id=\"spare-change\"></span>Spare change donation===\n+\n+Small change inside wallets are detrimental to privacy. Mixers like Wasabi wallet, because of its protocol, eventually generate such [[https://docs.wasabiwallet.io/using-wasabi/ChangeCoins.html#first-round-coinjoin-change|small change]].\n+\n+A common way to protect your privacy is to donate those spare changes, to deposit them in an exchange or on your favorite merchant's store account. Those kind of transactions can easily be spotted on the blockchain: There is only one output.\n+\n+However, if you donate via payjoin, it will look like a normal transaction.\n+\n+On top of this the receiver can poison analysis by randomly faking a round amount of satoshi for the additional output.\n+\n+===<span id=\"output-substitution\"></span>Payment output substitution===\n+\n+The receiver is free to change the output paying to himself.\n+For example, if the sender's scriptPubKey type is P2WPKH while the receiver's payment output in the original PSBT is P2SH, then the receiver can substitute the payment output to be P2WPKH to match the sender's scriptPubKey type.\n+\n+===<span id=\"unsecured-payjoin\"></span>Unsecured payjoin server===\n+\n+A receiver might run the payment server (generating the BIP21 invoice) on a different server than the payjoin server, which could be less trusted than the payment server.\n+\n+In such case, the payment server can signal to the sender, via the BIP21 parameter <code>pjos=0</code>, that they MUST disallow [[#output-substitution|payment output substitution]].\n+A compromised payjoin server could still the hot wallet outputs of the receiver, but would not be able to re-route payment to himself.\n+\n+===Impacted heuristics===\n+\n+Our proposal of payjoin is breaking the following blockchain heuristics:\n+\n+* Common inputs heuristics.\n+\n+Because payjoin is mixing the inputs of the sender and receiver, this heuristic becomes unreliable.\n+\n+* Change identification from scriptPubKey type heuristics\n+\n+When Alice pays Bob, if Alice is using P2SH but Bob's deposit address is P2WPKH, the heuristic would assume that the P2SH output is the change address of Alice.\n+This is now however a broken assumption, as the payjoin receiver has the freedom to mislead analytics by purposefully changing the invoice's address in the payjoin transaction.\n+\n+Alternatively, if the original address of Bob is P2WPKH and Alice's address is also P2WPKH, Bob can change the receiving address in the payjoin to P2SH. The heuristic would wrongfully identify the payjoin's receiving address as the change address of the transaction.\n+\n+See [[#output-substitution|payment output substitution]].\n+\n+* Change identification from round change amount\n+\n+If Alice pays Bob, she might be tempted to pay him a round amount, like <code>1.23000000 BTC</code>. When this happens, blockchain analysis often identifies the output without the round amount as the change of the transaction.\n+\n+For this reason, during a [[#spare-change|spare change]] case, the receiver may add an output with a rounded amount randomly.\n+\n+==Attack vectors==\n+\n+===<span id=\"probing-attack\"></span>On the receiver side: UTXO probing attack===\n+\n+When the receiver creates a payjoin proposal, they expose one or more inputs belonging to them.\n+\n+An attacker could create multiple original transactions in order to learn the UTXOs of the receiver, while not broadcasting the payjoin proposal.\n+\n+While we cannot prevent this type of attack entirely, we implemented the following mitigations:\n+\n+* When the receiver detects an original transaction being broadcast, or if the receiver detects that the original transaction has been double spent, then they will reuse the UTXO that was exposed for the next payjoin.\n+* While the exposed UTXO will be reused in priority to not leak other UTXOs, there is no strong guarantee about it. This prevents the attacker from detecting with certainty the next payjoin of the merchant to another peer.\n+\n+Note that probing attacks are only a problem for automated payment systems such as BTCPay Server. End-user wallets with payjoin capabilities are not affected, as the attacker can't create multiple invoices to force the receiver to expose their UTXOs.\n+\n+===On the sender side: Double payment risk for hardware wallets===\n+\n+For a successful payjoin to happen, the sender needs to sign two transactions double spending each other: The original transaction and the payjoin proposal.\n+\n+The sender's software wallet can verify that the payjoin proposal is legitimate by the sender's checklist.\n+\n+However, a hardware wallet can't verify that this is indeed the case. This means that the security guarantee of the hardware wallet is decreased. If the sender's software is compromised, the hardware wallet would sign two valid transactions, thus sending two payments.\n+\n+Without payjoin, the maximum amount of money that could be lost by a compromised software is equal to one payment (via [[#output-substitution|payment output substitution]]).\n+Note that the sender can disallow [[#output-substitution|payment output substitution]] by using the optional parameter <code>disableoutputsubstitution=true</code>.\n+\n+With payjoin, the maximum amount of money that can be lost is equal to two payments.\n+\n+==Reference sender's implementation==\n+\n+Here is pseudo code of a sender implementation.\n+<code>RequestPayjoin</code> takes the bip21 URI of the payment, the wallet and the <code>signedPSBT</code>.\n+\n+The <code>signedPSBT</code> represents a PSBT which has been fully signed, but not yet finalized.\n+We then prepare <code>originalPSBT</code> from the <code>signedPSBT</code> via the <code>CreateOriginalPSBT</code> function and get back the <code>proposal</code>.\n+\n+While we verify the <code>proposal</code>, we also import into it informations about our own inputs and outputs from the <code>signedPSBT</code>.\n+At the end of this <code>RequestPayjoin</code>, the proposal is verified and ready to be signed.\n+\n+We logged the different PSBT involved, and show the result in our [[#test-vectors|test vectors]].\n+<pre>\n+public async Task<PSBT> RequestPayjoin(\n+    BIP21Uri bip21,\n+    Wallet wallet,\n+    PSBT signedPSBT,\n+    PayjoinClientParameters optionalParameters)\n+{\n+    Log(\"signed PSBT\" + signedPSBT);\n+    // Extracting the pj link.\n+    var endpoint = bip21.ExtractPayjointEndpoint();\n+    if (signedPSBT.IsAllFinalized())\n+        throw new InvalidOperationException(\"The original PSBT should not be finalized.\");\n+    ScriptPubKeyType inputScriptType = wallet.ScriptPubKeyType();\n+    PSBTOutput feePSBTOutput = null;\n+\n+    bool allowOutputSubstitution = !optionalParameters.DisableOutputSubstitution;\n+    if (bip21.Parameters.Contains(\"pjos\") && bip21.Parameters[\"pjos\"] == \"0\")\n+        allowOutputSubstitution = false;\n+\n+    if (optionalParameters.AdditionalFeeOutputIndex != null && optionalParameters.MaxAdditionalFeeContribution != null)\n+        feePSBTOutput = signedPSBT.Outputs[optionalParameters.AdditionalFeeOutputIndex];\n+    Script paymentScriptPubKey = bip21.Address == null ? null : bip21.Address.ScriptPubKey;\n+    decimal originalFee = signedPSBT.GetFee();\n+    PSBT originalPSBT = CreateOriginalPSBT(signedPSBT);\n+    Transaction originalGlobalTx = signedPSBT.GetGlobalTransaction();\n+    TxOut feeOutput = feePSBTOutput == null ? null : originalGlobalTx.Outputs[feePSBTOutput.Index];\n+    var originalInputs = new Queue<(TxIn OriginalTxIn, PSBTInput SignedPSBTInput)>();\n+    for (int i = 0; i < originalGlobalTx.Inputs.Count; i++)\n+    {\n+        originalInputs.Enqueue((originalGlobalTx.Inputs[i], signedPSBT.Inputs[i]));\n+    }\n+    var originalOutputs = new Queue<(TxOut OriginalTxOut, PSBTOutput SignedPSBTOutput)>();\n+    for (int i = 0; i < originalGlobalTx.Outputs.Count; i++)\n+    {\n+      originalOutputs.Enqueue((originalGlobalTx.Outputs[i], signedPSBT.Outputs[i]));\n+    }\n+    // Add the client side query string parameters\n+    endpoint = ApplyOptionalParameters(endpoint, optionalParameters);\n+    Log(\"original PSBT\" + originalPSBT);\n+    PSBT proposal = await SendOriginalTransaction(endpoint, originalPSBT, cancellationToken);\n+    Log(\"payjoin proposal\" + proposal);\n+    // Checking that the PSBT of the receiver is clean\n+    if (proposal.GlobalXPubs.Any())\n+    {\n+        throw new PayjoinSenderException(\"GlobalXPubs should not be included in the receiver's PSBT\");\n+    }\n+    ////////////\n+\n+    if (proposal.CheckSanity() is List<PSBTError> errors && errors.Count > 0)\n+        throw new PayjoinSenderException($\"The proposal PSBT is not sane ({errors[0]})\");\n+\n+    var proposalGlobalTx = proposal.GetGlobalTransaction();\n+    // Verify that the transaction version, and nLockTime are unchanged.\n+    if (proposalGlobalTx.Version != originalGlobalTx.Version)\n+        throw new PayjoinSenderException($\"The proposal PSBT changed the transaction version\");\n+    if (proposalGlobalTx.LockTime != originalGlobalTx.LockTime)\n+        throw new PayjoinSenderException($\"The proposal PSBT changed the nLocktime\");\n+\n+    HashSet<Sequence> sequences = new HashSet<Sequence>();\n+    // For each inputs in the proposal:\n+    foreach (PSBTInput proposedPSBTInput in proposal.Inputs)\n+    {\n+        if (proposedPSBTInput.HDKeyPaths.Count != 0)\n+            throw new PayjoinSenderException(\"The receiver added keypaths to an input\");\n+        if (proposedPSBTInput.PartialSigs.Count != 0)\n+            throw new PayjoinSenderException(\"The receiver added partial signatures to an input\");\n+        PSBTInput proposedTxIn = proposalGlobalTx.Inputs.FindIndexedInput(proposedPSBTInput.PrevOut).TxIn;\n+        bool isOurInput = originalInputs.Count > 0 && originalInputs.Peek().OriginalTxIn.PrevOut == proposedPSBTInput.PrevOut;\n+        // If it is one of our input\n+        if (isOurInput)\n+        {\n+            OutPoint inputPrevout = ourPrevouts.Dequeue();\n+            TxIn originalTxin = originalGlobalTx.Inputs.FromOutpoint(inputPrevout);\n+            PSBTInput originalPSBTInput = originalPSBT.Inputs.FromOutpoint(inputPrevout);\n+            // Verify that sequence is unchanged.\n+            if (input.OriginalTxIn.Sequence != proposedTxIn.Sequence)\n+                throw new PayjoinSenderException(\"The proposedTxIn modified the sequence of one of our inputs\")\n+            // Verify the PSBT input is not finalized\n+            if (proposedPSBTInput.IsFinalized())\n+                throw new PayjoinSenderException(\"The receiver finalized one of our inputs\");\n+            // Verify that <code>non_witness_utxo</code> and <code>witness_utxo</code> are not specified.\n+            if (proposedPSBTInput.NonWitnessUtxo != null || proposedPSBTInput.WitnessUtxo != null)\n+                throw new PayjoinSenderException(\"The receiver added non_witness_utxo or witness_utxo to one of our inputs\");\n+            sequences.Add(proposedTxIn.Sequence);\n+            \n+            // Fill up the info from the original PSBT input so we can sign and get fees.\n+            proposedPSBTInput.NonWitnessUtxo = input.SignedPSBTInput.NonWitnessUtxo;\n+            proposedPSBTInput.WitnessUtxo = input.SignedPSBTInput.WitnessUtxo;\n+            // We fill up information we had on the signed PSBT, so we can sign it.\n+            foreach (var hdKey in input.SignedPSBTInput.HDKeyPaths)\n+            proposedPSBTInput.HDKeyPaths.Add(hdKey.Key, hdKey.Value);\n+            proposedPSBTInput.RedeemScript = signedPSBTInput.RedeemScript;\n+            proposedPSBTInput.RedeemScript = input.SignedPSBTInput.RedeemScript;\n+        }\n+        else\n+        {\n+            // Verify the PSBT input is finalized\n+            if (!proposedPSBTInput.IsFinalized())\n+                throw new PayjoinSenderException(\"The receiver did not finalized one of their input\");\n+            // Verify that non_witness_utxo or witness_utxo are filled in.\n+            if (proposedPSBTInput.NonWitnessUtxo == null && proposedPSBTInput.WitnessUtxo == null)\n+                throw new PayjoinSenderException(\"The receiver did not specify non_witness_utxo or witness_utxo for one of their inputs\");\n+            sequences.Add(proposedTxIn.Sequence);\n+            // Verify that the payjoin proposal did not introduced mixed inputs' type.\n+            if (inputScriptType != proposedPSBTInput.GetInputScriptPubKeyType())\n+                throw new PayjoinSenderException(\"Mixed input type detected in the proposal\");\n+        }\n+    }\n+\n+    // Verify that all of sender's inputs from the original PSBT are in the proposal.\n+    if (originalInputs.Count != 0)\n+        throw new PayjoinSenderException(\"Some of our inputs are not included in the proposal\");\n+\n+    // Verify that the payjoin proposal did not introduced mixed inputs' sequence.\n+    if (sequences.Count != 1)\n+        throw new PayjoinSenderException(\"Mixed sequence detected in the proposal\");\n+\n+    decimal newFee = proposal.GetFee();\n+    decimal additionalFee = newFee - originalFee;\n+    if (additionalFee < 0)\n+      throw new PayjoinSenderException(\"The receiver decreased absolute fee\");\n+    // For each outputs in the proposal:\n+    foreach (PSBTOutput proposedPSBTOutput in proposal.Outputs)\n+    {\n+        // Verify that no keypaths is in the PSBT output\n+        if (proposedPSBTOutput.HDKeyPaths.Count != 0)\n+            throw new PayjoinSenderException(\"The receiver added keypaths to an output\");\n+        bool isOriginalOutput = originalOutputs.Count > 0 && originalOutputs.Peek().OriginalTxOut.ScriptPubKey == proposedPSBTOutput.ScriptPubKey;\n+        if (isOriginalOutput)\n+        {\n+            var originalOutput = originalOutputs.Dequeue();\n+            if (output.OriginalTxOut == feeOutput)\n+            {\n+                var actualContribution = feeOutput.Value - proposedPSBTOutput.Value;\n+                // The amount that was substracted from the output's value is less or equal to maxadditionalfeecontribution\n+                if (actualContribution > optionalParameters.MaxAdditionalFeeContribution)\n+                    throw new PayjoinSenderException(\"The actual contribution is more than maxadditionalfeecontribution\");\n+                // Make sure the actual contribution is only paying fee\n+                if (actualContribution > additionalFee)\n+                    throw new PayjoinSenderException(\"The actual contribution is not only paying fee\");\n+                // Make sure the actual contribution is only paying for fee incurred by additional inputs\n+                int additionalInputsCount = proposalGlobalTx.Inputs.Count - originalGlobalTx.Inputs.Count;\n+                if (actualContribution > originalFeeRate * GetVirtualSize(inputScriptType) * additionalInputsCount)\n+                    throw new PayjoinSenderException(\"The actual contribution is not only paying for additional inputs\");\n+            }\n+            else if (allowOutputSubstitution && output.OriginalTxOut.ScriptPubKey == paymentScriptPubKey)\n+            {\n+                // That's the payment output, the receiver may have changed it.\n+            }\n+            else\n+            {\n+                if (originalOutput.OriginalTxOut.Value > proposedPSBTOutput.Value)\n+                    throw new PayjoinSenderException(\"The receiver decreased the value of one of the outputs\");\n+            }\n+            // We fill up information we had on the signed PSBT, so we can sign it.\n+            foreach (var hdKey in output.SignedPSBTOutput.HDKeyPaths)\n+                proposedPSBTOutput.HDKeyPaths.Add(hdKey.Key, hdKey.Value);\n+            proposedPSBTOutput.RedeemScript = output.SignedPSBTOutput.RedeemScript;\n+        }\n+    }\n+    // Verify that all of sender's outputs from the original PSBT are in the proposal.\n+    if (originalOutputs.Count != 0)\n+    {\n+        // The payment output may have been substituted\n+        if (!allowOutputSubstitution ||\n+            originalOutputs.Count != 1 ||\n+            originalOutputs.Dequeue().OriginalTxOut.ScriptPubKey != paymentScriptPubKey)\n+            {\n+                throw new PayjoinSenderException(\"Some of our outputs are not included in the proposal\");\n+            }\n+    }\n+\n+    // After signing this proposal, we should check if minfeerate is respected.\n+    Log(\"payjoin proposal filled with sender's information\" + proposal);\n+    return proposal;\n+}\n+\n+int GetVirtualSize(ScriptPubKeyType? scriptPubKeyType)\n+{\n+    switch (scriptPubKeyType)\n+    {\n+        case ScriptPubKeyType.Legacy:\n+            return 148;\n+        case ScriptPubKeyType.Segwit:\n+            return 68;\n+        case ScriptPubKeyType.SegwitP2SH:\n+            return 91;\n+        default:\n+            return 110;\n+    }\n+}\n+\n+// Finalize the signedPSBT and remove confidential information\n+PSBT CreateOriginalPSBT(PSBT signedPSBT)\n+{\n+    var original = signedPSBT.Clone();\n+    original = original.Finalize();\n+    foreach (var input in original.Inputs)\n+    {\n+        input.HDKeyPaths.Clear();\n+        input.PartialSigs.Clear();\n+        input.Unknown.Clear();\n+    }\n+    foreach (var output in original.Outputs)\n+    {\n+        output.Unknown.Clear();\n+        output.HDKeyPaths.Clear();\n+    }\n+    original.GlobalXPubs.Clear();\n+    return original;\n+}\n+</pre>\n+\n+==<span id=\"test-vectors\"></span>Test vectors==\n+\n+A successful exchange with:\n+\n+{| class=\"wikitable\"\n+!InputScriptType\n+!Orginal PSBT Fee rate\n+!maxadditionalfeecontribution\n+!additionalfeeoutputindex\n+|-\n+|P2SH-P2WSH\n+|2 sat/vbyte\n+|0.00000182\n+|0\n+|}\n+\n+<code>signed PSBT</code>",
      "path": "bip-0078.mediawiki",
      "position": null,
      "original_position": 646,
      "commit_id": "a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "original_commit_id": "feac3d0035b32dcc8d66d415fe959c533b38d228",
      "in_reply_to_id": 442836752,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "just did https://github.com/bitcoin/bips/pull/923/commits/a76f5e433591a415fd9d6b5ab8c26e0ec37cc6df",
      "created_at": "2020-06-23T08:47:13Z",
      "updated_at": "2020-06-23T08:47:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/923#discussion_r444063593",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/444063593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 646,
      "side": "RIGHT"
    }
  ]
}