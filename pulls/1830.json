{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1830",
    "id": 2467737718,
    "node_id": "PR_kwDOAN28mc6TFrB2",
    "html_url": "https://github.com/bitcoin/bips/pull/1830",
    "diff_url": "https://github.com/bitcoin/bips/pull/1830.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1830.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1830",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1830/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1830/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1830/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/11a563aeaf50808390106cfda66bec5037443d6b",
    "number": 1830,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Add BIP: QES2 â€“ Hybrid PQC-based Digital Signature Algorithm",
    "user": {
      "login": "j1729labs",
      "id": 207299364,
      "node_id": "U_kgDODFsjJA",
      "avatar_url": "https://avatars.githubusercontent.com/u/207299364?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/j1729labs",
      "html_url": "https://github.com/j1729labs",
      "followers_url": "https://api.github.com/users/j1729labs/followers",
      "following_url": "https://api.github.com/users/j1729labs/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/j1729labs/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/j1729labs/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/j1729labs/subscriptions",
      "organizations_url": "https://api.github.com/users/j1729labs/orgs",
      "repos_url": "https://api.github.com/users/j1729labs/repos",
      "events_url": "https://api.github.com/users/j1729labs/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/j1729labs/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Summary:\r\nThis pull request introduces a new Bitcoin Improvement Proposal (BIP) for QES2, a hybrid digital signature algorithm that combines post-quantum cryptography (PQC) with traditional ECDSA. The proposal aims to address the potential vulnerabilities posed by quantum computing while preserving backward compatibility with existing Bitcoin infrastructure.\r\n\r\nDetails:\r\n\r\nAbstract: QES2 leverages a dual-signature mechanism to incorporate both a post-quantum signature and a classical ECDSA signature into Bitcoin transactions.\r\n\r\nMotivation: With the emerging threat of quantum computers, classical cryptographic methods may become vulnerable. QES2 presents a transitional solution that enhances security during the shift towards quantum-safe systems.\r\n\r\nSpecification: The BIP outlines the structure, key generation, signing, and verification methods for the hybrid scheme.\r\n\r\nRationale: The hybrid approach ensures that if one signature method is compromised, the other still provides protection, offering a balanced trade-off between security and backward compatibility.\r\n\r\nReference Implementation: A reference implementation will be linked later for further review and testing.",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 6924377447,
        "node_id": "LA_kwDOAN28mc8AAAABnLmdZw",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/PR%20Author%20action%20required",
        "name": "PR Author action required",
        "description": "Needs updates, has unaddressed review comments, or is otherwise waiting for PR author",
        "color": "e99695",
        "default": false
      }
    ],
    "created_at": "2025-04-18T08:03:18Z",
    "updated_at": "2025-06-20T22:23:27Z",
    "mergeable_state": "unknown",
    "merged": false,
    "merge_commit_sha": "84188059791e1b0aab8e57ce08187c875a8a9550",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "j1729labs:bip-QES2",
      "ref": "bip-QES2",
      "sha": "11a563aeaf50808390106cfda66bec5037443d6b",
      "user": {
        "login": "j1729labs",
        "id": 207299364,
        "node_id": "U_kgDODFsjJA",
        "avatar_url": "https://avatars.githubusercontent.com/u/207299364?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/j1729labs",
        "html_url": "https://github.com/j1729labs",
        "followers_url": "https://api.github.com/users/j1729labs/followers",
        "following_url": "https://api.github.com/users/j1729labs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/j1729labs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/j1729labs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/j1729labs/subscriptions",
        "organizations_url": "https://api.github.com/users/j1729labs/orgs",
        "repos_url": "https://api.github.com/users/j1729labs/repos",
        "events_url": "https://api.github.com/users/j1729labs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/j1729labs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 968384940,
        "node_id": "R_kgDOObhhrA",
        "name": "bips",
        "full_name": "j1729labs/bips",
        "owner": {
          "login": "j1729labs",
          "id": 207299364,
          "node_id": "U_kgDODFsjJA",
          "avatar_url": "https://avatars.githubusercontent.com/u/207299364?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/j1729labs",
          "html_url": "https://github.com/j1729labs",
          "followers_url": "https://api.github.com/users/j1729labs/followers",
          "following_url": "https://api.github.com/users/j1729labs/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/j1729labs/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/j1729labs/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/j1729labs/subscriptions",
          "organizations_url": "https://api.github.com/users/j1729labs/orgs",
          "repos_url": "https://api.github.com/users/j1729labs/repos",
          "events_url": "https://api.github.com/users/j1729labs/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/j1729labs/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/j1729labs/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/j1729labs/bips",
        "archive_url": "https://api.github.com/repos/j1729labs/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/j1729labs/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/j1729labs/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/j1729labs/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/j1729labs/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/j1729labs/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/j1729labs/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/j1729labs/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/j1729labs/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/j1729labs/bips/contributors",
        "deployments_url": "https://api.github.com/repos/j1729labs/bips/deployments",
        "downloads_url": "https://api.github.com/repos/j1729labs/bips/downloads",
        "events_url": "https://api.github.com/repos/j1729labs/bips/events",
        "forks_url": "https://api.github.com/repos/j1729labs/bips/forks",
        "git_commits_url": "https://api.github.com/repos/j1729labs/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/j1729labs/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/j1729labs/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/j1729labs/bips.git",
        "issue_comment_url": "https://api.github.com/repos/j1729labs/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/j1729labs/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/j1729labs/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/j1729labs/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/j1729labs/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/j1729labs/bips/languages",
        "merges_url": "https://api.github.com/repos/j1729labs/bips/merges",
        "milestones_url": "https://api.github.com/repos/j1729labs/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/j1729labs/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/j1729labs/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/j1729labs/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:j1729labs/bips.git",
        "stargazers_url": "https://api.github.com/repos/j1729labs/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/j1729labs/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/j1729labs/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/j1729labs/bips/subscription",
        "tags_url": "https://api.github.com/repos/j1729labs/bips/tags",
        "teams_url": "https://api.github.com/repos/j1729labs/bips/teams",
        "trees_url": "https://api.github.com/repos/j1729labs/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/j1729labs/bips.git",
        "hooks_url": "https://api.github.com/repos/j1729labs/bips/hooks",
        "svn_url": "https://github.com/j1729labs/bips",
        "homepage": "",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 15616,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-04-18T07:05:26Z",
        "created_at": "2025-04-18T02:03:40Z",
        "updated_at": "2025-04-18T02:03:40Z",
        "allow_forking": true
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "6ceafc51b17665f7cb13c8e2b9ee6354b9d374bd",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5647,
        "stargazers_count": 10003,
        "watchers_count": 10003,
        "size": 16483,
        "default_branch": "master",
        "open_issues_count": 31,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-06-20T22:40:07Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2025-06-20T22:40:12Z",
        "allow_forking": true
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1830"
      }
    },
    "author_association": "NONE",
    "draft": true,
    "additions": 607,
    "deletions": 0,
    "changed_files": 1,
    "commits": 5,
    "review_comments": 11,
    "comments": 4
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDdmOTExNGY2NjJlNjQyYzBmZGZiMDA3OWJjODM2YjQxNmQwYmRiMjI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7f9114f662e642c0fdfb0079bc836b416d0bdb22",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7f9114f662e642c0fdfb0079bc836b416d0bdb22",
      "tree": {
        "sha": "ce1b951239ca252d7ecb4e0852484338625a57c2",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ce1b951239ca252d7ecb4e0852484338625a57c2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ce1b951239ca252d7ecb4e0852484338625a57c2\nparent 6ceafc51b17665f7cb13c8e2b9ee6354b9d374bd\nauthor j1729labs <director@j1729labs.online> 1744956213 +0900\ncommitter GitHub <noreply@github.com> 1744956213 +0900\n\nCreate bip-newproposal.mediawiki",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoAes1CRC1aQ7uu5UhlAAAb5oQAJHTI8RianuHdAwPQJxf0OAj\n9Z+xtlU72guBVRK1dAfntW+weLka2u+gc4Hg7OkJHd0d4UxtKaeS1tl9YHLszhGO\n82kxmTRqqxTDUevziRa7Fsvb34PV8/Dx6YXDCiYQTk3z52kZJu7fBtiVR/HfbF9O\nz2GH7ONfhiImWrq+d9edY8+iqkJ+hoOXGAjkWC8KY4fpptEMk7iZNvCdWbq0SDdj\npfFgUquCFM9YgrV9ZbaNHSUix7JEVooUB+dF+dzfLiiAymSnSsZJh+NYyr6hfSXa\nmQuBrP0BP+GddD7moKNypkZhD36TxzyRADeEyGGaCWJoHJbJNihbZJsCDqd6EBZ8\nKsxYY8xXavOP7x0xEc0pF3tZRTta4qn/GzavTFBBP8iXOGsircVRmDXm0/Sl5ZxL\nZLWUE1DXtnEue05wcUXyXpnVAlZ5Yn5D+38lVyG8GEojwUghJusr4FcJFEIOc9Ui\nXI589Pefg15annmxAtIGpfKqeah9MYpqjrUvx2c/1IlCK+4AeH8331EqoX60zcUC\nWGRbP929Eqk2TvzkuYiCQMb5dvB4c+BH4tyVdAYIwrxn9fHKPl7IGu87/XFHf5Lo\nCZ28/IAyOYP8lEpYHwmGL6ebf6Wp1TzH3CJEctPLyIRP3/4Yv76j/13uHY5JelW1\n4ADRaFkzxTpPnC5/VV8U\n=H8Mh\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6ceafc51b17665f7cb13c8e2b9ee6354b9d374bd",
          "sha": "6ceafc51b17665f7cb13c8e2b9ee6354b9d374bd",
          "html_url": "https://github.com/bitcoin/bips/commit/6ceafc51b17665f7cb13c8e2b9ee6354b9d374bd"
        }
      ],
      "message": "Create bip-newproposal.mediawiki",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2025-04-18T06:03:33Z"
      },
      "author": {
        "name": "j1729labs",
        "email": "director@j1729labs.online",
        "date": "2025-04-18T06:03:33Z"
      },
      "sha": "7f9114f662e642c0fdfb0079bc836b416d0bdb22"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDU0MTRhNWM1NmFlY2EyNjBhMzAwYjU5NjJkOGUzMmVhM2M1NTZlODg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5414a5c56aeca260a300b5962d8e32ea3c556e88",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5414a5c56aeca260a300b5962d8e32ea3c556e88",
      "tree": {
        "sha": "adbee24aed539129e5afe7e999072ab30d5f103b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/adbee24aed539129e5afe7e999072ab30d5f103b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree adbee24aed539129e5afe7e999072ab30d5f103b\nparent 7f9114f662e642c0fdfb0079bc836b416d0bdb22\nauthor j1729labs <director@j1729labs.online> 1744956480 +0900\ncommitter GitHub <noreply@github.com> 1744956480 +0900\n\nUpdate bip-newproposal.mediawiki",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoAexACRC1aQ7uu5UhlAAACGUQAA3WmZ3zNTnhZBtqi37fDSUP\nOGf3GACUhmlvl74VZD5532tgzjZ0Kq40ps4VodBf1LR1KH/ebWM1PlJ52J8qhtt2\nyPmYTqUApso6rOtG95HhHX/VzmZcZ3SEfHSXyEOk6DGQKVBz+dsP97+LvSrB9D5N\nFFI+jvPp23aGLYOxc38aEtnS9eYLa49jvIyObzkQZRLmyAWv66Q/6ZWoPEObjCFc\nzJCm7VlMicCnDjs1+vfhhqZQk4fHKi79MK5GD93vdlLVJ8FrBAh5LDNFXIsigOI+\nQeAf2Z44mqblyd9ys09w99FklP5wCOM/sCCzD7c2PkvR5ov6bICj6F/x07r748N9\ns2BaxtfvM2DkCfzCFd0NM+3mCwvCuAkuJ0j8kqabMBLi84QJ52Hv0Ffjb9woqFp4\nD0NGg9crZvpdyrJbbMTlQliEw982HjsOOf4C9qu4CMeeFOSBNxjqiM4RVEGOxb9V\nrCoZUNkOf4tGWQNPun+/BgOLnkUq0y8CLYOLmq/LWJWlvqBhYnBov1vvsN6lIF3N\nxx9qk5tZg5OIVtKyS7a+ogK17J4xzA3BIDbhEnQyPZUzCnHVBpznsDNHV7JtGj/q\ngO2Go9K+X43A41Wh7YOvKSrNgFsAHGzjimi2BW3CLr0S7t15Mylfyl4dEUIDgtEF\nEx8ChrnbfJClPXUZEsxM\n=tKeh\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7f9114f662e642c0fdfb0079bc836b416d0bdb22",
          "sha": "7f9114f662e642c0fdfb0079bc836b416d0bdb22",
          "html_url": "https://github.com/bitcoin/bips/commit/7f9114f662e642c0fdfb0079bc836b416d0bdb22"
        }
      ],
      "message": "Update bip-newproposal.mediawiki",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2025-04-18T06:08:00Z"
      },
      "author": {
        "name": "j1729labs",
        "email": "director@j1729labs.online",
        "date": "2025-04-18T06:08:00Z"
      },
      "sha": "5414a5c56aeca260a300b5962d8e32ea3c556e88"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDNhMzQ0NDYwNzc0MTNlZWJjMTU1OWFmZTgwNDRlMjg3NjM5N2E4MWY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3a34446077413eebc1559afe8044e2876397a81f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3a34446077413eebc1559afe8044e2876397a81f",
      "tree": {
        "sha": "02ba0a372fe0e7192dcf7655022a44b28b44fda4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/02ba0a372fe0e7192dcf7655022a44b28b44fda4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 02ba0a372fe0e7192dcf7655022a44b28b44fda4\nparent 5414a5c56aeca260a300b5962d8e32ea3c556e88\nauthor j1729labs <director@j1729labs.online> 1744956990 +0900\ncommitter GitHub <noreply@github.com> 1744956990 +0900\n\nUpdate bip-newproposal.mediawiki",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoAe4+CRC1aQ7uu5UhlAAALzMQAK/lyVzVYAqYfTb7Sf+eHdas\nCvSroVGPsZ9c3on0ZwgINdc4e8Z/Qdv5KL6hyPMvwSmaza9Lt9UHHoyqr3V5S8sS\n70aZ1FUhyLG6sKg0tpxx3ZUgFi9ssd29z6A8zd7P1lwjnX/ZeaMztA/scVnEbMeA\nc/2upGPU3UunQTIHvC9LQJ+2Mae0I9baTAOjghGirvCKlJmUbgiIzgr+awpl3c7h\nEJmIK+R3+Kd+4w0FgeZpJ/+hS/2ehFUcBMMVe3oGF9YUgUGZ+GLl7JoqBN91EySZ\ndPOjtipZvMjBfdRL+Jtyw30+SeaADHdKFdTM4Dj2KukbJgNITzS/3JL7jg01zvTi\nxElcbGeA7UJNPK4USIae4hXZjcC9e5yVHeuUxS77zBL8Tw5mLWfnQg8UT5p9qF1r\njBNAtOjkBI2l3a4RHbu3S5OcVUY6dRMRtsaGCuXSaMh/Y7GfQmbEZHn/1+Oyy8xo\nAgTcgHGZokjqSuypUMzteXvLNPyaOEMs2mqQMWJC9bMd9kOA8crloiXhmZOOMYdQ\nQggaGQ3STya3z5nXTa3e7uSuW8jwGPohv/io2XMQPOkp/0NOFY7eEtLuln9dh/G8\nevl4GIIHOuJKnv0DLhWvCr+udbCMKyqBaJOsYnRj373uQ5WN461SgyN5ZZ75km1Y\nja4ABILLjIdlENpTOaB7\n=8e3B\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5414a5c56aeca260a300b5962d8e32ea3c556e88",
          "sha": "5414a5c56aeca260a300b5962d8e32ea3c556e88",
          "html_url": "https://github.com/bitcoin/bips/commit/5414a5c56aeca260a300b5962d8e32ea3c556e88"
        }
      ],
      "message": "Update bip-newproposal.mediawiki",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2025-04-18T06:16:30Z"
      },
      "author": {
        "name": "j1729labs",
        "email": "director@j1729labs.online",
        "date": "2025-04-18T06:16:30Z"
      },
      "sha": "3a34446077413eebc1559afe8044e2876397a81f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDI4YzJhYThhN2Y3ZjQzYmQxMDlmNjFmZGM4MTc0ZjdiMjE1YjJhOTc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/28c2aa8a7f7f43bd109f61fdc8174f7b215b2a97",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/28c2aa8a7f7f43bd109f61fdc8174f7b215b2a97",
      "tree": {
        "sha": "745dafd99a5d3e5379805e5c2151b77c2ce2759a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/745dafd99a5d3e5379805e5c2151b77c2ce2759a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 745dafd99a5d3e5379805e5c2151b77c2ce2759a\nparent 3a34446077413eebc1559afe8044e2876397a81f\nauthor j1729labs <director@j1729labs.online> 1744958092 +0900\ncommitter GitHub <noreply@github.com> 1744958092 +0900\n\nUpdate bip-newproposal.mediawiki",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoAfKMCRC1aQ7uu5UhlAAAwUEQAIE/pDl5vL1kzXO3t4TK9AVs\ng1efKi20bTrSztzB/NHjsx7t6roo03ITwdVbKzj+sTQEbC5przUgfxPdVH+MjWe3\nTd/O1eGAJK8A4uhNMY4wWVMdKU12tRgiS5xCwmQoijRulET5jSvYhBvoPkSQY9NW\n9ZW2hoW+WxtAAOnFKXhjAbZ419ID8HaBH4tuzixq9cOCwlp+V3dPeJHKhoWfuB86\n4w+unWS0HxnOPwntsMKyMASVx2H3PxGb6OZ0uhq3zRcG9rPY8nRdDixjoqslnBiH\nK1MhMvKcxcDD95+Ltrq26ul2JJKgKBchfsascuTfkGY1DZdJOfhrg9ha9Ba2U7sZ\n/yhRNqYOi6w5XHKAWuzyeLxHyKa+DcIjyDRHZvDNIPogf2HYWI3/MlBFWZYI638z\nWvAp//KX2eJUi2CK2G+eVegvsrdcsnI9T/vaG/DmvXfBMOBNmO/kr5yXFK7V1ji7\n6nVG4HKi3+PiSg7LX/YZoM/wA+/FBTDnEgIUyUdMzwitprHPJ3rurJ4jdro0daqV\nfsBx6IYiMFUBDI0oYJvq2T/Pb5Ba/AGgTOu/GYOu+KVPQhT7mfizid20g9QW6utO\nMXCeHsBBd3Epmj7F7dXrXt3W3v3oQmmNHPv2btPrQI5hkB9AlYjioW0rIT+Ei6bD\nYa//Ps0mERPHDTKdU1Ak\n=TW7g\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3a34446077413eebc1559afe8044e2876397a81f",
          "sha": "3a34446077413eebc1559afe8044e2876397a81f",
          "html_url": "https://github.com/bitcoin/bips/commit/3a34446077413eebc1559afe8044e2876397a81f"
        }
      ],
      "message": "Update bip-newproposal.mediawiki",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2025-04-18T06:34:52Z"
      },
      "author": {
        "name": "j1729labs",
        "email": "director@j1729labs.online",
        "date": "2025-04-18T06:34:52Z"
      },
      "sha": "28c2aa8a7f7f43bd109f61fdc8174f7b215b2a97"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDExYTU2M2FlYWY1MDgwODM5MDEwNmNmZGE2NmJlYzUwMzc0NDNkNmI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/11a563aeaf50808390106cfda66bec5037443d6b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/11a563aeaf50808390106cfda66bec5037443d6b",
      "tree": {
        "sha": "ec174cec883341a18558937446e9966f9d7ec7d6",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ec174cec883341a18558937446e9966f9d7ec7d6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ec174cec883341a18558937446e9966f9d7ec7d6\nparent 28c2aa8a7f7f43bd109f61fdc8174f7b215b2a97\nauthor j1729labs <director@j1729labs.online> 1744959926 +0900\ncommitter GitHub <noreply@github.com> 1744959926 +0900\n\nUpdate bip-newproposal.mediawiki",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoAfm2CRC1aQ7uu5UhlAAANV0QAHQM+Pq+eeJN3klXH1r+DSkf\nIng69XjXL1e1nwTGgPY8V/MEm6MbfFoKnpQvZq3SCPmyOSlQoqUVyc0j3cbAOg89\nOxvyhP6RTS0nzSTptHBni5nmb74AJSWeiThu5r4OBXHYkESkPZ7EaSn67RMRMt4E\nO84dZxRidbd0AhWp6hd+5RZawHuKryKYak8GoIH2AXdPZ+1ZkQNjRX1N4f2nP1z4\n6h3HhZ6vsmF2Olep3rwV1Mk+nD4DMrmvjULfvAc0KTudcLnkqK0hdMNWc2SrS459\nmzrzXMxm+/lGCQ1GTVralUUXTgHZNlZXMdCoJ0nUFWsbTzCc0oV3Uqk7LsqWsLIr\nzbX6ZMnZE5BBLNcHvh1IEYN15KtcDXQJXSrlZGs0ZlFn4re/sIkvypad9tUVYoiT\n5dyffdSQdlYGYrVo27SyNJfLD4fxMICPjCDhytpaADQmO0q60stIJrxAbk/mUB0n\nOtHrE0qBOU9TunJIbuKLVemk4et6+vryFXvh4EH+rOP+VnXOl+2zV0TDxXApzPY+\nP0l8TYE0XNwxw4I3k+9RgSCXlVd2SyOr8HfHcj7Omk3LBY3Xbtlm28NIZEFsiWHh\nJhG0FGgmT62uTdcm3RVO/0UfBLoiaD8vuHA0FCR9gI5DzAtV74qymWRDI8zPHl4q\nfaNqHv5x1TE/Ym1FF7aW\n=WMDD\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/28c2aa8a7f7f43bd109f61fdc8174f7b215b2a97",
          "sha": "28c2aa8a7f7f43bd109f61fdc8174f7b215b2a97",
          "html_url": "https://github.com/bitcoin/bips/commit/28c2aa8a7f7f43bd109f61fdc8174f7b215b2a97"
        }
      ],
      "message": "Update bip-newproposal.mediawiki",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2025-04-18T07:05:26Z"
      },
      "author": {
        "name": "j1729labs",
        "email": "director@j1729labs.online",
        "date": "2025-04-18T07:05:26Z"
      },
      "sha": "11a563aeaf50808390106cfda66bec5037443d6b"
    },
    {
      "event": "commented",
      "id": 2815648288,
      "node_id": "IC_kwDOAN28mc6n02Ig",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2815648288",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T15:29:37Z",
      "updated_at": "2025-04-18T15:29:37Z",
      "author_association": "NONE",
      "body": "Would it make sense to just add QES2 support to [BIP-360](https://github.com/cryptoquick/bips/blob/p2qrh/bip-0360.mediawiki)?\r\n",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1830#issuecomment-2815648288",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1830"
    },
    {
      "event": "reviewed",
      "id": 2778862097,
      "node_id": "PRR_kwDOAN28mc6lohIR",
      "url": null,
      "actor": null,
      "commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "Just some questions",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1830#pullrequestreview-2778862097",
      "submitted_at": "2025-04-18T15:54:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1830"
    },
    {
      "event": "commented",
      "id": 2815929716,
      "node_id": "IC_kwDOAN28mc6n1610",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2815929716",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T17:54:07Z",
      "updated_at": "2025-04-18T17:54:07Z",
      "author_association": "MEMBER",
      "body": "Hi @j1729labs, have you posted about this to the bitcoin-dev mailing list at https://groups.google.com/g/bitcoindev? Please refer to https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki#user-content-BIP_workflow for details. Thanks!\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1830#issuecomment-2815929716",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1830"
    },
    {
      "event": "mentioned",
      "id": 17323193856,
      "node_id": "MEE_lADOAN28mc6zEnsFzwAAAAQIivYA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17323193856",
      "actor": {
        "login": "j1729labs",
        "id": 207299364,
        "node_id": "U_kgDODFsjJA",
        "avatar_url": "https://avatars.githubusercontent.com/u/207299364?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/j1729labs",
        "html_url": "https://github.com/j1729labs",
        "followers_url": "https://api.github.com/users/j1729labs/followers",
        "following_url": "https://api.github.com/users/j1729labs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/j1729labs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/j1729labs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/j1729labs/subscriptions",
        "organizations_url": "https://api.github.com/users/j1729labs/orgs",
        "repos_url": "https://api.github.com/users/j1729labs/repos",
        "events_url": "https://api.github.com/users/j1729labs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/j1729labs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T17:54:09Z"
    },
    {
      "event": "subscribed",
      "id": 17323193873,
      "node_id": "SE_lADOAN28mc6zEnsFzwAAAAQIivYR",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17323193873",
      "actor": {
        "login": "j1729labs",
        "id": 207299364,
        "node_id": "U_kgDODFsjJA",
        "avatar_url": "https://avatars.githubusercontent.com/u/207299364?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/j1729labs",
        "html_url": "https://github.com/j1729labs",
        "followers_url": "https://api.github.com/users/j1729labs/followers",
        "following_url": "https://api.github.com/users/j1729labs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/j1729labs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/j1729labs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/j1729labs/subscriptions",
        "organizations_url": "https://api.github.com/users/j1729labs/orgs",
        "repos_url": "https://api.github.com/users/j1729labs/repos",
        "events_url": "https://api.github.com/users/j1729labs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/j1729labs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T17:54:09Z"
    },
    {
      "event": "labeled",
      "id": 17323204193,
      "node_id": "LE_lADOAN28mc6zEnsFzwAAAAQIix5h",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17323204193",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T17:55:18Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 2779630080,
      "node_id": "PRR_kwDOAN28mc6lrcoA",
      "url": null,
      "actor": null,
      "commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Please take another look at the formatting. The documentâ€™s syntax doesnâ€™t seem to be MediaWiki, and especially the preamble does currently not conform to the required formatting.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1830#pullrequestreview-2779630080",
      "submitted_at": "2025-04-18T23:42:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1830"
    },
    {
      "event": "labeled",
      "id": 17326092703,
      "node_id": "LE_lADOAN28mc6zEnsFzwAAAAQItzGf",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17326092703",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T23:42:30Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "reviewed",
      "id": 2787225298,
      "node_id": "PRR_kwDOAN28mc6mIa7S",
      "url": null,
      "actor": null,
      "commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for your submission. The content of this document shows potential, however it is still lacking some important details (see other review comments). It also currently does not meet the formatting requirements for the BIPs process. Please fix the formatting to conform to the MediaWiki syntax and amend the Preamble to use preformatted text with the [required formatting](https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki#user-content-BIP_header_preamble).\r\n\r\nAs this document is currently not ready to be merged, Iâ€™m turning it into a Draft pull request at this time.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1830#pullrequestreview-2787225298",
      "submitted_at": "2025-04-23T13:30:14Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1830"
    },
    {
      "event": "convert_to_draft",
      "id": 17371309001,
      "node_id": "CTDE_lADOAN28mc6zEnsFzwAAAAQLaSPJ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17371309001",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-23T13:31:26Z"
    },
    {
      "event": "commented",
      "id": 2870725601,
      "node_id": "IC_kwDOAN28mc6rG8vh",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2870725601",
      "actor": {
        "login": "j1729labs",
        "id": 207299364,
        "node_id": "U_kgDODFsjJA",
        "avatar_url": "https://avatars.githubusercontent.com/u/207299364?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/j1729labs",
        "html_url": "https://github.com/j1729labs",
        "followers_url": "https://api.github.com/users/j1729labs/followers",
        "following_url": "https://api.github.com/users/j1729labs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/j1729labs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/j1729labs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/j1729labs/subscriptions",
        "organizations_url": "https://api.github.com/users/j1729labs/orgs",
        "repos_url": "https://api.github.com/users/j1729labs/repos",
        "events_url": "https://api.github.com/users/j1729labs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/j1729labs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-12T03:50:42Z",
      "updated_at": "2025-05-12T03:50:42Z",
      "author_association": "NONE",
      "body": "> Hi @j1729labs, have you posted about this to the bitcoin-dev mailing list at https://groups.google.com/g/bitcoindev? Please refer to https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki#user-content-BIP_workflow for details. Thanks!\r\n\r\nThank you for the guidance. I will make sure to post this to the mailing list.",
      "user": {
        "login": "j1729labs",
        "id": 207299364,
        "node_id": "U_kgDODFsjJA",
        "avatar_url": "https://avatars.githubusercontent.com/u/207299364?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/j1729labs",
        "html_url": "https://github.com/j1729labs",
        "followers_url": "https://api.github.com/users/j1729labs/followers",
        "following_url": "https://api.github.com/users/j1729labs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/j1729labs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/j1729labs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/j1729labs/subscriptions",
        "organizations_url": "https://api.github.com/users/j1729labs/orgs",
        "repos_url": "https://api.github.com/users/j1729labs/repos",
        "events_url": "https://api.github.com/users/j1729labs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/j1729labs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1830#issuecomment-2870725601",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1830"
    },
    {
      "event": "mentioned",
      "id": 17608471583,
      "node_id": "MEE_lADOAN28mc6zEnsFzwAAAAQZi_Qf",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17608471583",
      "actor": {
        "login": "j1729labs",
        "id": 207299364,
        "node_id": "U_kgDODFsjJA",
        "avatar_url": "https://avatars.githubusercontent.com/u/207299364?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/j1729labs",
        "html_url": "https://github.com/j1729labs",
        "followers_url": "https://api.github.com/users/j1729labs/followers",
        "following_url": "https://api.github.com/users/j1729labs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/j1729labs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/j1729labs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/j1729labs/subscriptions",
        "organizations_url": "https://api.github.com/users/j1729labs/orgs",
        "repos_url": "https://api.github.com/users/j1729labs/repos",
        "events_url": "https://api.github.com/users/j1729labs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/j1729labs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-12T03:50:43Z"
    },
    {
      "event": "subscribed",
      "id": 17608471594,
      "node_id": "SE_lADOAN28mc6zEnsFzwAAAAQZi_Qq",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17608471594",
      "actor": {
        "login": "j1729labs",
        "id": 207299364,
        "node_id": "U_kgDODFsjJA",
        "avatar_url": "https://avatars.githubusercontent.com/u/207299364?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/j1729labs",
        "html_url": "https://github.com/j1729labs",
        "followers_url": "https://api.github.com/users/j1729labs/followers",
        "following_url": "https://api.github.com/users/j1729labs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/j1729labs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/j1729labs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/j1729labs/subscriptions",
        "organizations_url": "https://api.github.com/users/j1729labs/orgs",
        "repos_url": "https://api.github.com/users/j1729labs/repos",
        "events_url": "https://api.github.com/users/j1729labs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/j1729labs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-12T03:50:43Z"
    },
    {
      "event": "commented",
      "id": 2993041369,
      "node_id": "IC_kwDOAN28mc6yZi_Z",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2993041369",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-20T22:23:27Z",
      "updated_at": "2025-06-20T22:23:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hi @j1729labs, are you still working on this proposal?",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1830#issuecomment-2993041369",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1830"
    },
    {
      "event": "mentioned",
      "id": 18254231663,
      "node_id": "MEE_lADOAN28mc6zEnsFzwAAAARACXhv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18254231663",
      "actor": {
        "login": "j1729labs",
        "id": 207299364,
        "node_id": "U_kgDODFsjJA",
        "avatar_url": "https://avatars.githubusercontent.com/u/207299364?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/j1729labs",
        "html_url": "https://github.com/j1729labs",
        "followers_url": "https://api.github.com/users/j1729labs/followers",
        "following_url": "https://api.github.com/users/j1729labs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/j1729labs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/j1729labs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/j1729labs/subscriptions",
        "organizations_url": "https://api.github.com/users/j1729labs/orgs",
        "repos_url": "https://api.github.com/users/j1729labs/repos",
        "events_url": "https://api.github.com/users/j1729labs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/j1729labs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-20T22:23:28Z"
    },
    {
      "event": "subscribed",
      "id": 18254231674,
      "node_id": "SE_lADOAN28mc6zEnsFzwAAAARACXh6",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18254231674",
      "actor": {
        "login": "j1729labs",
        "id": 207299364,
        "node_id": "U_kgDODFsjJA",
        "avatar_url": "https://avatars.githubusercontent.com/u/207299364?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/j1729labs",
        "html_url": "https://github.com/j1729labs",
        "followers_url": "https://api.github.com/users/j1729labs/followers",
        "following_url": "https://api.github.com/users/j1729labs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/j1729labs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/j1729labs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/j1729labs/subscriptions",
        "organizations_url": "https://api.github.com/users/j1729labs/orgs",
        "repos_url": "https://api.github.com/users/j1729labs/repos",
        "events_url": "https://api.github.com/users/j1729labs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/j1729labs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-20T22:23:28Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2050797563",
      "pull_request_review_id": 2778862097,
      "id": 2050797563,
      "node_id": "PRRC_kwDOAN28mc56PK_7",
      "diff_hunk": "@@ -0,0 +1,607 @@\n+TBD | QES2 | A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin | [Caleb Lee] director@j1729labs.online, [Justin Park] < justin7361@j1729labs.online>, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online | 2025-04-18 | Draft\n+\n+:BIP: Unassigned\n+:Title: QES2 - A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin\n+:Author: [Caleb Lee] director@j1729labs.online, [Justin Park] justin7361@j1729labs.online, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online\n+:Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX\n+:Status: Draft\n+:Type: Standards Track\n+:Created: 2025-04-18\n+:License: BSD-2-Clause\n+:Requires: 340, 341, 342\n+\n+Abstract\n+========\n+\n+This BIP proposes QES2 (Quantum-Enhanced Signature Scheme), a hybrid digital signature scheme that creates a cryptographic binding between post-quantum cryptography (specifically Dilithium) and traditional ECDSA signatures for Bitcoin transactions. The approach first creates a Dilithium signature and then uses ECDSA to sign the Dilithium signature itself, creating a chain of cryptographic trust where the classical signature verifies the quantum-resistant signature. This approach provides both quantum resistance and backward compatibility, enabling Bitcoin to transition gradually to quantum-resistant security while preserving compatibility with existing infrastructure.\n+\n+Copyright\n+=========\n+\n+This BIP is licensed under the BSD 2-clause license.\n+\n+Motivation\n+==========\n+\n+Bitcoin's security fundamentally relies on the Elliptic Curve Digital Signature Algorithm (ECDSA) with the secp256k1 curve. While effective against classical computing attacks, ECDSA is vulnerable to quantum computers running Shor's algorithm, which can solve the discrete logarithm problem in polynomial time.\n+\n+As quantum computing advances, this vulnerability poses an existential threat to Bitcoin's security model. Recent estimates suggest that sufficiently powerful quantum computers capable of breaking ECDSA could be developed within the next decade.\n+\n+The Bitcoin community faces several challenges when considering a transition to post-quantum cryptography:\n+\n+1. Post-quantum signature schemes typically have significantly larger key and signature sizes\n+2. Complete replacement of ECDSA would break compatibility with existing wallets and infrastructure\n+3. The security of newer post-quantum schemes is still being evaluated by the cryptographic community\n+4. A sudden switch would require extensive coordination across the entire ecosystem\n+\n+This BIP proposes QES2 as a balanced solution that:\n+\n+1. Maintains compatibility with existing Bitcoin infrastructure\n+2. Adds quantum resistance through a lattice-based signature scheme (Dilithium)\n+3. Creates a cryptographic binding between PQC signatures and ECDSA signatures\n+4. Allows for a gradual, opt-in transition to quantum-resistant security\n+5. Creates a safety net against future quantum computing threats\n+\n+Specification\n+============\n+\n+Overview\n+--------\n+\n+QES2 combines the Dilithium post-quantum signature scheme with the classical ECDSA signature scheme currently used in Bitcoin. The key innovation is that QES2 doesn't just use both signature schemes in parallel but creates a cryptographic binding between them. First, the Dilithium signature is generated for the transaction digest, then the ECDSA signature signs the Dilithium signature itself. This binding ensures that the ECDSA signature validates the integrity of the quantum-resistant signature.\n+\n+The QES2 signature process can be represented as:\n+\n+.. code-block::\n+\n+   Sign_QES2 = Sign_ECDSA(Sign_PQC(message))\n+\n+And the verification process:\n+\n+.. code-block::\n+\n+   Verify_QES2 = Verify_ECDSA(Ïƒ_PQ) âˆ§ Verify_PQC(message)\n+\n+This creates a chained trust model where breaking the scheme would require breaking both the quantum-resistant signature and the classical signature.\n+\n+Mathematical Notation and Parameters\n+------------------------------------\n+\n+Let us define the following notation:\n+\n+- m: The message to be signed (transaction digest)\n+- sk_PQ: Dilithium private key\n+- pk_PQ: Dilithium public key\n+- sk_EC: ECDSA private key\n+- pk_EC: ECDSA public key\n+- Ïƒ_PQ: Dilithium signature on the message\n+- Ïƒ_EC: ECDSA signature on the Dilithium signature\n+- H: SHA-256 hash function\n+- S_PQ: Dilithium signing algorithm\n+- V_PQ: Dilithium verification algorithm\n+- S_EC: ECDSA signing algorithm\n+- V_EC: ECDSA verification algorithm\n+\n+Dilithium Parameters\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Dilithium instantiation uses the following parameters:\n+\n+- Security level: NIST security level 3 (equivalent to AES-192)\n+- Dimension n: 256\n+- Modulus q: 8380417\n+- Weight of challenge Î³1: 60\n+- Weight of secret Î³2: (q-1)/16\n+- Number of iterations Îº: 5\n+- Public key size: 1,952 bytes\n+- Private key size: 4,000 bytes\n+- Signature size: 2,701 bytes\n+\n+ECDSA Parameters\n+~~~~~~~~~~~~~~~\n+\n+The ECDSA implementation uses the following parameters:\n+\n+- Curve: secp256k1\n+- Field size: 256 bits\n+- Public key size: 33 bytes (compressed)\n+- Signature size: ~72 bytes (with sighash flag)\n+\n+Script Types and Address Format\n+-------------------------------\n+\n+This BIP introduces a new script template:\n+\n+.. code-block::\n+\n+   <pq_signature_push> <ecdsa_signature_push> <pubkey_push> OP_QES2_CHECKSIG\n+\n+Where:\n+\n+- ``<pq_signature_push>`` is the Dilithium signature component on the transaction digest\n+- ``<ecdsa_signature_push>`` is the ECDSA signature on the Dilithium signature\n+- ``<pubkey_push>`` includes both the ECDSA public key and Dilithium public key\n+- ``OP_QES2_CHECKSIG`` is a new opcode that verifies the entire chained signature scheme\n+\n+New Opcode\n+~~~~~~~~~~\n+\n+We introduce a new opcode, tentatively assigned as ``OP_QES2_CHECKSIG (0xba)``, that performs verification of the hybrid QES2 signature by checking both the ECDSA signature (which validates the PQC signature) and the Dilithium signature itself.\n+\n+P2QPK (Pay to QES2 Public Key)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PK, but using QES2:\n+\n+.. code-block::\n+\n+   <combined_pubkey> OP_QES2_CHECKSIG\n+\n+P2QPKH (Pay to QES2 Public Key Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PKH, but using a hash of the combined QES2 public key:\n+\n+.. code-block::\n+\n+   OP_DUP OP_HASH160 <qes2_pubkeyhash> OP_EQUALVERIFY OP_QES2_CHECKSIG\n+\n+P2QSH (Pay to QES2 Script Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2SH, but with QES2 signature verification:\n+\n+.. code-block::\n+\n+   OP_HASH160 <qes2_script_hash> OP_EQUAL\n+\n+Address Format\n+~~~~~~~~~~~~~\n+\n+QES2 addresses use a new version byte with a Bech32m encoding:\n+\n+.. code-block::\n+\n+   qp1<bech32m_encoded_program>\n+\n+Where the version byte indicates the use of QES2 and distinguishes between P2QPKH and P2QSH formats.\n+\n+Key Management\n+--------------\n+\n+Two approaches for managing QES2 keys:\n+\n+1. **Deterministic Derivation**\n+\n+   The Dilithium key pair is deterministically derived from the ECDSA private key:\n+\n+   .. code-block::\n+\n+      sk_PQ = HMAC-SHA512(sk_EC, \"Bitcoin_Dilithium_Key_Derivation\")\n+\n+   From sk_PQ, we compute:\n+\n+   .. code-block::\n+\n+      pk_PQ = Dilithium.KeyGen(sk_PQ)\n+\n+2. **Independent Keys**\n+\n+   The ECDSA and Dilithium key pairs are generated independently and bound together in the transaction script.\n+\n+The combined public key is represented as:\n+\n+.. code-block::\n+\n+   pk_combined = pk_PQ || pk_EC\n+\n+Where ``||`` denotes concatenation.\n+\n+The first approach is recommended for simplicity of wallet implementation, while the second offers greater flexibility.\n+\n+Signing Process\n+--------------\n+\n+The QES2 signing process consists of the following steps:\n+\n+1. **Transaction Serialization**\n+\n+   - Serialize the transaction inputs and outputs according to the appropriate sighash algorithm\n+   - Generate the transaction digest m = H(H(tx)) using double SHA-256\n+\n+2. **Post-Quantum Signature Generation**\n+\n+   - Generate a Dilithium signature on the transaction digest:\n+\n+     .. code-block::\n+\n+        Ïƒ_PQ = S_PQ(sk_PQ, m)\n+\n+3. **Vector Encoding**\n+\n+   - Flatten the post-quantum signature to obtain a coefficient vector\n+   - Apply domain-specific encoding to the coefficient vector\n+   - Apply compression and normalization to produce Ãª\n+\n+4. **ECDSA Signature Generation**\n+\n+   - Generate an ECDSA signature directly on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+   - The ECDSA signature follows the standard Bitcoin format, including the appropriate sighash flag\n+\n+5. **Complete Signature**\n+\n+   - The final QES2 signature consists of: (Ïƒ_PQ, Ïƒ_EC)\n+\n+This process can be summarized as:\n+\n+.. code-block::\n+\n+   Sign_QES2(m) = (Ïƒ_PQ, Ïƒ_EC)\n+\n+where:\n+\n+- Ïƒ_PQ = S_PQ(sk_PQ, m)\n+- Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+Importantly, the ECDSA signature is not signing the original message but is signing the PQC signature directly. This creates a cryptographic binding where the ECDSA signature validates the Dilithium signature.\n+\n+Verification Procedure\n+---------------------\n+\n+The verification of a QES2 signature consists of the following steps:\n+\n+1. **Transaction Digest Calculation**\n+\n+   - Calculate the transaction digest m = H(H(tx)) according to the sighash flags\n+\n+2. **Vector Decoding**\n+\n+   - Decode the PQC signature component Ïƒ_PQ to obtain Ãª\n+\n+3. **ECDSA Signature Verification**\n+\n+   - Verify the ECDSA signature on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        valid_EC = V_EC(pk_EC, Ãª, Ïƒ_EC)\n+\n+   - This step verifies the integrity of the Dilithium signature\n+\n+4. **Post-Quantum Signature Verification**\n+\n+   - Verify the Dilithium signature on the original transaction digest:\n+\n+     .. code-block::\n+\n+        valid_PQ = V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+5. **Combined Verification Decision**\n+\n+   - Accept the QES2 signature as valid if and only if both verifications succeed:\n+\n+     .. code-block::\n+\n+        valid = valid_EC âˆ§ valid_PQ\n+\n+The verification process can be summarized as:\n+\n+.. code-block::\n+\n+   Verify_QES2(m, Ïƒ_PQ, Ïƒ_EC, pk_PQ, pk_EC) = V_EC(pk_EC, Ãª, Ïƒ_EC) âˆ§ V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+This verification procedure ensures that:\n+\n+1. The transaction has not been tampered with (verified by Dilithium)\n+2. The Dilithium signature is valid for the transaction\n+3. The ECDSA signature validates the integrity of the Dilithium signature\n+\n+The security of this approach stems from the fact that an attacker would need to forge both signature types or find a way to create a valid ECDSA signature that endorses a forged Dilithium signature.\n+\n+Optimizations\n+------------\n+\n+To maintain reasonable validation performance:\n+\n+1. **Early rejection**: Perform ECDSA verification first and only proceed with Dilithium verification if ECDSA passes\n+2. **Optional verification**: During the initial deployment phase, nodes can verify only the ECDSA component\n+3. **Batch verification**: For multiple signatures in a transaction, use batch verification techniques\n+\n+The early rejection optimization can be formalized as:\n+\n+.. code-block::\n+\n+   valid = \n+   {\n+     V_PQ(pk_PQ, m, Ïƒ_PQ)  if V_EC(pk_EC, Ãª, Ïƒ_EC) = true\n+     false                  otherwise\n+   }\n+\n+Taproot Compatibility\n+--------------------\n+\n+QES2 can be integrated with BIP-340 (Taproot) by:\n+\n+1. Using the QES2-based signature in place of the Schnorr signature",
      "path": "bip-newproposal.mediawiki",
      "position": 330,
      "original_position": 330,
      "commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "original_commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "in_reply_to_id": null,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You specify QES2 as ECDSA, but ECDSA doesn't support all that Schnorr does. This seems like a step backwards that could break Taproot compatibility. Would it not make sense to implement QES2 with Schnorr and remove mention of ECDSA?",
      "created_at": "2025-04-18T15:49:47Z",
      "updated_at": "2025-04-18T15:54:04Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1830#discussion_r2050797563",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2050797563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1830"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2050801508",
      "pull_request_review_id": 2778862097,
      "id": 2050801508,
      "node_id": "PRRC_kwDOAN28mc56PL9k",
      "diff_hunk": "@@ -0,0 +1,607 @@\n+TBD | QES2 | A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin | [Caleb Lee] director@j1729labs.online, [Justin Park] < justin7361@j1729labs.online>, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online | 2025-04-18 | Draft\n+\n+:BIP: Unassigned\n+:Title: QES2 - A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin\n+:Author: [Caleb Lee] director@j1729labs.online, [Justin Park] justin7361@j1729labs.online, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online\n+:Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX\n+:Status: Draft\n+:Type: Standards Track\n+:Created: 2025-04-18\n+:License: BSD-2-Clause\n+:Requires: 340, 341, 342\n+\n+Abstract\n+========\n+\n+This BIP proposes QES2 (Quantum-Enhanced Signature Scheme), a hybrid digital signature scheme that creates a cryptographic binding between post-quantum cryptography (specifically Dilithium) and traditional ECDSA signatures for Bitcoin transactions. The approach first creates a Dilithium signature and then uses ECDSA to sign the Dilithium signature itself, creating a chain of cryptographic trust where the classical signature verifies the quantum-resistant signature. This approach provides both quantum resistance and backward compatibility, enabling Bitcoin to transition gradually to quantum-resistant security while preserving compatibility with existing infrastructure.\n+\n+Copyright\n+=========\n+\n+This BIP is licensed under the BSD 2-clause license.\n+\n+Motivation\n+==========\n+\n+Bitcoin's security fundamentally relies on the Elliptic Curve Digital Signature Algorithm (ECDSA) with the secp256k1 curve. While effective against classical computing attacks, ECDSA is vulnerable to quantum computers running Shor's algorithm, which can solve the discrete logarithm problem in polynomial time.\n+\n+As quantum computing advances, this vulnerability poses an existential threat to Bitcoin's security model. Recent estimates suggest that sufficiently powerful quantum computers capable of breaking ECDSA could be developed within the next decade.\n+\n+The Bitcoin community faces several challenges when considering a transition to post-quantum cryptography:\n+\n+1. Post-quantum signature schemes typically have significantly larger key and signature sizes\n+2. Complete replacement of ECDSA would break compatibility with existing wallets and infrastructure\n+3. The security of newer post-quantum schemes is still being evaluated by the cryptographic community\n+4. A sudden switch would require extensive coordination across the entire ecosystem\n+\n+This BIP proposes QES2 as a balanced solution that:\n+\n+1. Maintains compatibility with existing Bitcoin infrastructure\n+2. Adds quantum resistance through a lattice-based signature scheme (Dilithium)\n+3. Creates a cryptographic binding between PQC signatures and ECDSA signatures\n+4. Allows for a gradual, opt-in transition to quantum-resistant security\n+5. Creates a safety net against future quantum computing threats\n+\n+Specification\n+============\n+\n+Overview\n+--------\n+\n+QES2 combines the Dilithium post-quantum signature scheme with the classical ECDSA signature scheme currently used in Bitcoin. The key innovation is that QES2 doesn't just use both signature schemes in parallel but creates a cryptographic binding between them. First, the Dilithium signature is generated for the transaction digest, then the ECDSA signature signs the Dilithium signature itself. This binding ensures that the ECDSA signature validates the integrity of the quantum-resistant signature.\n+\n+The QES2 signature process can be represented as:\n+\n+.. code-block::\n+\n+   Sign_QES2 = Sign_ECDSA(Sign_PQC(message))\n+\n+And the verification process:\n+\n+.. code-block::\n+\n+   Verify_QES2 = Verify_ECDSA(Ïƒ_PQ) âˆ§ Verify_PQC(message)\n+\n+This creates a chained trust model where breaking the scheme would require breaking both the quantum-resistant signature and the classical signature.\n+\n+Mathematical Notation and Parameters\n+------------------------------------\n+\n+Let us define the following notation:\n+\n+- m: The message to be signed (transaction digest)\n+- sk_PQ: Dilithium private key\n+- pk_PQ: Dilithium public key\n+- sk_EC: ECDSA private key\n+- pk_EC: ECDSA public key\n+- Ïƒ_PQ: Dilithium signature on the message\n+- Ïƒ_EC: ECDSA signature on the Dilithium signature\n+- H: SHA-256 hash function\n+- S_PQ: Dilithium signing algorithm\n+- V_PQ: Dilithium verification algorithm\n+- S_EC: ECDSA signing algorithm\n+- V_EC: ECDSA verification algorithm\n+\n+Dilithium Parameters\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Dilithium instantiation uses the following parameters:\n+\n+- Security level: NIST security level 3 (equivalent to AES-192)\n+- Dimension n: 256\n+- Modulus q: 8380417\n+- Weight of challenge Î³1: 60\n+- Weight of secret Î³2: (q-1)/16\n+- Number of iterations Îº: 5\n+- Public key size: 1,952 bytes\n+- Private key size: 4,000 bytes\n+- Signature size: 2,701 bytes\n+\n+ECDSA Parameters\n+~~~~~~~~~~~~~~~\n+\n+The ECDSA implementation uses the following parameters:\n+\n+- Curve: secp256k1\n+- Field size: 256 bits\n+- Public key size: 33 bytes (compressed)\n+- Signature size: ~72 bytes (with sighash flag)\n+\n+Script Types and Address Format\n+-------------------------------\n+\n+This BIP introduces a new script template:\n+\n+.. code-block::\n+\n+   <pq_signature_push> <ecdsa_signature_push> <pubkey_push> OP_QES2_CHECKSIG\n+\n+Where:\n+\n+- ``<pq_signature_push>`` is the Dilithium signature component on the transaction digest\n+- ``<ecdsa_signature_push>`` is the ECDSA signature on the Dilithium signature\n+- ``<pubkey_push>`` includes both the ECDSA public key and Dilithium public key\n+- ``OP_QES2_CHECKSIG`` is a new opcode that verifies the entire chained signature scheme\n+\n+New Opcode\n+~~~~~~~~~~\n+\n+We introduce a new opcode, tentatively assigned as ``OP_QES2_CHECKSIG (0xba)``, that performs verification of the hybrid QES2 signature by checking both the ECDSA signature (which validates the PQC signature) and the Dilithium signature itself.\n+\n+P2QPK (Pay to QES2 Public Key)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PK, but using QES2:\n+\n+.. code-block::\n+\n+   <combined_pubkey> OP_QES2_CHECKSIG\n+\n+P2QPKH (Pay to QES2 Public Key Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PKH, but using a hash of the combined QES2 public key:\n+\n+.. code-block::\n+\n+   OP_DUP OP_HASH160 <qes2_pubkeyhash> OP_EQUALVERIFY OP_QES2_CHECKSIG\n+\n+P2QSH (Pay to QES2 Script Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2SH, but with QES2 signature verification:\n+\n+.. code-block::\n+\n+   OP_HASH160 <qes2_script_hash> OP_EQUAL\n+\n+Address Format\n+~~~~~~~~~~~~~\n+\n+QES2 addresses use a new version byte with a Bech32m encoding:\n+\n+.. code-block::\n+\n+   qp1<bech32m_encoded_program>\n+\n+Where the version byte indicates the use of QES2 and distinguishes between P2QPKH and P2QSH formats.\n+\n+Key Management\n+--------------\n+\n+Two approaches for managing QES2 keys:\n+\n+1. **Deterministic Derivation**\n+\n+   The Dilithium key pair is deterministically derived from the ECDSA private key:\n+\n+   .. code-block::\n+\n+      sk_PQ = HMAC-SHA512(sk_EC, \"Bitcoin_Dilithium_Key_Derivation\")\n+\n+   From sk_PQ, we compute:\n+\n+   .. code-block::\n+\n+      pk_PQ = Dilithium.KeyGen(sk_PQ)\n+\n+2. **Independent Keys**\n+\n+   The ECDSA and Dilithium key pairs are generated independently and bound together in the transaction script.\n+\n+The combined public key is represented as:\n+\n+.. code-block::\n+\n+   pk_combined = pk_PQ || pk_EC\n+\n+Where ``||`` denotes concatenation.\n+\n+The first approach is recommended for simplicity of wallet implementation, while the second offers greater flexibility.\n+\n+Signing Process\n+--------------\n+\n+The QES2 signing process consists of the following steps:\n+\n+1. **Transaction Serialization**\n+\n+   - Serialize the transaction inputs and outputs according to the appropriate sighash algorithm\n+   - Generate the transaction digest m = H(H(tx)) using double SHA-256\n+\n+2. **Post-Quantum Signature Generation**\n+\n+   - Generate a Dilithium signature on the transaction digest:\n+\n+     .. code-block::\n+\n+        Ïƒ_PQ = S_PQ(sk_PQ, m)\n+\n+3. **Vector Encoding**\n+\n+   - Flatten the post-quantum signature to obtain a coefficient vector\n+   - Apply domain-specific encoding to the coefficient vector\n+   - Apply compression and normalization to produce Ãª\n+\n+4. **ECDSA Signature Generation**\n+\n+   - Generate an ECDSA signature directly on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+   - The ECDSA signature follows the standard Bitcoin format, including the appropriate sighash flag\n+\n+5. **Complete Signature**\n+\n+   - The final QES2 signature consists of: (Ïƒ_PQ, Ïƒ_EC)\n+\n+This process can be summarized as:\n+\n+.. code-block::\n+\n+   Sign_QES2(m) = (Ïƒ_PQ, Ïƒ_EC)\n+\n+where:\n+\n+- Ïƒ_PQ = S_PQ(sk_PQ, m)\n+- Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+Importantly, the ECDSA signature is not signing the original message but is signing the PQC signature directly. This creates a cryptographic binding where the ECDSA signature validates the Dilithium signature.\n+\n+Verification Procedure\n+---------------------\n+\n+The verification of a QES2 signature consists of the following steps:\n+\n+1. **Transaction Digest Calculation**\n+\n+   - Calculate the transaction digest m = H(H(tx)) according to the sighash flags\n+\n+2. **Vector Decoding**\n+\n+   - Decode the PQC signature component Ïƒ_PQ to obtain Ãª\n+\n+3. **ECDSA Signature Verification**\n+\n+   - Verify the ECDSA signature on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        valid_EC = V_EC(pk_EC, Ãª, Ïƒ_EC)\n+\n+   - This step verifies the integrity of the Dilithium signature\n+\n+4. **Post-Quantum Signature Verification**\n+\n+   - Verify the Dilithium signature on the original transaction digest:\n+\n+     .. code-block::\n+\n+        valid_PQ = V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+5. **Combined Verification Decision**\n+\n+   - Accept the QES2 signature as valid if and only if both verifications succeed:\n+\n+     .. code-block::\n+\n+        valid = valid_EC âˆ§ valid_PQ\n+\n+The verification process can be summarized as:\n+\n+.. code-block::\n+\n+   Verify_QES2(m, Ïƒ_PQ, Ïƒ_EC, pk_PQ, pk_EC) = V_EC(pk_EC, Ãª, Ïƒ_EC) âˆ§ V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+This verification procedure ensures that:\n+\n+1. The transaction has not been tampered with (verified by Dilithium)\n+2. The Dilithium signature is valid for the transaction\n+3. The ECDSA signature validates the integrity of the Dilithium signature\n+\n+The security of this approach stems from the fact that an attacker would need to forge both signature types or find a way to create a valid ECDSA signature that endorses a forged Dilithium signature.\n+\n+Optimizations\n+------------\n+\n+To maintain reasonable validation performance:\n+\n+1. **Early rejection**: Perform ECDSA verification first and only proceed with Dilithium verification if ECDSA passes\n+2. **Optional verification**: During the initial deployment phase, nodes can verify only the ECDSA component\n+3. **Batch verification**: For multiple signatures in a transaction, use batch verification techniques\n+\n+The early rejection optimization can be formalized as:\n+\n+.. code-block::\n+\n+   valid = \n+   {\n+     V_PQ(pk_PQ, m, Ïƒ_PQ)  if V_EC(pk_EC, Ãª, Ïƒ_EC) = true\n+     false                  otherwise\n+   }\n+\n+Taproot Compatibility\n+--------------------\n+\n+QES2 can be integrated with BIP-340 (Taproot) by:\n+\n+1. Using the QES2-based signature in place of the Schnorr signature\n+2. Extending the taproot output to accommodate both ECDSA and Dilithium public keys\n+3. Modifying the key-path spending to use QES2\n+\n+The taproot Merkle root calculation would be modified to include both the ECDSA and Dilithium components:\n+\n+.. code-block::\n+\n+   P = pk_EC + hash_taptweak(pk_EC || pk_PQ || Merkle root) Â· G\n+\n+Where G is the generator point of the secp256k1 curve.\n+\n+Rationale\n+=========\n+\n+Hybrid Chained Approach\n+-----------------------\n+\n+The hybrid chained approach offers several advantages over a direct switch to post-quantum cryptography or a simple parallel combination of signatures:\n+\n+1. **Enhanced Security**: The binding between signatures means an attacker must break both schemes\n+2. **Cryptographic Binding**: ECDSA signature validates the integrity of the Dilithium signature\n+3. **Compatibility**: Maintains compatibility with existing Bitcoin infrastructure\n+4. **Confidence**: Uses established ECDSA while introducing quantum resistance\n+5. **Efficient Verification**: The ECDSA verification can serve as an initial check before more expensive PQC verification\n+\n+The specific chaining approach (PQC followed by ECDSA signing the PQC signature) ensures that:\n+\n+1. The quantum-resistant signature provides the primary security layer for the transaction\n+2. The ECDSA signature provides a binding mechanism that validates the PQC signature\n+3. The combined approach prevents potential isolation attacks against either scheme\n+4. Breaking the scheme would require breaking both the quantum-resistant signature and the classical signature, or finding a collision in the hash function\n+\n+Choice of Post-Quantum Algorithm\n+--------------------------------\n+\n+Dilithium is selected as the post-quantum component because:\n+\n+1. It is a finalist in the NIST post-quantum cryptography standardization process\n+2. It offers a reasonable balance between security level, signature size, and verification speed\n+3. It has undergone extensive cryptanalysis\n+4. Its lattice-based structure allows for potential optimizations in verification\n+\n+The security reduction for Dilithium is based on the hardness of the Module Learning With Errors (MLWE) and Module Short Integer Solution (MSIS) problems, which are believed to be resistant to quantum attacks.\n+\n+Script Capability\n+----------------\n+\n+The introduction of a new opcode provides several benefits:\n+\n+1. Clean integration into the Bitcoin scripting system\n+2. Flexibility for future signature scheme upgrades\n+3. Clear distinction between quantum-resistant and classical addresses\n+4. Ability to verify the chained signature scheme efficiently\n+\n+Size and Performance Impact\n+--------------------------\n+\n+The QES2 approach introduces additional overhead:\n+\n+1. **Signature Size**:\n+\n+   - ECDSA signature: ~72 bytes\n+   - Dilithium signature: ~2.7 KB\n+   - Total QES2 size with optimizations: ~2.8 KB\n+\n+2. **Verification Time**:\n+\n+   - ECDSA verification: ~0.3ms on standard hardware\n+   - Dilithium verification: ~1.2ms\n+   - Combined with optimizations: ~1.5ms\n+\n+3. **Impact on Block Space**:\n+\n+   - Increased transaction size by approximately 2.7 KB per input\n+   - Partially mitigated by optional adoption during transition phase\n+\n+The efficiency ratio can be expressed as:\n+\n+.. code-block::\n+\n+   Efficiency = Security Benefit / Size Overhead\n+\n+Where the security benefit is measured by the estimated years of protection against quantum attacks.\n+\n+Backwards Compatibility\n+======================\n+\n+This BIP maintains backward compatibility through several mechanisms:\n+\n+1. **Opt-in Deployment**: QES2 addresses are distinct from traditional addresses\n+2. **Traditional Scripts**: Existing P2PKH, P2SH, P2WPKH, and P2WSH scripts continue to function normally\n+3. **Validation Rules**: Nodes that do not implement this BIP will see the new scripts as anyone-can-spend outputs\n+4. **Soft Fork**: This change can be deployed as a soft fork\n+\n+Deployment\n+=========\n+\n+This BIP should be deployed as a soft fork using the standard BIP-9 version bits method:\n+\n+1. **Bit**: TBD\n+2. **Start time**: TBD\n+3. **Timeout**: TBD\n+\n+The deployment follows a phased approach:\n+\n+1. **Phase 1 - Optional Implementation**: Support for QES2 exists but is not required for consensus\n+2. **Phase 2 - Activation**: The soft fork activates, and QES2 scripts become valid\n+3. **Phase 3 - Transition**: Users gradually migrate to quantum-resistant addresses\n+\n+Reference Implementation\n+=======================\n+\n+A reference implementation will be provided in a separate pull request to the Bitcoin Core repository, including:\n+\n+1. Implementation of the new opcode\n+2. Verification logic for the hybrid chained signature scheme\n+3. Wallet functionality for creating and signing with QES2\n+\n+The pseudocode for the key signing process is as follows:\n+\n+.. code-block::\n+\n+   function signQES2(message, dilithiumPrivKey, ecdsaPrivKey):\n+       // First generate the PQC signature on the message\n+       dilithiumSignature = dilithiumSign(message, dilithiumPrivKey)\n+       \n+       // Encode the PQC signature\n+       encodedPQSig = encodeDilithiumSignature(dilithiumSignature)\n+       \n+       // Generate ECDSA signature directly on the encoded PQC signature\n+       ecdsaSignature = ecdsaSign(encodedPQSig, ecdsaPrivKey)\n+       \n+       // Return the complete QES2 signature\n+       return (dilithiumSignature, ecdsaSignature)\n+\n+The pseudocode for key verification is as follows:\n+\n+.. code-block::\n+\n+   function verifyQES2Signature(message, dilithiumSignature, ecdsaSignature, dilithiumPubKey, ecdsaPubKey):\n+       // Encode the PQC signature\n+       encodedPQSig = encodeDilithiumSignature(dilithiumSignature)\n+       \n+       // First verify ECDSA (faster verification)\n+       // This verifies the integrity of the PQC signature\n+       if not verifyECDSA(encodedPQSig, ecdsaSignature, ecdsaPubKey):\n+           return false\n+       \n+       // Only verify Dilithium if ECDSA passes\n+       return verifyDilithium(message, dilithiumSignature, dilithiumPubKey)\n+\n+Test Vectors\n+===========\n+\n+Test vectors will include:\n+\n+1. Sample key pairs (ECDSA and Dilithium)\n+2. Sample messages and their corresponding QES2 signatures\n+3. Script validation examples\n+4. Edge cases for validation\n+\n+Example Test Vector:\n+\n+.. code-block::\n+\n+   # Test Vector 1\n+   Message (Transaction Digest): 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\n+\n+   # ECDSA Key Pair\n+   ECDSA Private Key: 0xef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcd\n+   ECDSA Public Key: 0x02b1e6079a23ab7a7e5a7bc7a1a811a96ef37248143da0c4d35765c25094fcc712\n+\n+   # Dilithium Key Pair\n+   Dilithium Private Key: [4000 bytes, hexadecimal]\n+   Dilithium Public Key: [1952 bytes, hexadecimal]\n+\n+   # Step 1: Dilithium Signature on Original Message\n+   Dilithium Signature: [2701 bytes, hexadecimal]\n+\n+   # Step 2: Encoded Dilithium Signature\n+   Encoded Signature: [compressed representation]\n+\n+   # Step 3: ECDSA Signature on Encoded Dilithium Signature\n+   ECDSA Signature: 0x304402201234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef022012345678901234567890abcdef1234567890abcdef1234567890abcdef12345678\n+\n+   # Complete QES2 Signature\n+   QES2 Signature: [Dilithium Signature || ECDSA Signature]\n+\n+Security Considerations\n+======================\n+\n+Quantum Timeline\n+---------------\n+\n+The implementation timeline considers quantum computing development:\n+\n+1. **Near-term (3-5 years)**: Low quantum threat, preparation phase\n+2. **Medium-term (5-10 years)**: Growing threat, transition phase\n+3. **Long-term (10+ years)**: Potential quantum capacity to break ECDSA\n+\n+The risk assessment formula can be modeled as:\n+\n+.. code-block::\n+\n+   Risk = Probability of Attack Ã— Impact of Compromise\n+\n+Where the probability increases with quantum computing development, and the impact depends on the value secured by ECDSA.\n+\n+Migration Security\n+----------------\n+\n+During the transition period:\n+\n+1. Coins in traditional addresses will become increasingly vulnerable\n+2. Tools should be provided to securely migrate funds to quantum-resistant addresses\n+3. Community education about quantum security risks becomes critical\n+\n+The security of funds during migration depends on the following inequality:\n+\n+.. code-block::\n+\n+   T_migration < T_quantum break\n+\n+Where T_migration is the time required to migrate funds to quantum-resistant addresses, and T_quantum break is the time until quantum computers can break ECDSA.\n+\n+Implementation Security\n+----------------------\n+\n+Implementers should be aware of:\n+\n+1. Side-channel resistance in both signature schemes\n+2. Appropriate entropy for key generation\n+3. Secure storage of larger keys and signatures\n+4. Protection against combined cryptographic attacks\n+\n+The entropy requirements for key generation are:\n+\n+.. code-block::\n+\n+   Entropy_QES2 â‰¥ max(Entropy_ECDSA, Entropy_Dilithium) â‰¥ 256 bits\n+\n+Security Proofs\n+--------------\n+\n+The security of QES2 relies on the following propositions:\n+\n+1. **Dilithium Security**: The Dilithium signature is secure against quantum adversaries under the hardness assumptions of Module-LWE and Module-SIS problems.\n+\n+2. **ECDSA Security**: While vulnerable to quantum attacks, ECDSA remains secure against classical adversaries.\n+\n+3. **Binding Property**: The ECDSA signature validates the Dilithium signature, creating a binding that requires breaking both schemes or finding hash collisions to forge.",
      "path": "bip-newproposal.mediawiki",
      "position": 581,
      "original_position": 581,
      "commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "original_commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "in_reply_to_id": null,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why is it necessary to sign the PQ signature? Can't it just be included separately and still benefit from the same guarantees if committed to in the same address as BIP-360 does?",
      "created_at": "2025-04-18T15:53:32Z",
      "updated_at": "2025-04-18T15:54:04Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1830#discussion_r2050801508",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2050801508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1830"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 581,
      "original_line": 581,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2056007671",
      "pull_request_review_id": 2787225298,
      "id": 2056007671,
      "node_id": "PRRC_kwDOAN28mc56jC_3",
      "diff_hunk": "@@ -0,0 +1,607 @@\n+TBD | QES2 | A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin | [Caleb Lee] director@j1729labs.online, [Justin Park] < justin7361@j1729labs.online>, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online | 2025-04-18 | Draft\n+\n+:BIP: Unassigned\n+:Title: QES2 - A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin\n+:Author: [Caleb Lee] director@j1729labs.online, [Justin Park] justin7361@j1729labs.online, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online\n+:Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX\n+:Status: Draft\n+:Type: Standards Track\n+:Created: 2025-04-18\n+:License: BSD-2-Clause\n+:Requires: 340, 341, 342\n+\n+Abstract\n+========\n+\n+This BIP proposes QES2 (Quantum-Enhanced Signature Scheme), a hybrid digital signature scheme that creates a cryptographic binding between post-quantum cryptography (specifically Dilithium) and traditional ECDSA signatures for Bitcoin transactions. The approach first creates a Dilithium signature and then uses ECDSA to sign the Dilithium signature itself, creating a chain of cryptographic trust where the classical signature verifies the quantum-resistant signature. This approach provides both quantum resistance and backward compatibility, enabling Bitcoin to transition gradually to quantum-resistant security while preserving compatibility with existing infrastructure.\n+\n+Copyright\n+=========\n+\n+This BIP is licensed under the BSD 2-clause license.\n+\n+Motivation\n+==========\n+\n+Bitcoin's security fundamentally relies on the Elliptic Curve Digital Signature Algorithm (ECDSA) with the secp256k1 curve. While effective against classical computing attacks, ECDSA is vulnerable to quantum computers running Shor's algorithm, which can solve the discrete logarithm problem in polynomial time.\n+\n+As quantum computing advances, this vulnerability poses an existential threat to Bitcoin's security model. Recent estimates suggest that sufficiently powerful quantum computers capable of breaking ECDSA could be developed within the next decade.\n+\n+The Bitcoin community faces several challenges when considering a transition to post-quantum cryptography:\n+\n+1. Post-quantum signature schemes typically have significantly larger key and signature sizes\n+2. Complete replacement of ECDSA would break compatibility with existing wallets and infrastructure\n+3. The security of newer post-quantum schemes is still being evaluated by the cryptographic community\n+4. A sudden switch would require extensive coordination across the entire ecosystem\n+\n+This BIP proposes QES2 as a balanced solution that:\n+\n+1. Maintains compatibility with existing Bitcoin infrastructure\n+2. Adds quantum resistance through a lattice-based signature scheme (Dilithium)\n+3. Creates a cryptographic binding between PQC signatures and ECDSA signatures\n+4. Allows for a gradual, opt-in transition to quantum-resistant security\n+5. Creates a safety net against future quantum computing threats\n+\n+Specification\n+============\n+\n+Overview\n+--------\n+\n+QES2 combines the Dilithium post-quantum signature scheme with the classical ECDSA signature scheme currently used in Bitcoin. The key innovation is that QES2 doesn't just use both signature schemes in parallel but creates a cryptographic binding between them. First, the Dilithium signature is generated for the transaction digest, then the ECDSA signature signs the Dilithium signature itself. This binding ensures that the ECDSA signature validates the integrity of the quantum-resistant signature.\n+\n+The QES2 signature process can be represented as:\n+\n+.. code-block::\n+\n+   Sign_QES2 = Sign_ECDSA(Sign_PQC(message))\n+\n+And the verification process:\n+\n+.. code-block::\n+\n+   Verify_QES2 = Verify_ECDSA(Ïƒ_PQ) âˆ§ Verify_PQC(message)\n+\n+This creates a chained trust model where breaking the scheme would require breaking both the quantum-resistant signature and the classical signature.\n+\n+Mathematical Notation and Parameters\n+------------------------------------\n+\n+Let us define the following notation:\n+\n+- m: The message to be signed (transaction digest)\n+- sk_PQ: Dilithium private key\n+- pk_PQ: Dilithium public key\n+- sk_EC: ECDSA private key\n+- pk_EC: ECDSA public key\n+- Ïƒ_PQ: Dilithium signature on the message\n+- Ïƒ_EC: ECDSA signature on the Dilithium signature\n+- H: SHA-256 hash function\n+- S_PQ: Dilithium signing algorithm\n+- V_PQ: Dilithium verification algorithm\n+- S_EC: ECDSA signing algorithm\n+- V_EC: ECDSA verification algorithm\n+\n+Dilithium Parameters\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Dilithium instantiation uses the following parameters:\n+\n+- Security level: NIST security level 3 (equivalent to AES-192)\n+- Dimension n: 256\n+- Modulus q: 8380417\n+- Weight of challenge Î³1: 60\n+- Weight of secret Î³2: (q-1)/16\n+- Number of iterations Îº: 5\n+- Public key size: 1,952 bytes\n+- Private key size: 4,000 bytes\n+- Signature size: 2,701 bytes\n+\n+ECDSA Parameters\n+~~~~~~~~~~~~~~~\n+\n+The ECDSA implementation uses the following parameters:\n+\n+- Curve: secp256k1\n+- Field size: 256 bits\n+- Public key size: 33 bytes (compressed)\n+- Signature size: ~72 bytes (with sighash flag)\n+\n+Script Types and Address Format\n+-------------------------------\n+\n+This BIP introduces a new script template:\n+\n+.. code-block::\n+\n+   <pq_signature_push> <ecdsa_signature_push> <pubkey_push> OP_QES2_CHECKSIG\n+\n+Where:\n+\n+- ``<pq_signature_push>`` is the Dilithium signature component on the transaction digest\n+- ``<ecdsa_signature_push>`` is the ECDSA signature on the Dilithium signature\n+- ``<pubkey_push>`` includes both the ECDSA public key and Dilithium public key\n+- ``OP_QES2_CHECKSIG`` is a new opcode that verifies the entire chained signature scheme\n+\n+New Opcode\n+~~~~~~~~~~\n+\n+We introduce a new opcode, tentatively assigned as ``OP_QES2_CHECKSIG (0xba)``, that performs verification of the hybrid QES2 signature by checking both the ECDSA signature (which validates the PQC signature) and the Dilithium signature itself.",
      "path": "bip-newproposal.mediawiki",
      "position": 129,
      "original_position": 129,
      "commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "original_commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Opcode 186 was designated `OP_CHECKSIGADD` by [BIPâ€¯342](https://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki#script-execution).",
      "created_at": "2025-04-23T13:02:51Z",
      "updated_at": "2025-04-23T13:30:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1830#discussion_r2056007671",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2056007671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1830"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 129,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2056018200",
      "pull_request_review_id": 2787225298,
      "id": 2056018200,
      "node_id": "PRRC_kwDOAN28mc56jFkY",
      "diff_hunk": "@@ -0,0 +1,607 @@\n+TBD | QES2 | A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin | [Caleb Lee] director@j1729labs.online, [Justin Park] < justin7361@j1729labs.online>, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online | 2025-04-18 | Draft\n+\n+:BIP: Unassigned\n+:Title: QES2 - A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin\n+:Author: [Caleb Lee] director@j1729labs.online, [Justin Park] justin7361@j1729labs.online, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online\n+:Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX\n+:Status: Draft\n+:Type: Standards Track\n+:Created: 2025-04-18\n+:License: BSD-2-Clause\n+:Requires: 340, 341, 342\n+\n+Abstract\n+========\n+\n+This BIP proposes QES2 (Quantum-Enhanced Signature Scheme), a hybrid digital signature scheme that creates a cryptographic binding between post-quantum cryptography (specifically Dilithium) and traditional ECDSA signatures for Bitcoin transactions. The approach first creates a Dilithium signature and then uses ECDSA to sign the Dilithium signature itself, creating a chain of cryptographic trust where the classical signature verifies the quantum-resistant signature. This approach provides both quantum resistance and backward compatibility, enabling Bitcoin to transition gradually to quantum-resistant security while preserving compatibility with existing infrastructure.\n+\n+Copyright\n+=========\n+\n+This BIP is licensed under the BSD 2-clause license.\n+\n+Motivation\n+==========\n+\n+Bitcoin's security fundamentally relies on the Elliptic Curve Digital Signature Algorithm (ECDSA) with the secp256k1 curve. While effective against classical computing attacks, ECDSA is vulnerable to quantum computers running Shor's algorithm, which can solve the discrete logarithm problem in polynomial time.\n+\n+As quantum computing advances, this vulnerability poses an existential threat to Bitcoin's security model. Recent estimates suggest that sufficiently powerful quantum computers capable of breaking ECDSA could be developed within the next decade.\n+\n+The Bitcoin community faces several challenges when considering a transition to post-quantum cryptography:\n+\n+1. Post-quantum signature schemes typically have significantly larger key and signature sizes\n+2. Complete replacement of ECDSA would break compatibility with existing wallets and infrastructure\n+3. The security of newer post-quantum schemes is still being evaluated by the cryptographic community\n+4. A sudden switch would require extensive coordination across the entire ecosystem\n+\n+This BIP proposes QES2 as a balanced solution that:\n+\n+1. Maintains compatibility with existing Bitcoin infrastructure\n+2. Adds quantum resistance through a lattice-based signature scheme (Dilithium)\n+3. Creates a cryptographic binding between PQC signatures and ECDSA signatures\n+4. Allows for a gradual, opt-in transition to quantum-resistant security\n+5. Creates a safety net against future quantum computing threats\n+\n+Specification\n+============\n+\n+Overview\n+--------\n+\n+QES2 combines the Dilithium post-quantum signature scheme with the classical ECDSA signature scheme currently used in Bitcoin. The key innovation is that QES2 doesn't just use both signature schemes in parallel but creates a cryptographic binding between them. First, the Dilithium signature is generated for the transaction digest, then the ECDSA signature signs the Dilithium signature itself. This binding ensures that the ECDSA signature validates the integrity of the quantum-resistant signature.\n+\n+The QES2 signature process can be represented as:\n+\n+.. code-block::\n+\n+   Sign_QES2 = Sign_ECDSA(Sign_PQC(message))\n+\n+And the verification process:\n+\n+.. code-block::\n+\n+   Verify_QES2 = Verify_ECDSA(Ïƒ_PQ) âˆ§ Verify_PQC(message)\n+\n+This creates a chained trust model where breaking the scheme would require breaking both the quantum-resistant signature and the classical signature.\n+\n+Mathematical Notation and Parameters\n+------------------------------------\n+\n+Let us define the following notation:\n+\n+- m: The message to be signed (transaction digest)\n+- sk_PQ: Dilithium private key\n+- pk_PQ: Dilithium public key\n+- sk_EC: ECDSA private key\n+- pk_EC: ECDSA public key\n+- Ïƒ_PQ: Dilithium signature on the message\n+- Ïƒ_EC: ECDSA signature on the Dilithium signature\n+- H: SHA-256 hash function\n+- S_PQ: Dilithium signing algorithm\n+- V_PQ: Dilithium verification algorithm\n+- S_EC: ECDSA signing algorithm\n+- V_EC: ECDSA verification algorithm\n+\n+Dilithium Parameters\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Dilithium instantiation uses the following parameters:\n+\n+- Security level: NIST security level 3 (equivalent to AES-192)\n+- Dimension n: 256\n+- Modulus q: 8380417\n+- Weight of challenge Î³1: 60\n+- Weight of secret Î³2: (q-1)/16\n+- Number of iterations Îº: 5\n+- Public key size: 1,952 bytes\n+- Private key size: 4,000 bytes\n+- Signature size: 2,701 bytes\n+\n+ECDSA Parameters\n+~~~~~~~~~~~~~~~\n+\n+The ECDSA implementation uses the following parameters:\n+\n+- Curve: secp256k1\n+- Field size: 256 bits\n+- Public key size: 33 bytes (compressed)\n+- Signature size: ~72 bytes (with sighash flag)\n+\n+Script Types and Address Format\n+-------------------------------\n+\n+This BIP introduces a new script template:\n+\n+.. code-block::\n+\n+   <pq_signature_push> <ecdsa_signature_push> <pubkey_push> OP_QES2_CHECKSIG\n+\n+Where:\n+\n+- ``<pq_signature_push>`` is the Dilithium signature component on the transaction digest\n+- ``<ecdsa_signature_push>`` is the ECDSA signature on the Dilithium signature\n+- ``<pubkey_push>`` includes both the ECDSA public key and Dilithium public key\n+- ``OP_QES2_CHECKSIG`` is a new opcode that verifies the entire chained signature scheme\n+\n+New Opcode\n+~~~~~~~~~~\n+\n+We introduce a new opcode, tentatively assigned as ``OP_QES2_CHECKSIG (0xba)``, that performs verification of the hybrid QES2 signature by checking both the ECDSA signature (which validates the PQC signature) and the Dilithium signature itself.\n+\n+P2QPK (Pay to QES2 Public Key)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PK, but using QES2:\n+\n+.. code-block::\n+\n+   <combined_pubkey> OP_QES2_CHECKSIG\n+\n+P2QPKH (Pay to QES2 Public Key Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PKH, but using a hash of the combined QES2 public key:\n+\n+.. code-block::\n+\n+   OP_DUP OP_HASH160 <qes2_pubkeyhash> OP_EQUALVERIFY OP_QES2_CHECKSIG\n+\n+P2QSH (Pay to QES2 Script Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2SH, but with QES2 signature verification:\n+\n+.. code-block::\n+\n+   OP_HASH160 <qes2_script_hash> OP_EQUAL\n+\n+Address Format\n+~~~~~~~~~~~~~\n+\n+QES2 addresses use a new version byte with a Bech32m encoding:\n+\n+.. code-block::\n+\n+   qp1<bech32m_encoded_program>\n+\n+Where the version byte indicates the use of QES2 and distinguishes between P2QPKH and P2QSH formats.\n+\n+Key Management\n+--------------\n+\n+Two approaches for managing QES2 keys:\n+\n+1. **Deterministic Derivation**\n+\n+   The Dilithium key pair is deterministically derived from the ECDSA private key:\n+\n+   .. code-block::\n+\n+      sk_PQ = HMAC-SHA512(sk_EC, \"Bitcoin_Dilithium_Key_Derivation\")\n+\n+   From sk_PQ, we compute:\n+\n+   .. code-block::\n+\n+      pk_PQ = Dilithium.KeyGen(sk_PQ)\n+\n+2. **Independent Keys**\n+\n+   The ECDSA and Dilithium key pairs are generated independently and bound together in the transaction script.\n+\n+The combined public key is represented as:\n+\n+.. code-block::\n+\n+   pk_combined = pk_PQ || pk_EC\n+\n+Where ``||`` denotes concatenation.\n+\n+The first approach is recommended for simplicity of wallet implementation, while the second offers greater flexibility.\n+\n+Signing Process\n+--------------\n+\n+The QES2 signing process consists of the following steps:\n+\n+1. **Transaction Serialization**\n+\n+   - Serialize the transaction inputs and outputs according to the appropriate sighash algorithm\n+   - Generate the transaction digest m = H(H(tx)) using double SHA-256\n+\n+2. **Post-Quantum Signature Generation**\n+\n+   - Generate a Dilithium signature on the transaction digest:\n+\n+     .. code-block::\n+\n+        Ïƒ_PQ = S_PQ(sk_PQ, m)\n+\n+3. **Vector Encoding**\n+\n+   - Flatten the post-quantum signature to obtain a coefficient vector\n+   - Apply domain-specific encoding to the coefficient vector\n+   - Apply compression and normalization to produce Ãª\n+\n+4. **ECDSA Signature Generation**\n+\n+   - Generate an ECDSA signature directly on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+   - The ECDSA signature follows the standard Bitcoin format, including the appropriate sighash flag\n+\n+5. **Complete Signature**\n+\n+   - The final QES2 signature consists of: (Ïƒ_PQ, Ïƒ_EC)\n+\n+This process can be summarized as:\n+\n+.. code-block::\n+\n+   Sign_QES2(m) = (Ïƒ_PQ, Ïƒ_EC)\n+\n+where:\n+\n+- Ïƒ_PQ = S_PQ(sk_PQ, m)\n+- Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+Importantly, the ECDSA signature is not signing the original message but is signing the PQC signature directly. This creates a cryptographic binding where the ECDSA signature validates the Dilithium signature.\n+\n+Verification Procedure\n+---------------------\n+\n+The verification of a QES2 signature consists of the following steps:\n+\n+1. **Transaction Digest Calculation**\n+\n+   - Calculate the transaction digest m = H(H(tx)) according to the sighash flags\n+\n+2. **Vector Decoding**\n+\n+   - Decode the PQC signature component Ïƒ_PQ to obtain Ãª\n+\n+3. **ECDSA Signature Verification**\n+\n+   - Verify the ECDSA signature on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        valid_EC = V_EC(pk_EC, Ãª, Ïƒ_EC)\n+\n+   - This step verifies the integrity of the Dilithium signature\n+\n+4. **Post-Quantum Signature Verification**\n+\n+   - Verify the Dilithium signature on the original transaction digest:\n+\n+     .. code-block::\n+\n+        valid_PQ = V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+5. **Combined Verification Decision**\n+\n+   - Accept the QES2 signature as valid if and only if both verifications succeed:\n+\n+     .. code-block::\n+\n+        valid = valid_EC âˆ§ valid_PQ\n+\n+The verification process can be summarized as:\n+\n+.. code-block::\n+\n+   Verify_QES2(m, Ïƒ_PQ, Ïƒ_EC, pk_PQ, pk_EC) = V_EC(pk_EC, Ãª, Ïƒ_EC) âˆ§ V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+This verification procedure ensures that:\n+\n+1. The transaction has not been tampered with (verified by Dilithium)\n+2. The Dilithium signature is valid for the transaction\n+3. The ECDSA signature validates the integrity of the Dilithium signature\n+\n+The security of this approach stems from the fact that an attacker would need to forge both signature types or find a way to create a valid ECDSA signature that endorses a forged Dilithium signature.\n+\n+Optimizations\n+------------\n+\n+To maintain reasonable validation performance:\n+\n+1. **Early rejection**: Perform ECDSA verification first and only proceed with Dilithium verification if ECDSA passes\n+2. **Optional verification**: During the initial deployment phase, nodes can verify only the ECDSA component\n+3. **Batch verification**: For multiple signatures in a transaction, use batch verification techniques\n+\n+The early rejection optimization can be formalized as:\n+\n+.. code-block::\n+\n+   valid = \n+   {\n+     V_PQ(pk_PQ, m, Ïƒ_PQ)  if V_EC(pk_EC, Ãª, Ïƒ_EC) = true\n+     false                  otherwise\n+   }\n+\n+Taproot Compatibility\n+--------------------\n+\n+QES2 can be integrated with BIP-340 (Taproot) by:\n+\n+1. Using the QES2-based signature in place of the Schnorr signature",
      "path": "bip-newproposal.mediawiki",
      "position": 330,
      "original_position": 330,
      "commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "original_commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "in_reply_to_id": 2050797563,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Like @cryptoquick, Iâ€™m confused that this proposal focuses only on ECDSA signatures, when about 1/3 of all existing UTXOs use the P2TR output type that employs BIP340 signatures. Could you please provide rationale for this approach and further address the implications for existing P2TR outputs intended to be spent via the scriptpath?",
      "created_at": "2025-04-23T13:08:34Z",
      "updated_at": "2025-04-23T13:30:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1830#discussion_r2056018200",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2056018200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1830"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2056022263",
      "pull_request_review_id": 2787225298,
      "id": 2056022263,
      "node_id": "PRRC_kwDOAN28mc56jGj3",
      "diff_hunk": "@@ -0,0 +1,607 @@\n+TBD | QES2 | A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin | [Caleb Lee] director@j1729labs.online, [Justin Park] < justin7361@j1729labs.online>, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online | 2025-04-18 | Draft\n+\n+:BIP: Unassigned\n+:Title: QES2 - A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin\n+:Author: [Caleb Lee] director@j1729labs.online, [Justin Park] justin7361@j1729labs.online, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online\n+:Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX\n+:Status: Draft\n+:Type: Standards Track\n+:Created: 2025-04-18\n+:License: BSD-2-Clause\n+:Requires: 340, 341, 342\n+\n+Abstract\n+========\n+\n+This BIP proposes QES2 (Quantum-Enhanced Signature Scheme), a hybrid digital signature scheme that creates a cryptographic binding between post-quantum cryptography (specifically Dilithium) and traditional ECDSA signatures for Bitcoin transactions. The approach first creates a Dilithium signature and then uses ECDSA to sign the Dilithium signature itself, creating a chain of cryptographic trust where the classical signature verifies the quantum-resistant signature. This approach provides both quantum resistance and backward compatibility, enabling Bitcoin to transition gradually to quantum-resistant security while preserving compatibility with existing infrastructure.\n+\n+Copyright\n+=========\n+\n+This BIP is licensed under the BSD 2-clause license.\n+\n+Motivation\n+==========\n+\n+Bitcoin's security fundamentally relies on the Elliptic Curve Digital Signature Algorithm (ECDSA) with the secp256k1 curve. While effective against classical computing attacks, ECDSA is vulnerable to quantum computers running Shor's algorithm, which can solve the discrete logarithm problem in polynomial time.\n+\n+As quantum computing advances, this vulnerability poses an existential threat to Bitcoin's security model. Recent estimates suggest that sufficiently powerful quantum computers capable of breaking ECDSA could be developed within the next decade.\n+\n+The Bitcoin community faces several challenges when considering a transition to post-quantum cryptography:\n+\n+1. Post-quantum signature schemes typically have significantly larger key and signature sizes\n+2. Complete replacement of ECDSA would break compatibility with existing wallets and infrastructure\n+3. The security of newer post-quantum schemes is still being evaluated by the cryptographic community\n+4. A sudden switch would require extensive coordination across the entire ecosystem\n+\n+This BIP proposes QES2 as a balanced solution that:\n+\n+1. Maintains compatibility with existing Bitcoin infrastructure\n+2. Adds quantum resistance through a lattice-based signature scheme (Dilithium)\n+3. Creates a cryptographic binding between PQC signatures and ECDSA signatures\n+4. Allows for a gradual, opt-in transition to quantum-resistant security\n+5. Creates a safety net against future quantum computing threats\n+\n+Specification\n+============\n+\n+Overview\n+--------\n+\n+QES2 combines the Dilithium post-quantum signature scheme with the classical ECDSA signature scheme currently used in Bitcoin. The key innovation is that QES2 doesn't just use both signature schemes in parallel but creates a cryptographic binding between them. First, the Dilithium signature is generated for the transaction digest, then the ECDSA signature signs the Dilithium signature itself. This binding ensures that the ECDSA signature validates the integrity of the quantum-resistant signature.\n+\n+The QES2 signature process can be represented as:\n+\n+.. code-block::\n+\n+   Sign_QES2 = Sign_ECDSA(Sign_PQC(message))\n+\n+And the verification process:\n+\n+.. code-block::\n+\n+   Verify_QES2 = Verify_ECDSA(Ïƒ_PQ) âˆ§ Verify_PQC(message)\n+\n+This creates a chained trust model where breaking the scheme would require breaking both the quantum-resistant signature and the classical signature.\n+\n+Mathematical Notation and Parameters\n+------------------------------------\n+\n+Let us define the following notation:\n+\n+- m: The message to be signed (transaction digest)\n+- sk_PQ: Dilithium private key\n+- pk_PQ: Dilithium public key\n+- sk_EC: ECDSA private key\n+- pk_EC: ECDSA public key\n+- Ïƒ_PQ: Dilithium signature on the message\n+- Ïƒ_EC: ECDSA signature on the Dilithium signature\n+- H: SHA-256 hash function\n+- S_PQ: Dilithium signing algorithm\n+- V_PQ: Dilithium verification algorithm\n+- S_EC: ECDSA signing algorithm\n+- V_EC: ECDSA verification algorithm\n+\n+Dilithium Parameters\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Dilithium instantiation uses the following parameters:\n+\n+- Security level: NIST security level 3 (equivalent to AES-192)\n+- Dimension n: 256\n+- Modulus q: 8380417\n+- Weight of challenge Î³1: 60\n+- Weight of secret Î³2: (q-1)/16\n+- Number of iterations Îº: 5\n+- Public key size: 1,952 bytes\n+- Private key size: 4,000 bytes\n+- Signature size: 2,701 bytes\n+\n+ECDSA Parameters\n+~~~~~~~~~~~~~~~\n+\n+The ECDSA implementation uses the following parameters:\n+\n+- Curve: secp256k1\n+- Field size: 256 bits\n+- Public key size: 33 bytes (compressed)\n+- Signature size: ~72 bytes (with sighash flag)\n+\n+Script Types and Address Format\n+-------------------------------\n+\n+This BIP introduces a new script template:\n+\n+.. code-block::\n+\n+   <pq_signature_push> <ecdsa_signature_push> <pubkey_push> OP_QES2_CHECKSIG\n+\n+Where:\n+\n+- ``<pq_signature_push>`` is the Dilithium signature component on the transaction digest\n+- ``<ecdsa_signature_push>`` is the ECDSA signature on the Dilithium signature\n+- ``<pubkey_push>`` includes both the ECDSA public key and Dilithium public key\n+- ``OP_QES2_CHECKSIG`` is a new opcode that verifies the entire chained signature scheme\n+\n+New Opcode\n+~~~~~~~~~~\n+\n+We introduce a new opcode, tentatively assigned as ``OP_QES2_CHECKSIG (0xba)``, that performs verification of the hybrid QES2 signature by checking both the ECDSA signature (which validates the PQC signature) and the Dilithium signature itself.\n+\n+P2QPK (Pay to QES2 Public Key)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PK, but using QES2:\n+\n+.. code-block::\n+\n+   <combined_pubkey> OP_QES2_CHECKSIG\n+\n+P2QPKH (Pay to QES2 Public Key Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PKH, but using a hash of the combined QES2 public key:\n+\n+.. code-block::\n+\n+   OP_DUP OP_HASH160 <qes2_pubkeyhash> OP_EQUALVERIFY OP_QES2_CHECKSIG\n+\n+P2QSH (Pay to QES2 Script Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2SH, but with QES2 signature verification:\n+\n+.. code-block::\n+\n+   OP_HASH160 <qes2_script_hash> OP_EQUAL\n+\n+Address Format\n+~~~~~~~~~~~~~\n+\n+QES2 addresses use a new version byte with a Bech32m encoding:\n+\n+.. code-block::\n+\n+   qp1<bech32m_encoded_program>\n+\n+Where the version byte indicates the use of QES2 and distinguishes between P2QPKH and P2QSH formats.\n+\n+Key Management\n+--------------\n+\n+Two approaches for managing QES2 keys:\n+\n+1. **Deterministic Derivation**\n+\n+   The Dilithium key pair is deterministically derived from the ECDSA private key:\n+\n+   .. code-block::\n+\n+      sk_PQ = HMAC-SHA512(sk_EC, \"Bitcoin_Dilithium_Key_Derivation\")\n+\n+   From sk_PQ, we compute:\n+\n+   .. code-block::\n+\n+      pk_PQ = Dilithium.KeyGen(sk_PQ)\n+\n+2. **Independent Keys**\n+\n+   The ECDSA and Dilithium key pairs are generated independently and bound together in the transaction script.\n+\n+The combined public key is represented as:\n+\n+.. code-block::\n+\n+   pk_combined = pk_PQ || pk_EC\n+\n+Where ``||`` denotes concatenation.\n+\n+The first approach is recommended for simplicity of wallet implementation, while the second offers greater flexibility.\n+\n+Signing Process\n+--------------\n+\n+The QES2 signing process consists of the following steps:\n+\n+1. **Transaction Serialization**\n+\n+   - Serialize the transaction inputs and outputs according to the appropriate sighash algorithm\n+   - Generate the transaction digest m = H(H(tx)) using double SHA-256\n+\n+2. **Post-Quantum Signature Generation**\n+\n+   - Generate a Dilithium signature on the transaction digest:\n+\n+     .. code-block::\n+\n+        Ïƒ_PQ = S_PQ(sk_PQ, m)\n+\n+3. **Vector Encoding**\n+\n+   - Flatten the post-quantum signature to obtain a coefficient vector\n+   - Apply domain-specific encoding to the coefficient vector\n+   - Apply compression and normalization to produce Ãª\n+\n+4. **ECDSA Signature Generation**\n+\n+   - Generate an ECDSA signature directly on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+   - The ECDSA signature follows the standard Bitcoin format, including the appropriate sighash flag\n+\n+5. **Complete Signature**\n+\n+   - The final QES2 signature consists of: (Ïƒ_PQ, Ïƒ_EC)\n+\n+This process can be summarized as:\n+\n+.. code-block::\n+\n+   Sign_QES2(m) = (Ïƒ_PQ, Ïƒ_EC)\n+\n+where:\n+\n+- Ïƒ_PQ = S_PQ(sk_PQ, m)\n+- Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+Importantly, the ECDSA signature is not signing the original message but is signing the PQC signature directly. This creates a cryptographic binding where the ECDSA signature validates the Dilithium signature.\n+\n+Verification Procedure\n+---------------------\n+\n+The verification of a QES2 signature consists of the following steps:\n+\n+1. **Transaction Digest Calculation**\n+\n+   - Calculate the transaction digest m = H(H(tx)) according to the sighash flags\n+\n+2. **Vector Decoding**\n+\n+   - Decode the PQC signature component Ïƒ_PQ to obtain Ãª\n+\n+3. **ECDSA Signature Verification**\n+\n+   - Verify the ECDSA signature on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        valid_EC = V_EC(pk_EC, Ãª, Ïƒ_EC)\n+\n+   - This step verifies the integrity of the Dilithium signature\n+\n+4. **Post-Quantum Signature Verification**\n+\n+   - Verify the Dilithium signature on the original transaction digest:\n+\n+     .. code-block::\n+\n+        valid_PQ = V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+5. **Combined Verification Decision**\n+\n+   - Accept the QES2 signature as valid if and only if both verifications succeed:\n+\n+     .. code-block::\n+\n+        valid = valid_EC âˆ§ valid_PQ\n+\n+The verification process can be summarized as:\n+\n+.. code-block::\n+\n+   Verify_QES2(m, Ïƒ_PQ, Ïƒ_EC, pk_PQ, pk_EC) = V_EC(pk_EC, Ãª, Ïƒ_EC) âˆ§ V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+This verification procedure ensures that:\n+\n+1. The transaction has not been tampered with (verified by Dilithium)\n+2. The Dilithium signature is valid for the transaction\n+3. The ECDSA signature validates the integrity of the Dilithium signature\n+\n+The security of this approach stems from the fact that an attacker would need to forge both signature types or find a way to create a valid ECDSA signature that endorses a forged Dilithium signature.\n+\n+Optimizations\n+------------\n+\n+To maintain reasonable validation performance:\n+\n+1. **Early rejection**: Perform ECDSA verification first and only proceed with Dilithium verification if ECDSA passes\n+2. **Optional verification**: During the initial deployment phase, nodes can verify only the ECDSA component\n+3. **Batch verification**: For multiple signatures in a transaction, use batch verification techniques\n+\n+The early rejection optimization can be formalized as:\n+\n+.. code-block::\n+\n+   valid = \n+   {\n+     V_PQ(pk_PQ, m, Ïƒ_PQ)  if V_EC(pk_EC, Ãª, Ïƒ_EC) = true\n+     false                  otherwise\n+   }\n+\n+Taproot Compatibility\n+--------------------\n+\n+QES2 can be integrated with BIP-340 (Taproot) by:\n+\n+1. Using the QES2-based signature in place of the Schnorr signature\n+2. Extending the taproot output to accommodate both ECDSA and Dilithium public keys\n+3. Modifying the key-path spending to use QES2\n+\n+The taproot Merkle root calculation would be modified to include both the ECDSA and Dilithium components:\n+\n+.. code-block::\n+\n+   P = pk_EC + hash_taptweak(pk_EC || pk_PQ || Merkle root) Â· G\n+\n+Where G is the generator point of the secp256k1 curve.\n+\n+Rationale\n+=========\n+\n+Hybrid Chained Approach\n+-----------------------\n+\n+The hybrid chained approach offers several advantages over a direct switch to post-quantum cryptography or a simple parallel combination of signatures:\n+\n+1. **Enhanced Security**: The binding between signatures means an attacker must break both schemes\n+2. **Cryptographic Binding**: ECDSA signature validates the integrity of the Dilithium signature\n+3. **Compatibility**: Maintains compatibility with existing Bitcoin infrastructure\n+4. **Confidence**: Uses established ECDSA while introducing quantum resistance\n+5. **Efficient Verification**: The ECDSA verification can serve as an initial check before more expensive PQC verification\n+\n+The specific chaining approach (PQC followed by ECDSA signing the PQC signature) ensures that:\n+\n+1. The quantum-resistant signature provides the primary security layer for the transaction\n+2. The ECDSA signature provides a binding mechanism that validates the PQC signature\n+3. The combined approach prevents potential isolation attacks against either scheme\n+4. Breaking the scheme would require breaking both the quantum-resistant signature and the classical signature, or finding a collision in the hash function\n+\n+Choice of Post-Quantum Algorithm\n+--------------------------------\n+\n+Dilithium is selected as the post-quantum component because:\n+\n+1. It is a finalist in the NIST post-quantum cryptography standardization process\n+2. It offers a reasonable balance between security level, signature size, and verification speed\n+3. It has undergone extensive cryptanalysis\n+4. Its lattice-based structure allows for potential optimizations in verification\n+\n+The security reduction for Dilithium is based on the hardness of the Module Learning With Errors (MLWE) and Module Short Integer Solution (MSIS) problems, which are believed to be resistant to quantum attacks.\n+\n+Script Capability\n+----------------\n+\n+The introduction of a new opcode provides several benefits:\n+\n+1. Clean integration into the Bitcoin scripting system\n+2. Flexibility for future signature scheme upgrades\n+3. Clear distinction between quantum-resistant and classical addresses\n+4. Ability to verify the chained signature scheme efficiently\n+\n+Size and Performance Impact\n+--------------------------\n+\n+The QES2 approach introduces additional overhead:\n+\n+1. **Signature Size**:\n+\n+   - ECDSA signature: ~72 bytes\n+   - Dilithium signature: ~2.7 KB\n+   - Total QES2 size with optimizations: ~2.8 KB\n+\n+2. **Verification Time**:\n+\n+   - ECDSA verification: ~0.3ms on standard hardware\n+   - Dilithium verification: ~1.2ms\n+   - Combined with optimizations: ~1.5ms\n+\n+3. **Impact on Block Space**:\n+\n+   - Increased transaction size by approximately 2.7 KB per input\n+   - Partially mitigated by optional adoption during transition phase\n+\n+The efficiency ratio can be expressed as:\n+\n+.. code-block::\n+\n+   Efficiency = Security Benefit / Size Overhead\n+\n+Where the security benefit is measured by the estimated years of protection against quantum attacks.\n+\n+Backwards Compatibility\n+======================\n+\n+This BIP maintains backward compatibility through several mechanisms:\n+\n+1. **Opt-in Deployment**: QES2 addresses are distinct from traditional addresses\n+2. **Traditional Scripts**: Existing P2PKH, P2SH, P2WPKH, and P2WSH scripts continue to function normally",
      "path": "bip-newproposal.mediawiki",
      "position": 421,
      "original_position": 421,
      "commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "original_commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As mentioned, this does not address P2TR outputs which make up about 1/3 of all existing UTXOs.",
      "created_at": "2025-04-23T13:10:34Z",
      "updated_at": "2025-04-23T13:30:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1830#discussion_r2056022263",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2056022263"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1830"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 421,
      "original_line": 421,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2056026629",
      "pull_request_review_id": 2787225298,
      "id": 2056026629,
      "node_id": "PRRC_kwDOAN28mc56jHoF",
      "diff_hunk": "@@ -0,0 +1,607 @@\n+TBD | QES2 | A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin | [Caleb Lee] director@j1729labs.online, [Justin Park] < justin7361@j1729labs.online>, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online | 2025-04-18 | Draft\n+\n+:BIP: Unassigned\n+:Title: QES2 - A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin\n+:Author: [Caleb Lee] director@j1729labs.online, [Justin Park] justin7361@j1729labs.online, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online\n+:Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX\n+:Status: Draft\n+:Type: Standards Track\n+:Created: 2025-04-18\n+:License: BSD-2-Clause\n+:Requires: 340, 341, 342\n+\n+Abstract\n+========\n+\n+This BIP proposes QES2 (Quantum-Enhanced Signature Scheme), a hybrid digital signature scheme that creates a cryptographic binding between post-quantum cryptography (specifically Dilithium) and traditional ECDSA signatures for Bitcoin transactions. The approach first creates a Dilithium signature and then uses ECDSA to sign the Dilithium signature itself, creating a chain of cryptographic trust where the classical signature verifies the quantum-resistant signature. This approach provides both quantum resistance and backward compatibility, enabling Bitcoin to transition gradually to quantum-resistant security while preserving compatibility with existing infrastructure.\n+\n+Copyright\n+=========\n+\n+This BIP is licensed under the BSD 2-clause license.\n+\n+Motivation\n+==========\n+\n+Bitcoin's security fundamentally relies on the Elliptic Curve Digital Signature Algorithm (ECDSA) with the secp256k1 curve. While effective against classical computing attacks, ECDSA is vulnerable to quantum computers running Shor's algorithm, which can solve the discrete logarithm problem in polynomial time.\n+\n+As quantum computing advances, this vulnerability poses an existential threat to Bitcoin's security model. Recent estimates suggest that sufficiently powerful quantum computers capable of breaking ECDSA could be developed within the next decade.\n+\n+The Bitcoin community faces several challenges when considering a transition to post-quantum cryptography:\n+\n+1. Post-quantum signature schemes typically have significantly larger key and signature sizes\n+2. Complete replacement of ECDSA would break compatibility with existing wallets and infrastructure\n+3. The security of newer post-quantum schemes is still being evaluated by the cryptographic community\n+4. A sudden switch would require extensive coordination across the entire ecosystem\n+\n+This BIP proposes QES2 as a balanced solution that:\n+\n+1. Maintains compatibility with existing Bitcoin infrastructure\n+2. Adds quantum resistance through a lattice-based signature scheme (Dilithium)\n+3. Creates a cryptographic binding between PQC signatures and ECDSA signatures\n+4. Allows for a gradual, opt-in transition to quantum-resistant security\n+5. Creates a safety net against future quantum computing threats\n+\n+Specification\n+============\n+\n+Overview\n+--------\n+\n+QES2 combines the Dilithium post-quantum signature scheme with the classical ECDSA signature scheme currently used in Bitcoin. The key innovation is that QES2 doesn't just use both signature schemes in parallel but creates a cryptographic binding between them. First, the Dilithium signature is generated for the transaction digest, then the ECDSA signature signs the Dilithium signature itself. This binding ensures that the ECDSA signature validates the integrity of the quantum-resistant signature.\n+\n+The QES2 signature process can be represented as:\n+\n+.. code-block::\n+\n+   Sign_QES2 = Sign_ECDSA(Sign_PQC(message))\n+\n+And the verification process:\n+\n+.. code-block::\n+\n+   Verify_QES2 = Verify_ECDSA(Ïƒ_PQ) âˆ§ Verify_PQC(message)\n+\n+This creates a chained trust model where breaking the scheme would require breaking both the quantum-resistant signature and the classical signature.\n+\n+Mathematical Notation and Parameters\n+------------------------------------\n+\n+Let us define the following notation:\n+\n+- m: The message to be signed (transaction digest)\n+- sk_PQ: Dilithium private key\n+- pk_PQ: Dilithium public key\n+- sk_EC: ECDSA private key\n+- pk_EC: ECDSA public key\n+- Ïƒ_PQ: Dilithium signature on the message\n+- Ïƒ_EC: ECDSA signature on the Dilithium signature\n+- H: SHA-256 hash function\n+- S_PQ: Dilithium signing algorithm\n+- V_PQ: Dilithium verification algorithm\n+- S_EC: ECDSA signing algorithm\n+- V_EC: ECDSA verification algorithm\n+\n+Dilithium Parameters\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Dilithium instantiation uses the following parameters:\n+\n+- Security level: NIST security level 3 (equivalent to AES-192)\n+- Dimension n: 256\n+- Modulus q: 8380417\n+- Weight of challenge Î³1: 60\n+- Weight of secret Î³2: (q-1)/16\n+- Number of iterations Îº: 5\n+- Public key size: 1,952 bytes\n+- Private key size: 4,000 bytes\n+- Signature size: 2,701 bytes\n+\n+ECDSA Parameters\n+~~~~~~~~~~~~~~~\n+\n+The ECDSA implementation uses the following parameters:\n+\n+- Curve: secp256k1\n+- Field size: 256 bits\n+- Public key size: 33 bytes (compressed)\n+- Signature size: ~72 bytes (with sighash flag)\n+\n+Script Types and Address Format\n+-------------------------------\n+\n+This BIP introduces a new script template:\n+\n+.. code-block::\n+\n+   <pq_signature_push> <ecdsa_signature_push> <pubkey_push> OP_QES2_CHECKSIG\n+\n+Where:\n+\n+- ``<pq_signature_push>`` is the Dilithium signature component on the transaction digest\n+- ``<ecdsa_signature_push>`` is the ECDSA signature on the Dilithium signature\n+- ``<pubkey_push>`` includes both the ECDSA public key and Dilithium public key\n+- ``OP_QES2_CHECKSIG`` is a new opcode that verifies the entire chained signature scheme\n+\n+New Opcode\n+~~~~~~~~~~\n+\n+We introduce a new opcode, tentatively assigned as ``OP_QES2_CHECKSIG (0xba)``, that performs verification of the hybrid QES2 signature by checking both the ECDSA signature (which validates the PQC signature) and the Dilithium signature itself.\n+\n+P2QPK (Pay to QES2 Public Key)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PK, but using QES2:\n+\n+.. code-block::\n+\n+   <combined_pubkey> OP_QES2_CHECKSIG\n+\n+P2QPKH (Pay to QES2 Public Key Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PKH, but using a hash of the combined QES2 public key:\n+\n+.. code-block::\n+\n+   OP_DUP OP_HASH160 <qes2_pubkeyhash> OP_EQUALVERIFY OP_QES2_CHECKSIG\n+\n+P2QSH (Pay to QES2 Script Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2SH, but with QES2 signature verification:\n+\n+.. code-block::\n+\n+   OP_HASH160 <qes2_script_hash> OP_EQUAL\n+\n+Address Format\n+~~~~~~~~~~~~~\n+\n+QES2 addresses use a new version byte with a Bech32m encoding:\n+\n+.. code-block::\n+\n+   qp1<bech32m_encoded_program>\n+\n+Where the version byte indicates the use of QES2 and distinguishes between P2QPKH and P2QSH formats.\n+\n+Key Management\n+--------------\n+\n+Two approaches for managing QES2 keys:\n+\n+1. **Deterministic Derivation**\n+\n+   The Dilithium key pair is deterministically derived from the ECDSA private key:\n+\n+   .. code-block::\n+\n+      sk_PQ = HMAC-SHA512(sk_EC, \"Bitcoin_Dilithium_Key_Derivation\")\n+\n+   From sk_PQ, we compute:\n+\n+   .. code-block::\n+\n+      pk_PQ = Dilithium.KeyGen(sk_PQ)\n+\n+2. **Independent Keys**\n+\n+   The ECDSA and Dilithium key pairs are generated independently and bound together in the transaction script.\n+\n+The combined public key is represented as:\n+\n+.. code-block::\n+\n+   pk_combined = pk_PQ || pk_EC\n+\n+Where ``||`` denotes concatenation.\n+\n+The first approach is recommended for simplicity of wallet implementation, while the second offers greater flexibility.\n+\n+Signing Process\n+--------------\n+\n+The QES2 signing process consists of the following steps:\n+\n+1. **Transaction Serialization**\n+\n+   - Serialize the transaction inputs and outputs according to the appropriate sighash algorithm\n+   - Generate the transaction digest m = H(H(tx)) using double SHA-256\n+\n+2. **Post-Quantum Signature Generation**\n+\n+   - Generate a Dilithium signature on the transaction digest:\n+\n+     .. code-block::\n+\n+        Ïƒ_PQ = S_PQ(sk_PQ, m)\n+\n+3. **Vector Encoding**\n+\n+   - Flatten the post-quantum signature to obtain a coefficient vector\n+   - Apply domain-specific encoding to the coefficient vector\n+   - Apply compression and normalization to produce Ãª\n+\n+4. **ECDSA Signature Generation**\n+\n+   - Generate an ECDSA signature directly on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+   - The ECDSA signature follows the standard Bitcoin format, including the appropriate sighash flag\n+\n+5. **Complete Signature**\n+\n+   - The final QES2 signature consists of: (Ïƒ_PQ, Ïƒ_EC)\n+\n+This process can be summarized as:\n+\n+.. code-block::\n+\n+   Sign_QES2(m) = (Ïƒ_PQ, Ïƒ_EC)\n+\n+where:\n+\n+- Ïƒ_PQ = S_PQ(sk_PQ, m)\n+- Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+Importantly, the ECDSA signature is not signing the original message but is signing the PQC signature directly. This creates a cryptographic binding where the ECDSA signature validates the Dilithium signature.\n+\n+Verification Procedure\n+---------------------\n+\n+The verification of a QES2 signature consists of the following steps:\n+\n+1. **Transaction Digest Calculation**\n+\n+   - Calculate the transaction digest m = H(H(tx)) according to the sighash flags\n+\n+2. **Vector Decoding**\n+\n+   - Decode the PQC signature component Ïƒ_PQ to obtain Ãª\n+\n+3. **ECDSA Signature Verification**\n+\n+   - Verify the ECDSA signature on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        valid_EC = V_EC(pk_EC, Ãª, Ïƒ_EC)\n+\n+   - This step verifies the integrity of the Dilithium signature\n+\n+4. **Post-Quantum Signature Verification**\n+\n+   - Verify the Dilithium signature on the original transaction digest:\n+\n+     .. code-block::\n+\n+        valid_PQ = V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+5. **Combined Verification Decision**\n+\n+   - Accept the QES2 signature as valid if and only if both verifications succeed:\n+\n+     .. code-block::\n+\n+        valid = valid_EC âˆ§ valid_PQ\n+\n+The verification process can be summarized as:\n+\n+.. code-block::\n+\n+   Verify_QES2(m, Ïƒ_PQ, Ïƒ_EC, pk_PQ, pk_EC) = V_EC(pk_EC, Ãª, Ïƒ_EC) âˆ§ V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+This verification procedure ensures that:\n+\n+1. The transaction has not been tampered with (verified by Dilithium)\n+2. The Dilithium signature is valid for the transaction\n+3. The ECDSA signature validates the integrity of the Dilithium signature\n+\n+The security of this approach stems from the fact that an attacker would need to forge both signature types or find a way to create a valid ECDSA signature that endorses a forged Dilithium signature.\n+\n+Optimizations\n+------------\n+\n+To maintain reasonable validation performance:\n+\n+1. **Early rejection**: Perform ECDSA verification first and only proceed with Dilithium verification if ECDSA passes\n+2. **Optional verification**: During the initial deployment phase, nodes can verify only the ECDSA component\n+3. **Batch verification**: For multiple signatures in a transaction, use batch verification techniques\n+\n+The early rejection optimization can be formalized as:\n+\n+.. code-block::\n+\n+   valid = \n+   {\n+     V_PQ(pk_PQ, m, Ïƒ_PQ)  if V_EC(pk_EC, Ãª, Ïƒ_EC) = true\n+     false                  otherwise\n+   }\n+\n+Taproot Compatibility\n+--------------------\n+\n+QES2 can be integrated with BIP-340 (Taproot) by:\n+\n+1. Using the QES2-based signature in place of the Schnorr signature\n+2. Extending the taproot output to accommodate both ECDSA and Dilithium public keys\n+3. Modifying the key-path spending to use QES2\n+\n+The taproot Merkle root calculation would be modified to include both the ECDSA and Dilithium components:\n+\n+.. code-block::\n+\n+   P = pk_EC + hash_taptweak(pk_EC || pk_PQ || Merkle root) Â· G\n+\n+Where G is the generator point of the secp256k1 curve.\n+\n+Rationale\n+=========\n+\n+Hybrid Chained Approach\n+-----------------------\n+\n+The hybrid chained approach offers several advantages over a direct switch to post-quantum cryptography or a simple parallel combination of signatures:\n+\n+1. **Enhanced Security**: The binding between signatures means an attacker must break both schemes\n+2. **Cryptographic Binding**: ECDSA signature validates the integrity of the Dilithium signature\n+3. **Compatibility**: Maintains compatibility with existing Bitcoin infrastructure\n+4. **Confidence**: Uses established ECDSA while introducing quantum resistance\n+5. **Efficient Verification**: The ECDSA verification can serve as an initial check before more expensive PQC verification\n+\n+The specific chaining approach (PQC followed by ECDSA signing the PQC signature) ensures that:\n+\n+1. The quantum-resistant signature provides the primary security layer for the transaction\n+2. The ECDSA signature provides a binding mechanism that validates the PQC signature\n+3. The combined approach prevents potential isolation attacks against either scheme\n+4. Breaking the scheme would require breaking both the quantum-resistant signature and the classical signature, or finding a collision in the hash function\n+\n+Choice of Post-Quantum Algorithm\n+--------------------------------\n+\n+Dilithium is selected as the post-quantum component because:\n+\n+1. It is a finalist in the NIST post-quantum cryptography standardization process\n+2. It offers a reasonable balance between security level, signature size, and verification speed\n+3. It has undergone extensive cryptanalysis\n+4. Its lattice-based structure allows for potential optimizations in verification\n+\n+The security reduction for Dilithium is based on the hardness of the Module Learning With Errors (MLWE) and Module Short Integer Solution (MSIS) problems, which are believed to be resistant to quantum attacks.\n+\n+Script Capability\n+----------------\n+\n+The introduction of a new opcode provides several benefits:\n+\n+1. Clean integration into the Bitcoin scripting system\n+2. Flexibility for future signature scheme upgrades\n+3. Clear distinction between quantum-resistant and classical addresses\n+4. Ability to verify the chained signature scheme efficiently\n+\n+Size and Performance Impact\n+--------------------------\n+\n+The QES2 approach introduces additional overhead:\n+\n+1. **Signature Size**:\n+\n+   - ECDSA signature: ~72 bytes\n+   - Dilithium signature: ~2.7 KB\n+   - Total QES2 size with optimizations: ~2.8 KB\n+\n+2. **Verification Time**:\n+\n+   - ECDSA verification: ~0.3ms on standard hardware\n+   - Dilithium verification: ~1.2ms\n+   - Combined with optimizations: ~1.5ms\n+\n+3. **Impact on Block Space**:\n+\n+   - Increased transaction size by approximately 2.7 KB per input\n+   - Partially mitigated by optional adoption during transition phase\n+\n+The efficiency ratio can be expressed as:\n+\n+.. code-block::\n+\n+   Efficiency = Security Benefit / Size Overhead\n+\n+Where the security benefit is measured by the estimated years of protection against quantum attacks.\n+\n+Backwards Compatibility\n+======================\n+\n+This BIP maintains backward compatibility through several mechanisms:\n+\n+1. **Opt-in Deployment**: QES2 addresses are distinct from traditional addresses\n+2. **Traditional Scripts**: Existing P2PKH, P2SH, P2WPKH, and P2WSH scripts continue to function normally\n+3. **Validation Rules**: Nodes that do not implement this BIP will see the new scripts as anyone-can-spend outputs\n+4. **Soft Fork**: This change can be deployed as a soft fork\n+\n+Deployment\n+=========\n+\n+This BIP should be deployed as a soft fork using the standard BIP-9 version bits method:\n+\n+1. **Bit**: TBD\n+2. **Start time**: TBD\n+3. **Timeout**: TBD\n+\n+The deployment follows a phased approach:\n+\n+1. **Phase 1 - Optional Implementation**: Support for QES2 exists but is not required for consensus\n+2. **Phase 2 - Activation**: The soft fork activates, and QES2 scripts become valid\n+3. **Phase 3 - Transition**: Users gradually migrate to quantum-resistant addresses\n+\n+Reference Implementation\n+=======================\n+\n+A reference implementation will be provided in a separate pull request to the Bitcoin Core repository, including:\n+\n+1. Implementation of the new opcode\n+2. Verification logic for the hybrid chained signature scheme\n+3. Wallet functionality for creating and signing with QES2\n+\n+The pseudocode for the key signing process is as follows:\n+\n+.. code-block::\n+\n+   function signQES2(message, dilithiumPrivKey, ecdsaPrivKey):\n+       // First generate the PQC signature on the message\n+       dilithiumSignature = dilithiumSign(message, dilithiumPrivKey)\n+       \n+       // Encode the PQC signature\n+       encodedPQSig = encodeDilithiumSignature(dilithiumSignature)\n+       \n+       // Generate ECDSA signature directly on the encoded PQC signature\n+       ecdsaSignature = ecdsaSign(encodedPQSig, ecdsaPrivKey)\n+       \n+       // Return the complete QES2 signature\n+       return (dilithiumSignature, ecdsaSignature)\n+\n+The pseudocode for key verification is as follows:\n+\n+.. code-block::\n+\n+   function verifyQES2Signature(message, dilithiumSignature, ecdsaSignature, dilithiumPubKey, ecdsaPubKey):\n+       // Encode the PQC signature\n+       encodedPQSig = encodeDilithiumSignature(dilithiumSignature)\n+       \n+       // First verify ECDSA (faster verification)\n+       // This verifies the integrity of the PQC signature\n+       if not verifyECDSA(encodedPQSig, ecdsaSignature, ecdsaPubKey):\n+           return false\n+       \n+       // Only verify Dilithium if ECDSA passes\n+       return verifyDilithium(message, dilithiumSignature, dilithiumPubKey)\n+\n+Test Vectors\n+===========\n+\n+Test vectors will include:\n+\n+1. Sample key pairs (ECDSA and Dilithium)\n+2. Sample messages and their corresponding QES2 signatures\n+3. Script validation examples\n+4. Edge cases for validation\n+\n+Example Test Vector:\n+\n+.. code-block::\n+\n+   # Test Vector 1\n+   Message (Transaction Digest): 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\n+\n+   # ECDSA Key Pair\n+   ECDSA Private Key: 0xef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcd\n+   ECDSA Public Key: 0x02b1e6079a23ab7a7e5a7bc7a1a811a96ef37248143da0c4d35765c25094fcc712\n+\n+   # Dilithium Key Pair\n+   Dilithium Private Key: [4000 bytes, hexadecimal]\n+   Dilithium Public Key: [1952 bytes, hexadecimal]\n+\n+   # Step 1: Dilithium Signature on Original Message\n+   Dilithium Signature: [2701 bytes, hexadecimal]\n+\n+   # Step 2: Encoded Dilithium Signature\n+   Encoded Signature: [compressed representation]\n+\n+   # Step 3: ECDSA Signature on Encoded Dilithium Signature\n+   ECDSA Signature: 0x304402201234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef022012345678901234567890abcdef1234567890abcdef1234567890abcdef12345678\n+\n+   # Complete QES2 Signature\n+   QES2 Signature: [Dilithium Signature || ECDSA Signature]\n+\n+Security Considerations\n+======================\n+\n+Quantum Timeline\n+---------------\n+\n+The implementation timeline considers quantum computing development:\n+\n+1. **Near-term (3-5 years)**: Low quantum threat, preparation phase\n+2. **Medium-term (5-10 years)**: Growing threat, transition phase\n+3. **Long-term (10+ years)**: Potential quantum capacity to break ECDSA\n+\n+The risk assessment formula can be modeled as:\n+\n+.. code-block::\n+\n+   Risk = Probability of Attack Ã— Impact of Compromise\n+\n+Where the probability increases with quantum computing development, and the impact depends on the value secured by ECDSA.\n+\n+Migration Security\n+----------------\n+\n+During the transition period:\n+\n+1. Coins in traditional addresses will become increasingly vulnerable\n+2. Tools should be provided to securely migrate funds to quantum-resistant addresses\n+3. Community education about quantum security risks becomes critical\n+\n+The security of funds during migration depends on the following inequality:\n+\n+.. code-block::\n+\n+   T_migration < T_quantum break\n+\n+Where T_migration is the time required to migrate funds to quantum-resistant addresses, and T_quantum break is the time until quantum computers can break ECDSA.\n+\n+Implementation Security\n+----------------------\n+\n+Implementers should be aware of:\n+\n+1. Side-channel resistance in both signature schemes\n+2. Appropriate entropy for key generation\n+3. Secure storage of larger keys and signatures\n+4. Protection against combined cryptographic attacks\n+\n+The entropy requirements for key generation are:\n+\n+.. code-block::\n+\n+   Entropy_QES2 â‰¥ max(Entropy_ECDSA, Entropy_Dilithium) â‰¥ 256 bits\n+\n+Security Proofs\n+--------------\n+\n+The security of QES2 relies on the following propositions:\n+\n+1. **Dilithium Security**: The Dilithium signature is secure against quantum adversaries under the hardness assumptions of Module-LWE and Module-SIS problems.\n+\n+2. **ECDSA Security**: While vulnerable to quantum attacks, ECDSA remains secure against classical adversaries.\n+\n+3. **Binding Property**: The ECDSA signature validates the Dilithium signature, creating a binding that requires breaking both schemes or finding hash collisions to forge.\n+\n+4. **Hybrid Security Theorem**: If either signature scheme remains secure, the combined QES2 signature remains secure. Formally:\n+\n+   .. code-block::\n+\n+      Adv_QES2(A) â‰¤ min(Adv_ECDSA(A'), Adv_Dilithium(A''))\n+\n+   Where Adv_X(A) represents the advantage of an adversary A against scheme X.\n+\n+Acknowledgments\n+==============\n+\n+This proposal builds on the work of several other BIPs, including BIP-340, BIP-341, and BIP-342 (Taproot), and incorporates concepts from ongoing research in post-quantum cryptography for blockchains.",
      "path": "bip-newproposal.mediawiki",
      "position": 594,
      "original_position": 594,
      "commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "original_commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Iâ€™m confused that this proposal mentions BIPâ€¯340 several times, but insufficiently addresses BIPâ€¯340 signatures.",
      "created_at": "2025-04-23T13:12:34Z",
      "updated_at": "2025-04-23T13:30:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1830#discussion_r2056026629",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2056026629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1830"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 594,
      "original_line": 594,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2056030948",
      "pull_request_review_id": 2787225298,
      "id": 2056030948,
      "node_id": "PRRC_kwDOAN28mc56jIrk",
      "diff_hunk": "@@ -0,0 +1,607 @@\n+TBD | QES2 | A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin | [Caleb Lee] director@j1729labs.online, [Justin Park] < justin7361@j1729labs.online>, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online | 2025-04-18 | Draft\n+\n+:BIP: Unassigned\n+:Title: QES2 - A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin\n+:Author: [Caleb Lee] director@j1729labs.online, [Justin Park] justin7361@j1729labs.online, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online\n+:Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX\n+:Status: Draft\n+:Type: Standards Track\n+:Created: 2025-04-18\n+:License: BSD-2-Clause\n+:Requires: 340, 341, 342\n+\n+Abstract\n+========\n+\n+This BIP proposes QES2 (Quantum-Enhanced Signature Scheme), a hybrid digital signature scheme that creates a cryptographic binding between post-quantum cryptography (specifically Dilithium) and traditional ECDSA signatures for Bitcoin transactions. The approach first creates a Dilithium signature and then uses ECDSA to sign the Dilithium signature itself, creating a chain of cryptographic trust where the classical signature verifies the quantum-resistant signature. This approach provides both quantum resistance and backward compatibility, enabling Bitcoin to transition gradually to quantum-resistant security while preserving compatibility with existing infrastructure.\n+\n+Copyright\n+=========\n+\n+This BIP is licensed under the BSD 2-clause license.\n+\n+Motivation\n+==========\n+\n+Bitcoin's security fundamentally relies on the Elliptic Curve Digital Signature Algorithm (ECDSA) with the secp256k1 curve. While effective against classical computing attacks, ECDSA is vulnerable to quantum computers running Shor's algorithm, which can solve the discrete logarithm problem in polynomial time.\n+\n+As quantum computing advances, this vulnerability poses an existential threat to Bitcoin's security model. Recent estimates suggest that sufficiently powerful quantum computers capable of breaking ECDSA could be developed within the next decade.\n+\n+The Bitcoin community faces several challenges when considering a transition to post-quantum cryptography:\n+\n+1. Post-quantum signature schemes typically have significantly larger key and signature sizes\n+2. Complete replacement of ECDSA would break compatibility with existing wallets and infrastructure\n+3. The security of newer post-quantum schemes is still being evaluated by the cryptographic community\n+4. A sudden switch would require extensive coordination across the entire ecosystem\n+\n+This BIP proposes QES2 as a balanced solution that:\n+\n+1. Maintains compatibility with existing Bitcoin infrastructure\n+2. Adds quantum resistance through a lattice-based signature scheme (Dilithium)\n+3. Creates a cryptographic binding between PQC signatures and ECDSA signatures\n+4. Allows for a gradual, opt-in transition to quantum-resistant security\n+5. Creates a safety net against future quantum computing threats\n+\n+Specification\n+============\n+\n+Overview\n+--------\n+\n+QES2 combines the Dilithium post-quantum signature scheme with the classical ECDSA signature scheme currently used in Bitcoin. The key innovation is that QES2 doesn't just use both signature schemes in parallel but creates a cryptographic binding between them. First, the Dilithium signature is generated for the transaction digest, then the ECDSA signature signs the Dilithium signature itself. This binding ensures that the ECDSA signature validates the integrity of the quantum-resistant signature.\n+\n+The QES2 signature process can be represented as:\n+\n+.. code-block::\n+\n+   Sign_QES2 = Sign_ECDSA(Sign_PQC(message))\n+\n+And the verification process:\n+\n+.. code-block::\n+\n+   Verify_QES2 = Verify_ECDSA(Ïƒ_PQ) âˆ§ Verify_PQC(message)\n+\n+This creates a chained trust model where breaking the scheme would require breaking both the quantum-resistant signature and the classical signature.\n+\n+Mathematical Notation and Parameters\n+------------------------------------\n+\n+Let us define the following notation:\n+\n+- m: The message to be signed (transaction digest)\n+- sk_PQ: Dilithium private key\n+- pk_PQ: Dilithium public key\n+- sk_EC: ECDSA private key\n+- pk_EC: ECDSA public key\n+- Ïƒ_PQ: Dilithium signature on the message\n+- Ïƒ_EC: ECDSA signature on the Dilithium signature\n+- H: SHA-256 hash function\n+- S_PQ: Dilithium signing algorithm\n+- V_PQ: Dilithium verification algorithm\n+- S_EC: ECDSA signing algorithm\n+- V_EC: ECDSA verification algorithm\n+\n+Dilithium Parameters\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Dilithium instantiation uses the following parameters:\n+\n+- Security level: NIST security level 3 (equivalent to AES-192)\n+- Dimension n: 256\n+- Modulus q: 8380417\n+- Weight of challenge Î³1: 60\n+- Weight of secret Î³2: (q-1)/16\n+- Number of iterations Îº: 5\n+- Public key size: 1,952 bytes\n+- Private key size: 4,000 bytes\n+- Signature size: 2,701 bytes\n+\n+ECDSA Parameters\n+~~~~~~~~~~~~~~~\n+\n+The ECDSA implementation uses the following parameters:\n+\n+- Curve: secp256k1\n+- Field size: 256 bits\n+- Public key size: 33 bytes (compressed)\n+- Signature size: ~72 bytes (with sighash flag)\n+\n+Script Types and Address Format\n+-------------------------------\n+\n+This BIP introduces a new script template:\n+\n+.. code-block::\n+\n+   <pq_signature_push> <ecdsa_signature_push> <pubkey_push> OP_QES2_CHECKSIG",
      "path": "bip-newproposal.mediawiki",
      "position": 117,
      "original_position": 117,
      "commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "original_commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Please provide more detail how this new script template would be used in transactions. How is it split between output script, input script, witness section, or a newly introduced transaction section? How would this transaction be serialized? If it is intended to be a soft fork, what mechanism is used to allow unupgraded nodes to accept transactions using this signature scheme?",
      "created_at": "2025-04-23T13:14:53Z",
      "updated_at": "2025-04-23T13:30:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1830#discussion_r2056030948",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2056030948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1830"
        }
      },
      "start_line": 113,
      "original_start_line": 113,
      "start_side": "RIGHT",
      "line": 117,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2056064357",
      "pull_request_review_id": 2787225298,
      "id": 2056064357,
      "node_id": "PRRC_kwDOAN28mc56jQ1l",
      "diff_hunk": "@@ -0,0 +1,607 @@\n+TBD | QES2 | A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin | [Caleb Lee] director@j1729labs.online, [Justin Park] < justin7361@j1729labs.online>, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online | 2025-04-18 | Draft\n+\n+:BIP: Unassigned\n+:Title: QES2 - A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin\n+:Author: [Caleb Lee] director@j1729labs.online, [Justin Park] justin7361@j1729labs.online, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online\n+:Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX\n+:Status: Draft\n+:Type: Standards Track\n+:Created: 2025-04-18\n+:License: BSD-2-Clause\n+:Requires: 340, 341, 342",
      "path": "bip-newproposal.mediawiki",
      "position": 11,
      "original_position": 11,
      "commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "original_commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The document must start with the preamble adhering to the [required format](https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki#user-content-BIP_header_preamble). Beyond the formatting needing to be amended, the title is too long and the authors need to be on separate lines with the format `Name <addr@dom.ain>`.",
      "created_at": "2025-04-23T13:30:08Z",
      "updated_at": "2025-04-23T13:30:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1830#discussion_r2056064357",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2056064357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1830"
        }
      },
      "start_line": 3,
      "original_start_line": 3,
      "start_side": "RIGHT",
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2083727722",
      "pull_request_review_id": 2831658734,
      "id": 2083727722,
      "node_id": "PRRC_kwDOAN28mc58Mylq",
      "diff_hunk": "@@ -0,0 +1,607 @@\n+TBD | QES2 | A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin | [Caleb Lee] director@j1729labs.online, [Justin Park] < justin7361@j1729labs.online>, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online | 2025-04-18 | Draft\n+\n+:BIP: Unassigned\n+:Title: QES2 - A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin\n+:Author: [Caleb Lee] director@j1729labs.online, [Justin Park] justin7361@j1729labs.online, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online\n+:Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX\n+:Status: Draft\n+:Type: Standards Track\n+:Created: 2025-04-18\n+:License: BSD-2-Clause\n+:Requires: 340, 341, 342\n+\n+Abstract\n+========\n+\n+This BIP proposes QES2 (Quantum-Enhanced Signature Scheme), a hybrid digital signature scheme that creates a cryptographic binding between post-quantum cryptography (specifically Dilithium) and traditional ECDSA signatures for Bitcoin transactions. The approach first creates a Dilithium signature and then uses ECDSA to sign the Dilithium signature itself, creating a chain of cryptographic trust where the classical signature verifies the quantum-resistant signature. This approach provides both quantum resistance and backward compatibility, enabling Bitcoin to transition gradually to quantum-resistant security while preserving compatibility with existing infrastructure.\n+\n+Copyright\n+=========\n+\n+This BIP is licensed under the BSD 2-clause license.\n+\n+Motivation\n+==========\n+\n+Bitcoin's security fundamentally relies on the Elliptic Curve Digital Signature Algorithm (ECDSA) with the secp256k1 curve. While effective against classical computing attacks, ECDSA is vulnerable to quantum computers running Shor's algorithm, which can solve the discrete logarithm problem in polynomial time.\n+\n+As quantum computing advances, this vulnerability poses an existential threat to Bitcoin's security model. Recent estimates suggest that sufficiently powerful quantum computers capable of breaking ECDSA could be developed within the next decade.\n+\n+The Bitcoin community faces several challenges when considering a transition to post-quantum cryptography:\n+\n+1. Post-quantum signature schemes typically have significantly larger key and signature sizes\n+2. Complete replacement of ECDSA would break compatibility with existing wallets and infrastructure\n+3. The security of newer post-quantum schemes is still being evaluated by the cryptographic community\n+4. A sudden switch would require extensive coordination across the entire ecosystem\n+\n+This BIP proposes QES2 as a balanced solution that:\n+\n+1. Maintains compatibility with existing Bitcoin infrastructure\n+2. Adds quantum resistance through a lattice-based signature scheme (Dilithium)\n+3. Creates a cryptographic binding between PQC signatures and ECDSA signatures\n+4. Allows for a gradual, opt-in transition to quantum-resistant security\n+5. Creates a safety net against future quantum computing threats\n+\n+Specification\n+============\n+\n+Overview\n+--------\n+\n+QES2 combines the Dilithium post-quantum signature scheme with the classical ECDSA signature scheme currently used in Bitcoin. The key innovation is that QES2 doesn't just use both signature schemes in parallel but creates a cryptographic binding between them. First, the Dilithium signature is generated for the transaction digest, then the ECDSA signature signs the Dilithium signature itself. This binding ensures that the ECDSA signature validates the integrity of the quantum-resistant signature.\n+\n+The QES2 signature process can be represented as:\n+\n+.. code-block::\n+\n+   Sign_QES2 = Sign_ECDSA(Sign_PQC(message))\n+\n+And the verification process:\n+\n+.. code-block::\n+\n+   Verify_QES2 = Verify_ECDSA(Ïƒ_PQ) âˆ§ Verify_PQC(message)\n+\n+This creates a chained trust model where breaking the scheme would require breaking both the quantum-resistant signature and the classical signature.\n+\n+Mathematical Notation and Parameters\n+------------------------------------\n+\n+Let us define the following notation:\n+\n+- m: The message to be signed (transaction digest)\n+- sk_PQ: Dilithium private key\n+- pk_PQ: Dilithium public key\n+- sk_EC: ECDSA private key\n+- pk_EC: ECDSA public key\n+- Ïƒ_PQ: Dilithium signature on the message\n+- Ïƒ_EC: ECDSA signature on the Dilithium signature\n+- H: SHA-256 hash function\n+- S_PQ: Dilithium signing algorithm\n+- V_PQ: Dilithium verification algorithm\n+- S_EC: ECDSA signing algorithm\n+- V_EC: ECDSA verification algorithm\n+\n+Dilithium Parameters\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Dilithium instantiation uses the following parameters:\n+\n+- Security level: NIST security level 3 (equivalent to AES-192)\n+- Dimension n: 256\n+- Modulus q: 8380417\n+- Weight of challenge Î³1: 60\n+- Weight of secret Î³2: (q-1)/16\n+- Number of iterations Îº: 5\n+- Public key size: 1,952 bytes\n+- Private key size: 4,000 bytes\n+- Signature size: 2,701 bytes\n+\n+ECDSA Parameters\n+~~~~~~~~~~~~~~~\n+\n+The ECDSA implementation uses the following parameters:\n+\n+- Curve: secp256k1\n+- Field size: 256 bits\n+- Public key size: 33 bytes (compressed)\n+- Signature size: ~72 bytes (with sighash flag)\n+\n+Script Types and Address Format\n+-------------------------------\n+\n+This BIP introduces a new script template:\n+\n+.. code-block::\n+\n+   <pq_signature_push> <ecdsa_signature_push> <pubkey_push> OP_QES2_CHECKSIG\n+\n+Where:\n+\n+- ``<pq_signature_push>`` is the Dilithium signature component on the transaction digest\n+- ``<ecdsa_signature_push>`` is the ECDSA signature on the Dilithium signature\n+- ``<pubkey_push>`` includes both the ECDSA public key and Dilithium public key\n+- ``OP_QES2_CHECKSIG`` is a new opcode that verifies the entire chained signature scheme\n+\n+New Opcode\n+~~~~~~~~~~\n+\n+We introduce a new opcode, tentatively assigned as ``OP_QES2_CHECKSIG (0xba)``, that performs verification of the hybrid QES2 signature by checking both the ECDSA signature (which validates the PQC signature) and the Dilithium signature itself.\n+\n+P2QPK (Pay to QES2 Public Key)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PK, but using QES2:\n+\n+.. code-block::\n+\n+   <combined_pubkey> OP_QES2_CHECKSIG\n+\n+P2QPKH (Pay to QES2 Public Key Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PKH, but using a hash of the combined QES2 public key:\n+\n+.. code-block::\n+\n+   OP_DUP OP_HASH160 <qes2_pubkeyhash> OP_EQUALVERIFY OP_QES2_CHECKSIG\n+\n+P2QSH (Pay to QES2 Script Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2SH, but with QES2 signature verification:\n+\n+.. code-block::\n+\n+   OP_HASH160 <qes2_script_hash> OP_EQUAL\n+\n+Address Format\n+~~~~~~~~~~~~~\n+\n+QES2 addresses use a new version byte with a Bech32m encoding:\n+\n+.. code-block::\n+\n+   qp1<bech32m_encoded_program>\n+\n+Where the version byte indicates the use of QES2 and distinguishes between P2QPKH and P2QSH formats.\n+\n+Key Management\n+--------------\n+\n+Two approaches for managing QES2 keys:\n+\n+1. **Deterministic Derivation**\n+\n+   The Dilithium key pair is deterministically derived from the ECDSA private key:\n+\n+   .. code-block::\n+\n+      sk_PQ = HMAC-SHA512(sk_EC, \"Bitcoin_Dilithium_Key_Derivation\")\n+\n+   From sk_PQ, we compute:\n+\n+   .. code-block::\n+\n+      pk_PQ = Dilithium.KeyGen(sk_PQ)\n+\n+2. **Independent Keys**\n+\n+   The ECDSA and Dilithium key pairs are generated independently and bound together in the transaction script.\n+\n+The combined public key is represented as:\n+\n+.. code-block::\n+\n+   pk_combined = pk_PQ || pk_EC\n+\n+Where ``||`` denotes concatenation.\n+\n+The first approach is recommended for simplicity of wallet implementation, while the second offers greater flexibility.\n+\n+Signing Process\n+--------------\n+\n+The QES2 signing process consists of the following steps:\n+\n+1. **Transaction Serialization**\n+\n+   - Serialize the transaction inputs and outputs according to the appropriate sighash algorithm\n+   - Generate the transaction digest m = H(H(tx)) using double SHA-256\n+\n+2. **Post-Quantum Signature Generation**\n+\n+   - Generate a Dilithium signature on the transaction digest:\n+\n+     .. code-block::\n+\n+        Ïƒ_PQ = S_PQ(sk_PQ, m)\n+\n+3. **Vector Encoding**\n+\n+   - Flatten the post-quantum signature to obtain a coefficient vector\n+   - Apply domain-specific encoding to the coefficient vector\n+   - Apply compression and normalization to produce Ãª\n+\n+4. **ECDSA Signature Generation**\n+\n+   - Generate an ECDSA signature directly on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+   - The ECDSA signature follows the standard Bitcoin format, including the appropriate sighash flag\n+\n+5. **Complete Signature**\n+\n+   - The final QES2 signature consists of: (Ïƒ_PQ, Ïƒ_EC)\n+\n+This process can be summarized as:\n+\n+.. code-block::\n+\n+   Sign_QES2(m) = (Ïƒ_PQ, Ïƒ_EC)\n+\n+where:\n+\n+- Ïƒ_PQ = S_PQ(sk_PQ, m)\n+- Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+Importantly, the ECDSA signature is not signing the original message but is signing the PQC signature directly. This creates a cryptographic binding where the ECDSA signature validates the Dilithium signature.\n+\n+Verification Procedure\n+---------------------\n+\n+The verification of a QES2 signature consists of the following steps:\n+\n+1. **Transaction Digest Calculation**\n+\n+   - Calculate the transaction digest m = H(H(tx)) according to the sighash flags\n+\n+2. **Vector Decoding**\n+\n+   - Decode the PQC signature component Ïƒ_PQ to obtain Ãª\n+\n+3. **ECDSA Signature Verification**\n+\n+   - Verify the ECDSA signature on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        valid_EC = V_EC(pk_EC, Ãª, Ïƒ_EC)\n+\n+   - This step verifies the integrity of the Dilithium signature\n+\n+4. **Post-Quantum Signature Verification**\n+\n+   - Verify the Dilithium signature on the original transaction digest:\n+\n+     .. code-block::\n+\n+        valid_PQ = V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+5. **Combined Verification Decision**\n+\n+   - Accept the QES2 signature as valid if and only if both verifications succeed:\n+\n+     .. code-block::\n+\n+        valid = valid_EC âˆ§ valid_PQ\n+\n+The verification process can be summarized as:\n+\n+.. code-block::\n+\n+   Verify_QES2(m, Ïƒ_PQ, Ïƒ_EC, pk_PQ, pk_EC) = V_EC(pk_EC, Ãª, Ïƒ_EC) âˆ§ V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+This verification procedure ensures that:\n+\n+1. The transaction has not been tampered with (verified by Dilithium)\n+2. The Dilithium signature is valid for the transaction\n+3. The ECDSA signature validates the integrity of the Dilithium signature\n+\n+The security of this approach stems from the fact that an attacker would need to forge both signature types or find a way to create a valid ECDSA signature that endorses a forged Dilithium signature.\n+\n+Optimizations\n+------------\n+\n+To maintain reasonable validation performance:\n+\n+1. **Early rejection**: Perform ECDSA verification first and only proceed with Dilithium verification if ECDSA passes\n+2. **Optional verification**: During the initial deployment phase, nodes can verify only the ECDSA component\n+3. **Batch verification**: For multiple signatures in a transaction, use batch verification techniques\n+\n+The early rejection optimization can be formalized as:\n+\n+.. code-block::\n+\n+   valid = \n+   {\n+     V_PQ(pk_PQ, m, Ïƒ_PQ)  if V_EC(pk_EC, Ãª, Ïƒ_EC) = true\n+     false                  otherwise\n+   }\n+\n+Taproot Compatibility\n+--------------------\n+\n+QES2 can be integrated with BIP-340 (Taproot) by:\n+\n+1. Using the QES2-based signature in place of the Schnorr signature",
      "path": "bip-newproposal.mediawiki",
      "position": 330,
      "original_position": 330,
      "commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "original_commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "in_reply_to_id": 2050797563,
      "user": {
        "login": "j1729labs",
        "id": 207299364,
        "node_id": "U_kgDODFsjJA",
        "avatar_url": "https://avatars.githubusercontent.com/u/207299364?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/j1729labs",
        "html_url": "https://github.com/j1729labs",
        "followers_url": "https://api.github.com/users/j1729labs/followers",
        "following_url": "https://api.github.com/users/j1729labs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/j1729labs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/j1729labs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/j1729labs/subscriptions",
        "organizations_url": "https://api.github.com/users/j1729labs/orgs",
        "repos_url": "https://api.github.com/users/j1729labs/repos",
        "events_url": "https://api.github.com/users/j1729labs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/j1729labs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> You specify QES2 as ECDSA, but ECDSA doesn't support all that Schnorr does. This seems like a step backwards that could break Taproot compatibility. Would it not make sense to implement QES2 with Schnorr and remove mention of ECDSA?\r\n\r\nI am considering the overall direction of my research as follows:\r\n\r\nInitially, I aim to provide a hybrid signature scheme.\r\n\r\nUltimately, I plan to propose a PQC-based signature scheme optimized for Bitcoin.\r\n\r\nThe QES2 scheme I'm presenting is a hybrid dual-signature model that combines ECDSA and Delicium. The role of ECDSA is to offer a structure that is well-suited for existing Bitcoin systems. As you mentioned, one might question whether this approach is vulnerable to attacks exploiting the Schnorr algorithm. However, even if the ECDSA signature is verified, the Delicium-related verification is not completed, so such concerns do not materialize.\r\n\r\nFurthermore, we are in an advanced stage of R&D on a model that mitigates protocol-level vulnerabilities of the Schnorr algorithm in Isogeny-based PQC, one of the NIST Round 3 finalists. We are considering applying this improved model as the final design.\r\n(Isogeny-based PQC has the advantage of a small key size, and if the Schnorr-related vulnerabilities are addressed, it becomes a very strong candidate.)\r\n\r\n",
      "created_at": "2025-05-12T02:38:15Z",
      "updated_at": "2025-05-12T02:46:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1830#discussion_r2083727722",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2083727722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1830"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2083769395",
      "pull_request_review_id": 2831728657,
      "id": 2083769395,
      "node_id": "PRRC_kwDOAN28mc58M8wz",
      "diff_hunk": "@@ -0,0 +1,607 @@\n+TBD | QES2 | A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin | [Caleb Lee] director@j1729labs.online, [Justin Park] < justin7361@j1729labs.online>, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online | 2025-04-18 | Draft\n+\n+:BIP: Unassigned\n+:Title: QES2 - A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin\n+:Author: [Caleb Lee] director@j1729labs.online, [Justin Park] justin7361@j1729labs.online, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online\n+:Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX\n+:Status: Draft\n+:Type: Standards Track\n+:Created: 2025-04-18\n+:License: BSD-2-Clause\n+:Requires: 340, 341, 342\n+\n+Abstract\n+========\n+\n+This BIP proposes QES2 (Quantum-Enhanced Signature Scheme), a hybrid digital signature scheme that creates a cryptographic binding between post-quantum cryptography (specifically Dilithium) and traditional ECDSA signatures for Bitcoin transactions. The approach first creates a Dilithium signature and then uses ECDSA to sign the Dilithium signature itself, creating a chain of cryptographic trust where the classical signature verifies the quantum-resistant signature. This approach provides both quantum resistance and backward compatibility, enabling Bitcoin to transition gradually to quantum-resistant security while preserving compatibility with existing infrastructure.\n+\n+Copyright\n+=========\n+\n+This BIP is licensed under the BSD 2-clause license.\n+\n+Motivation\n+==========\n+\n+Bitcoin's security fundamentally relies on the Elliptic Curve Digital Signature Algorithm (ECDSA) with the secp256k1 curve. While effective against classical computing attacks, ECDSA is vulnerable to quantum computers running Shor's algorithm, which can solve the discrete logarithm problem in polynomial time.\n+\n+As quantum computing advances, this vulnerability poses an existential threat to Bitcoin's security model. Recent estimates suggest that sufficiently powerful quantum computers capable of breaking ECDSA could be developed within the next decade.\n+\n+The Bitcoin community faces several challenges when considering a transition to post-quantum cryptography:\n+\n+1. Post-quantum signature schemes typically have significantly larger key and signature sizes\n+2. Complete replacement of ECDSA would break compatibility with existing wallets and infrastructure\n+3. The security of newer post-quantum schemes is still being evaluated by the cryptographic community\n+4. A sudden switch would require extensive coordination across the entire ecosystem\n+\n+This BIP proposes QES2 as a balanced solution that:\n+\n+1. Maintains compatibility with existing Bitcoin infrastructure\n+2. Adds quantum resistance through a lattice-based signature scheme (Dilithium)\n+3. Creates a cryptographic binding between PQC signatures and ECDSA signatures\n+4. Allows for a gradual, opt-in transition to quantum-resistant security\n+5. Creates a safety net against future quantum computing threats\n+\n+Specification\n+============\n+\n+Overview\n+--------\n+\n+QES2 combines the Dilithium post-quantum signature scheme with the classical ECDSA signature scheme currently used in Bitcoin. The key innovation is that QES2 doesn't just use both signature schemes in parallel but creates a cryptographic binding between them. First, the Dilithium signature is generated for the transaction digest, then the ECDSA signature signs the Dilithium signature itself. This binding ensures that the ECDSA signature validates the integrity of the quantum-resistant signature.\n+\n+The QES2 signature process can be represented as:\n+\n+.. code-block::\n+\n+   Sign_QES2 = Sign_ECDSA(Sign_PQC(message))\n+\n+And the verification process:\n+\n+.. code-block::\n+\n+   Verify_QES2 = Verify_ECDSA(Ïƒ_PQ) âˆ§ Verify_PQC(message)\n+\n+This creates a chained trust model where breaking the scheme would require breaking both the quantum-resistant signature and the classical signature.\n+\n+Mathematical Notation and Parameters\n+------------------------------------\n+\n+Let us define the following notation:\n+\n+- m: The message to be signed (transaction digest)\n+- sk_PQ: Dilithium private key\n+- pk_PQ: Dilithium public key\n+- sk_EC: ECDSA private key\n+- pk_EC: ECDSA public key\n+- Ïƒ_PQ: Dilithium signature on the message\n+- Ïƒ_EC: ECDSA signature on the Dilithium signature\n+- H: SHA-256 hash function\n+- S_PQ: Dilithium signing algorithm\n+- V_PQ: Dilithium verification algorithm\n+- S_EC: ECDSA signing algorithm\n+- V_EC: ECDSA verification algorithm\n+\n+Dilithium Parameters\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Dilithium instantiation uses the following parameters:\n+\n+- Security level: NIST security level 3 (equivalent to AES-192)\n+- Dimension n: 256\n+- Modulus q: 8380417\n+- Weight of challenge Î³1: 60\n+- Weight of secret Î³2: (q-1)/16\n+- Number of iterations Îº: 5\n+- Public key size: 1,952 bytes\n+- Private key size: 4,000 bytes\n+- Signature size: 2,701 bytes\n+\n+ECDSA Parameters\n+~~~~~~~~~~~~~~~\n+\n+The ECDSA implementation uses the following parameters:\n+\n+- Curve: secp256k1\n+- Field size: 256 bits\n+- Public key size: 33 bytes (compressed)\n+- Signature size: ~72 bytes (with sighash flag)\n+\n+Script Types and Address Format\n+-------------------------------\n+\n+This BIP introduces a new script template:\n+\n+.. code-block::\n+\n+   <pq_signature_push> <ecdsa_signature_push> <pubkey_push> OP_QES2_CHECKSIG\n+\n+Where:\n+\n+- ``<pq_signature_push>`` is the Dilithium signature component on the transaction digest\n+- ``<ecdsa_signature_push>`` is the ECDSA signature on the Dilithium signature\n+- ``<pubkey_push>`` includes both the ECDSA public key and Dilithium public key\n+- ``OP_QES2_CHECKSIG`` is a new opcode that verifies the entire chained signature scheme\n+\n+New Opcode\n+~~~~~~~~~~\n+\n+We introduce a new opcode, tentatively assigned as ``OP_QES2_CHECKSIG (0xba)``, that performs verification of the hybrid QES2 signature by checking both the ECDSA signature (which validates the PQC signature) and the Dilithium signature itself.\n+\n+P2QPK (Pay to QES2 Public Key)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PK, but using QES2:\n+\n+.. code-block::\n+\n+   <combined_pubkey> OP_QES2_CHECKSIG\n+\n+P2QPKH (Pay to QES2 Public Key Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PKH, but using a hash of the combined QES2 public key:\n+\n+.. code-block::\n+\n+   OP_DUP OP_HASH160 <qes2_pubkeyhash> OP_EQUALVERIFY OP_QES2_CHECKSIG\n+\n+P2QSH (Pay to QES2 Script Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2SH, but with QES2 signature verification:\n+\n+.. code-block::\n+\n+   OP_HASH160 <qes2_script_hash> OP_EQUAL\n+\n+Address Format\n+~~~~~~~~~~~~~\n+\n+QES2 addresses use a new version byte with a Bech32m encoding:\n+\n+.. code-block::\n+\n+   qp1<bech32m_encoded_program>\n+\n+Where the version byte indicates the use of QES2 and distinguishes between P2QPKH and P2QSH formats.\n+\n+Key Management\n+--------------\n+\n+Two approaches for managing QES2 keys:\n+\n+1. **Deterministic Derivation**\n+\n+   The Dilithium key pair is deterministically derived from the ECDSA private key:\n+\n+   .. code-block::\n+\n+      sk_PQ = HMAC-SHA512(sk_EC, \"Bitcoin_Dilithium_Key_Derivation\")\n+\n+   From sk_PQ, we compute:\n+\n+   .. code-block::\n+\n+      pk_PQ = Dilithium.KeyGen(sk_PQ)\n+\n+2. **Independent Keys**\n+\n+   The ECDSA and Dilithium key pairs are generated independently and bound together in the transaction script.\n+\n+The combined public key is represented as:\n+\n+.. code-block::\n+\n+   pk_combined = pk_PQ || pk_EC\n+\n+Where ``||`` denotes concatenation.\n+\n+The first approach is recommended for simplicity of wallet implementation, while the second offers greater flexibility.\n+\n+Signing Process\n+--------------\n+\n+The QES2 signing process consists of the following steps:\n+\n+1. **Transaction Serialization**\n+\n+   - Serialize the transaction inputs and outputs according to the appropriate sighash algorithm\n+   - Generate the transaction digest m = H(H(tx)) using double SHA-256\n+\n+2. **Post-Quantum Signature Generation**\n+\n+   - Generate a Dilithium signature on the transaction digest:\n+\n+     .. code-block::\n+\n+        Ïƒ_PQ = S_PQ(sk_PQ, m)\n+\n+3. **Vector Encoding**\n+\n+   - Flatten the post-quantum signature to obtain a coefficient vector\n+   - Apply domain-specific encoding to the coefficient vector\n+   - Apply compression and normalization to produce Ãª\n+\n+4. **ECDSA Signature Generation**\n+\n+   - Generate an ECDSA signature directly on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+   - The ECDSA signature follows the standard Bitcoin format, including the appropriate sighash flag\n+\n+5. **Complete Signature**\n+\n+   - The final QES2 signature consists of: (Ïƒ_PQ, Ïƒ_EC)\n+\n+This process can be summarized as:\n+\n+.. code-block::\n+\n+   Sign_QES2(m) = (Ïƒ_PQ, Ïƒ_EC)\n+\n+where:\n+\n+- Ïƒ_PQ = S_PQ(sk_PQ, m)\n+- Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+Importantly, the ECDSA signature is not signing the original message but is signing the PQC signature directly. This creates a cryptographic binding where the ECDSA signature validates the Dilithium signature.\n+\n+Verification Procedure\n+---------------------\n+\n+The verification of a QES2 signature consists of the following steps:\n+\n+1. **Transaction Digest Calculation**\n+\n+   - Calculate the transaction digest m = H(H(tx)) according to the sighash flags\n+\n+2. **Vector Decoding**\n+\n+   - Decode the PQC signature component Ïƒ_PQ to obtain Ãª\n+\n+3. **ECDSA Signature Verification**\n+\n+   - Verify the ECDSA signature on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        valid_EC = V_EC(pk_EC, Ãª, Ïƒ_EC)\n+\n+   - This step verifies the integrity of the Dilithium signature\n+\n+4. **Post-Quantum Signature Verification**\n+\n+   - Verify the Dilithium signature on the original transaction digest:\n+\n+     .. code-block::\n+\n+        valid_PQ = V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+5. **Combined Verification Decision**\n+\n+   - Accept the QES2 signature as valid if and only if both verifications succeed:\n+\n+     .. code-block::\n+\n+        valid = valid_EC âˆ§ valid_PQ\n+\n+The verification process can be summarized as:\n+\n+.. code-block::\n+\n+   Verify_QES2(m, Ïƒ_PQ, Ïƒ_EC, pk_PQ, pk_EC) = V_EC(pk_EC, Ãª, Ïƒ_EC) âˆ§ V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+This verification procedure ensures that:\n+\n+1. The transaction has not been tampered with (verified by Dilithium)\n+2. The Dilithium signature is valid for the transaction\n+3. The ECDSA signature validates the integrity of the Dilithium signature\n+\n+The security of this approach stems from the fact that an attacker would need to forge both signature types or find a way to create a valid ECDSA signature that endorses a forged Dilithium signature.\n+\n+Optimizations\n+------------\n+\n+To maintain reasonable validation performance:\n+\n+1. **Early rejection**: Perform ECDSA verification first and only proceed with Dilithium verification if ECDSA passes\n+2. **Optional verification**: During the initial deployment phase, nodes can verify only the ECDSA component\n+3. **Batch verification**: For multiple signatures in a transaction, use batch verification techniques\n+\n+The early rejection optimization can be formalized as:\n+\n+.. code-block::\n+\n+   valid = \n+   {\n+     V_PQ(pk_PQ, m, Ïƒ_PQ)  if V_EC(pk_EC, Ãª, Ïƒ_EC) = true\n+     false                  otherwise\n+   }\n+\n+Taproot Compatibility\n+--------------------\n+\n+QES2 can be integrated with BIP-340 (Taproot) by:\n+\n+1. Using the QES2-based signature in place of the Schnorr signature",
      "path": "bip-newproposal.mediawiki",
      "position": 330,
      "original_position": 330,
      "commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "original_commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "in_reply_to_id": 2050797563,
      "user": {
        "login": "j1729labs",
        "id": 207299364,
        "node_id": "U_kgDODFsjJA",
        "avatar_url": "https://avatars.githubusercontent.com/u/207299364?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/j1729labs",
        "html_url": "https://github.com/j1729labs",
        "followers_url": "https://api.github.com/users/j1729labs/followers",
        "following_url": "https://api.github.com/users/j1729labs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/j1729labs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/j1729labs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/j1729labs/subscriptions",
        "organizations_url": "https://api.github.com/users/j1729labs/orgs",
        "repos_url": "https://api.github.com/users/j1729labs/repos",
        "events_url": "https://api.github.com/users/j1729labs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/j1729labs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thank you for the great question. Let me clarify the intention behind QES2 in more detail.\r\n\r\nFirst, QES2 is a general-purpose dual-signature scheme initially designed by combining ECDSA and our Dilithium-based post-quantum signature component. The reason we included ECDSA was to ensure compatibility with the existing Bitcoin infrastructureâ€”especially since many legacy UTXOs and current wallet software still rely on ECDSA. Moreover, in the early stages of our research, we chose to develop on top of ECDSA to maintain control over Dilithium signatures and to align with digital signature types commonly used in the financial sector. We are also exploring the expansion to Schnorr signatures and actively working on methods to control and implement signatures more efficiently. Therefore, this proposal is part of a research roadmap and will be developed step-by-step.\r\n\r\nThat said, as you rightly pointed out, about one-third of UTXOs utilize the P2TR output type that uses BIP340 (Schnorr) signatures. From a BIP-level integration perspective, it indeed makes more sense to consider Schnorr-based design, and we are currently evaluating this actively. We plan to provide a Schnorr-variant of QES2 in the near future.\r\n\r\nOur research roadmap is as follows:\r\n\r\n1. In the short term, we aim to provide an ECDSA + Dilithium hybrid signature model that can be practically deployed and is compatible with existing infrastructure.\r\n\r\n2. In the long term, our goal is to propose a post-quantum signature scheme optimized for Bitcoin, likely based on isogeny-based cryptography.\r\n\r\nWe are currently developing an isogeny-based signature system that addresses known protocol vulnerabilities (as seen in NISTâ€™s Round 3 competition). We believe this approach offers strong long-term security with small key sizes and resistance to quantum attacks.\r\n\r\nTo summarize:\r\n\r\n1. We initially adopted ECDSA for general applicability and control over Dilithium.\r\n2. We are actively researching integration with Schnorr-based signatures.\r\n3. Our ultimate goal is not to finalize a hybrid scheme, but to fully transition to a PQC-based signature model.\r\n\r\nThank you again for your thoughtful feedbackâ€”we see this as a valuable opportunity to ensure QES2 evolves to meet both current and future Bitcoin use cases.\r\n",
      "created_at": "2025-05-12T03:43:24Z",
      "updated_at": "2025-05-12T03:43:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1830#discussion_r2083769395",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2083769395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1830"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 330,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2083770799",
      "pull_request_review_id": 2831730764,
      "id": 2083770799,
      "node_id": "PRRC_kwDOAN28mc58M9Gv",
      "diff_hunk": "@@ -0,0 +1,607 @@\n+TBD | QES2 | A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin | [Caleb Lee] director@j1729labs.online, [Justin Park] < justin7361@j1729labs.online>, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online | 2025-04-18 | Draft\n+\n+:BIP: Unassigned\n+:Title: QES2 - A Hybrid Post-Quantum and Classical Digital Signature Scheme for Bitcoin\n+:Author: [Caleb Lee] director@j1729labs.online, [Justin Park] justin7361@j1729labs.online, [Eunice Lee] cuspro0103@j1729labs.online, [Sophia Shim] zypo1015@j1729labs.online\n+:Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-XXXX\n+:Status: Draft\n+:Type: Standards Track\n+:Created: 2025-04-18\n+:License: BSD-2-Clause\n+:Requires: 340, 341, 342\n+\n+Abstract\n+========\n+\n+This BIP proposes QES2 (Quantum-Enhanced Signature Scheme), a hybrid digital signature scheme that creates a cryptographic binding between post-quantum cryptography (specifically Dilithium) and traditional ECDSA signatures for Bitcoin transactions. The approach first creates a Dilithium signature and then uses ECDSA to sign the Dilithium signature itself, creating a chain of cryptographic trust where the classical signature verifies the quantum-resistant signature. This approach provides both quantum resistance and backward compatibility, enabling Bitcoin to transition gradually to quantum-resistant security while preserving compatibility with existing infrastructure.\n+\n+Copyright\n+=========\n+\n+This BIP is licensed under the BSD 2-clause license.\n+\n+Motivation\n+==========\n+\n+Bitcoin's security fundamentally relies on the Elliptic Curve Digital Signature Algorithm (ECDSA) with the secp256k1 curve. While effective against classical computing attacks, ECDSA is vulnerable to quantum computers running Shor's algorithm, which can solve the discrete logarithm problem in polynomial time.\n+\n+As quantum computing advances, this vulnerability poses an existential threat to Bitcoin's security model. Recent estimates suggest that sufficiently powerful quantum computers capable of breaking ECDSA could be developed within the next decade.\n+\n+The Bitcoin community faces several challenges when considering a transition to post-quantum cryptography:\n+\n+1. Post-quantum signature schemes typically have significantly larger key and signature sizes\n+2. Complete replacement of ECDSA would break compatibility with existing wallets and infrastructure\n+3. The security of newer post-quantum schemes is still being evaluated by the cryptographic community\n+4. A sudden switch would require extensive coordination across the entire ecosystem\n+\n+This BIP proposes QES2 as a balanced solution that:\n+\n+1. Maintains compatibility with existing Bitcoin infrastructure\n+2. Adds quantum resistance through a lattice-based signature scheme (Dilithium)\n+3. Creates a cryptographic binding between PQC signatures and ECDSA signatures\n+4. Allows for a gradual, opt-in transition to quantum-resistant security\n+5. Creates a safety net against future quantum computing threats\n+\n+Specification\n+============\n+\n+Overview\n+--------\n+\n+QES2 combines the Dilithium post-quantum signature scheme with the classical ECDSA signature scheme currently used in Bitcoin. The key innovation is that QES2 doesn't just use both signature schemes in parallel but creates a cryptographic binding between them. First, the Dilithium signature is generated for the transaction digest, then the ECDSA signature signs the Dilithium signature itself. This binding ensures that the ECDSA signature validates the integrity of the quantum-resistant signature.\n+\n+The QES2 signature process can be represented as:\n+\n+.. code-block::\n+\n+   Sign_QES2 = Sign_ECDSA(Sign_PQC(message))\n+\n+And the verification process:\n+\n+.. code-block::\n+\n+   Verify_QES2 = Verify_ECDSA(Ïƒ_PQ) âˆ§ Verify_PQC(message)\n+\n+This creates a chained trust model where breaking the scheme would require breaking both the quantum-resistant signature and the classical signature.\n+\n+Mathematical Notation and Parameters\n+------------------------------------\n+\n+Let us define the following notation:\n+\n+- m: The message to be signed (transaction digest)\n+- sk_PQ: Dilithium private key\n+- pk_PQ: Dilithium public key\n+- sk_EC: ECDSA private key\n+- pk_EC: ECDSA public key\n+- Ïƒ_PQ: Dilithium signature on the message\n+- Ïƒ_EC: ECDSA signature on the Dilithium signature\n+- H: SHA-256 hash function\n+- S_PQ: Dilithium signing algorithm\n+- V_PQ: Dilithium verification algorithm\n+- S_EC: ECDSA signing algorithm\n+- V_EC: ECDSA verification algorithm\n+\n+Dilithium Parameters\n+~~~~~~~~~~~~~~~~~~~\n+\n+The Dilithium instantiation uses the following parameters:\n+\n+- Security level: NIST security level 3 (equivalent to AES-192)\n+- Dimension n: 256\n+- Modulus q: 8380417\n+- Weight of challenge Î³1: 60\n+- Weight of secret Î³2: (q-1)/16\n+- Number of iterations Îº: 5\n+- Public key size: 1,952 bytes\n+- Private key size: 4,000 bytes\n+- Signature size: 2,701 bytes\n+\n+ECDSA Parameters\n+~~~~~~~~~~~~~~~\n+\n+The ECDSA implementation uses the following parameters:\n+\n+- Curve: secp256k1\n+- Field size: 256 bits\n+- Public key size: 33 bytes (compressed)\n+- Signature size: ~72 bytes (with sighash flag)\n+\n+Script Types and Address Format\n+-------------------------------\n+\n+This BIP introduces a new script template:\n+\n+.. code-block::\n+\n+   <pq_signature_push> <ecdsa_signature_push> <pubkey_push> OP_QES2_CHECKSIG\n+\n+Where:\n+\n+- ``<pq_signature_push>`` is the Dilithium signature component on the transaction digest\n+- ``<ecdsa_signature_push>`` is the ECDSA signature on the Dilithium signature\n+- ``<pubkey_push>`` includes both the ECDSA public key and Dilithium public key\n+- ``OP_QES2_CHECKSIG`` is a new opcode that verifies the entire chained signature scheme\n+\n+New Opcode\n+~~~~~~~~~~\n+\n+We introduce a new opcode, tentatively assigned as ``OP_QES2_CHECKSIG (0xba)``, that performs verification of the hybrid QES2 signature by checking both the ECDSA signature (which validates the PQC signature) and the Dilithium signature itself.\n+\n+P2QPK (Pay to QES2 Public Key)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PK, but using QES2:\n+\n+.. code-block::\n+\n+   <combined_pubkey> OP_QES2_CHECKSIG\n+\n+P2QPKH (Pay to QES2 Public Key Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2PKH, but using a hash of the combined QES2 public key:\n+\n+.. code-block::\n+\n+   OP_DUP OP_HASH160 <qes2_pubkeyhash> OP_EQUALVERIFY OP_QES2_CHECKSIG\n+\n+P2QSH (Pay to QES2 Script Hash)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Similar to P2SH, but with QES2 signature verification:\n+\n+.. code-block::\n+\n+   OP_HASH160 <qes2_script_hash> OP_EQUAL\n+\n+Address Format\n+~~~~~~~~~~~~~\n+\n+QES2 addresses use a new version byte with a Bech32m encoding:\n+\n+.. code-block::\n+\n+   qp1<bech32m_encoded_program>\n+\n+Where the version byte indicates the use of QES2 and distinguishes between P2QPKH and P2QSH formats.\n+\n+Key Management\n+--------------\n+\n+Two approaches for managing QES2 keys:\n+\n+1. **Deterministic Derivation**\n+\n+   The Dilithium key pair is deterministically derived from the ECDSA private key:\n+\n+   .. code-block::\n+\n+      sk_PQ = HMAC-SHA512(sk_EC, \"Bitcoin_Dilithium_Key_Derivation\")\n+\n+   From sk_PQ, we compute:\n+\n+   .. code-block::\n+\n+      pk_PQ = Dilithium.KeyGen(sk_PQ)\n+\n+2. **Independent Keys**\n+\n+   The ECDSA and Dilithium key pairs are generated independently and bound together in the transaction script.\n+\n+The combined public key is represented as:\n+\n+.. code-block::\n+\n+   pk_combined = pk_PQ || pk_EC\n+\n+Where ``||`` denotes concatenation.\n+\n+The first approach is recommended for simplicity of wallet implementation, while the second offers greater flexibility.\n+\n+Signing Process\n+--------------\n+\n+The QES2 signing process consists of the following steps:\n+\n+1. **Transaction Serialization**\n+\n+   - Serialize the transaction inputs and outputs according to the appropriate sighash algorithm\n+   - Generate the transaction digest m = H(H(tx)) using double SHA-256\n+\n+2. **Post-Quantum Signature Generation**\n+\n+   - Generate a Dilithium signature on the transaction digest:\n+\n+     .. code-block::\n+\n+        Ïƒ_PQ = S_PQ(sk_PQ, m)\n+\n+3. **Vector Encoding**\n+\n+   - Flatten the post-quantum signature to obtain a coefficient vector\n+   - Apply domain-specific encoding to the coefficient vector\n+   - Apply compression and normalization to produce Ãª\n+\n+4. **ECDSA Signature Generation**\n+\n+   - Generate an ECDSA signature directly on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+   - The ECDSA signature follows the standard Bitcoin format, including the appropriate sighash flag\n+\n+5. **Complete Signature**\n+\n+   - The final QES2 signature consists of: (Ïƒ_PQ, Ïƒ_EC)\n+\n+This process can be summarized as:\n+\n+.. code-block::\n+\n+   Sign_QES2(m) = (Ïƒ_PQ, Ïƒ_EC)\n+\n+where:\n+\n+- Ïƒ_PQ = S_PQ(sk_PQ, m)\n+- Ïƒ_EC = S_EC(sk_EC, Ãª)\n+\n+Importantly, the ECDSA signature is not signing the original message but is signing the PQC signature directly. This creates a cryptographic binding where the ECDSA signature validates the Dilithium signature.\n+\n+Verification Procedure\n+---------------------\n+\n+The verification of a QES2 signature consists of the following steps:\n+\n+1. **Transaction Digest Calculation**\n+\n+   - Calculate the transaction digest m = H(H(tx)) according to the sighash flags\n+\n+2. **Vector Decoding**\n+\n+   - Decode the PQC signature component Ïƒ_PQ to obtain Ãª\n+\n+3. **ECDSA Signature Verification**\n+\n+   - Verify the ECDSA signature on the encoded PQC signature:\n+\n+     .. code-block::\n+\n+        valid_EC = V_EC(pk_EC, Ãª, Ïƒ_EC)\n+\n+   - This step verifies the integrity of the Dilithium signature\n+\n+4. **Post-Quantum Signature Verification**\n+\n+   - Verify the Dilithium signature on the original transaction digest:\n+\n+     .. code-block::\n+\n+        valid_PQ = V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+5. **Combined Verification Decision**\n+\n+   - Accept the QES2 signature as valid if and only if both verifications succeed:\n+\n+     .. code-block::\n+\n+        valid = valid_EC âˆ§ valid_PQ\n+\n+The verification process can be summarized as:\n+\n+.. code-block::\n+\n+   Verify_QES2(m, Ïƒ_PQ, Ïƒ_EC, pk_PQ, pk_EC) = V_EC(pk_EC, Ãª, Ïƒ_EC) âˆ§ V_PQ(pk_PQ, m, Ïƒ_PQ)\n+\n+This verification procedure ensures that:\n+\n+1. The transaction has not been tampered with (verified by Dilithium)\n+2. The Dilithium signature is valid for the transaction\n+3. The ECDSA signature validates the integrity of the Dilithium signature\n+\n+The security of this approach stems from the fact that an attacker would need to forge both signature types or find a way to create a valid ECDSA signature that endorses a forged Dilithium signature.\n+\n+Optimizations\n+------------\n+\n+To maintain reasonable validation performance:\n+\n+1. **Early rejection**: Perform ECDSA verification first and only proceed with Dilithium verification if ECDSA passes\n+2. **Optional verification**: During the initial deployment phase, nodes can verify only the ECDSA component\n+3. **Batch verification**: For multiple signatures in a transaction, use batch verification techniques\n+\n+The early rejection optimization can be formalized as:\n+\n+.. code-block::\n+\n+   valid = \n+   {\n+     V_PQ(pk_PQ, m, Ïƒ_PQ)  if V_EC(pk_EC, Ãª, Ïƒ_EC) = true\n+     false                  otherwise\n+   }\n+\n+Taproot Compatibility\n+--------------------\n+\n+QES2 can be integrated with BIP-340 (Taproot) by:\n+\n+1. Using the QES2-based signature in place of the Schnorr signature\n+2. Extending the taproot output to accommodate both ECDSA and Dilithium public keys\n+3. Modifying the key-path spending to use QES2\n+\n+The taproot Merkle root calculation would be modified to include both the ECDSA and Dilithium components:\n+\n+.. code-block::\n+\n+   P = pk_EC + hash_taptweak(pk_EC || pk_PQ || Merkle root) Â· G\n+\n+Where G is the generator point of the secp256k1 curve.\n+\n+Rationale\n+=========\n+\n+Hybrid Chained Approach\n+-----------------------\n+\n+The hybrid chained approach offers several advantages over a direct switch to post-quantum cryptography or a simple parallel combination of signatures:\n+\n+1. **Enhanced Security**: The binding between signatures means an attacker must break both schemes\n+2. **Cryptographic Binding**: ECDSA signature validates the integrity of the Dilithium signature\n+3. **Compatibility**: Maintains compatibility with existing Bitcoin infrastructure\n+4. **Confidence**: Uses established ECDSA while introducing quantum resistance\n+5. **Efficient Verification**: The ECDSA verification can serve as an initial check before more expensive PQC verification\n+\n+The specific chaining approach (PQC followed by ECDSA signing the PQC signature) ensures that:\n+\n+1. The quantum-resistant signature provides the primary security layer for the transaction\n+2. The ECDSA signature provides a binding mechanism that validates the PQC signature\n+3. The combined approach prevents potential isolation attacks against either scheme\n+4. Breaking the scheme would require breaking both the quantum-resistant signature and the classical signature, or finding a collision in the hash function\n+\n+Choice of Post-Quantum Algorithm\n+--------------------------------\n+\n+Dilithium is selected as the post-quantum component because:\n+\n+1. It is a finalist in the NIST post-quantum cryptography standardization process\n+2. It offers a reasonable balance between security level, signature size, and verification speed\n+3. It has undergone extensive cryptanalysis\n+4. Its lattice-based structure allows for potential optimizations in verification\n+\n+The security reduction for Dilithium is based on the hardness of the Module Learning With Errors (MLWE) and Module Short Integer Solution (MSIS) problems, which are believed to be resistant to quantum attacks.\n+\n+Script Capability\n+----------------\n+\n+The introduction of a new opcode provides several benefits:\n+\n+1. Clean integration into the Bitcoin scripting system\n+2. Flexibility for future signature scheme upgrades\n+3. Clear distinction between quantum-resistant and classical addresses\n+4. Ability to verify the chained signature scheme efficiently\n+\n+Size and Performance Impact\n+--------------------------\n+\n+The QES2 approach introduces additional overhead:\n+\n+1. **Signature Size**:\n+\n+   - ECDSA signature: ~72 bytes\n+   - Dilithium signature: ~2.7 KB\n+   - Total QES2 size with optimizations: ~2.8 KB\n+\n+2. **Verification Time**:\n+\n+   - ECDSA verification: ~0.3ms on standard hardware\n+   - Dilithium verification: ~1.2ms\n+   - Combined with optimizations: ~1.5ms\n+\n+3. **Impact on Block Space**:\n+\n+   - Increased transaction size by approximately 2.7 KB per input\n+   - Partially mitigated by optional adoption during transition phase\n+\n+The efficiency ratio can be expressed as:\n+\n+.. code-block::\n+\n+   Efficiency = Security Benefit / Size Overhead\n+\n+Where the security benefit is measured by the estimated years of protection against quantum attacks.\n+\n+Backwards Compatibility\n+======================\n+\n+This BIP maintains backward compatibility through several mechanisms:\n+\n+1. **Opt-in Deployment**: QES2 addresses are distinct from traditional addresses\n+2. **Traditional Scripts**: Existing P2PKH, P2SH, P2WPKH, and P2WSH scripts continue to function normally\n+3. **Validation Rules**: Nodes that do not implement this BIP will see the new scripts as anyone-can-spend outputs\n+4. **Soft Fork**: This change can be deployed as a soft fork\n+\n+Deployment\n+=========\n+\n+This BIP should be deployed as a soft fork using the standard BIP-9 version bits method:\n+\n+1. **Bit**: TBD\n+2. **Start time**: TBD\n+3. **Timeout**: TBD\n+\n+The deployment follows a phased approach:\n+\n+1. **Phase 1 - Optional Implementation**: Support for QES2 exists but is not required for consensus\n+2. **Phase 2 - Activation**: The soft fork activates, and QES2 scripts become valid\n+3. **Phase 3 - Transition**: Users gradually migrate to quantum-resistant addresses\n+\n+Reference Implementation\n+=======================\n+\n+A reference implementation will be provided in a separate pull request to the Bitcoin Core repository, including:\n+\n+1. Implementation of the new opcode\n+2. Verification logic for the hybrid chained signature scheme\n+3. Wallet functionality for creating and signing with QES2\n+\n+The pseudocode for the key signing process is as follows:\n+\n+.. code-block::\n+\n+   function signQES2(message, dilithiumPrivKey, ecdsaPrivKey):\n+       // First generate the PQC signature on the message\n+       dilithiumSignature = dilithiumSign(message, dilithiumPrivKey)\n+       \n+       // Encode the PQC signature\n+       encodedPQSig = encodeDilithiumSignature(dilithiumSignature)\n+       \n+       // Generate ECDSA signature directly on the encoded PQC signature\n+       ecdsaSignature = ecdsaSign(encodedPQSig, ecdsaPrivKey)\n+       \n+       // Return the complete QES2 signature\n+       return (dilithiumSignature, ecdsaSignature)\n+\n+The pseudocode for key verification is as follows:\n+\n+.. code-block::\n+\n+   function verifyQES2Signature(message, dilithiumSignature, ecdsaSignature, dilithiumPubKey, ecdsaPubKey):\n+       // Encode the PQC signature\n+       encodedPQSig = encodeDilithiumSignature(dilithiumSignature)\n+       \n+       // First verify ECDSA (faster verification)\n+       // This verifies the integrity of the PQC signature\n+       if not verifyECDSA(encodedPQSig, ecdsaSignature, ecdsaPubKey):\n+           return false\n+       \n+       // Only verify Dilithium if ECDSA passes\n+       return verifyDilithium(message, dilithiumSignature, dilithiumPubKey)\n+\n+Test Vectors\n+===========\n+\n+Test vectors will include:\n+\n+1. Sample key pairs (ECDSA and Dilithium)\n+2. Sample messages and their corresponding QES2 signatures\n+3. Script validation examples\n+4. Edge cases for validation\n+\n+Example Test Vector:\n+\n+.. code-block::\n+\n+   # Test Vector 1\n+   Message (Transaction Digest): 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\n+\n+   # ECDSA Key Pair\n+   ECDSA Private Key: 0xef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcd\n+   ECDSA Public Key: 0x02b1e6079a23ab7a7e5a7bc7a1a811a96ef37248143da0c4d35765c25094fcc712\n+\n+   # Dilithium Key Pair\n+   Dilithium Private Key: [4000 bytes, hexadecimal]\n+   Dilithium Public Key: [1952 bytes, hexadecimal]\n+\n+   # Step 1: Dilithium Signature on Original Message\n+   Dilithium Signature: [2701 bytes, hexadecimal]\n+\n+   # Step 2: Encoded Dilithium Signature\n+   Encoded Signature: [compressed representation]\n+\n+   # Step 3: ECDSA Signature on Encoded Dilithium Signature\n+   ECDSA Signature: 0x304402201234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef022012345678901234567890abcdef1234567890abcdef1234567890abcdef12345678\n+\n+   # Complete QES2 Signature\n+   QES2 Signature: [Dilithium Signature || ECDSA Signature]\n+\n+Security Considerations\n+======================\n+\n+Quantum Timeline\n+---------------\n+\n+The implementation timeline considers quantum computing development:\n+\n+1. **Near-term (3-5 years)**: Low quantum threat, preparation phase\n+2. **Medium-term (5-10 years)**: Growing threat, transition phase\n+3. **Long-term (10+ years)**: Potential quantum capacity to break ECDSA\n+\n+The risk assessment formula can be modeled as:\n+\n+.. code-block::\n+\n+   Risk = Probability of Attack Ã— Impact of Compromise\n+\n+Where the probability increases with quantum computing development, and the impact depends on the value secured by ECDSA.\n+\n+Migration Security\n+----------------\n+\n+During the transition period:\n+\n+1. Coins in traditional addresses will become increasingly vulnerable\n+2. Tools should be provided to securely migrate funds to quantum-resistant addresses\n+3. Community education about quantum security risks becomes critical\n+\n+The security of funds during migration depends on the following inequality:\n+\n+.. code-block::\n+\n+   T_migration < T_quantum break\n+\n+Where T_migration is the time required to migrate funds to quantum-resistant addresses, and T_quantum break is the time until quantum computers can break ECDSA.\n+\n+Implementation Security\n+----------------------\n+\n+Implementers should be aware of:\n+\n+1. Side-channel resistance in both signature schemes\n+2. Appropriate entropy for key generation\n+3. Secure storage of larger keys and signatures\n+4. Protection against combined cryptographic attacks\n+\n+The entropy requirements for key generation are:\n+\n+.. code-block::\n+\n+   Entropy_QES2 â‰¥ max(Entropy_ECDSA, Entropy_Dilithium) â‰¥ 256 bits\n+\n+Security Proofs\n+--------------\n+\n+The security of QES2 relies on the following propositions:\n+\n+1. **Dilithium Security**: The Dilithium signature is secure against quantum adversaries under the hardness assumptions of Module-LWE and Module-SIS problems.\n+\n+2. **ECDSA Security**: While vulnerable to quantum attacks, ECDSA remains secure against classical adversaries.\n+\n+3. **Binding Property**: The ECDSA signature validates the Dilithium signature, creating a binding that requires breaking both schemes or finding hash collisions to forge.",
      "path": "bip-newproposal.mediawiki",
      "position": 581,
      "original_position": 581,
      "commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "original_commit_id": "11a563aeaf50808390106cfda66bec5037443d6b",
      "in_reply_to_id": 2050801508,
      "user": {
        "login": "j1729labs",
        "id": 207299364,
        "node_id": "U_kgDODFsjJA",
        "avatar_url": "https://avatars.githubusercontent.com/u/207299364?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/j1729labs",
        "html_url": "https://github.com/j1729labs",
        "followers_url": "https://api.github.com/users/j1729labs/followers",
        "following_url": "https://api.github.com/users/j1729labs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/j1729labs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/j1729labs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/j1729labs/subscriptions",
        "organizations_url": "https://api.github.com/users/j1729labs/orgs",
        "repos_url": "https://api.github.com/users/j1729labs/repos",
        "events_url": "https://api.github.com/users/j1729labs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/j1729labs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My primary concern â€” and the motivation for this work â€” is that quantum computing poses a real and growing threat to the cryptographic foundations of Bitcoin and other blockchains. In response, we are actively exploring ways to strengthen these systems with post-quantum cryptography.\r\n\r\nIn the case of QES2, simply appending a PQ signature is not sufficient, as it does not provide a verifiable commitment to the signature within Bitcoinâ€™s existing validation logic. By signing the PQ signature with a currently supported scheme such as ECDSA or Schnorr, we ensure that the signature is **cryptographically bound and verifiable** in the current infrastructure, without requiring consensus changes or new opcodes.\r\n\r\nThis hybrid dual-signature design provides a practical path for backward compatibility while introducing post-quantum security guarantees. Ultimately, our goal is to transition toward a fully post-quantum signature scheme, but this intermediate approach offers a secure and deployable solution today.\r\n",
      "created_at": "2025-05-12T03:46:19Z",
      "updated_at": "2025-05-12T03:46:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1830#discussion_r2083770799",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2083770799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1830"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 581,
      "original_line": 581,
      "side": "RIGHT"
    }
  ]
}