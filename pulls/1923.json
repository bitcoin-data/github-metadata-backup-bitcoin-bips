{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1923",
    "id": 2733304062,
    "node_id": "PR_kwDOAN28mc6i6uj-",
    "html_url": "https://github.com/bitcoin/bips/pull/1923",
    "diff_url": "https://github.com/bitcoin/bips/pull/1923.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1923.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1923/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1923/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1923/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/d1d03420ac5ee234494d84358a4abd06df269f65",
    "number": 1923,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": " BIP draft: BIPs for Utreexo",
    "user": {
      "login": "kcalvinalvin",
      "id": 37185887,
      "node_id": "MDQ6VXNlcjM3MTg1ODg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kcalvinalvin",
      "html_url": "https://github.com/kcalvinalvin",
      "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
      "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
      "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
      "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
      "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "These are the 3 BIPs that describe Utreexo, a consensus-compatible (non-soft fork) way to send and verify transactions without storing the full UTXO set.\r\n\r\nThe 3 BIPs are for:\r\n1. The specification of the Utreexo accumulator.\r\n2. The specification of Bitcoin block and tx validation using the Utreexo accumulator.\r\n3. The peer to peer networking changes required to enable Utreexo nodes.\r\n\r\nMailing list post: https://groups.google.com/g/bitcoindev/c/W1lxBraKG_E",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2025-08-10T06:56:50Z",
    "updated_at": "2025-08-18T13:47:32Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merged": false,
    "merge_commit_sha": "ae501af218ba8e4e05a78d1c845c509f6a2a8b8d",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "kcalvinalvin:2025-08-10-utreexo-bips",
      "ref": "2025-08-10-utreexo-bips",
      "sha": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 986054383,
        "node_id": "R_kgDOOsX-7w",
        "name": "bips",
        "full_name": "kcalvinalvin/bips",
        "owner": {
          "login": "kcalvinalvin",
          "id": 37185887,
          "node_id": "MDQ6VXNlcjM3MTg1ODg3",
          "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/kcalvinalvin",
          "html_url": "https://github.com/kcalvinalvin",
          "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
          "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
          "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
          "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
          "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/kcalvinalvin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/kcalvinalvin/bips",
        "archive_url": "https://api.github.com/repos/kcalvinalvin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/kcalvinalvin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/kcalvinalvin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/kcalvinalvin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/kcalvinalvin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/kcalvinalvin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/kcalvinalvin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/kcalvinalvin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/kcalvinalvin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/kcalvinalvin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/kcalvinalvin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/kcalvinalvin/bips/downloads",
        "events_url": "https://api.github.com/repos/kcalvinalvin/bips/events",
        "forks_url": "https://api.github.com/repos/kcalvinalvin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/kcalvinalvin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/kcalvinalvin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/kcalvinalvin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/kcalvinalvin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/kcalvinalvin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/kcalvinalvin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/kcalvinalvin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/kcalvinalvin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/kcalvinalvin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/kcalvinalvin/bips/languages",
        "merges_url": "https://api.github.com/repos/kcalvinalvin/bips/merges",
        "milestones_url": "https://api.github.com/repos/kcalvinalvin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/kcalvinalvin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/kcalvinalvin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/kcalvinalvin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:kcalvinalvin/bips.git",
        "stargazers_url": "https://api.github.com/repos/kcalvinalvin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/kcalvinalvin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/kcalvinalvin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/kcalvinalvin/bips/subscription",
        "tags_url": "https://api.github.com/repos/kcalvinalvin/bips/tags",
        "teams_url": "https://api.github.com/repos/kcalvinalvin/bips/teams",
        "trees_url": "https://api.github.com/repos/kcalvinalvin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/kcalvinalvin/bips.git",
        "hooks_url": "https://api.github.com/repos/kcalvinalvin/bips/hooks",
        "svn_url": "https://github.com/kcalvinalvin/bips",
        "homepage": "",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 17272,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-12T06:23:33Z",
        "created_at": "2025-05-19T03:26:28Z",
        "updated_at": "2025-05-19T03:26:28Z",
        "allow_forking": true
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "4f1359d0f8cb934e1d9380414cbda66665e335e7",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5705,
        "stargazers_count": 10128,
        "watchers_count": 10128,
        "size": 16579,
        "default_branch": "master",
        "open_issues_count": 34,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-15T15:40:37Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2025-08-18T13:53:53Z",
        "allow_forking": true
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 1446,
    "deletions": 0,
    "changed_files": 13,
    "commits": 3,
    "review_comments": 35,
    "comments": 8
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 19074534274,
      "node_id": "HRFPE_lADOAN28mc7FIK1EzwAAAARw7kuC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19074534274",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9b3eafb52bfdf69280c5326e90dda3347fc71ab0",
      "commit_url": "https://api.github.com/repos/kcalvinalvin/bips/commits/9b3eafb52bfdf69280c5326e90dda3347fc71ab0",
      "created_at": "2025-08-10T07:06:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19074544819,
      "node_id": "HRFPE_lADOAN28mc7FIK1EzwAAAARw7nSz",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19074544819",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "commit_url": "https://api.github.com/repos/kcalvinalvin/bips/commits/a94f6434c8f4be7469a3d913046a3c66db48f805",
      "created_at": "2025-08-10T07:09:03Z"
    },
    {
      "event": "labeled",
      "id": 19077017639,
      "node_id": "LE_lADOAN28mc7FIK1EzwAAAARxFDAn",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19077017639",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-10T17:29:05Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 3106077404,
      "node_id": "PRR_kwDOAN28mc65Ivrc",
      "url": null,
      "actor": null,
      "commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-11T14:34:10Z",
      "author_association": "NONE",
      "body": "some typos",
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#pullrequestreview-3106077404",
      "submitted_at": "2025-08-11T14:34:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
    },
    {
      "event": "reviewed",
      "id": 3107530297,
      "node_id": "PRR_kwDOAN28mc65OSY5",
      "url": null,
      "actor": null,
      "commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-11T21:52:02Z",
      "author_association": "MEMBER",
      "body": "Thank you for proposing these drafts. They already look quite complete with respect to the editorial requirements (BIPs 2 and 3). I've done a cursory first pass. No immediate conceptual feedback. A few editorial comments follow; feel free to ignore them during conceptual review until they are applicable.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#pullrequestreview-3107530297",
      "submitted_at": "2025-08-11T21:52:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
    },
    {
      "event": "reviewed",
      "id": 3107913820,
      "node_id": "PRR_kwDOAN28mc65PwBc",
      "url": null,
      "actor": null,
      "commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-11T22:06:47Z",
      "author_association": "NONE",
      "user": {
        "login": "luisschwab",
        "id": 97608688,
        "node_id": "U_kgDOBdFj8A",
        "avatar_url": "https://avatars.githubusercontent.com/u/97608688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luisschwab",
        "html_url": "https://github.com/luisschwab",
        "followers_url": "https://api.github.com/users/luisschwab/followers",
        "following_url": "https://api.github.com/users/luisschwab/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luisschwab/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luisschwab/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luisschwab/subscriptions",
        "organizations_url": "https://api.github.com/users/luisschwab/orgs",
        "repos_url": "https://api.github.com/users/luisschwab/repos",
        "events_url": "https://api.github.com/users/luisschwab/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luisschwab/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#pullrequestreview-3107913820",
      "submitted_at": "2025-08-11T22:06:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19103917616,
      "node_id": "HRFPE_lADOAN28mc7FIK1EzwAAAARyrqYw",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19103917616",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cb2993cf7d4b33de452ed38b6ddaba3262603fc6",
      "commit_url": "https://api.github.com/repos/kcalvinalvin/bips/commits/cb2993cf7d4b33de452ed38b6ddaba3262603fc6",
      "created_at": "2025-08-12T06:15:36Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDg0NDRhMjgzMzFhYWJhZjM3NWRlYjk4MTY5M2FlNGMzNzljYmM4NDE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8444a28331aabaf375deb981693ae4c379cbc841",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8444a28331aabaf375deb981693ae4c379cbc841",
      "tree": {
        "sha": "5b299feb0fb2990e8fe2a93ff92c123074477e1a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5b299feb0fb2990e8fe2a93ff92c123074477e1a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e97c908096a275b7a71b304ba7ed82ca3602a72c",
          "sha": "e97c908096a275b7a71b304ba7ed82ca3602a72c",
          "html_url": "https://github.com/bitcoin/bips/commit/e97c908096a275b7a71b304ba7ed82ca3602a72c"
        }
      ],
      "message": "Add the Utreexo accumulator BIP",
      "committer": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2025-08-12T06:23:25Z"
      },
      "author": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2025-08-10T06:44:26Z"
      },
      "sha": "8444a28331aabaf375deb981693ae4c379cbc841"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGNhNTExZmYxZGU0MDIzOWY2MGJiMWY4NWY4NzI0ZjA5MmYyNDA2MDc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ca511ff1de40239f60bb1f85f8724f092f240607",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ca511ff1de40239f60bb1f85f8724f092f240607",
      "tree": {
        "sha": "25caa5229f36ec09741e09de9f7486c569e4d6e4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/25caa5229f36ec09741e09de9f7486c569e4d6e4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8444a28331aabaf375deb981693ae4c379cbc841",
          "sha": "8444a28331aabaf375deb981693ae4c379cbc841",
          "html_url": "https://github.com/bitcoin/bips/commit/8444a28331aabaf375deb981693ae4c379cbc841"
        }
      ],
      "message": "Add Utreexo validation BIP",
      "committer": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2025-08-12T06:23:25Z"
      },
      "author": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2025-08-10T06:44:50Z"
      },
      "sha": "ca511ff1de40239f60bb1f85f8724f092f240607"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQxZDAzNDIwYWM1ZWUyMzQ0OTRkODQzNThhNGFiZDA2ZGYyNjlmNjU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d1d03420ac5ee234494d84358a4abd06df269f65",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d1d03420ac5ee234494d84358a4abd06df269f65",
      "tree": {
        "sha": "5503257237f3dc7a44b77b895a5aaf9896c6dd53",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5503257237f3dc7a44b77b895a5aaf9896c6dd53"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ca511ff1de40239f60bb1f85f8724f092f240607",
          "sha": "ca511ff1de40239f60bb1f85f8724f092f240607",
          "html_url": "https://github.com/bitcoin/bips/commit/ca511ff1de40239f60bb1f85f8724f092f240607"
        }
      ],
      "message": "Add Utreexo P2P BIP",
      "committer": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2025-08-12T06:23:25Z"
      },
      "author": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2025-08-10T06:45:09Z"
      },
      "sha": "d1d03420ac5ee234494d84358a4abd06df269f65"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19104050469,
      "node_id": "HRFPE_lADOAN28mc7FIK1EzwAAAARysK0l",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19104050469",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "commit_url": "https://api.github.com/repos/kcalvinalvin/bips/commits/d1d03420ac5ee234494d84358a4abd06df269f65",
      "created_at": "2025-08-12T06:23:34Z"
    },
    {
      "event": "subscribed",
      "id": 19111100143,
      "node_id": "SE_lADOAN28mc7FIK1EzwAAAARzHD7v",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19111100143",
      "actor": {
        "login": "judemont",
        "id": 96385330,
        "node_id": "U_kgDOBb65Mg",
        "avatar_url": "https://avatars.githubusercontent.com/u/96385330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/judemont",
        "html_url": "https://github.com/judemont",
        "followers_url": "https://api.github.com/users/judemont/followers",
        "following_url": "https://api.github.com/users/judemont/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/judemont/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/judemont/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/judemont/subscriptions",
        "organizations_url": "https://api.github.com/users/judemont/orgs",
        "repos_url": "https://api.github.com/users/judemont/repos",
        "events_url": "https://api.github.com/users/judemont/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/judemont/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T12:16:41Z"
    },
    {
      "event": "commented",
      "id": 3179972052,
      "node_id": "IC_kwDOAN28mc69ioXU",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3179972052",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T15:52:53Z",
      "updated_at": "2025-08-12T15:52:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "You need to justify why you're using SHA-512/256 rather than SHA-256, like the rest of the Bitcoin protocol. Right now you just link to a paper from 2011. But that paper is out of date now that hardware support for SHA-256 has become common.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3179972052",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3180517949,
      "node_id": "IC_kwDOAN28mc69kto9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3180517949",
      "actor": {
        "login": "1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "id": 219042429,
        "node_id": "U_kgDODQ5SfQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/219042429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "html_url": "https://github.com/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "followers_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/followers",
        "following_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/subscriptions",
        "organizations_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/orgs",
        "repos_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/repos",
        "events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T18:29:31Z",
      "updated_at": "2025-08-12T18:49:00Z",
      "author_association": "NONE",
      "body": "I strongly recommend replacing SHA-256 with **SHAKE256** (from the SHA-3 standard) for the following reasons:\r\n\r\n## 1. Security Advantages\r\n- 🔒 Provides built-in protection against length-extension attacks\r\n- 📏 Offers flexible output lengths (supports 128-bit and 256-bit security levels)\r\n- ⚙️ Based on Keccak sponge construction (NIST FIPS 202 standard)\r\n- 🌐 Aligns with post-quantum cryptography standards\r\n\r\n## 2. Comparative Analysis: SHA-256 vs SHAKE256\r\n\r\n| Characteristic       | SHA-256          | SHAKE256         |\r\n|----------------------|------------------|------------------|\r\n| **Algorithm Family** | SHA-2            | SHA-3 (Keccak)   |\r\n| **Output Flexibility** | Fixed 256-bit    | Arbitrary length |\r\n| **Security Properties** | Vulnerable to length-extension | Resistant to length-extension |\r\n| **Internal Structure** | Merkle-Damgård   | Sponge function  |\r\n| **Standardization** | NIST FIPS 180-4  | NIST FIPS 202    |\r\n\r\n## 3. Functional Example\r\n**Input:** `Bitcoin` \r\n\r\n**SHAKE256 (512-bit output):**  \r\n`6beb0661ba1fa7289bf359fbb81550bd9641cf5abc62a14d466c421c8a86e528e027632ec0e7ceb994650566f3c8258af2240333b6d0e9186766fd2c1ebb763a`\r\n\r\n**SHAKE256 (256-bit output):**  \r\n`6beb0661ba1fa7289bf359fbb81550bd9641cf5abc62a14d466c421c8a86e528`\r\n\r\n## 4. Implementation Benefits\r\n- ✅ Maintains 256-bit output compatibility where needed\r\n- ✅ Future-proofs against emerging cryptographic vulnerabilities\r\n- ✅ Reduces potential attack vectors through improved design\r\n- ✅ Supports Bitcoin's security evolution while maintaining performance\r\n\r\n## 5. Technical Reference\r\nFor detailed cryptographic differences:  \r\n[Cryptographic Comparison: SHA-2 vs SHA-3](https://crypto.stackexchange.com/a/68314)",
      "user": {
        "login": "1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "id": 219042429,
        "node_id": "U_kgDODQ5SfQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/219042429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "html_url": "https://github.com/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "followers_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/followers",
        "following_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/subscriptions",
        "organizations_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/orgs",
        "repos_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/repos",
        "events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3180517949",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3196199910,
      "node_id": "IC_kwDOAN28mc6-giPm",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3196199910",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T11:06:29Z",
      "updated_at": "2025-08-18T11:06:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "> You need to justify why you're using SHA-512/256 rather than SHA-256, like the rest of the Bitcoin protocol. Right now you just link to a paper from 2011. But that paper is out of date now that hardware support for SHA-256 has become common.\r\n\r\nSure we can update the accumulator BIP with benchmarks for SHA512/256 vs SHA256.\r\n\r\nBut could you link to the aforementioned justifications for the other parts of the Bitcoin protocol that use SHA512?",
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3196199910",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3196210709,
      "node_id": "IC_kwDOAN28mc6-gk4V",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3196210709",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T11:10:24Z",
      "updated_at": "2025-08-18T11:10:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I strongly recommend replacing SHA-256 with **SHAKE256** (from the SHA-3 standard) for the following reasons:\r\n> \r\n> ## 1. Security Advantages\r\n> * 🔒 Provides built-in protection against length-extension attacks\r\n> * 📏 Offers flexible output lengths (supports 128-bit and 256-bit security levels)\r\n> * ⚙️ Based on Keccak sponge construction (NIST FIPS 202 standard)\r\n> * 🌐 Aligns with post-quantum cryptography standards\r\n> \r\n> ## 2. Comparative Analysis: SHA-256 vs SHAKE256\r\n> Characteristic\tSHA-256\tSHAKE256\r\n> **Algorithm Family**\tSHA-2\tSHA-3 (Keccak)\r\n> **Output Flexibility**\tFixed 256-bit\tArbitrary length\r\n> **Security Properties**\tVulnerable to length-extension\tResistant to length-extension\r\n> **Internal Structure**\tMerkle-Damgård\tSponge function\r\n> **Standardization**\tNIST FIPS 180-4\tNIST FIPS 202\r\n> ## 3. Functional Example\r\n> **Input:** `Bitcoin`\r\n> \r\n> **SHAKE256 (512-bit output):** `6beb0661ba1fa7289bf359fbb81550bd9641cf5abc62a14d466c421c8a86e528e027632ec0e7ceb994650566f3c8258af2240333b6d0e9186766fd2c1ebb763a`\r\n> \r\n> **SHAKE256 (256-bit output):** `6beb0661ba1fa7289bf359fbb81550bd9641cf5abc62a14d466c421c8a86e528`\r\n> \r\n> ## 4. Implementation Benefits\r\n> * ✅ Maintains 256-bit output compatibility where needed\r\n> * ✅ Future-proofs against emerging cryptographic vulnerabilities\r\n> * ✅ Reduces potential attack vectors through improved design\r\n> * ✅ Supports Bitcoin's security evolution while maintaining performance\r\n> \r\n> ## 5. Technical Reference\r\n> For detailed cryptographic differences: [Cryptographic Comparison: SHA-2 vs SHA-3](https://crypto.stackexchange.com/a/68314)\r\n\r\n\r\n\r\nIgnoring since the account seems to be a farm account for altcoins and the response is likely AI generated.\r\n\r\nAlso, SHAKE256 is not used in Bitcoin and introduces a new hash which increases the trust-assumption. We do not want to do this.",
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3196210709",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3196525773,
      "node_id": "IC_kwDOAN28mc6-hxzN",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3196525773",
      "actor": {
        "login": "1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "id": 219042429,
        "node_id": "U_kgDODQ5SfQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/219042429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "html_url": "https://github.com/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "followers_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/followers",
        "following_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/subscriptions",
        "organizations_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/orgs",
        "repos_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/repos",
        "events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T12:30:37Z",
      "updated_at": "2025-08-18T12:30:37Z",
      "author_association": "NONE",
      "body": "What \"altcoin farm\" you talk about? That is a crazy accusation! \n \nSecond, there is a draft BIP about this algorithm: https://groups.google.com/g/bitcoindev/c/2mQEyxHUskc",
      "user": {
        "login": "1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "id": 219042429,
        "node_id": "U_kgDODQ5SfQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/219042429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "html_url": "https://github.com/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "followers_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/followers",
        "following_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/subscriptions",
        "organizations_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/orgs",
        "repos_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/repos",
        "events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3196525773",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3196572818,
      "node_id": "IC_kwDOAN28mc6-h9SS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3196572818",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T12:37:58Z",
      "updated_at": "2025-08-18T12:37:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "> What \"altcoin farm\" you talk about? That is a crazy accusation!\r\n\r\nHappy to apologize if you aren't. Usually accounts like yours (private, low-effort comments/PRs, AI generated stuff) are farming their github accounts for altcoin airdrops. I'm very tired of them and you check all the boxes.\r\n\r\n> Second, there is a draft BIP about this algorithm: https://groups.google.com/g/bitcoindev/c/2mQEyxHUskc\r\n\r\nMy point about the increase in trust-assumption stands.",
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3196572818",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3196992147,
      "node_id": "IC_kwDOAN28mc6-jjqT",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3196992147",
      "actor": {
        "login": "1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "id": 219042429,
        "node_id": "U_kgDODQ5SfQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/219042429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "html_url": "https://github.com/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "followers_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/followers",
        "following_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/subscriptions",
        "organizations_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/orgs",
        "repos_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/repos",
        "events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T13:44:36Z",
      "updated_at": "2025-08-18T13:44:36Z",
      "author_association": "NONE",
      "body": "Maybe this site can help you to see what that draft BIP is about: https://quantum-resistant-bitcoin.bitcoin.foundation",
      "user": {
        "login": "1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "id": 219042429,
        "node_id": "U_kgDODQ5SfQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/219042429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "html_url": "https://github.com/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "followers_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/followers",
        "following_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/subscriptions",
        "organizations_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/orgs",
        "repos_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/repos",
        "events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3196992147",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3197010654,
      "node_id": "IC_kwDOAN28mc6-joLe",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3197010654",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T13:47:32Z",
      "updated_at": "2025-08-18T13:47:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Maybe this site can help you to see what that draft BIP is about: https://quantum-resistant-bitcoin.bitcoin.foundation\n\nMy original point about the increase in trust-assumption stands. Doesn't change even if you link more stuff.",
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3197010654",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266894044",
      "pull_request_review_id": 3106077404,
      "id": 2266894044,
      "node_id": "PRRC_kwDOAN28mc6HHg7c",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 26,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "an -> a",
      "created_at": "2025-08-11T14:08:16Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266894044",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266894044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266895876",
      "pull_request_review_id": 3106077404,
      "id": 2266895876,
      "node_id": "PRRC_kwDOAN28mc6HHhYE",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 27,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "an -> a",
      "created_at": "2025-08-11T14:08:56Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266895876",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266895876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266899583",
      "pull_request_review_id": 3106077404,
      "id": 2266899583,
      "node_id": "PRRC_kwDOAN28mc6HHiR_",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 50,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "are in fact should -> should in fact",
      "created_at": "2025-08-11T14:10:17Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266899583",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266899583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266915855",
      "pull_request_review_id": 3106077404,
      "id": 2266915855,
      "node_id": "PRRC_kwDOAN28mc6HHmQP",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 98,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "- is",
      "created_at": "2025-08-11T14:15:52Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266915855",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266915855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266920621",
      "pull_request_review_id": 3106077404,
      "id": 2266920621,
      "node_id": "PRRC_kwDOAN28mc6HHnat",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.\n+\n+![Utreexo TX relay](bip-utreexo-p2p/utreexo-tx-relay.png)\n+\n+The transaction relay for Utreexo nodes doesn't add any extra round trips.\n+However, it does include extra inventory vectors in the inv message.\n+\n+We introduce a new inventory vector type called `utreexoproofhash` which make up the extra information that a Utreexo node will receive.",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 105,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "make -> includes",
      "created_at": "2025-08-11T14:17:23Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266920621",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266920621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266927458",
      "pull_request_review_id": 3106077404,
      "id": 2266927458,
      "node_id": "PRRC_kwDOAN28mc6HHpFi",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.\n+\n+![Utreexo TX relay](bip-utreexo-p2p/utreexo-tx-relay.png)\n+\n+The transaction relay for Utreexo nodes doesn't add any extra round trips.\n+However, it does include extra inventory vectors in the inv message.\n+\n+We introduce a new inventory vector type called `utreexoproofhash` which make up the extra information that a Utreexo node will receive.\n+\n+A hash with the type `utreexoproofhash` represents 4 Utreexo merkle tree positions, each of them little endian serialized and taking up 8 bytes in the 32 byte hash.\n+When sending an inv message to a Utreexo node for a tx, we append `utreexoproofhash` inventory vectors to represent the merkle tree positions for each of the UTXOs being referenced in the inputs of the tx.\n+The Utreexo merkle tree positions are explained in detail in the bip \"Utreexo Accumulator Specification\".\n+Since the hash in an inventory vector is always 32 bytes, any unused space will be padded with the max uint64 value of 18446744073709551615.\n+\n+With these merkle tree positions for the UTXOs referenced in the inputs, we can calculate the needed positions of the merkle hashes to them.\n+These positions are then sent over in the `getdata` message as an another inventory vector.\n+\n+![Utreexo TX relay multiple Utreexo proof hash vectors](bip-utreexo-p2p/utreexo-tx-relay-multiple-proofhash-vectors.png)\n+\n+There may be cases where the transaction is referencing more than 4 merkle positions.\n+In this case, the extra positions are added as another inventory vector.\n+There can be as many additional inventory vectors for the `utreexoproofhash`es as needed.\n+An inventory vector of type `utreexoproofhash` will be ignored if it's not prepended with an inventory vector of type `transaction`.\n+\n+![Utreexo TX relay with multiple txs](bip-utreexo-p2p/utreexo-tx-relay-with-multiple-txs.png)\n+\n+It's possible to have an inv message with multiple txs as well.\n+Note that an inventory vector of type `utreexoproofhash` MUST be appended to the `tx` inventory vector.\n+\n+### Block Propagation\n+\n+![Legacy Block Propagation](bip-utreexo-p2p/legacy-block-propagation.png)\n+\n+Legacy block propagation without Compact Blocks comprises of three steps:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node A sends the block data to Node B.\n+\n+![Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/legacy-block-propagation-with-utreexo-nodes.png)\n+\n+The same block propagation with Utreexo nodes will look like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node B makes a getutreexoproof request for the block.\n+4. Node A sends the block data to Node B.\n+5. Node A sends the inclusion proof to Node B.\n+\n+Note that while Node A sent the inv or the blockhash to Node B, Node B is free to ask for the Utreexo proof from a node other than Node A.\n+This allows a Utreexo node to be notified of new blocks from non-Utreexo nodes.\n+\n+Since there's no PoW required for the inclusion proof, the block may be valid and the proof may be invalid.\n+If the block header validation passed while the full block validation fails, Node B should request the inclusion proof from a different peer.\n+If the new proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+![Bandwidth Saving Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/bandwidth-saving-legacy-block-propagation-with-utreexo-nodes.png)\n+\n+Since the inclusion proof is cached for each of the transaction in the mempool, it's possible to omit the proof hashes for the input UTXOs that we can already prove on our own.\n+This method looks like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request (MSG_UTREEXO_SUMMARY) for the given blockhash.\n+3. Node A sends the utreexoblocksummary message to Node B.\n+4. Node B calculates which proof hashes and leafdatas it needs to prove this block.\n+5. Node B makes a getdata request for the block to Node A.\n+6. Node B makes a getutreexoproof request for the block to Node A.\n+7. Node A sends the block data to Node B.\n+8. Node A sends the requested inclusion proof data to Node B.\n+\n+As with the getutreexoproof message, Node B is free to ask for the utreexoblocksummary message from a node other than Node A.\n+Since there's no commitment to anything in a utreexoblocksummary message, the information given in it can be false.\n+Should the block fail to validate with this propagation, Node B should request the full proof from a different peer.\n+Should the proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+All of the above propagation works the same with Compact Block propagation as well.\n+The requester would need to send a getdata request (MSG_UTREEXO_SUMMARY) after the Compact Block propagation has concluded for high-bandwidth Compact Block propagation and after the header/inv message was received from the broadcasting peer.\n+\n+## Specification\n+\n+Several new data structures and messages are introduced to make the IBD and tx relay possible.\n+All structures are little-endian encoded unless otherwise noted.\n+\n+### New data structures\n+\n+#### Compact leaf data\n+\n+For a CSN to learn the data associated with a UTXO, it must ask for a peer that has it.\n+To authenticate this data, it is committed into the accumulator, and therefore cannot be changed by peer.\n+The committed data is defined in BIP-VALIDATION#LEAF_DATA, but for some information in the leaf data, the receiving peer might already have it, so sending it again is a waste of bandwidth.\n+To save that bandwidth, we only send a Compact Leaf Data, that contains all missing information for the receiving peer to reconstruct the full leaf data.\n+A compact leaf data is defined as:\n+\n+| Field        | type                         | Description     |\n+|--------------|------------------------------|-----------------|\n+| header code  | uint32                       | This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| amount       | int64                        | The amount in sats locked on this output |\n+| scriptPubkey | reconstructable scriptPubkey | The scriptPubkey in a reconstructable format, see [Reconstructable Script](#Reconstructable-Script) for more details |\n+\n+#### Reconstructable Script\n+\n+For some script types (e.g. `ScriptHash`, `PubkeyHash`, `WitnessScriptHash`, `WitnessPubkeyHash`) the actual locking condition is not in the scriptPubkey, but a hash of it.\n+The script which is evaluated is provided as an element of the scriptSig or witness data.\n+\n+Therefore, we can safely just omit the locking script hash from the UTXO data and reconstruct it from the witness or scriptSig.\n+\n+A Reconstructable Script is a tagged union that lets nodes recreate the script without necessarily providing redundant information.\n+If we can reconstruct the committed hash from the transaction data, we just say which type should we expect.\n+Only if the actual script cannot be reconstructed from transaction data, like in the case of taproot outputs, we send the actual script.\n+\n+The serialization and tag values are given below:\n+\n+| Field   | Type                    | Description       | Required                 |\n+|---------|-------------------------|-------------------|--------------------------|\n+| tag     | 1-byte unsigned integer | Script type       | yes                      |\n+| length  | varint                  | The script length | only if tag type is 0x00 |\n+| script  | variable-length vector  | The actual script | only if tag type is 0x00 |\n+\n+The possible values for the tag are:\n+\n+| Value | Script Type         |\n+|-------|---------------------|\n+| 0x00  | Other               |\n+| 0x01  | Pubkey Hash         |\n+| 0x02  | WitnessV0PubkeyHash |\n+| 0x03  | ScriptHash          |\n+| 0x04  | WitnessV0ScriptHash |\n+\n+#### TTL Info\n+\n+For all UTXOs that get added to the Utreexo merkle forest, a TTL info exists for it and includes information necessary for efficiently caching and requesting proofs.\n+The TTL value provides information to determine which leaves should be cached and the death position is used to calculate which positions in the merkle forest we need to prove a block.\n+\n+| Field          | Type   | Description                                                                                                                                                          |\n+|----------------|--------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| TTL            | varint | The time-to-live value of a leaf in the Utreexo merkle forest. The value is determined by the amount of leaves that were added to the accumulator since its creation |\n+| death position | varint | The position in the Utreexo merkle forest when the leaf was removed                                                                                                  |\n+\n+#### Utreexo TTL\n+\n+| Field        | Type                | Description                                                                                                                                                          |\n+|--------------|---------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| block height | uint32              | The time-to-live value of a leaf in the Utreexo merkle forest. The value is determined by the amount of leaves that were added to the accumulator since its creation |\n+| length       | varint              | The length of the TTLs                                                                                                                                               |\n+| TTLs         | vector of TTL infos | position in the Utreexo merkle forest when the leaf was removed                                                                                                      |\n+\n+### New Messages\n+\n+#### MSG_UTREEXO_PROOF\n+\n+`MSG_UTREEXO_PROOF` is all the data required for a CSN or archive node using the Utreexo accumulators to validate a Bitcoin block.\n+\n+Its `cmdString` for P2PV1 is `uproof`.\n+Its [BIP324 P2PV2](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki#user-content-v2_Bitcoin_P2P_message_structure) message type is `29`.\n+\n+| Field                          | Type                         | Description                                                                                                                                |\n+|--------------------------------|------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------|\n+| blockhash                      | 32 byte vector               | The hash of the block that this inclusion proof proves                                                                                     |\n+| length of the proof hashes     | varint                       | The length of the proof hashes                                                                                                             |\n+| proof hashes                   | vector of 32 byte vectors    | The hashes requested by MSG_GET_UTREEXO_PROOF. MUST be in tree order                                                                       |\n+| length of the target locations | varint                       | The length of the target locations                                                                                                         |\n+| target locations               | vector of varint values      | The Utreexo merkle tree locations of the leafdatas. MUST be in blockchain order. MUST include all the locations or none of the locations   |\n+| length of the leafdatas        | varint                       | The length of the leafdatas                                                                                                                |\n+| leafdatas                      | vector of compact leafdatas  | The preimage of the committed UTXOs requested by the MSG_GET_UTREEXO_PROOF. MUST be in blockchain order. See compact leaf data for details |\n+\n+The proof hashes MUST be in merkle forest tree ordering.\n+See BIP [Utreexo Accumulator Specification](./utreexo-accumulator-bip.md#Merkle Forest) for an explanation on how each of the hashes in the merkle forest are positioned.\n+\n+Each of the target location represents the position of the leaf data at the same index.\n+While each leaf data represent a UTXO in a given block, not all are added as per [Utreexo - Validation Layer](./utreexo-validation-bip.md#Excluded UTXOs from the accumulator).\n+\n+#### MSG_GET_UTREEXO_PROOF\n+\n+`MSG_GET_UTREEXO_PROOF` is a message to request the inclusion proof for a given block.\n+\n+Its `cmdString` for P2PV1 is `getuproof`.\n+Its [BIP324 P2PV2](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki#user-content-v2_Bitcoin_P2P_message_structure) message type is `30`.\n+\n+| Field                     | Type                        | Description                                                        |\n+|---------------------------|-----------------------------|--------------------------------------------------------------------|\n+| blockhash                 | 32 byte vector              | The hash of the bitcoin block that we want the inclusion proof for |\n+| include all               | boolean                     | A boolean value to request all parts of the inclusion proof        |\n+| proof request bitmap      | variable-length byte vector | A bitmap of the requested proof hashes                             |\n+| leaf data request bitmap  | variable-length byte vector | A bitmap of the requested leafdatas                                |\n+\n+The bitmaps here are formatted as big-endian and padded to the nearest byte, with 1 meaning a request for the proof hash or the leaf data, and 0 meaning omit the proof hash or the leaf data.\n+\n+Since there's one corresponding leaf data per target location, it's trivial to generate a bitmap for the leafdatas.\n+\n+Using the [proof_positions](./utreexo-accumulator-bip.md#Utility Functions) function, it's possible to generate the positions of the needed proof hashes for a given set of targets.\n+With these positions, we can set the bit in the bitmap for the hashes we require.\n+\n+#### MSG_UTREEXO_TTLS\n+\n+`MSG_UTREEXO_TTLS` is the requested group of Utreexo TTLs that includes the proof hashes needed to validate that the given TTLs were committed in the provided binary.\n+\n+Its `cmdString` for P2PV1 is `uttls`.\n+Its [BIP324 P2PV2](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki#user-content-v2_Bitcoin_P2P_message_structure) message type is `31`.\n+\n+| Field                      | Type                                | Description                                   |\n+|----------------------------|-------------------------------------|-----------------------------------------------|\n+| length of the Utreexo TTLs | varint                              | The length of the Utreexo summaries           |\n+| Utreexo TTLs               | vector of Utreexo summaries         | The vector of the requested Utreexo summaries |\n+| length of the proof hashes | varint                              | The length of the proof hashes                |\n+| proof hashes               | vector of 32 byte hashes            | The vector of the requested Utreexo summaries |",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 302,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "requested proof hashes*?",
      "created_at": "2025-08-11T14:19:44Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266927458",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266927458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 302,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266933047",
      "pull_request_review_id": 3106077404,
      "id": 2266933047,
      "node_id": "PRRC_kwDOAN28mc6HHqc3",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.\n+\n+![Utreexo TX relay](bip-utreexo-p2p/utreexo-tx-relay.png)\n+\n+The transaction relay for Utreexo nodes doesn't add any extra round trips.\n+However, it does include extra inventory vectors in the inv message.\n+\n+We introduce a new inventory vector type called `utreexoproofhash` which make up the extra information that a Utreexo node will receive.\n+\n+A hash with the type `utreexoproofhash` represents 4 Utreexo merkle tree positions, each of them little endian serialized and taking up 8 bytes in the 32 byte hash.\n+When sending an inv message to a Utreexo node for a tx, we append `utreexoproofhash` inventory vectors to represent the merkle tree positions for each of the UTXOs being referenced in the inputs of the tx.\n+The Utreexo merkle tree positions are explained in detail in the bip \"Utreexo Accumulator Specification\".\n+Since the hash in an inventory vector is always 32 bytes, any unused space will be padded with the max uint64 value of 18446744073709551615.\n+\n+With these merkle tree positions for the UTXOs referenced in the inputs, we can calculate the needed positions of the merkle hashes to them.\n+These positions are then sent over in the `getdata` message as an another inventory vector.\n+\n+![Utreexo TX relay multiple Utreexo proof hash vectors](bip-utreexo-p2p/utreexo-tx-relay-multiple-proofhash-vectors.png)\n+\n+There may be cases where the transaction is referencing more than 4 merkle positions.\n+In this case, the extra positions are added as another inventory vector.\n+There can be as many additional inventory vectors for the `utreexoproofhash`es as needed.\n+An inventory vector of type `utreexoproofhash` will be ignored if it's not prepended with an inventory vector of type `transaction`.\n+\n+![Utreexo TX relay with multiple txs](bip-utreexo-p2p/utreexo-tx-relay-with-multiple-txs.png)\n+\n+It's possible to have an inv message with multiple txs as well.\n+Note that an inventory vector of type `utreexoproofhash` MUST be appended to the `tx` inventory vector.\n+\n+### Block Propagation\n+\n+![Legacy Block Propagation](bip-utreexo-p2p/legacy-block-propagation.png)\n+\n+Legacy block propagation without Compact Blocks comprises of three steps:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node A sends the block data to Node B.\n+\n+![Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/legacy-block-propagation-with-utreexo-nodes.png)\n+\n+The same block propagation with Utreexo nodes will look like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node B makes a getutreexoproof request for the block.\n+4. Node A sends the block data to Node B.\n+5. Node A sends the inclusion proof to Node B.\n+\n+Note that while Node A sent the inv or the blockhash to Node B, Node B is free to ask for the Utreexo proof from a node other than Node A.\n+This allows a Utreexo node to be notified of new blocks from non-Utreexo nodes.\n+\n+Since there's no PoW required for the inclusion proof, the block may be valid and the proof may be invalid.\n+If the block header validation passed while the full block validation fails, Node B should request the inclusion proof from a different peer.\n+If the new proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+![Bandwidth Saving Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/bandwidth-saving-legacy-block-propagation-with-utreexo-nodes.png)\n+\n+Since the inclusion proof is cached for each of the transaction in the mempool, it's possible to omit the proof hashes for the input UTXOs that we can already prove on our own.\n+This method looks like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request (MSG_UTREEXO_SUMMARY) for the given blockhash.\n+3. Node A sends the utreexoblocksummary message to Node B.\n+4. Node B calculates which proof hashes and leafdatas it needs to prove this block.\n+5. Node B makes a getdata request for the block to Node A.\n+6. Node B makes a getutreexoproof request for the block to Node A.\n+7. Node A sends the block data to Node B.\n+8. Node A sends the requested inclusion proof data to Node B.\n+\n+As with the getutreexoproof message, Node B is free to ask for the utreexoblocksummary message from a node other than Node A.\n+Since there's no commitment to anything in a utreexoblocksummary message, the information given in it can be false.\n+Should the block fail to validate with this propagation, Node B should request the full proof from a different peer.\n+Should the proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+All of the above propagation works the same with Compact Block propagation as well.\n+The requester would need to send a getdata request (MSG_UTREEXO_SUMMARY) after the Compact Block propagation has concluded for high-bandwidth Compact Block propagation and after the header/inv message was received from the broadcasting peer.\n+\n+## Specification\n+\n+Several new data structures and messages are introduced to make the IBD and tx relay possible.\n+All structures are little-endian encoded unless otherwise noted.\n+\n+### New data structures\n+\n+#### Compact leaf data\n+\n+For a CSN to learn the data associated with a UTXO, it must ask for a peer that has it.\n+To authenticate this data, it is committed into the accumulator, and therefore cannot be changed by peer.\n+The committed data is defined in BIP-VALIDATION#LEAF_DATA, but for some information in the leaf data, the receiving peer might already have it, so sending it again is a waste of bandwidth.\n+To save that bandwidth, we only send a Compact Leaf Data, that contains all missing information for the receiving peer to reconstruct the full leaf data.\n+A compact leaf data is defined as:\n+\n+| Field        | type                         | Description     |\n+|--------------|------------------------------|-----------------|\n+| header code  | uint32                       | This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| amount       | int64                        | The amount in sats locked on this output |\n+| scriptPubkey | reconstructable scriptPubkey | The scriptPubkey in a reconstructable format, see [Reconstructable Script](#Reconstructable-Script) for more details |\n+\n+#### Reconstructable Script\n+\n+For some script types (e.g. `ScriptHash`, `PubkeyHash`, `WitnessScriptHash`, `WitnessPubkeyHash`) the actual locking condition is not in the scriptPubkey, but a hash of it.\n+The script which is evaluated is provided as an element of the scriptSig or witness data.\n+\n+Therefore, we can safely just omit the locking script hash from the UTXO data and reconstruct it from the witness or scriptSig.\n+\n+A Reconstructable Script is a tagged union that lets nodes recreate the script without necessarily providing redundant information.\n+If we can reconstruct the committed hash from the transaction data, we just say which type should we expect.\n+Only if the actual script cannot be reconstructed from transaction data, like in the case of taproot outputs, we send the actual script.\n+\n+The serialization and tag values are given below:\n+\n+| Field   | Type                    | Description       | Required                 |\n+|---------|-------------------------|-------------------|--------------------------|\n+| tag     | 1-byte unsigned integer | Script type       | yes                      |\n+| length  | varint                  | The script length | only if tag type is 0x00 |\n+| script  | variable-length vector  | The actual script | only if tag type is 0x00 |\n+\n+The possible values for the tag are:\n+\n+| Value | Script Type         |\n+|-------|---------------------|\n+| 0x00  | Other               |\n+| 0x01  | Pubkey Hash         |\n+| 0x02  | WitnessV0PubkeyHash |\n+| 0x03  | ScriptHash          |\n+| 0x04  | WitnessV0ScriptHash |\n+\n+#### TTL Info\n+\n+For all UTXOs that get added to the Utreexo merkle forest, a TTL info exists for it and includes information necessary for efficiently caching and requesting proofs.\n+The TTL value provides information to determine which leaves should be cached and the death position is used to calculate which positions in the merkle forest we need to prove a block.\n+\n+| Field          | Type   | Description                                                                                                                                                          |\n+|----------------|--------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| TTL            | varint | The time-to-live value of a leaf in the Utreexo merkle forest. The value is determined by the amount of leaves that were added to the accumulator since its creation |\n+| death position | varint | The position in the Utreexo merkle forest when the leaf was removed                                                                                                  |\n+\n+#### Utreexo TTL\n+\n+| Field        | Type                | Description                                                                                                                                                          |\n+|--------------|---------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| block height | uint32              | The time-to-live value of a leaf in the Utreexo merkle forest. The value is determined by the amount of leaves that were added to the accumulator since its creation |\n+| length       | varint              | The length of the TTLs                                                                                                                                               |\n+| TTLs         | vector of TTL infos | position in the Utreexo merkle forest when the leaf was removed                                                                                                      |",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 242,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "description?",
      "created_at": "2025-08-11T14:21:45Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266933047",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266933047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 242,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266937404",
      "pull_request_review_id": 3106077404,
      "id": 2266937404,
      "node_id": "PRRC_kwDOAN28mc6HHrg8",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.\n+\n+![Utreexo TX relay](bip-utreexo-p2p/utreexo-tx-relay.png)\n+\n+The transaction relay for Utreexo nodes doesn't add any extra round trips.\n+However, it does include extra inventory vectors in the inv message.\n+\n+We introduce a new inventory vector type called `utreexoproofhash` which make up the extra information that a Utreexo node will receive.\n+\n+A hash with the type `utreexoproofhash` represents 4 Utreexo merkle tree positions, each of them little endian serialized and taking up 8 bytes in the 32 byte hash.\n+When sending an inv message to a Utreexo node for a tx, we append `utreexoproofhash` inventory vectors to represent the merkle tree positions for each of the UTXOs being referenced in the inputs of the tx.\n+The Utreexo merkle tree positions are explained in detail in the bip \"Utreexo Accumulator Specification\".\n+Since the hash in an inventory vector is always 32 bytes, any unused space will be padded with the max uint64 value of 18446744073709551615.\n+\n+With these merkle tree positions for the UTXOs referenced in the inputs, we can calculate the needed positions of the merkle hashes to them.\n+These positions are then sent over in the `getdata` message as an another inventory vector.\n+\n+![Utreexo TX relay multiple Utreexo proof hash vectors](bip-utreexo-p2p/utreexo-tx-relay-multiple-proofhash-vectors.png)\n+\n+There may be cases where the transaction is referencing more than 4 merkle positions.\n+In this case, the extra positions are added as another inventory vector.\n+There can be as many additional inventory vectors for the `utreexoproofhash`es as needed.\n+An inventory vector of type `utreexoproofhash` will be ignored if it's not prepended with an inventory vector of type `transaction`.\n+\n+![Utreexo TX relay with multiple txs](bip-utreexo-p2p/utreexo-tx-relay-with-multiple-txs.png)\n+\n+It's possible to have an inv message with multiple txs as well.\n+Note that an inventory vector of type `utreexoproofhash` MUST be appended to the `tx` inventory vector.\n+\n+### Block Propagation\n+\n+![Legacy Block Propagation](bip-utreexo-p2p/legacy-block-propagation.png)\n+\n+Legacy block propagation without Compact Blocks comprises of three steps:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node A sends the block data to Node B.\n+\n+![Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/legacy-block-propagation-with-utreexo-nodes.png)\n+\n+The same block propagation with Utreexo nodes will look like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node B makes a getutreexoproof request for the block.\n+4. Node A sends the block data to Node B.\n+5. Node A sends the inclusion proof to Node B.\n+\n+Note that while Node A sent the inv or the blockhash to Node B, Node B is free to ask for the Utreexo proof from a node other than Node A.\n+This allows a Utreexo node to be notified of new blocks from non-Utreexo nodes.\n+\n+Since there's no PoW required for the inclusion proof, the block may be valid and the proof may be invalid.\n+If the block header validation passed while the full block validation fails, Node B should request the inclusion proof from a different peer.\n+If the new proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+![Bandwidth Saving Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/bandwidth-saving-legacy-block-propagation-with-utreexo-nodes.png)\n+\n+Since the inclusion proof is cached for each of the transaction in the mempool, it's possible to omit the proof hashes for the input UTXOs that we can already prove on our own.\n+This method looks like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request (MSG_UTREEXO_SUMMARY) for the given blockhash.\n+3. Node A sends the utreexoblocksummary message to Node B.\n+4. Node B calculates which proof hashes and leafdatas it needs to prove this block.\n+5. Node B makes a getdata request for the block to Node A.\n+6. Node B makes a getutreexoproof request for the block to Node A.\n+7. Node A sends the block data to Node B.\n+8. Node A sends the requested inclusion proof data to Node B.\n+\n+As with the getutreexoproof message, Node B is free to ask for the utreexoblocksummary message from a node other than Node A.\n+Since there's no commitment to anything in a utreexoblocksummary message, the information given in it can be false.\n+Should the block fail to validate with this propagation, Node B should request the full proof from a different peer.\n+Should the proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+All of the above propagation works the same with Compact Block propagation as well.\n+The requester would need to send a getdata request (MSG_UTREEXO_SUMMARY) after the Compact Block propagation has concluded for high-bandwidth Compact Block propagation and after the header/inv message was received from the broadcasting peer.\n+\n+## Specification\n+\n+Several new data structures and messages are introduced to make the IBD and tx relay possible.\n+All structures are little-endian encoded unless otherwise noted.\n+\n+### New data structures\n+\n+#### Compact leaf data\n+\n+For a CSN to learn the data associated with a UTXO, it must ask for a peer that has it.\n+To authenticate this data, it is committed into the accumulator, and therefore cannot be changed by peer.\n+The committed data is defined in BIP-VALIDATION#LEAF_DATA, but for some information in the leaf data, the receiving peer might already have it, so sending it again is a waste of bandwidth.\n+To save that bandwidth, we only send a Compact Leaf Data, that contains all missing information for the receiving peer to reconstruct the full leaf data.\n+A compact leaf data is defined as:\n+\n+| Field        | type                         | Description     |\n+|--------------|------------------------------|-----------------|\n+| header code  | uint32                       | This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| amount       | int64                        | The amount in sats locked on this output |",
      "path": "utreexo-p2p-bip.md",
      "position": 194,
      "original_position": 194,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should probably be unsigned",
      "created_at": "2025-08-11T14:23:14Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266937404",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266937404"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 194,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267164435",
      "pull_request_review_id": 3106465271,
      "id": 2267164435,
      "node_id": "PRRC_kwDOAN28mc6HIi8T",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 26,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266894044,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "there are two, would be this one\r\n```suggestion\r\nEach block has a corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\r\n```",
      "created_at": "2025-08-11T15:39:19Z",
      "updated_at": "2025-08-11T15:39:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2267164435",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267164435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267173538",
      "pull_request_review_id": 3106478939,
      "id": 2267173538,
      "node_id": "PRRC_kwDOAN28mc6HIlKi",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.\n+\n+![Utreexo TX relay](bip-utreexo-p2p/utreexo-tx-relay.png)\n+\n+The transaction relay for Utreexo nodes doesn't add any extra round trips.\n+However, it does include extra inventory vectors in the inv message.\n+\n+We introduce a new inventory vector type called `utreexoproofhash` which make up the extra information that a Utreexo node will receive.",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 105,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266920621,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "s/ which make/, which makes/",
      "created_at": "2025-08-11T15:42:09Z",
      "updated_at": "2025-08-11T21:32:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2267173538",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267173538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267845722",
      "pull_request_review_id": 3107530297,
      "id": 2267845722,
      "node_id": "PRRC_kwDOAN28mc6HLJRa",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 13,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Per BIPs 2 and 3, this would be \"Requires\" (and currently refers to the same BIP)\r\n\r\n```suggestion\r\nRequires: BIP-???? (Utreexo - Peer Services)\r\n```",
      "created_at": "2025-08-11T19:41:08Z",
      "updated_at": "2025-08-12T16:24:18Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2267845722",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267845722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267846287",
      "pull_request_review_id": 3107530297,
      "id": 2267846287,
      "node_id": "PRRC_kwDOAN28mc6HLJaP",
      "diff_hunk": "@@ -0,0 +1,342 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)",
      "path": "utreexo-validation-bip.md",
      "position": null,
      "original_position": 13,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Per BIPs 2 and 3, this would be \"Requires\"\r\n\r\n```suggestion\r\nRequires: BIP-???? (Utreexo Accumulator Specification)\r\n```",
      "created_at": "2025-08-11T19:41:22Z",
      "updated_at": "2025-08-11T21:52:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2267846287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267846287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267849415",
      "pull_request_review_id": 3107530297,
      "id": 2267849415,
      "node_id": "PRRC_kwDOAN28mc6HLKLH",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)",
      "path": "utreexo-accumulator-bip.md",
      "position": null,
      "original_position": 13,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Refers to the same document. If correct, this line should be dropped.",
      "created_at": "2025-08-11T19:42:33Z",
      "updated_at": "2025-08-11T21:52:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2267849415",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267849415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267860444",
      "pull_request_review_id": 3107530297,
      "id": 2267860444,
      "node_id": "PRRC_kwDOAN28mc6HLM3c",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),",
      "path": "utreexo-accumulator-bip.md",
      "position": null,
      "original_position": 56,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"increases the requirement\" -- perhaps mention here \"compared to the UTXO set\"",
      "created_at": "2025-08-11T19:47:53Z",
      "updated_at": "2025-08-11T21:52:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2267860444",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267860444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268081567",
      "pull_request_review_id": 3107530297,
      "id": 2268081567,
      "node_id": "PRRC_kwDOAN28mc6HMC2f",
      "diff_hunk": "@@ -0,0 +1,342 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.",
      "path": "utreexo-validation-bip.md",
      "position": null,
      "original_position": 39,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The preceding 3 paragraphs seem to be duplicates of the accumulator BIP that this BIP requires. Can perhaps remove them or refer to the accumulator BIP motivation.",
      "created_at": "2025-08-11T21:38:20Z",
      "updated_at": "2025-08-11T21:52:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268081567",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268081567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268096096",
      "pull_request_review_id": 3107530297,
      "id": 2268096096,
      "node_id": "PRRC_kwDOAN28mc6HMGZg",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),\n+where N is the number of elements ever added to the set, while still keeping proof sizes small and verification efficient.\n+\n+## Merkle Forest\n+\n+The Utreexo accumulator consists of a set of Merkle trees: specifically, perfect binary trees with $2^n$ elements,\n+where each node in the tree contains a 32-byte hash. The elements being stored appear at the leaves—the bottom layer of the tree.\n+The topmost node is referred to as the \"root,\" while nodes located between the leaves and the root are called \"intermediate nodes.\"\n+\n+Any integer number of elements ($N$) can be represented as a forest of such trees. On average, a set of N elements will require\n+approximately $\\frac{log₂(N)}{2}$ trees. The number and sizes of trees are determined by the binary representation of $N$:\n+each 1-bit corresponds to a tree, and its position in the binary encoding determines the size of that tree.\n+\n+For example, a forest with 5 elements (binary `0b101`) would consist of two trees: one with 4 elements (representing the 2nd bit)\n+and one with 1 element (representing the 0th bit). A forest with 8 elements (`0b1000`) would require only a single 8-element tree,\n+as 8 is a power of 2.\n+\n+More generally, for any N, the number of trees equals the number of set bits (1s) in the binary representation of N.\n+The size of each tree corresponds to the power of two represented by the position of each set bit.\n+For example, the decimal number 21 (binary `0b10101`) contains three 1-bits, meaning three trees are needed in the forest:\n+a 16-element tree ($2^4$), a 4-element tree ($2^2$), and a 1-element tree ($2^0$), with gaps at the 8-element ($2^3$)\n+and 2-element ($2^1$) positions.\n+\n+Each of the hashes in the forest can be referred by an integer label. This labeling is a convention we find easiest\n+to use but does not directly affect the design of the accumulator; other labelling systems could also work and be\n+translated to this one.\n+\n+We label positions starting at `0` on the bottom left, incrementing as we traverse the bottom row from left to right,\n+and then continue on to higher rows. There may be gaps in the label numbers when moving up a row; the label\n+numbers are \"padded out\" to the next perfect tree that could encompass the entire forest.\n+\n+For example, a forest with 8 leaves will have a single tree and positions will be labeled like this:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+While a forest with 7 leaves will look like this:\n+\n+```\n+\n+|---------------\\\n+12\n+|-------\\       |-------\\\n+08      09      10\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06\n+```\n+\n+\n+When adding another leaf to the accumulator when it's already allocated $2^N$ leaves will result in\n+the accumulator resizing to hold $2^{N+1}$ leaves. For example, when adding a leaf to the accumulator\n+state here:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+The new accumulator will look like so:\n+\n+```\n+\n+|-------------------------------\\\n+28\n+|---------------\\               |---------------\\\n+24              25\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08\n+```\n+\n+The new accumulator with all the positions:\n+\n+```\n+30\n+|-------------------------------\\\n+28                              29\n+|---------------\\               |---------------\\\n+24              25              26              27\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19      20      21      22      23\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08  09  10  11  12  13  14  15\n+```\n+\n+# Definitions\n+\n+- `hash` refers to a vector of 32 byte arrays.\n+- `[]hash` refers to a vector of `hash`.\n+- `acc` refers to the Utreexo accumulator state. An `acc` is comprised of:\n+  - `roots` refers to the roots of the Merkle Trees. Represented as `[]hash`.\n+  - `numleaves` refers to the number of total leaves added to the accumulator. Represented as uint64.\n+- `root` refers to the top `hash` in a tree in the `acc`.\n+- `proof` is an inclusion proof for elements in the accumulator. It's comprised of two fields:\n+  - `targets` are the positions of the elements being proven. Represented as a vector of uint64.\n+  - `proof` are the hashes needed to hash the roots. Represented as a `[]hash`. `proof` MUST be in ascending order by the node positions.\n+    The proof is considered invalid otherwise.\n+\n+# Specification\n+\n+The hash function SHA512/256[^2] is used for the hash operations in the accumulator.\n+\n+An Utreexo accumulator implementation MUST support these 3 operations: Addition, Verification, and Deletion.\n+\n+## Utility Functions\n+\n+The following utility functions are required for performing accumulator operations:\n+\n+**parent_hash(left, right):** Returns the hash of the concatenation of two child hashes (`left` and `right`).\n+If either child is `nil`, the result is simply the non-`nil` child (treated as if the tree has a single child at that position).\n+if both children are `nil`, the result is `nil`.\n+\n+Implementation:\n+\n+```python\n+def parent_hash(left: bytes, right: bytes) -> bytes:\n+    if right is None and left is None: return None\n+    if left is None: return right\n+    if right is None: return left\n+\n+    return sha512_256(left + right)\n+```\n+\n+**treerows(numleaves):** Returns the minimum number of bits required to represent `numleaves - 1`. This corresponds to the height of the largest tree in the forest. Returns `0` if `numleaves` is `0`.\n+\n+Implementation:\n+\n+```python\n+def treerows(numleaves: int) -> int:\n+    if numleaves == 0: return 0\n+    return (numleaves - 1).bit_length()\n+```\n+\n+**is_right_sibling(position):** Returns `true` if the given `position` corresponds to a right sibling.\n+A position is on the right side if its least significant bit (LSB) is set (i.e., `position & 1 == 1`).\n+And it is the right sibling of a **given node** if all bits but the LSB are identical.\n+\n+Implementation:\n+\n+```python\n+def is_right_sibling(position: int) -> bool:\n+    return (position & 1) == 1\n+```\n+\n+**right_sibling(position):** Returns the position of the right sibling of the given `position`.\n+If `position` is already on the right side, it returns `position` unchanged.\n+Otherwise, turning on the least significant bit moves the position to the right side.\n+\n+Implementation:\n+\n+```python\n+def right_sibling(position: int) -> int:\n+    return position | 1\n+```\n+\n+**sibling(position):** Returns the position of the sibling of the given `position`.\n+If `position` is on the right side, it returns the left sibling by turning off the least significant bit.\n+If `position` is on the left side, it returns the right sibling by turning on the least significant bit.\n+\n+Implementation:\n+\n+```python\n+def sibling(position: int) -> int:\n+    return position ^ 1\n+```\n+\n+**parent(position, total_rows):** Returns the parent position of the given `position` in an accumulator with `total_rows` tree rows.\n+\n+Implementation:\n+\n+```python\n+def parent(position: int, total_rows: int) -> int:\n+    return (position >> 1) | (1 << total_rows)\n+```\n+\n+**root_position(numleaves, row, total_rows):** Returns the position of the root at the specified `row`\n+in an accumulator with `numleaves` leaves and `total_rows` rows. Returns an undefined (garbage) value if\n+no root exists at the given row. This can be calculated as:\n+\n+Implementation:\n+\n+```python\n+def root_position(numleaves: int, row: int, total_rows: int) -> int:\n+    if row < 0 or row > total_rows:\n+        raise ValueError(\"Row must be between 0 and total_rows inclusive\")\n+\n+    mask = (2 << total_rows) - 1\n+    before = numleaves & (mask << (row + 1))\n+    shifted = (before >> row) | (mask << (total_rows + 1 - row))\n+    shifted & mask\n+```\n+\n+**root_present(numleaves, row):** Returns `true` if there is a root at the specified `row`\n+in an accumulator with `numleaves` leaves.\n+\n+Implementation:\n+\n+```python\n+def root_present(numleaves: int, row: int) -> bool:\n+    return numleaves & (1 << row) != 0\n+```\n+\n+**detect_row(position, total_rows):** Returns the row at which the given `position` resides\n+in an accumulator with `total_rows` rows.\n+\n+Implementation:\n+\n+```python\n+for row in range(total_rows, -1, -1):\n+    rowbit = 1 << row\n+    if rowbit & position == 0: return total_rows-row\n+```\n+\n+**isroot(position, numleaves, total_rows):** Returns `true` if the given `position` corresponds to a root\n+in an accumulator with `numleaves` leaves and `total_rows` rows.\n+It has the following precondition:\n+\n+Implementation:\n+\n+```python\n+def isroot(position: int, numleaves: int, total_rows: int) -> bool:\n+    row = detect_row(position, total_rows)\n+    return root_present(numleaves, row) && position == root_position(numleaves, row, total_rows)\n+```\n+\n+**getrootidx(numleaves, position):** Returns the index (within the accumulator's root list)\n+of the root that will be affected when deleting the given `position`.\n+\n+Implementation:\n+\n+```python\n+def getrootidx(numleaves: int, position: int) -> int:\n+    idx = 0\n+    for row in range(tree_rows(numleaves), -1, -1):\n+        if not root_present(numleaves, row):\n+            continue\n+        pos = position\n+        for _ in range(detect_row(position, tree_rows(numleaves)), row): pos = parent(pos, tree_rows(numleaves))\n+        if isroot(pos, numleaves, tree_rows(numleaves)):\n+            return idx\n+        idx += 1\n+```\n+\n+**getrootidxs(numleaves, positions):** Returns a list of indexes corresponding to the roots in the accumulator state\n+that will be affected when deleting the given set of `positions`.\n+This is a wrapper around **getrootidx**, applied to each position in the input list.\n+\n+Implementation:\n+\n+```python\n+def getrootidxs(numleaves: int, positions: [int]) -> [int]:\n+    return [getrootidx(numleaves, pos) for pos in positions]\n+```\n+\n+The following utility functions are required for the P2P layer:\n+\n+**max_possible_pos_at_row(row, total_rows):** Returns the greatest position the row can have in the given total rows.\n+\n+Implementation:\n+\n+```python\n+def max_possible_pos_at_row(row: int, total_rows: int) -> int:\n+    mask = (2 << total_rows) - 1\n+    return ((mask << (total_rows - row)) & mask) - 1\n+```\n+\n+**is_root_position(position, num_leaves, row):** Returns if the given position is a root with the passed in num_leaves and row.\n+\n+```python\n+def is_root_position(position: int, num_leaves: int, row: int) -> bool:\n+    root_present = (num_leaves & (1 << row)) != 0\n+    root_pos = root_position(num_leaves, row, tree_rows(num_leaves))\n+    return root_present and root_pos == position\n+```\n+\n+**proof_positions(targets, num_leaves):** Returns all the positions of the proof hashes that are required to validate the given targets.\n+\n+```python\n+def proof_positions(targets: [int], num_leaves: int) -> [int]:\n+    targets.sort()\n+\n+    next_targets = []\n+    proof_positions = []\n+\n+    total_rows = tree_rows(num_leaves)\n+    for row in range(total_rows + 1):\n+        i = 0\n+        while i < len(targets):\n+            target = targets[i]\n+\n+            if target > max_possible_pos_at_row(row, total_rows):\n+                i += 1\n+                continue\n+\n+            if row != detect_row(target, total_rows):\n+                i += 1\n+                continue\n+\n+            if is_root_position(target, num_leaves, row):\n+                i += 1\n+                continue\n+\n+            if i + 1 < len(targets) and right_sib(target) == targets[i + 1]:\n+                parent_pos = parent(target, total_rows)\n+                next_targets.append(parent_pos)\n+                targets[i] = parent_pos\n+                i += 2  # skip the sibling\n+                continue\n+\n+            # Sibling is a needed proof position\n+            proof_positions.append(sibling(target))\n+            parent_pos = parent(target, total_rows)\n+            next_targets.append(parent_pos)\n+            targets[i] = parent_pos\n+            i += 1\n+\n+        targets.sort()\n+\n+    return proof_positions\n+```\n+\n+### CalculateRoots\n+\n+Both the Verification and Deletion operations depend on the Calculate Roots function.\n+\n+- Inputs:\n+  - `acc.numleaves`.\n+  - `[]hash` that are the hashes for the `proof.targets`.\n+  - `proof`.\n+\n+The passed in `[]hash` and `proof.targets` should be in the same order. The element at index `i` in `[]hashes` should\n+be the hash for element at index `i` in `proof.targets`. Otherwise the returned roots will be invalid.\n+\n+The calculate roots algorithm is defined as `CalculateRoots(numleaves, []hash, proof) -> calculated_roots`:\n+\n+- Check if length of `proof.targets` is equal to the length of `[]hash`. Return early if they're not equal.\n+- map `proof.targets` to their hash.\n+- Sort `proof.targets`.\n+- Loop until `proof.targets` are empty:\n+  - Pop off the first target in `proof.targets`. Pop off the associated `hash` as well.\n+  - If the target is a root, we append the current position's `hash` to the calculated_roots vector and continue.\n+  - Check if the next target in `proof.targets` is the right sibling of the current target. If it is, grab its hash as the sibling hash. Otherwise the next hash in `proof.proof` is the sibling hash. Raise error if `proof.proof` is empty.\n+  - Figure out if the sibling hash is on the left or the right.\n+  - Apply *parent_hash* to the current position's `hash` and the sibling `hash` with regards to their positioning.\n+  - Calculate parent position.\n+  - Insert parent position into the sorted `proof.targets`.\n+  - Map parent hash to the parent position.\n+- Return calculated_roots\n+\n+The algorithm implemented in python:\n+\n+```python\n+def calculate_roots(numleaves: int, dels: [bytes], proof: Proof) -> [bytes]:\n+    if not proof.targets: return []\n+    if len(proof.targets) != len(dels): return []\n+\n+    position_hashes = {}\n+    for i, target in enumerate(proof.targets):\n+        position_hashes[target] = None if dels is None else dels[i]\n+\n+    calculated_roots = []\n+    sortedTargets = sorted(proof.targets)\n+    while sortedTargets:\n+        pos = sortedTargets.pop(0)\n+        cur_hash = position_hashes.pop(pos)\n+\n+        if isroot(pos, numleaves, tree_rows(numleaves)):\n+            calculated_roots.append(cur_hash)\n+            continue\n+\n+        parent_pos, p_hash = parent(pos, tree_rows(numleaves)), bytes\n+        if sortedTargets and right_sibling(pos) == sortedTargets[0]:\n+            sib_pos = sortedTargets.pop(0)\n+            p_hash = parent_hash(cur_hash, position_hashes.pop(sib_pos))\n+        else:\n+            proofhash = proof.proof.pop(0)\n+            p_hash = parent_hash(proofhash, cur_hash) if is_right_sibling(pos) else parent_hash(cur_hash, proofhash)\n+\n+        position_hashes[parent_pos] = p_hash\n+        bisect.insort(sortedTargets, parent_pos)\n+\n+    return calculated_roots\n+```\n+\n+## Addition\n+\n+Addition adds a leaf to the accumulator. The added leaves are able to be verified of their\n+existence with an inclusion proof.\n+\n+Inputs:\n+  - `acc`.\n+  - `hash` to be added.\n+\n+The Addition algorithm Add(`acc`, `hash`) is defined as:\n+\n+- From row 0 to and **including** `treerows(acc.numleaves)`\n+  - Break if there's no root at this row.\n+  - remove the last root from `acc.roots`.\n+    - Calculate the parent hash of the removed root and the `hash` to be added using *parent_hash*.\n+  - Make the result from `parent_hash` the new `hash`.\n+- Increment `acc.numleaves` by 1.\n+- Append `hash` to `acc.roots`.\n+\n+The algorithm implemented in python:\n+\n+```python\n+def add(self, hash: bytes):\n+    for row in range(tree_rows(self.numleaves)+1):\n+        if not root_present(self.numleaves, row): break\n+        root = self.roots.pop()\n+        hash = parent_hash(root, hash)\n+\n+    self.roots.append(hash)\n+    self.numleaves += 1\n+```\n+\n+## Verification\n+\n+- Inputs:\n+  - The accumulator state.\n+  - `[]hash` that are the hashes for the `proof.targets`.\n+  - `proof`.\n+\n+The Verification algorithm `Verify(acc, []hash, proof) -> bool` is defined as:\n+\n+- Raise error if length of `[]hash` differ from `proof.targets`.\n+- Get modified_roots from `CalculateRoots(acc.numleaves, []hash, Proof)`.\n+- Get `root_idxs` from `getrootidxs`.\n+- Raise error if the length of `modified_roots` and `root_idxs` do not match.\n+- Attempt to match roots in modified_roots with roots in `acc`. Raise error if we don't find all the roots in the modified_roots in `acc`.\n+- Return `true`.\n+\n+The algorithm implemented in python:\n+\n+```python\n+def verify(self, dels: [bytes], proof: Proof) -> bool:\n+    if len(dels) != len(proof.targets):\n+        raise(\"len of dels and proof.targets differ\")\n+\n+    root_candidates = calculate_roots(self.numleaves, dels, proof)\n+    root_idxs = getrootidxs(self.numleaves, proof.targets)\n+\n+    if len(root_candidates) != len(root_idxs):\n+        raise(\"length of calculated roots from the proof and expected root count differ\")\n+\n+    for i, idx in enumerate(root_idxs):\n+        if self.roots[idx] != root_candidates[i]:\n+            raise(\"calculated roots from the proof and matched roots differ\")\n+\n+    return true\n+```\n+\n+## Deletion\n+\n+Deletion removes leaves from the accumulator. The deletion algorithm takes in a `proof` but it does not\n+verify that the proof is valid. It assumes that the passed in proof has already passed verification.\n+\n+- Inputs:\n+  - The accumulator state.\n+  - `proof`.\n+\n+The Deletion algorithm `Delete(acc, Proof) -> acc` is defined as:\n+\n+- Get the modified indexes of the roots `root_idxes` from `getrootidxs`.\n+- Get modified_roots from `Calculate_Roots(acc.numleaves, []positions, Proof)`.\n+- Replace the matching indexes from the `root_idxes` in `acc.roots` with `modified_roots`.\n+\n+The algorithm implemented in python:\n+\n+```python\n+def delete(self, proof: Proof):\n+    modified_roots = calculate_roots(self.numleaves, None, proof)\n+    root_idxs = getrootidxs(self.numleaves, proof.targets)\n+    for i, idx in enumerate(root_idxs):\n+        self.roots[idx] = modified_roots[i]\n+```\n+\n+## Rationale\n+\n+**Why use a hash-based accumulator instead of something more powerful (e.g., RSA accumulators[^3], class groups[^4], etc.)?**\n+\n+While RSA accumulators and similar constructions offer significant advantages in proof size—often allowing a\n+single proof to cover an entire block's worth of UTXOs—the trade-offs in proof generation cost and latency are\n+substantial. In RSA-based designs, creating a proof for any given UTXO at arbitrary times can be computationally\n+intensive, especially as the number of UTXOs grows.\n+\n+Utreexo's design is driven by the need for Bridge Nodes: nodes that maintain backward compatibility with existing",
      "path": "utreexo-accumulator-bip.md",
      "position": 554,
      "original_position": 555,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This BIP appears to be missing a required backwards compatibility section.",
      "created_at": "2025-08-11T21:48:22Z",
      "updated_at": "2025-08-11T21:52:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268096096",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268096096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 554,
      "original_line": 554,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268118463",
      "pull_request_review_id": 3107913820,
      "id": 2268118463,
      "node_id": "PRRC_kwDOAN28mc6HML2_",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),",
      "path": "utreexo-accumulator-bip.md",
      "position": null,
      "original_position": 56,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "luisschwab",
        "id": 97608688,
        "node_id": "U_kgDOBdFj8A",
        "avatar_url": "https://avatars.githubusercontent.com/u/97608688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luisschwab",
        "html_url": "https://github.com/luisschwab",
        "followers_url": "https://api.github.com/users/luisschwab/followers",
        "following_url": "https://api.github.com/users/luisschwab/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luisschwab/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luisschwab/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luisschwab/subscriptions",
        "organizations_url": "https://api.github.com/users/luisschwab/orgs",
        "repos_url": "https://api.github.com/users/luisschwab/repos",
        "events_url": "https://api.github.com/users/luisschwab/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luisschwab/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nTo accommodate this, Utreexo increases the storage requirement for the accumulator state to $O(log_2(N))$,\r\n```\r\n\r\nLaTeX renderers don't play nice with this unicode symbol.",
      "created_at": "2025-08-11T22:05:03Z",
      "updated_at": "2025-08-11T22:06:47Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268118463",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268118463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268118700",
      "pull_request_review_id": 3107913820,
      "id": 2268118700,
      "node_id": "PRRC_kwDOAN28mc6HML6s",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),\n+where N is the number of elements ever added to the set, while still keeping proof sizes small and verification efficient.\n+\n+## Merkle Forest\n+\n+The Utreexo accumulator consists of a set of Merkle trees: specifically, perfect binary trees with $2^n$ elements,\n+where each node in the tree contains a 32-byte hash. The elements being stored appear at the leaves—the bottom layer of the tree.\n+The topmost node is referred to as the \"root,\" while nodes located between the leaves and the root are called \"intermediate nodes.\"\n+\n+Any integer number of elements ($N$) can be represented as a forest of such trees. On average, a set of N elements will require\n+approximately $\\frac{log₂(N)}{2}$ trees. The number and sizes of trees are determined by the binary representation of $N$:",
      "path": "utreexo-accumulator-bip.md",
      "position": null,
      "original_position": 66,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "luisschwab",
        "id": 97608688,
        "node_id": "U_kgDOBdFj8A",
        "avatar_url": "https://avatars.githubusercontent.com/u/97608688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luisschwab",
        "html_url": "https://github.com/luisschwab",
        "followers_url": "https://api.github.com/users/luisschwab/followers",
        "following_url": "https://api.github.com/users/luisschwab/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luisschwab/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luisschwab/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luisschwab/subscriptions",
        "organizations_url": "https://api.github.com/users/luisschwab/orgs",
        "repos_url": "https://api.github.com/users/luisschwab/repos",
        "events_url": "https://api.github.com/users/luisschwab/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luisschwab/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\napproximately $\\frac{log_2(N)}{2}$ trees. The number and sizes of trees are determined by the binary representation of $N$:\r\n```\r\n\r\nLaTeX renderers don't play nice with this unicode symbol.",
      "created_at": "2025-08-11T22:05:14Z",
      "updated_at": "2025-08-11T22:06:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268118700",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268118700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268508383",
      "pull_request_review_id": 3108452258,
      "id": 2268508383,
      "node_id": "PRRC_kwDOAN28mc6HNrDf",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.\n+\n+![Utreexo TX relay](bip-utreexo-p2p/utreexo-tx-relay.png)\n+\n+The transaction relay for Utreexo nodes doesn't add any extra round trips.\n+However, it does include extra inventory vectors in the inv message.\n+\n+We introduce a new inventory vector type called `utreexoproofhash` which make up the extra information that a Utreexo node will receive.",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 105,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266920621,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'll go with `, which makes` since `includes` sounds like the `utreexoproofhash` invvect has other information as well\n\nEDIT: Replaced with `, which makes` in the latest push",
      "created_at": "2025-08-12T03:49:15Z",
      "updated_at": "2025-08-12T06:57:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268508383",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268508383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268556363",
      "pull_request_review_id": 3108509674,
      "id": 2268556363,
      "node_id": "PRRC_kwDOAN28mc6HN2xL",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.\n+\n+![Utreexo TX relay](bip-utreexo-p2p/utreexo-tx-relay.png)\n+\n+The transaction relay for Utreexo nodes doesn't add any extra round trips.\n+However, it does include extra inventory vectors in the inv message.\n+\n+We introduce a new inventory vector type called `utreexoproofhash` which make up the extra information that a Utreexo node will receive.\n+\n+A hash with the type `utreexoproofhash` represents 4 Utreexo merkle tree positions, each of them little endian serialized and taking up 8 bytes in the 32 byte hash.\n+When sending an inv message to a Utreexo node for a tx, we append `utreexoproofhash` inventory vectors to represent the merkle tree positions for each of the UTXOs being referenced in the inputs of the tx.\n+The Utreexo merkle tree positions are explained in detail in the bip \"Utreexo Accumulator Specification\".\n+Since the hash in an inventory vector is always 32 bytes, any unused space will be padded with the max uint64 value of 18446744073709551615.\n+\n+With these merkle tree positions for the UTXOs referenced in the inputs, we can calculate the needed positions of the merkle hashes to them.\n+These positions are then sent over in the `getdata` message as an another inventory vector.\n+\n+![Utreexo TX relay multiple Utreexo proof hash vectors](bip-utreexo-p2p/utreexo-tx-relay-multiple-proofhash-vectors.png)\n+\n+There may be cases where the transaction is referencing more than 4 merkle positions.\n+In this case, the extra positions are added as another inventory vector.\n+There can be as many additional inventory vectors for the `utreexoproofhash`es as needed.\n+An inventory vector of type `utreexoproofhash` will be ignored if it's not prepended with an inventory vector of type `transaction`.\n+\n+![Utreexo TX relay with multiple txs](bip-utreexo-p2p/utreexo-tx-relay-with-multiple-txs.png)\n+\n+It's possible to have an inv message with multiple txs as well.\n+Note that an inventory vector of type `utreexoproofhash` MUST be appended to the `tx` inventory vector.\n+\n+### Block Propagation\n+\n+![Legacy Block Propagation](bip-utreexo-p2p/legacy-block-propagation.png)\n+\n+Legacy block propagation without Compact Blocks comprises of three steps:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node A sends the block data to Node B.\n+\n+![Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/legacy-block-propagation-with-utreexo-nodes.png)\n+\n+The same block propagation with Utreexo nodes will look like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node B makes a getutreexoproof request for the block.\n+4. Node A sends the block data to Node B.\n+5. Node A sends the inclusion proof to Node B.\n+\n+Note that while Node A sent the inv or the blockhash to Node B, Node B is free to ask for the Utreexo proof from a node other than Node A.\n+This allows a Utreexo node to be notified of new blocks from non-Utreexo nodes.\n+\n+Since there's no PoW required for the inclusion proof, the block may be valid and the proof may be invalid.\n+If the block header validation passed while the full block validation fails, Node B should request the inclusion proof from a different peer.\n+If the new proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+![Bandwidth Saving Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/bandwidth-saving-legacy-block-propagation-with-utreexo-nodes.png)\n+\n+Since the inclusion proof is cached for each of the transaction in the mempool, it's possible to omit the proof hashes for the input UTXOs that we can already prove on our own.\n+This method looks like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request (MSG_UTREEXO_SUMMARY) for the given blockhash.\n+3. Node A sends the utreexoblocksummary message to Node B.\n+4. Node B calculates which proof hashes and leafdatas it needs to prove this block.\n+5. Node B makes a getdata request for the block to Node A.\n+6. Node B makes a getutreexoproof request for the block to Node A.\n+7. Node A sends the block data to Node B.\n+8. Node A sends the requested inclusion proof data to Node B.\n+\n+As with the getutreexoproof message, Node B is free to ask for the utreexoblocksummary message from a node other than Node A.\n+Since there's no commitment to anything in a utreexoblocksummary message, the information given in it can be false.\n+Should the block fail to validate with this propagation, Node B should request the full proof from a different peer.\n+Should the proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+All of the above propagation works the same with Compact Block propagation as well.\n+The requester would need to send a getdata request (MSG_UTREEXO_SUMMARY) after the Compact Block propagation has concluded for high-bandwidth Compact Block propagation and after the header/inv message was received from the broadcasting peer.\n+\n+## Specification\n+\n+Several new data structures and messages are introduced to make the IBD and tx relay possible.\n+All structures are little-endian encoded unless otherwise noted.\n+\n+### New data structures\n+\n+#### Compact leaf data\n+\n+For a CSN to learn the data associated with a UTXO, it must ask for a peer that has it.\n+To authenticate this data, it is committed into the accumulator, and therefore cannot be changed by peer.\n+The committed data is defined in BIP-VALIDATION#LEAF_DATA, but for some information in the leaf data, the receiving peer might already have it, so sending it again is a waste of bandwidth.\n+To save that bandwidth, we only send a Compact Leaf Data, that contains all missing information for the receiving peer to reconstruct the full leaf data.\n+A compact leaf data is defined as:\n+\n+| Field        | type                         | Description     |\n+|--------------|------------------------------|-----------------|\n+| header code  | uint32                       | This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| amount       | int64                        | The amount in sats locked on this output |",
      "path": "utreexo-p2p-bip.md",
      "position": 194,
      "original_position": 194,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266937404,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It makes sense to have it as int64 as `CAmount` is represented as `int64` in code https://github.com/bitcoin/bitcoin/blob/273e600e65c2e31a6e9a0bd72b40672aaa503b08/src/consensus/amount.h#L12\n\nOther implementations follow this as well:https://github.com/btcsuite/btcd/blob/baebb836c2d4692da3de3b0d437f4da6ce915546/wire/msgtx.go#L337",
      "created_at": "2025-08-12T04:38:57Z",
      "updated_at": "2025-08-12T04:38:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268556363",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268556363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 194,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268584595",
      "pull_request_review_id": 3108546515,
      "id": 2268584595,
      "node_id": "PRRC_kwDOAN28mc6HN9qT",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),",
      "path": "utreexo-accumulator-bip.md",
      "position": null,
      "original_position": 56,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2267860444,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah the paragraph could be worded better.\n\nIt's referring to how the merkle forest is expanded to support more leaves. Like sparse merkle trees, you pre-allocate the Utreexo accumulator to hold 2^n leaves. If you want to hold (2^n)+1 leaves, you need to resize the accumulator to hold 2^n+1 leaves.",
      "created_at": "2025-08-12T05:03:58Z",
      "updated_at": "2025-08-12T05:03:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268584595",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268584595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268685762",
      "pull_request_review_id": 3108680478,
      "id": 2268685762,
      "node_id": "PRRC_kwDOAN28mc6HOWXC",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),",
      "path": "utreexo-accumulator-bip.md",
      "position": null,
      "original_position": 56,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2267860444,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "~~Oh I read it wrong too. It increases the requirements vs the paper referenced in [^1].~~\n\n~~Fixing this...~~\n\nChanged the sentence to improve legibility",
      "created_at": "2025-08-12T06:05:46Z",
      "updated_at": "2025-08-12T06:55:17Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268685762",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268685762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268781592",
      "pull_request_review_id": 3108812390,
      "id": 2268781592,
      "node_id": "PRRC_kwDOAN28mc6HOtwY",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),",
      "path": "utreexo-accumulator-bip.md",
      "position": null,
      "original_position": 56,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2268118463,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in the latest push",
      "created_at": "2025-08-12T06:52:39Z",
      "updated_at": "2025-08-12T06:52:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268781592",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268781592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268782264",
      "pull_request_review_id": 3108813541,
      "id": 2268782264,
      "node_id": "PRRC_kwDOAN28mc6HOt64",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),\n+where N is the number of elements ever added to the set, while still keeping proof sizes small and verification efficient.\n+\n+## Merkle Forest\n+\n+The Utreexo accumulator consists of a set of Merkle trees: specifically, perfect binary trees with $2^n$ elements,\n+where each node in the tree contains a 32-byte hash. The elements being stored appear at the leaves—the bottom layer of the tree.\n+The topmost node is referred to as the \"root,\" while nodes located between the leaves and the root are called \"intermediate nodes.\"\n+\n+Any integer number of elements ($N$) can be represented as a forest of such trees. On average, a set of N elements will require\n+approximately $\\frac{log₂(N)}{2}$ trees. The number and sizes of trees are determined by the binary representation of $N$:",
      "path": "utreexo-accumulator-bip.md",
      "position": null,
      "original_position": 66,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2268118700,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in the latest push",
      "created_at": "2025-08-12T06:52:57Z",
      "updated_at": "2025-08-12T06:52:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268782264",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268782264"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268783509",
      "pull_request_review_id": 3108815244,
      "id": 2268783509,
      "node_id": "PRRC_kwDOAN28mc6HOuOV",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 13,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2267845722,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in the latest push",
      "created_at": "2025-08-12T06:53:28Z",
      "updated_at": "2025-08-12T06:53:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268783509",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268783509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268784111",
      "pull_request_review_id": 3108815976,
      "id": 2268784111,
      "node_id": "PRRC_kwDOAN28mc6HOuXv",
      "diff_hunk": "@@ -0,0 +1,342 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)",
      "path": "utreexo-validation-bip.md",
      "position": null,
      "original_position": 13,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2267846287,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in the latest push",
      "created_at": "2025-08-12T06:53:45Z",
      "updated_at": "2025-08-12T06:53:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268784111",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268784111"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268784944",
      "pull_request_review_id": 3108817475,
      "id": 2268784944,
      "node_id": "PRRC_kwDOAN28mc6HOukw",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)",
      "path": "utreexo-accumulator-bip.md",
      "position": null,
      "original_position": 13,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2267849415,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Dropped in the latest push",
      "created_at": "2025-08-12T06:54:05Z",
      "updated_at": "2025-08-12T06:54:05Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268784944",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268784944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268789478",
      "pull_request_review_id": 3108824269,
      "id": 2268789478,
      "node_id": "PRRC_kwDOAN28mc6HOvrm",
      "diff_hunk": "@@ -0,0 +1,342 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.",
      "path": "utreexo-validation-bip.md",
      "position": null,
      "original_position": 39,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2268081567,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed the preceding 3 paragraphs in the latest push",
      "created_at": "2025-08-12T06:56:04Z",
      "updated_at": "2025-08-12T06:56:04Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268789478",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268789478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268790205",
      "pull_request_review_id": 3108825607,
      "id": 2268790205,
      "node_id": "PRRC_kwDOAN28mc6HOv29",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),\n+where N is the number of elements ever added to the set, while still keeping proof sizes small and verification efficient.\n+\n+## Merkle Forest\n+\n+The Utreexo accumulator consists of a set of Merkle trees: specifically, perfect binary trees with $2^n$ elements,\n+where each node in the tree contains a 32-byte hash. The elements being stored appear at the leaves—the bottom layer of the tree.\n+The topmost node is referred to as the \"root,\" while nodes located between the leaves and the root are called \"intermediate nodes.\"\n+\n+Any integer number of elements ($N$) can be represented as a forest of such trees. On average, a set of N elements will require\n+approximately $\\frac{log₂(N)}{2}$ trees. The number and sizes of trees are determined by the binary representation of $N$:\n+each 1-bit corresponds to a tree, and its position in the binary encoding determines the size of that tree.\n+\n+For example, a forest with 5 elements (binary `0b101`) would consist of two trees: one with 4 elements (representing the 2nd bit)\n+and one with 1 element (representing the 0th bit). A forest with 8 elements (`0b1000`) would require only a single 8-element tree,\n+as 8 is a power of 2.\n+\n+More generally, for any N, the number of trees equals the number of set bits (1s) in the binary representation of N.\n+The size of each tree corresponds to the power of two represented by the position of each set bit.\n+For example, the decimal number 21 (binary `0b10101`) contains three 1-bits, meaning three trees are needed in the forest:\n+a 16-element tree ($2^4$), a 4-element tree ($2^2$), and a 1-element tree ($2^0$), with gaps at the 8-element ($2^3$)\n+and 2-element ($2^1$) positions.\n+\n+Each of the hashes in the forest can be referred by an integer label. This labeling is a convention we find easiest\n+to use but does not directly affect the design of the accumulator; other labelling systems could also work and be\n+translated to this one.\n+\n+We label positions starting at `0` on the bottom left, incrementing as we traverse the bottom row from left to right,\n+and then continue on to higher rows. There may be gaps in the label numbers when moving up a row; the label\n+numbers are \"padded out\" to the next perfect tree that could encompass the entire forest.\n+\n+For example, a forest with 8 leaves will have a single tree and positions will be labeled like this:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+While a forest with 7 leaves will look like this:\n+\n+```\n+\n+|---------------\\\n+12\n+|-------\\       |-------\\\n+08      09      10\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06\n+```\n+\n+\n+When adding another leaf to the accumulator when it's already allocated $2^N$ leaves will result in\n+the accumulator resizing to hold $2^{N+1}$ leaves. For example, when adding a leaf to the accumulator\n+state here:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+The new accumulator will look like so:\n+\n+```\n+\n+|-------------------------------\\\n+28\n+|---------------\\               |---------------\\\n+24              25\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08\n+```\n+\n+The new accumulator with all the positions:\n+\n+```\n+30\n+|-------------------------------\\\n+28                              29\n+|---------------\\               |---------------\\\n+24              25              26              27\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19      20      21      22      23\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08  09  10  11  12  13  14  15\n+```\n+\n+# Definitions\n+\n+- `hash` refers to a vector of 32 byte arrays.\n+- `[]hash` refers to a vector of `hash`.\n+- `acc` refers to the Utreexo accumulator state. An `acc` is comprised of:\n+  - `roots` refers to the roots of the Merkle Trees. Represented as `[]hash`.\n+  - `numleaves` refers to the number of total leaves added to the accumulator. Represented as uint64.\n+- `root` refers to the top `hash` in a tree in the `acc`.\n+- `proof` is an inclusion proof for elements in the accumulator. It's comprised of two fields:\n+  - `targets` are the positions of the elements being proven. Represented as a vector of uint64.\n+  - `proof` are the hashes needed to hash the roots. Represented as a `[]hash`. `proof` MUST be in ascending order by the node positions.\n+    The proof is considered invalid otherwise.\n+\n+# Specification\n+\n+The hash function SHA512/256[^2] is used for the hash operations in the accumulator.\n+\n+An Utreexo accumulator implementation MUST support these 3 operations: Addition, Verification, and Deletion.\n+\n+## Utility Functions\n+\n+The following utility functions are required for performing accumulator operations:\n+\n+**parent_hash(left, right):** Returns the hash of the concatenation of two child hashes (`left` and `right`).\n+If either child is `nil`, the result is simply the non-`nil` child (treated as if the tree has a single child at that position).\n+if both children are `nil`, the result is `nil`.\n+\n+Implementation:\n+\n+```python\n+def parent_hash(left: bytes, right: bytes) -> bytes:\n+    if right is None and left is None: return None\n+    if left is None: return right\n+    if right is None: return left\n+\n+    return sha512_256(left + right)\n+```\n+\n+**treerows(numleaves):** Returns the minimum number of bits required to represent `numleaves - 1`. This corresponds to the height of the largest tree in the forest. Returns `0` if `numleaves` is `0`.\n+\n+Implementation:\n+\n+```python\n+def treerows(numleaves: int) -> int:\n+    if numleaves == 0: return 0\n+    return (numleaves - 1).bit_length()\n+```\n+\n+**is_right_sibling(position):** Returns `true` if the given `position` corresponds to a right sibling.\n+A position is on the right side if its least significant bit (LSB) is set (i.e., `position & 1 == 1`).\n+And it is the right sibling of a **given node** if all bits but the LSB are identical.\n+\n+Implementation:\n+\n+```python\n+def is_right_sibling(position: int) -> bool:\n+    return (position & 1) == 1\n+```\n+\n+**right_sibling(position):** Returns the position of the right sibling of the given `position`.\n+If `position` is already on the right side, it returns `position` unchanged.\n+Otherwise, turning on the least significant bit moves the position to the right side.\n+\n+Implementation:\n+\n+```python\n+def right_sibling(position: int) -> int:\n+    return position | 1\n+```\n+\n+**sibling(position):** Returns the position of the sibling of the given `position`.\n+If `position` is on the right side, it returns the left sibling by turning off the least significant bit.\n+If `position` is on the left side, it returns the right sibling by turning on the least significant bit.\n+\n+Implementation:\n+\n+```python\n+def sibling(position: int) -> int:\n+    return position ^ 1\n+```\n+\n+**parent(position, total_rows):** Returns the parent position of the given `position` in an accumulator with `total_rows` tree rows.\n+\n+Implementation:\n+\n+```python\n+def parent(position: int, total_rows: int) -> int:\n+    return (position >> 1) | (1 << total_rows)\n+```\n+\n+**root_position(numleaves, row, total_rows):** Returns the position of the root at the specified `row`\n+in an accumulator with `numleaves` leaves and `total_rows` rows. Returns an undefined (garbage) value if\n+no root exists at the given row. This can be calculated as:\n+\n+Implementation:\n+\n+```python\n+def root_position(numleaves: int, row: int, total_rows: int) -> int:\n+    if row < 0 or row > total_rows:\n+        raise ValueError(\"Row must be between 0 and total_rows inclusive\")\n+\n+    mask = (2 << total_rows) - 1\n+    before = numleaves & (mask << (row + 1))\n+    shifted = (before >> row) | (mask << (total_rows + 1 - row))\n+    shifted & mask\n+```\n+\n+**root_present(numleaves, row):** Returns `true` if there is a root at the specified `row`\n+in an accumulator with `numleaves` leaves.\n+\n+Implementation:\n+\n+```python\n+def root_present(numleaves: int, row: int) -> bool:\n+    return numleaves & (1 << row) != 0\n+```\n+\n+**detect_row(position, total_rows):** Returns the row at which the given `position` resides\n+in an accumulator with `total_rows` rows.\n+\n+Implementation:\n+\n+```python\n+for row in range(total_rows, -1, -1):\n+    rowbit = 1 << row\n+    if rowbit & position == 0: return total_rows-row\n+```\n+\n+**isroot(position, numleaves, total_rows):** Returns `true` if the given `position` corresponds to a root\n+in an accumulator with `numleaves` leaves and `total_rows` rows.\n+It has the following precondition:\n+\n+Implementation:\n+\n+```python\n+def isroot(position: int, numleaves: int, total_rows: int) -> bool:\n+    row = detect_row(position, total_rows)\n+    return root_present(numleaves, row) && position == root_position(numleaves, row, total_rows)\n+```\n+\n+**getrootidx(numleaves, position):** Returns the index (within the accumulator's root list)\n+of the root that will be affected when deleting the given `position`.\n+\n+Implementation:\n+\n+```python\n+def getrootidx(numleaves: int, position: int) -> int:\n+    idx = 0\n+    for row in range(tree_rows(numleaves), -1, -1):\n+        if not root_present(numleaves, row):\n+            continue\n+        pos = position\n+        for _ in range(detect_row(position, tree_rows(numleaves)), row): pos = parent(pos, tree_rows(numleaves))\n+        if isroot(pos, numleaves, tree_rows(numleaves)):\n+            return idx\n+        idx += 1\n+```\n+\n+**getrootidxs(numleaves, positions):** Returns a list of indexes corresponding to the roots in the accumulator state\n+that will be affected when deleting the given set of `positions`.\n+This is a wrapper around **getrootidx**, applied to each position in the input list.\n+\n+Implementation:\n+\n+```python\n+def getrootidxs(numleaves: int, positions: [int]) -> [int]:\n+    return [getrootidx(numleaves, pos) for pos in positions]\n+```\n+\n+The following utility functions are required for the P2P layer:\n+\n+**max_possible_pos_at_row(row, total_rows):** Returns the greatest position the row can have in the given total rows.\n+\n+Implementation:\n+\n+```python\n+def max_possible_pos_at_row(row: int, total_rows: int) -> int:\n+    mask = (2 << total_rows) - 1\n+    return ((mask << (total_rows - row)) & mask) - 1\n+```\n+\n+**is_root_position(position, num_leaves, row):** Returns if the given position is a root with the passed in num_leaves and row.\n+\n+```python\n+def is_root_position(position: int, num_leaves: int, row: int) -> bool:\n+    root_present = (num_leaves & (1 << row)) != 0\n+    root_pos = root_position(num_leaves, row, tree_rows(num_leaves))\n+    return root_present and root_pos == position\n+```\n+\n+**proof_positions(targets, num_leaves):** Returns all the positions of the proof hashes that are required to validate the given targets.\n+\n+```python\n+def proof_positions(targets: [int], num_leaves: int) -> [int]:\n+    targets.sort()\n+\n+    next_targets = []\n+    proof_positions = []\n+\n+    total_rows = tree_rows(num_leaves)\n+    for row in range(total_rows + 1):\n+        i = 0\n+        while i < len(targets):\n+            target = targets[i]\n+\n+            if target > max_possible_pos_at_row(row, total_rows):\n+                i += 1\n+                continue\n+\n+            if row != detect_row(target, total_rows):\n+                i += 1\n+                continue\n+\n+            if is_root_position(target, num_leaves, row):\n+                i += 1\n+                continue\n+\n+            if i + 1 < len(targets) and right_sib(target) == targets[i + 1]:\n+                parent_pos = parent(target, total_rows)\n+                next_targets.append(parent_pos)\n+                targets[i] = parent_pos\n+                i += 2  # skip the sibling\n+                continue\n+\n+            # Sibling is a needed proof position\n+            proof_positions.append(sibling(target))\n+            parent_pos = parent(target, total_rows)\n+            next_targets.append(parent_pos)\n+            targets[i] = parent_pos\n+            i += 1\n+\n+        targets.sort()\n+\n+    return proof_positions\n+```\n+\n+### CalculateRoots\n+\n+Both the Verification and Deletion operations depend on the Calculate Roots function.\n+\n+- Inputs:\n+  - `acc.numleaves`.\n+  - `[]hash` that are the hashes for the `proof.targets`.\n+  - `proof`.\n+\n+The passed in `[]hash` and `proof.targets` should be in the same order. The element at index `i` in `[]hashes` should\n+be the hash for element at index `i` in `proof.targets`. Otherwise the returned roots will be invalid.\n+\n+The calculate roots algorithm is defined as `CalculateRoots(numleaves, []hash, proof) -> calculated_roots`:\n+\n+- Check if length of `proof.targets` is equal to the length of `[]hash`. Return early if they're not equal.\n+- map `proof.targets` to their hash.\n+- Sort `proof.targets`.\n+- Loop until `proof.targets` are empty:\n+  - Pop off the first target in `proof.targets`. Pop off the associated `hash` as well.\n+  - If the target is a root, we append the current position's `hash` to the calculated_roots vector and continue.\n+  - Check if the next target in `proof.targets` is the right sibling of the current target. If it is, grab its hash as the sibling hash. Otherwise the next hash in `proof.proof` is the sibling hash. Raise error if `proof.proof` is empty.\n+  - Figure out if the sibling hash is on the left or the right.\n+  - Apply *parent_hash* to the current position's `hash` and the sibling `hash` with regards to their positioning.\n+  - Calculate parent position.\n+  - Insert parent position into the sorted `proof.targets`.\n+  - Map parent hash to the parent position.\n+- Return calculated_roots\n+\n+The algorithm implemented in python:\n+\n+```python\n+def calculate_roots(numleaves: int, dels: [bytes], proof: Proof) -> [bytes]:\n+    if not proof.targets: return []\n+    if len(proof.targets) != len(dels): return []\n+\n+    position_hashes = {}\n+    for i, target in enumerate(proof.targets):\n+        position_hashes[target] = None if dels is None else dels[i]\n+\n+    calculated_roots = []\n+    sortedTargets = sorted(proof.targets)\n+    while sortedTargets:\n+        pos = sortedTargets.pop(0)\n+        cur_hash = position_hashes.pop(pos)\n+\n+        if isroot(pos, numleaves, tree_rows(numleaves)):\n+            calculated_roots.append(cur_hash)\n+            continue\n+\n+        parent_pos, p_hash = parent(pos, tree_rows(numleaves)), bytes\n+        if sortedTargets and right_sibling(pos) == sortedTargets[0]:\n+            sib_pos = sortedTargets.pop(0)\n+            p_hash = parent_hash(cur_hash, position_hashes.pop(sib_pos))\n+        else:\n+            proofhash = proof.proof.pop(0)\n+            p_hash = parent_hash(proofhash, cur_hash) if is_right_sibling(pos) else parent_hash(cur_hash, proofhash)\n+\n+        position_hashes[parent_pos] = p_hash\n+        bisect.insort(sortedTargets, parent_pos)\n+\n+    return calculated_roots\n+```\n+\n+## Addition\n+\n+Addition adds a leaf to the accumulator. The added leaves are able to be verified of their\n+existence with an inclusion proof.\n+\n+Inputs:\n+  - `acc`.\n+  - `hash` to be added.\n+\n+The Addition algorithm Add(`acc`, `hash`) is defined as:\n+\n+- From row 0 to and **including** `treerows(acc.numleaves)`\n+  - Break if there's no root at this row.\n+  - remove the last root from `acc.roots`.\n+    - Calculate the parent hash of the removed root and the `hash` to be added using *parent_hash*.\n+  - Make the result from `parent_hash` the new `hash`.\n+- Increment `acc.numleaves` by 1.\n+- Append `hash` to `acc.roots`.\n+\n+The algorithm implemented in python:\n+\n+```python\n+def add(self, hash: bytes):\n+    for row in range(tree_rows(self.numleaves)+1):\n+        if not root_present(self.numleaves, row): break\n+        root = self.roots.pop()\n+        hash = parent_hash(root, hash)\n+\n+    self.roots.append(hash)\n+    self.numleaves += 1\n+```\n+\n+## Verification\n+\n+- Inputs:\n+  - The accumulator state.\n+  - `[]hash` that are the hashes for the `proof.targets`.\n+  - `proof`.\n+\n+The Verification algorithm `Verify(acc, []hash, proof) -> bool` is defined as:\n+\n+- Raise error if length of `[]hash` differ from `proof.targets`.\n+- Get modified_roots from `CalculateRoots(acc.numleaves, []hash, Proof)`.\n+- Get `root_idxs` from `getrootidxs`.\n+- Raise error if the length of `modified_roots` and `root_idxs` do not match.\n+- Attempt to match roots in modified_roots with roots in `acc`. Raise error if we don't find all the roots in the modified_roots in `acc`.\n+- Return `true`.\n+\n+The algorithm implemented in python:\n+\n+```python\n+def verify(self, dels: [bytes], proof: Proof) -> bool:\n+    if len(dels) != len(proof.targets):\n+        raise(\"len of dels and proof.targets differ\")\n+\n+    root_candidates = calculate_roots(self.numleaves, dels, proof)\n+    root_idxs = getrootidxs(self.numleaves, proof.targets)\n+\n+    if len(root_candidates) != len(root_idxs):\n+        raise(\"length of calculated roots from the proof and expected root count differ\")\n+\n+    for i, idx in enumerate(root_idxs):\n+        if self.roots[idx] != root_candidates[i]:\n+            raise(\"calculated roots from the proof and matched roots differ\")\n+\n+    return true\n+```\n+\n+## Deletion\n+\n+Deletion removes leaves from the accumulator. The deletion algorithm takes in a `proof` but it does not\n+verify that the proof is valid. It assumes that the passed in proof has already passed verification.\n+\n+- Inputs:\n+  - The accumulator state.\n+  - `proof`.\n+\n+The Deletion algorithm `Delete(acc, Proof) -> acc` is defined as:\n+\n+- Get the modified indexes of the roots `root_idxes` from `getrootidxs`.\n+- Get modified_roots from `Calculate_Roots(acc.numleaves, []positions, Proof)`.\n+- Replace the matching indexes from the `root_idxes` in `acc.roots` with `modified_roots`.\n+\n+The algorithm implemented in python:\n+\n+```python\n+def delete(self, proof: Proof):\n+    modified_roots = calculate_roots(self.numleaves, None, proof)\n+    root_idxs = getrootidxs(self.numleaves, proof.targets)\n+    for i, idx in enumerate(root_idxs):\n+        self.roots[idx] = modified_roots[i]\n+```\n+\n+## Rationale\n+\n+**Why use a hash-based accumulator instead of something more powerful (e.g., RSA accumulators[^3], class groups[^4], etc.)?**\n+\n+While RSA accumulators and similar constructions offer significant advantages in proof size—often allowing a\n+single proof to cover an entire block's worth of UTXOs—the trade-offs in proof generation cost and latency are\n+substantial. In RSA-based designs, creating a proof for any given UTXO at arbitrary times can be computationally\n+intensive, especially as the number of UTXOs grows.\n+\n+Utreexo's design is driven by the need for Bridge Nodes: nodes that maintain backward compatibility with existing",
      "path": "utreexo-accumulator-bip.md",
      "position": 554,
      "original_position": 555,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2268096096,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a backwards compatibility section",
      "created_at": "2025-08-12T06:56:25Z",
      "updated_at": "2025-08-12T06:56:25Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268790205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268790205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 554,
      "original_line": 554,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268790682",
      "pull_request_review_id": 3108826305,
      "id": 2268790682,
      "node_id": "PRRC_kwDOAN28mc6HOv-a",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 26,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266894044,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in the latest push",
      "created_at": "2025-08-12T06:56:38Z",
      "updated_at": "2025-08-12T06:56:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268790682",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268790682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268791138",
      "pull_request_review_id": 3108826843,
      "id": 2268791138,
      "node_id": "PRRC_kwDOAN28mc6HOwFi",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 27,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266895876,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in the latest push",
      "created_at": "2025-08-12T06:56:50Z",
      "updated_at": "2025-08-12T06:56:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268791138",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268791138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268791526",
      "pull_request_review_id": 3108827321,
      "id": 2268791526,
      "node_id": "PRRC_kwDOAN28mc6HOwLm",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 50,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266899583,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in the latest push",
      "created_at": "2025-08-12T06:57:00Z",
      "updated_at": "2025-08-12T06:57:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268791526",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268791526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268792149",
      "pull_request_review_id": 3108828384,
      "id": 2268792149,
      "node_id": "PRRC_kwDOAN28mc6HOwVV",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.",
      "path": "utreexo-p2p-bip.md",
      "position": null,
      "original_position": 98,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266915855,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed in the latest push",
      "created_at": "2025-08-12T06:57:15Z",
      "updated_at": "2025-08-12T06:57:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268792149",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268792149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    }
  ]
}