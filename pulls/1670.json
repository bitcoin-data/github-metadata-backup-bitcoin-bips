{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1670",
    "id": 2096169006,
    "node_id": "PR_kwDOAN28mc588QAu",
    "html_url": "https://github.com/bitcoin/bips/pull/1670",
    "diff_url": "https://github.com/bitcoin/bips/pull/1670.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1670.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1670/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/85348c01ff840d77302013db0540897fafbd8e6d",
    "number": 1670,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "BIP-360: QuBit - P2QRH spending rules",
    "user": {
      "login": "cryptoquick",
      "id": 285690,
      "node_id": "MDQ6VXNlcjI4NTY5MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cryptoquick",
      "html_url": "https://github.com/cryptoquick",
      "followers_url": "https://api.github.com/users/cryptoquick/followers",
      "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
      "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
      "repos_url": "https://api.github.com/users/cryptoquick/repos",
      "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This spent several months gathering feedback from the mailing list and from other advisors. This is hopefully polished enough to submit upstream.\r\n\r\nLet me know if you have any questions or feedback, and of course feel free to submit suggestions.\r\n\r\nThank you for your time.",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2024-09-27T16:08:30Z",
    "updated_at": "2024-12-18T21:49:51Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merge_commit_sha": "dd7a8c8d0d18f35740f04acb6c86624b81609595",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "cryptoquick:p2qrh",
      "ref": "p2qrh",
      "sha": "85348c01ff840d77302013db0540897fafbd8e6d",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 800253367,
        "node_id": "R_kgDOL7Lltw",
        "name": "bips",
        "full_name": "cryptoquick/bips",
        "owner": {
          "login": "cryptoquick",
          "id": 285690,
          "node_id": "MDQ6VXNlcjI4NTY5MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cryptoquick",
          "html_url": "https://github.com/cryptoquick",
          "followers_url": "https://api.github.com/users/cryptoquick/followers",
          "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
          "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
          "repos_url": "https://api.github.com/users/cryptoquick/repos",
          "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/cryptoquick/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/cryptoquick/bips",
        "archive_url": "https://api.github.com/repos/cryptoquick/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/cryptoquick/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/cryptoquick/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/cryptoquick/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/cryptoquick/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/cryptoquick/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/cryptoquick/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/cryptoquick/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/cryptoquick/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/cryptoquick/bips/contributors",
        "deployments_url": "https://api.github.com/repos/cryptoquick/bips/deployments",
        "downloads_url": "https://api.github.com/repos/cryptoquick/bips/downloads",
        "events_url": "https://api.github.com/repos/cryptoquick/bips/events",
        "forks_url": "https://api.github.com/repos/cryptoquick/bips/forks",
        "git_commits_url": "https://api.github.com/repos/cryptoquick/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/cryptoquick/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/cryptoquick/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/cryptoquick/bips.git",
        "issue_comment_url": "https://api.github.com/repos/cryptoquick/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/cryptoquick/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/cryptoquick/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/cryptoquick/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/cryptoquick/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/cryptoquick/bips/languages",
        "merges_url": "https://api.github.com/repos/cryptoquick/bips/merges",
        "milestones_url": "https://api.github.com/repos/cryptoquick/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/cryptoquick/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/cryptoquick/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/cryptoquick/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:cryptoquick/bips.git",
        "stargazers_url": "https://api.github.com/repos/cryptoquick/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/cryptoquick/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/cryptoquick/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/cryptoquick/bips/subscription",
        "tags_url": "https://api.github.com/repos/cryptoquick/bips/tags",
        "teams_url": "https://api.github.com/repos/cryptoquick/bips/teams",
        "trees_url": "https://api.github.com/repos/cryptoquick/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/cryptoquick/bips.git",
        "hooks_url": "https://api.github.com/repos/cryptoquick/bips/hooks",
        "svn_url": "https://github.com/cryptoquick/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 4,
        "stargazers_count": 13,
        "watchers_count": 13,
        "size": 15710,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-12-18T21:49:20Z",
        "created_at": "2024-05-14T01:43:35Z",
        "updated_at": "2024-12-17T18:02:47Z",
        "allow_forking": true
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "8e59f7414bef6203809deaad972a3d7a3a0c2f7a",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5436,
        "stargazers_count": 9544,
        "watchers_count": 9544,
        "size": 15708,
        "default_branch": "master",
        "open_issues_count": 42,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-12-18T15:25:08Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2024-12-18T18:02:10Z",
        "allow_forking": true
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
      }
    },
    "author_association": "NONE",
    "draft": false,
    "additions": 604,
    "deletions": 0,
    "changed_files": 3,
    "commits": 25,
    "review_comments": 68,
    "comments": 17
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDFmYTI0ODUwNmUyYmVkZDdlY2Y4ZjA0ZDE3ODRlNjMxNDdmNWMxODE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1fa248506e2bedd7ecf8f04d1784e63147f5c181",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1fa248506e2bedd7ecf8f04d1784e63147f5c181",
      "tree": {
        "sha": "11f8127cae693badeca5371294c3e243ef32f86e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/11f8127cae693badeca5371294c3e243ef32f86e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 11f8127cae693badeca5371294c3e243ef32f86e\nparent a1be309f91f70b855626c823af317d9b1163309e\nauthor Hunter Trujillo <cryptoquick@pm.me> 1727453114 -0600\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1727453114 -0600\n\nQuBit - P2QRH spending rules - Final draft before submitting upstream to bitcoin/bips\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZvbXugAKCRBn2nwXlg36\nzz7XAP44btwYcvPB8NI+9Ep066TcquKQRAUKqwqkA39Yx8QjiQD+KH4qUCmIc9v+\nUc1AMC/TIM2KB7M+MuppEy3Di6zW+gI=\n=PuKN\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a1be309f91f70b855626c823af317d9b1163309e",
          "sha": "a1be309f91f70b855626c823af317d9b1163309e",
          "html_url": "https://github.com/bitcoin/bips/commit/a1be309f91f70b855626c823af317d9b1163309e"
        }
      ],
      "message": "QuBit - P2QRH spending rules - Final draft before submitting upstream to bitcoin/bips",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-09-27T16:05:14Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-09-27T16:05:14Z"
      },
      "sha": "1fa248506e2bedd7ecf8f04d1784e63147f5c181"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDZmNjdhM2Q2ODYwOTIxYmY4Njk0MDRlMTQyMzk1ODFjMTM5ZmY2OWQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6f67a3d6860921bf869404e14239581c139ff69d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6f67a3d6860921bf869404e14239581c139ff69d",
      "tree": {
        "sha": "aeeedde1962af0f58422ec867b9573cbada480d3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/aeeedde1962af0f58422ec867b9573cbada480d3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree aeeedde1962af0f58422ec867b9573cbada480d3\nparent 1fa248506e2bedd7ecf8f04d1784e63147f5c181\nauthor Hunter Trujillo <cryptoquick@pm.me> 1727454221 -0600\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1727454221 -0600\n\nAdd pqNTRUsign to .typos.toml.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZvbcDQAKCRBn2nwXlg36\nz2gpAP9qbYK4i8COGGKDQ8+KYAcZUmi9MkJ2pXJx8vkemaZHjQD9HDA9Pk9oBG9J\n8OiF0LC34jyufp6dEyBJzC+VaebQCgQ=\n=lJgQ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1fa248506e2bedd7ecf8f04d1784e63147f5c181",
          "sha": "1fa248506e2bedd7ecf8f04d1784e63147f5c181",
          "html_url": "https://github.com/bitcoin/bips/commit/1fa248506e2bedd7ecf8f04d1784e63147f5c181"
        }
      ],
      "message": "Add pqNTRUsign to .typos.toml.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-09-27T16:23:41Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-09-27T16:23:41Z"
      },
      "sha": "6f67a3d6860921bf869404e14239581c139ff69d"
    },
    {
      "event": "convert_to_draft",
      "id": 14434743535,
      "node_id": "CTDE_lADOAN28mc6YMAnczwAAAANcYLTv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14434743535",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-27T18:18:58Z"
    },
    {
      "event": "reviewed",
      "id": 2334631534,
      "node_id": "PRR_kwDOAN28mc6LJ6Zu",
      "url": null,
      "actor": null,
      "commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2334631534",
      "submitted_at": "2024-09-27T20:55:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "reviewed",
      "id": 2334635312,
      "node_id": "PRR_kwDOAN28mc6LJ7Uw",
      "url": null,
      "actor": null,
      "commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2334635312",
      "submitted_at": "2024-09-27T20:59:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "reviewed",
      "id": 2334683627,
      "node_id": "PRR_kwDOAN28mc6LKHHr",
      "url": null,
      "actor": null,
      "commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2334683627",
      "submitted_at": "2024-09-27T21:41:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "labeled",
      "id": 14437289209,
      "node_id": "LE_lADOAN28mc6YMAnczwAAAANch4z5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14437289209",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-27T22:04:43Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 2334779205,
      "node_id": "PRR_kwDOAN28mc6LKedF",
      "url": null,
      "actor": null,
      "commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Interesting (the question of resistance to quantum computing may have resurged lately with the publication of https://scottaaronson.blog/?p=8329, see also https://x.com/n1ckler/status/1839215426091249778).",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2334779205",
      "submitted_at": "2024-09-27T22:56:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14441868370,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANczWxS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14441868370",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b6ed2c319b72d76e0d1270aa9d963f7326fc412a",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/b6ed2c319b72d76e0d1270aa9d963f7326fc412a",
      "created_at": "2024-09-28T18:00:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14441871643,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANczXkb",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14441871643",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d6d15ad21c8cc20838b5bf5f5848833b47cbf83f",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/d6d15ad21c8cc20838b5bf5f5848833b47cbf83f",
      "created_at": "2024-09-28T18:01:52Z"
    },
    {
      "event": "reviewed",
      "id": 2335387538,
      "node_id": "PRR_kwDOAN28mc6LMy-S",
      "url": null,
      "actor": null,
      "commit_id": "d6d15ad21c8cc20838b5bf5f5848833b47cbf83f",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "kingcathy23",
        "id": 115429405,
        "node_id": "U_kgDOBuFQHQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/115429405?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kingcathy23",
        "html_url": "https://github.com/kingcathy23",
        "followers_url": "https://api.github.com/users/kingcathy23/followers",
        "following_url": "https://api.github.com/users/kingcathy23/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kingcathy23/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kingcathy23/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kingcathy23/subscriptions",
        "organizations_url": "https://api.github.com/users/kingcathy23/orgs",
        "repos_url": "https://api.github.com/users/kingcathy23/repos",
        "events_url": "https://api.github.com/users/kingcathy23/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kingcathy23/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2335387538",
      "submitted_at": "2024-09-28T18:10:24Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14441888946,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANczbyy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14441888946",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0608cc1036b80bb4a32e87f00ba599750a125859",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/0608cc1036b80bb4a32e87f00ba599750a125859",
      "created_at": "2024-09-28T18:10:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14441891650,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANczcdC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14441891650",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a595bf01255ba1461bbe67eaa22a97aac71abd48",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/a595bf01255ba1461bbe67eaa22a97aac71abd48",
      "created_at": "2024-09-28T18:12:10Z"
    },
    {
      "event": "review_requested",
      "id": 14441984555,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAANczzIr",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14441984555",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-28T18:55:48Z",
      "requested_reviewer": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 14441984579,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAANczzJD",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14441984579",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-28T18:55:49Z",
      "requested_reviewer": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14444058416,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANc7tcw",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14444058416",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eae4707e74805435e3e57d0bb1902d9313955ef3",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/eae4707e74805435e3e57d0bb1902d9313955ef3",
      "created_at": "2024-09-29T07:22:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14454505029,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANdjj5F",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14454505029",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "19d45929a2229b03d26503b6530eeed1524ff31f",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/19d45929a2229b03d26503b6530eeed1524ff31f",
      "created_at": "2024-09-30T11:37:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14454584693,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANdj3V1",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14454584693",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7f4456de30db2528bcfc1dddbbc3c7533169646a",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/7f4456de30db2528bcfc1dddbbc3c7533169646a",
      "created_at": "2024-09-30T11:42:50Z"
    },
    {
      "event": "reviewed",
      "id": 2338756440,
      "node_id": "PRR_kwDOAN28mc6LZpdY",
      "url": null,
      "actor": null,
      "commit_id": "7f4456de30db2528bcfc1dddbbc3c7533169646a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2338756440",
      "submitted_at": "2024-09-30T23:02:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQ4M2MyOWQ1OWI3ODQ0M2UyMGEwNDAzOTVjYTIzNzc3YmZjMzMyZjE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d83c29d59b78443e20a040395ca23777bfc332f1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d83c29d59b78443e20a040395ca23777bfc332f1",
      "tree": {
        "sha": "474b9cd02dfdee6322b2473c3ec493d21640d647",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/474b9cd02dfdee6322b2473c3ec493d21640d647"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 474b9cd02dfdee6322b2473c3ec493d21640d647\nparent 6f67a3d6860921bf869404e14239581c139ff69d\nauthor Hunter Trujillo <cryptoquick@pm.me> 1727546251 -0600\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1727744601 -0600\n\nQuBit - P2QRH\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZvtKWQAKCRBn2nwXlg36\nz9TMAP9FeMMUBGFOULw8dUir73X3RTbrNsLItKS6WnVlkIxK3wEA8ZAIxxsh7G0C\np12I+cGnzAJax9BrfFBM5H7ztSYEhgA=\n=AfXF\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6f67a3d6860921bf869404e14239581c139ff69d",
          "sha": "6f67a3d6860921bf869404e14239581c139ff69d",
          "html_url": "https://github.com/bitcoin/bips/commit/6f67a3d6860921bf869404e14239581c139ff69d"
        }
      ],
      "message": "QuBit - P2QRH",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-10-01T01:03:21Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-09-28T17:57:31Z"
      },
      "sha": "d83c29d59b78443e20a040395ca23777bfc332f1"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14464462151,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANeJi1H",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14464462151",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d83c29d59b78443e20a040395ca23777bfc332f1",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/d83c29d59b78443e20a040395ca23777bfc332f1",
      "created_at": "2024-10-01T01:03:25Z"
    },
    {
      "event": "commented",
      "id": 2386654766,
      "node_id": "IC_kwDOAN28mc6OQXYu",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2386654766",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T18:09:31Z",
      "updated_at": "2024-10-01T18:17:06Z",
      "author_association": "MEMBER",
      "body": "@cryptoquick Can you begin to write up the sections currently marked as TBD, along with a backwards compatibility section (to describe incompatibilities, severity, and suggest mitigations, where applicable/relevant)?  We've begun to reserve a range of BIP numbers for this topic, pending continued progress here.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2386654766",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 14477292662,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAANe6fR2",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14477292662",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T18:09:32Z"
    },
    {
      "event": "subscribed",
      "id": 14477292686,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAANe6fSO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14477292686",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T18:09:33Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGFlMDkzNmFlNmY0NmZhMTIzMDFiNTIzYzliMjZkZDRhZjk3NjlmMzE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ae0936ae6f46fa12301b523c9b26dd4af9769f31",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ae0936ae6f46fa12301b523c9b26dd4af9769f31",
      "tree": {
        "sha": "4bc48f6d2f84da5507e1c899be53bc7defb2bf8f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4bc48f6d2f84da5507e1c899be53bc7defb2bf8f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4bc48f6d2f84da5507e1c899be53bc7defb2bf8f\nparent d83c29d59b78443e20a040395ca23777bfc332f1\nauthor Jameson Lopp <jameson.lopp@gmail.com> 1727879443 -0400\ncommitter GitHub <noreply@github.com> 1727879443 -0400\n\ntypo fix",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJm/VkTCRC1aQ7uu5UhlAAAiaYQAJOcl/gN6ZKMloz3mmWC01qx\nQTiAGzs0MbaTxBz+ypbrf4mfWZxnQ0b5iGGBv4Pq24ithgLa7M5vPfoPlR1x43lO\nCTeHIJ3upxe4ft1a7YUJmjGK2vGxrZ+shzQ453HvMiTbCuneYyk/Xn5QijZbtgIu\nl1EnnPIF7Ozr4XbQg0Huwu9rZ4SRCQzJ9QkC/PJtDoN+cxPNiUvapnR7inMC4h3n\n+OTgvCZl+4TLZGkoeLprZOi+nhAmsZ+JJ902XrDUVGX4QwpI3VIE+kpOhwBan2Py\n9sHEbsmpIDKCxzIezhShqkddfDPKvJPD5iNJvNgXpBa8BgKlmIYRKXNLcaK/FTNj\n3R1hCqUlobXLsejY0lCXB3ZfpWl1tz0/9fzcy+WMt9R4wP9fj5QsiEkQUzdriX9Y\n12tA/Rba2avnG0KCjnopv7OLhw7SJ8Ry0KV4cy+eV3kORU0K43/4fEcK5jWIMelJ\no9ZPJ/+zVumR0LFkI4ARrYBdx1VYSDHLAPvHtcPVkfBhPUMa6OAHnIznL+f1mFPC\n9Ud2D4bxcM9KDbkf3q8G6FdKHkhH5ZXzoZ4WHRtolxD4td8ACP2uIW4szXenVmDc\ndorVf3RJijPsXDHbe84/KvAkXIpsB/vUBIrjeVGjDa0OrOcAhuzfH0sgeHIIbKKz\n2H/B0W0i5NnRGJnpocMT\n=/HPO\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d83c29d59b78443e20a040395ca23777bfc332f1",
          "sha": "d83c29d59b78443e20a040395ca23777bfc332f1",
          "html_url": "https://github.com/bitcoin/bips/commit/d83c29d59b78443e20a040395ca23777bfc332f1"
        }
      ],
      "message": "typo fix",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-10-02T14:30:43Z"
      },
      "author": {
        "name": "Jameson Lopp",
        "email": "jameson.lopp@gmail.com",
        "date": "2024-10-02T14:30:43Z"
      },
      "sha": "ae0936ae6f46fa12301b523c9b26dd4af9769f31"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQ4OWI3YzVjMDgyOGEyMzMwZThjYzI1NTIwMDZkMWNmZDBiN2IwZDI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d89b7c5c0828a2330e8cc2552006d1cfd0b7b0d2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d89b7c5c0828a2330e8cc2552006d1cfd0b7b0d2",
      "tree": {
        "sha": "4bc48f6d2f84da5507e1c899be53bc7defb2bf8f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4bc48f6d2f84da5507e1c899be53bc7defb2bf8f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4bc48f6d2f84da5507e1c899be53bc7defb2bf8f\nparent d83c29d59b78443e20a040395ca23777bfc332f1\nparent ae0936ae6f46fa12301b523c9b26dd4af9769f31\nauthor Hunter Beast <hunter@cryptoquick.com> 1728045574 -0600\ncommitter GitHub <noreply@github.com> 1728045574 -0600\n\nMerge pull request #13 from jlopp/patch-3\n\ntypo fix",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJm/+IGCRC1aQ7uu5UhlAAADL4QAGYta0qcfrZJY1KlxIzW10sb\ns0H9l5Uj/jYQvl4ze4NlKPI8RyAuFZQvxNC3MDoRJB1F7dnPDAGvy2eVLyiVKkPB\n6fMwI5VwwDsAsR73dEsSMj7p6H4AB+CdEwMTG8FtOzD6Zv+Emughu8H3GWqdzt4/\n1E4IftDNQLhBCgetsTbXqQFJCdmZAOmtb8zxS45oDWh70M7eS4Sv2kiT2RELQdXi\nA6tB9Xi02ctmTTz8Tj0O4uz2dRtLoZrFspmcO2bV4svxc8rYGMPKfu2Yp9zb6UT2\nItydCZR6zJPnfTtuEuHm7wb6ltITBOdoGROvciWTbiMezxhLzltHDVAXMUcb4h6s\nLq6EHX4PqdRTOmYqF6++RpS01riD1rE6M/nTpleWBAjl8npd4ZSZOLHfo1aMbgAa\nbtTc9MH2JMWEAk2lDN7olvrS/2X2j83zgJC6kYNVRUJYKEuSx9G7im1j7dOF40+q\nECjvLWhBy1mPo2fEmq7OikKJRKqqbX13KMfu7Abo7s21zeuA133taxZDNqNMuNly\nauiBt/PBazoTNCyVSqQIsRQ6tGqERARh9dfwO3Ql2Ob1vkp/4Z0Xg8ukgw0kisHc\nL9TMyOEB2kvNE666FudmI916UaEsgVhy10fqeRnOLeT50gd8HMsLL1H5WvMaeMKM\no8LdN4LcwFVIvdYefL0P\n=wBbT\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d83c29d59b78443e20a040395ca23777bfc332f1",
          "sha": "d83c29d59b78443e20a040395ca23777bfc332f1",
          "html_url": "https://github.com/bitcoin/bips/commit/d83c29d59b78443e20a040395ca23777bfc332f1"
        },
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ae0936ae6f46fa12301b523c9b26dd4af9769f31",
          "sha": "ae0936ae6f46fa12301b523c9b26dd4af9769f31",
          "html_url": "https://github.com/bitcoin/bips/commit/ae0936ae6f46fa12301b523c9b26dd4af9769f31"
        }
      ],
      "message": "Merge pull request #13 from jlopp/patch-3\n\ntypo fix",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-10-04T12:39:34Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2024-10-04T12:39:34Z"
      },
      "sha": "d89b7c5c0828a2330e8cc2552006d1cfd0b7b0d2"
    },
    {
      "event": "labeled",
      "id": 14564663989,
      "node_id": "LE_lADOAN28mc6YMAnczwAAAANkHyK1",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14564663989",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-09T01:46:46Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "commented",
      "id": 2427012091,
      "node_id": "IC_kwDOAN28mc6QqUP7",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2427012091",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-21T15:27:42Z",
      "updated_at": "2024-10-21T15:27:42Z",
      "author_association": "MEMBER",
      "body": "@cryptoquick ping for an update here. Have you seen https://groups.google.com/g/bitcoindev/c/p8xz08YTvkw / https://github.com/chucrut/bips/blob/master/bip-xxxx.md? It may be interesting to review each other and possibly collaborate.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2427012091",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 14767024678,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAANwLuom",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14767024678",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-21T15:27:45Z"
    },
    {
      "event": "subscribed",
      "id": 14767024706,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAANwLupC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14767024706",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-21T15:27:45Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI0YzMyOWI1NWI5MjA1Zjc4YTY4OTZlZDA2MjcyMjhjYjViYWFmYmQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b4c329b55b9205f78a6896ed0627228cb5baafbd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b4c329b55b9205f78a6896ed0627228cb5baafbd",
      "tree": {
        "sha": "8588a08ad69b39ed81fc9922f6ea871d96db6903",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8588a08ad69b39ed81fc9922f6ea871d96db6903"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8588a08ad69b39ed81fc9922f6ea871d96db6903\nparent d89b7c5c0828a2330e8cc2552006d1cfd0b7b0d2\nauthor Hunter Trujillo <cryptoquick@pm.me> 1729526490 -0600\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1729532372 -0600\n\nQuBit - P2QRH spending rules\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZxaR1AAKCRBn2nwXlg36\nz6WRAQCZZtzs3+2a33hJc3a8EV3RW4y0NRosTqNKoB3TlPRE1QD7B+Ej9FXAZnZl\nZgLmcE+Z1OQNoBzZA40f/L+M27lH9QI=\n=/b0l\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d89b7c5c0828a2330e8cc2552006d1cfd0b7b0d2",
          "sha": "d89b7c5c0828a2330e8cc2552006d1cfd0b7b0d2",
          "html_url": "https://github.com/bitcoin/bips/commit/d89b7c5c0828a2330e8cc2552006d1cfd0b7b0d2"
        }
      ],
      "message": "QuBit - P2QRH spending rules",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-10-21T17:39:32Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-10-21T16:01:30Z"
      },
      "sha": "b4c329b55b9205f78a6896ed0627228cb5baafbd"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14768878416,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAANwSzNQ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14768878416",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b4c329b55b9205f78a6896ed0627228cb5baafbd",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/b4c329b55b9205f78a6896ed0627228cb5baafbd",
      "created_at": "2024-10-21T17:39:38Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDUzZDQ5N2UzNzZmNDk5YzIxMGJjZTQ5ODBlMjhkOGY1MDNiOWEyYjk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/53d497e376f499c210bce4980e28d8f503b9a2b9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/53d497e376f499c210bce4980e28d8f503b9a2b9",
      "tree": {
        "sha": "62bce3932801448b062bbeaa49ee5a563de67ca7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/62bce3932801448b062bbeaa49ee5a563de67ca7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b4c329b55b9205f78a6896ed0627228cb5baafbd",
          "sha": "b4c329b55b9205f78a6896ed0627228cb5baafbd",
          "html_url": "https://github.com/bitcoin/bips/commit/b4c329b55b9205f78a6896ed0627228cb5baafbd"
        }
      ],
      "message": "Adds clarity and brevity",
      "committer": {
        "name": "Kyle Crews",
        "email": "kylecrews@Kyles-Mac-Studio.local",
        "date": "2024-11-05T15:12:26Z"
      },
      "author": {
        "name": "Kyle Crews",
        "email": "kylecrews@Kyles-Mac-Studio.local",
        "date": "2024-11-05T15:12:26Z"
      },
      "sha": "53d497e376f499c210bce4980e28d8f503b9a2b9"
    },
    {
      "event": "reviewed",
      "id": 2430740303,
      "node_id": "PRR_kwDOAN28mc6Q4idP",
      "url": null,
      "actor": null,
      "commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "This is a quick first skim. Seems fine so far, I left some comments. The Motivation and Rationale seem a bit long, perhaps some of that could be split out into other sections like Related Work, Backward Compatibility, or just tightened a bit.\r\n\r\nI’m wondering whether introducing four different signature schemes at once may be a bit too ambitious.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2430740303",
      "submitted_at": "2024-11-12T22:09:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDBhMmVkNGEyM2YyMzJhYmRiYjA5ZGI5YzU1ZWRiNWY0ODlmMDIwYmM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0a2ed4a23f232abdbb09db9c55edb5f489f020bc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0a2ed4a23f232abdbb09db9c55edb5f489f020bc",
      "tree": {
        "sha": "40868dcea9cf7b1931315f6f48bb7333f2f14e04",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/40868dcea9cf7b1931315f6f48bb7333f2f14e04"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 40868dcea9cf7b1931315f6f48bb7333f2f14e04\nparent 53d497e376f499c210bce4980e28d8f503b9a2b9\nauthor Hunter Beast <hunter@cryptoquick.com> 1732151732 -0700\ncommitter GitHub <noreply@github.com> 1732151732 -0700\n\nApply suggestions from review\n\nCo-authored-by: Mark \"Murch\" Erhardt <murch@murch.one>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnPom0CRC1aQ7uu5UhlAAAFVIQAKryJaB3tksL2GR0awx/bz+H\nhhKcdSoAWVW2lhmgmKnrjhsmPyah8HULUWSXR4bdoNqfwZEO4g7FHYv+lkpBEU+d\n8YVsyZMyPL/lsIur4+BTgblbunsxCmIBMaGo9tycX9CbsvWJ9FzrHVp6Lq7SOHSc\nmbxCPnSBUDBEOnGlPUKhRQa3vny64ogyxEgcPvQAea7QDIsivpl17bGcdQZwlvLQ\nySCOXJM6Qa6nsdc3SR0uivXGuLeoGly4i4IPk5ddou5I+G7QAgx1VBMrfCwdIp69\np3JsgrhRE5nzNLT6AYa86RgpNfGjQLLRzGOOBl6hpOOxCSNNDaCChf/cRJ9Wtjb0\nWIDm/m/Ttg+uSc2RXNRHIKgUJic7MeHSQtO316W3VeiFLOO+Y1fDrvSvPAOJEQeZ\nHqw8AotMfNyw5D7VXICDVQmXFERsKUhtK7nXTkqVCPAIVMInIeNbZdwkfb4aVyxp\nY16qWavyQyiZrfI7DNm0OnP4q14j0C4vtT3hR2Zml7Udz8Vuh6YXXtyUnnW53ySH\n959uUKDfjHHyLLs825QPG/xBOb/oPgTZeod5thlHLlcmR0d7Ej1ufWyF/o8mav8G\nmPQhaP+jFQTnGh3hdzqLdgJaWc5Yi4xDhmXmLxszx/FXz8REW41ON0eX1h/Knbqo\nD1nVb3ezdqeAfhTcUyt+\n=uACu\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/53d497e376f499c210bce4980e28d8f503b9a2b9",
          "sha": "53d497e376f499c210bce4980e28d8f503b9a2b9",
          "html_url": "https://github.com/bitcoin/bips/commit/53d497e376f499c210bce4980e28d8f503b9a2b9"
        }
      ],
      "message": "Apply suggestions from review\n\nCo-authored-by: Mark \"Murch\" Erhardt <murch@murch.one>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-11-21T01:15:32Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2024-11-21T01:15:32Z"
      },
      "sha": "0a2ed4a23f232abdbb09db9c55edb5f489f020bc"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15374587229,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOUZZVd",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15374587229",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e64d7e8471feba784b2d240a42f6bee1e55a3971",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/e64d7e8471feba784b2d240a42f6bee1e55a3971",
      "created_at": "2024-11-21T01:20:07Z"
    },
    {
      "event": "review_requested",
      "id": 15374591727,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAAOUZabv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15374591727",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T01:20:56Z",
      "requested_reviewer": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2489877214,
      "node_id": "IC_kwDOAN28mc6UaILe",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2489877214",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T01:27:07Z",
      "updated_at": "2024-11-21T01:27:07Z",
      "author_association": "NONE",
      "body": "> I’m wondering whether introducing four different signature schemes at once may be a bit too ambitious.\r\n\r\nSPHINCS and Crystals-DILITHIUM are approved by NIST. Antoine Riard specifically requested the inclusion of SPHINCS on the mailing list, and the alternative proposal implements Crystals-DILITHIUM. FALCON is likely to be approved as as a FIPS standard as well, but it's not yet official. SQIsign is very attractive for its small public key and signature sizes, but it is only just recently under review.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2489877214",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGM5MmE5YjBlNGRiN2U0NmZmMTFjN2ZjOWVmZDMyYzk5MWU2MzUwNzQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c92a9b0e4db7e46ff11c7fc9efd32c991e635074",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c92a9b0e4db7e46ff11c7fc9efd32c991e635074",
      "tree": {
        "sha": "dac782d576ab37de25d9846e30efc07123b65bff",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/dac782d576ab37de25d9846e30efc07123b65bff"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree dac782d576ab37de25d9846e30efc07123b65bff\nparent 0a2ed4a23f232abdbb09db9c55edb5f489f020bc\nauthor Hunter Trujillo <cryptoquick@pm.me> 1732151879 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1732152510 -0700\n\nQuBit - P2QRH spending rules\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZz6MvgAKCRBn2nwXlg36\nz0syAQCl5xmWr8WPJuL8tSGbE0Rvh95AaT3uYyh8DJcTfy2FWgD+ILTVE+Rhgp5U\nMHMDRrLUWhYxZqidQW91RsPTJFezCQ4=\n=iMjP\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0a2ed4a23f232abdbb09db9c55edb5f489f020bc",
          "sha": "0a2ed4a23f232abdbb09db9c55edb5f489f020bc",
          "html_url": "https://github.com/bitcoin/bips/commit/0a2ed4a23f232abdbb09db9c55edb5f489f020bc"
        }
      ],
      "message": "QuBit - P2QRH spending rules",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-11-21T01:28:30Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-11-21T01:17:59Z"
      },
      "sha": "c92a9b0e4db7e46ff11c7fc9efd32c991e635074"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15374637090,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOUZlgi",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15374637090",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c92a9b0e4db7e46ff11c7fc9efd32c991e635074",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/c92a9b0e4db7e46ff11c7fc9efd32c991e635074",
      "created_at": "2024-11-21T01:28:34Z"
    },
    {
      "event": "unlabeled",
      "id": 15407804193,
      "node_id": "UNLE_lADOAN28mc6YMAnczwAAAAOWYG8h",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15407804193",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-23T13:49:11Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGUxYjcwMDdjZDkzMDI3NDA5YWE5OWE0M2NlMmUzNTg1NDc3MTA4OGI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e1b7007cd93027409aa99a43ce2e35854771088b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e1b7007cd93027409aa99a43ce2e35854771088b",
      "tree": {
        "sha": "c8542fca66dd9bba46855c1ec56eda92cf3ac0a7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c8542fca66dd9bba46855c1ec56eda92cf3ac0a7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c8542fca66dd9bba46855c1ec56eda92cf3ac0a7\nparent c92a9b0e4db7e46ff11c7fc9efd32c991e635074\nauthor Hunter Beast <hunter@cryptoquick.com> 1733265398 -0700\ncommitter GitHub <noreply@github.com> 1733265398 -0700\n\nAdd details on attestation structure and parsing. (#14)\n\n* Add details on attestation structure and parsing.\r\n\r\n* bip-p2qrh.mediawiki:  Separating discussion about Grovers algorithm into\r\nits own section.\r\n\r\n* Update phrasing and formatting.\r\n\r\n* Kyle fixes\r\n\r\n* Add Jeff Bride to acknowledgments\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Kyle Crews <92337423+CrewsControlSolutions@users.noreply.github.com>\r\n\r\n* Updates to clarity.\r\n\r\n---------\r\n\r\nCo-authored-by: jbride <jbride2001@yahoo.com>\r\nCo-authored-by: Kyle Crews <92337423+CrewsControlSolutions@users.noreply.github.com>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnT4f2CRC1aQ7uu5UhlAAASkcQAHQ2cGwXIqAagM8ll7r9eQtF\ngtSISu83fVy2ntqlZyPqOWbYeCz2wziZKHtRIVDirG2+mvzMCqMe9+t86BcsdXSj\n9XZKFIXBeuEjph1GzGuvyejb1yrNOhWAoPZ/V/q1wlnYkfuTa2Kiji9rDiabet1J\nWPNoO3DzwVlmo94oiht0Jn9hLt+dXKf5giRPCPm15bbGZWx/IJ2DotmpNDO7HgCF\nwFn6a6IJLzy9ij1ZEBTstL7jDR3EeTDk6SbTR+9ITujc2SEGqdKDx4mAPh1N1Fbi\ns5K2lD6w2V0r1EYAyw29EC+idfR85BhlSO5yueTJ72Pn86lOiGwJNu6VE4GGzwVP\nSylZoaNwYiUzEIo7r4vp73cCzUqLFOdFRq1SdPHe/zDpP0tvH6hQeqZCMBJRnCF1\nmPUahvPyBUnAXH06sTxdPtEupJ/pl6X8PsdmNwOFGZBkzL1iL3x+R0LlCivJhpzl\nAi5yoc9mWueZ7pFX+3pihAk4BbinrJ0ub6sCXAtri/iOXeWx+r+oZoqPncvZXozk\ntapzDBjMRVoLdwXldRQzWsE4cUjMGU7uI4U6M6XyZEWufjAenrtAvgFHvSp0eLLG\nl//syhU+kV7nbsAlM7gqQEDgh+iM+/mAAVvP6NDvWmpeexPyU9TZTo588oW5e8bm\nNZJpfS5SAepzrc9/yKgr\n=fw9x\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c92a9b0e4db7e46ff11c7fc9efd32c991e635074",
          "sha": "c92a9b0e4db7e46ff11c7fc9efd32c991e635074",
          "html_url": "https://github.com/bitcoin/bips/commit/c92a9b0e4db7e46ff11c7fc9efd32c991e635074"
        }
      ],
      "message": "Add details on attestation structure and parsing. (#14)\n\n* Add details on attestation structure and parsing.\r\n\r\n* bip-p2qrh.mediawiki:  Separating discussion about Grovers algorithm into\r\nits own section.\r\n\r\n* Update phrasing and formatting.\r\n\r\n* Kyle fixes\r\n\r\n* Add Jeff Bride to acknowledgments\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Kyle Crews <92337423+CrewsControlSolutions@users.noreply.github.com>\r\n\r\n* Updates to clarity.\r\n\r\n---------\r\n\r\nCo-authored-by: jbride <jbride2001@yahoo.com>\r\nCo-authored-by: Kyle Crews <92337423+CrewsControlSolutions@users.noreply.github.com>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-12-03T22:36:38Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2024-12-03T22:36:38Z"
      },
      "sha": "e1b7007cd93027409aa99a43ce2e35854771088b"
    },
    {
      "event": "commented",
      "id": 2515698597,
      "node_id": "IC_kwDOAN28mc6V8oOl",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2515698597",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-03T22:40:35Z",
      "updated_at": "2024-12-03T22:40:35Z",
      "author_association": "NONE",
      "body": "Just a note: The content of the BIP should be nearing its final state. Feel free to leave feedback while I work on the test vectors, it'll take me a while since I'm also making changes to rust-bitcoin in order to support P2QRH and transaction attestation, but I don't expect any major changes from my side at this point.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2515698597",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDYwZDcyOTQyYWEyM2E3NjBhNWM1MGRmNDhiODZmODhjNzFkMDkxNWQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/60d72942aa23a760a5c50df48b86f88c71d0915d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/60d72942aa23a760a5c50df48b86f88c71d0915d",
      "tree": {
        "sha": "5ce28f992ffb5d677afd5f9a449bbec0438d7de4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5ce28f992ffb5d677afd5f9a449bbec0438d7de4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5ce28f992ffb5d677afd5f9a449bbec0438d7de4\nparent e1b7007cd93027409aa99a43ce2e35854771088b\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733268141 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733268141 -0700\n\nMediaWiki formatting fixes\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ0+SrQAKCRBn2nwXlg36\nz1ysAQCE3yGVdh0DV+PHcQnnqpinrBSe3wTzkvReOVKoGMNMNgD+KbTCvJYcHrFI\nf30pSJKSGvMN88nso9I70cDnoQLmbwI=\n=D2M8\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e1b7007cd93027409aa99a43ce2e35854771088b",
          "sha": "e1b7007cd93027409aa99a43ce2e35854771088b",
          "html_url": "https://github.com/bitcoin/bips/commit/e1b7007cd93027409aa99a43ce2e35854771088b"
        }
      ],
      "message": "MediaWiki formatting fixes",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-03T23:22:21Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-03T23:22:21Z"
      },
      "sha": "60d72942aa23a760a5c50df48b86f88c71d0915d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15546592531,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOepi0T",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15546592531",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9159aa93dc4bb672a192201686848fa567176334",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/9159aa93dc4bb672a192201686848fa567176334",
      "created_at": "2024-12-05T16:06:58Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDJkMDk4ZDlhZGYxMTkyOTIzNDI1ODc5M2UyMjc3NmEwZTJkZGI5ZmE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2d098d9adf11929234258793e22776a0e2ddb9fa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2d098d9adf11929234258793e22776a0e2ddb9fa",
      "tree": {
        "sha": "5bd8c4f11544b2032957242bc081d8319dd5d6ee",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5bd8c4f11544b2032957242bc081d8319dd5d6ee"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5bd8c4f11544b2032957242bc081d8319dd5d6ee\nparent 60d72942aa23a760a5c50df48b86f88c71d0915d\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733414668 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733414945 -0700\n\nMediaWiki formatting fixes\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1HQIQAKCRBn2nwXlg36\nz6hGAP4tQmQfVf+G80OTD5T19X4+iKLnT+uliS/XuyFRUWZx8gEA0EkduBVwSKc7\nZTvFU3wyI3tkt/YXv8R7Jf3Ci3ZnDAE=\n=r4Wy\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/60d72942aa23a760a5c50df48b86f88c71d0915d",
          "sha": "60d72942aa23a760a5c50df48b86f88c71d0915d",
          "html_url": "https://github.com/bitcoin/bips/commit/60d72942aa23a760a5c50df48b86f88c71d0915d"
        }
      ],
      "message": "MediaWiki formatting fixes",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-05T16:09:05Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-05T16:04:28Z"
      },
      "sha": "2d098d9adf11929234258793e22776a0e2ddb9fa"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15546626140,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOeprBc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15546626140",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2d098d9adf11929234258793e22776a0e2ddb9fa",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/2d098d9adf11929234258793e22776a0e2ddb9fa",
      "created_at": "2024-12-05T16:09:08Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGVkNGU4NjI3ZTY3Yzg0MDRjMjk3ZTQ1MWZhMzYyMGRkOGY4NWU1YTY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ed4e8627e67c8404c297e451fa3620dd8f85e5a6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ed4e8627e67c8404c297e451fa3620dd8f85e5a6",
      "tree": {
        "sha": "14b5c504e166ea833538928eb9b38ad6a20f3357",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/14b5c504e166ea833538928eb9b38ad6a20f3357"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 14b5c504e166ea833538928eb9b38ad6a20f3357\nparent 2d098d9adf11929234258793e22776a0e2ddb9fa\nauthor Hunter Beast <hunter@cryptoquick.com> 1733498984 -0700\ncommitter GitHub <noreply@github.com> 1733498984 -0700\n\nMediaWiki fixes, remove redundant sections. (#16)\n\n* MediaWiki fixes, remove redundant sections.\r\n\r\n* Fix link format check",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnUxhoCRC1aQ7uu5UhlAAAd/oQAByqUoow4on0izhnUKp7Fmhh\nwA5cSuKrDY55+Vz47Q+NKwyuWeISGSj2x9/sP7cwCFVPSNG9pwSQ+ooIIi8S5xTc\nGDN1nPT+46BPfhlQFCSFK0iSvYGIcDMZUm+NXZXGMgNdRXaYvufp0ZqCY2IYue/m\n02SSX9b8jQSCx20hdWTHcBfuga+JFTVOrZ1K/q9aNcWULP+1zvP2omImtV2yyXVF\ni1+m9e/b4+zKr2p2s3ze1WlTZ6dcFvWqXvgERBRU2Ra9+6Bb+YqNkveqeR9bB8VQ\nxdFF5JiTfJgy/zgPWDA/7zeAqDz58OqEkv1I9+SwsXv5gPtXBQLRnH5gwZQpwYuK\nwtp0+f2j6de0aXqSRyV1gSXITb98DT0lU0UzOp35AsHF04VqCmWt9lA/kFLj3kXI\nLRTOTKjH+LSKOxwdQCF2mBA0oJTLNJkCQ96VAbH7+HhPkohgnUjpjnI/r3LptJGK\nXGbxAaq84aV5cSZZiv4z+KqG3r/oUhylCx6egymWqs4FETXOgx/0xGkrPVy0+Pji\n1n5blCPw30hnPwC5CcblACRZGhXHYXK9lhiZ1orqYaoi6IeTB9xwWF3oHuXy+2XU\nV9QvHuvmXk3JD/c1AtqctkKMKYqrvTxH/QJLdVlIonFw1VgwV6OZhePJpnYwE7D/\nYyD2RpKYiEUcRnVK0X7R\n=Hrnl\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2d098d9adf11929234258793e22776a0e2ddb9fa",
          "sha": "2d098d9adf11929234258793e22776a0e2ddb9fa",
          "html_url": "https://github.com/bitcoin/bips/commit/2d098d9adf11929234258793e22776a0e2ddb9fa"
        }
      ],
      "message": "MediaWiki fixes, remove redundant sections. (#16)\n\n* MediaWiki fixes, remove redundant sections.\r\n\r\n* Fix link format check",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-12-06T15:29:44Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2024-12-06T15:29:44Z"
      },
      "sha": "ed4e8627e67c8404c297e451fa3620dd8f85e5a6"
    },
    {
      "event": "commented",
      "id": 2523737288,
      "node_id": "IC_kwDOAN28mc6WbSzI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2523737288",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T16:57:28Z",
      "updated_at": "2024-12-06T16:57:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hey @cryptoquick, just wanted to mention a few quick things: \r\n\r\n1. While I would consider test vectors and reference implementation necessary for a proposal to move to the \"Proposed\" status, their lack would not necessarily prevent something to be considered for getting a number and be merged as draft.\r\n2. I have a formatting request: Having lines with over 1000 characters makes it really hard to see what changed between pushes and to give review suggestions. May I suggest that you break the lines in text blocks at e.g. 120 characters?\r\nAs an example from my own draft, it’s just much easier to see what exactly was changed when the lines are shorter: \r\n![image](https://github.com/user-attachments/assets/c5fd9fd0-c5f1-4654-8682-9e687017a340)\r\n3. This PR is currently marked as \"draft\", please click \"ready for review\" if/when you want editors to take a look. :)",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2523737288",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 15563201881,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOfo51Z",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15563201881",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T16:57:30Z"
    },
    {
      "event": "subscribed",
      "id": 15563201912,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOfo514",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15563201912",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T16:57:30Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGYyNDI2YzY2NTY5YTkzYjM5M2RhMGY5YTlkNTM1MTg0MzA2NjQwZDE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f2426c66569a93b393da0f9a9d535184306640d1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f2426c66569a93b393da0f9a9d535184306640d1",
      "tree": {
        "sha": "abdeec4b9e9f6c33a608ba3ab339435a4043bfe6",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/abdeec4b9e9f6c33a608ba3ab339435a4043bfe6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree abdeec4b9e9f6c33a608ba3ab339435a4043bfe6\nparent ed4e8627e67c8404c297e451fa3620dd8f85e5a6\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733504907 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733504907 -0700\n\nUpdate title and formatting.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1MviwAKCRBn2nwXlg36\nz8WrAQCHKne3KsQzv+GnNoNLln0vEDYsB9hyEY8ziUJ+WY5KBgD8CEG4gGVK1iJ0\nbM7ghIHiVKj9WCGMEAljuNQyVkxo3wk=\n=jYwX\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ed4e8627e67c8404c297e451fa3620dd8f85e5a6",
          "sha": "ed4e8627e67c8404c297e451fa3620dd8f85e5a6",
          "html_url": "https://github.com/bitcoin/bips/commit/ed4e8627e67c8404c297e451fa3620dd8f85e5a6"
        }
      ],
      "message": "Update title and formatting.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T17:08:27Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T17:08:27Z"
      },
      "sha": "f2426c66569a93b393da0f9a9d535184306640d1"
    },
    {
      "event": "ready_for_review",
      "id": 15563361180,
      "node_id": "RFRE_lADOAN28mc6YMAnczwAAAAOfpguc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15563361180",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T17:09:18Z"
    },
    {
      "event": "commented",
      "id": 2523763261,
      "node_id": "IC_kwDOAN28mc6WbZI9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2523763261",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T17:09:32Z",
      "updated_at": "2024-12-06T17:09:32Z",
      "author_association": "NONE",
      "body": "@murchandamus Done!",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2523763261",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 15563364074,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOfphbq",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15563364074",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T17:09:34Z"
    },
    {
      "event": "subscribed",
      "id": 15563364086,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOfphb2",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15563364086",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T17:09:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15563957756,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOfryX8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15563957756",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c006a0b71d1c9095f6b640dc34b5a1f560f7d3aa",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/c006a0b71d1c9095f6b640dc34b5a1f560f7d3aa",
      "created_at": "2024-12-06T17:55:08Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDJlNGFkODExY2ZiMDQ4ZDgzOTk3MzBmZGUxNWYzZjcwMTk2OWI0ZTE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2e4ad811cfb048d8399730fde15f3f701969b4e1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2e4ad811cfb048d8399730fde15f3f701969b4e1",
      "tree": {
        "sha": "9e9d84e8007941711b90b0810aff2ed052500b90",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9e9d84e8007941711b90b0810aff2ed052500b90"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9e9d84e8007941711b90b0810aff2ed052500b90\nparent f2426c66569a93b393da0f9a9d535184306640d1\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733507341 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733508272 -0700\n\nMore wrestling with MediaWiki formatting...\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1M8sAAKCRBn2nwXlg36\nz8YIAP9csIdmooSitPsp+GeEEKZnJNNxJmkDDWkQSxIa+BiRbgEAx+Y+t288RISE\nUrxKEXrJBv23EUBfJqjcO8w8Ogg3LgY=\n=J0M3\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f2426c66569a93b393da0f9a9d535184306640d1",
          "sha": "f2426c66569a93b393da0f9a9d535184306640d1",
          "html_url": "https://github.com/bitcoin/bips/commit/f2426c66569a93b393da0f9a9d535184306640d1"
        }
      ],
      "message": "More wrestling with MediaWiki formatting...",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:04:32Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T17:49:01Z"
      },
      "sha": "2e4ad811cfb048d8399730fde15f3f701969b4e1"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15564067883,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOfsNQr",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15564067883",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2e4ad811cfb048d8399730fde15f3f701969b4e1",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/2e4ad811cfb048d8399730fde15f3f701969b4e1",
      "created_at": "2024-12-06T18:04:37Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDk5MzUwMDVlZmI4MTRiNjc0YjMxNDZlYTdmYjFiYjM2OTgyYzlmYjg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9935005efb814b674b3146ea7fb1bb36982c9fb8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9935005efb814b674b3146ea7fb1bb36982c9fb8",
      "tree": {
        "sha": "3fea6f6972daa8d9214b75872171ccca77186ba5",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3fea6f6972daa8d9214b75872171ccca77186ba5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3fea6f6972daa8d9214b75872171ccca77186ba5\nparent 2e4ad811cfb048d8399730fde15f3f701969b4e1\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733508476 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733508476 -0700\n\nI give up. Removing code and pre blocks.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1M9fAAKCRBn2nwXlg36\nz3eqAQCt4tYRaMbf/o2mtlzsE2KfvIoVJXrUYFz4oo0H00aTwQEA3gve34c6kNzp\nGYzcCaGGzOA25xcDuLdmZujKBqDjVAY=\n=9zOv\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2e4ad811cfb048d8399730fde15f3f701969b4e1",
          "sha": "2e4ad811cfb048d8399730fde15f3f701969b4e1",
          "html_url": "https://github.com/bitcoin/bips/commit/2e4ad811cfb048d8399730fde15f3f701969b4e1"
        }
      ],
      "message": "I give up. Removing code and pre blocks.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:07:56Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:07:56Z"
      },
      "sha": "9935005efb814b674b3146ea7fb1bb36982c9fb8"
    },
    {
      "event": "reviewed",
      "id": 2485453691,
      "node_id": "PRR_kwDOAN28mc6UJQN7",
      "url": null,
      "actor": null,
      "commit_id": "9935005efb814b674b3146ea7fb1bb36982c9fb8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I started taking a look, but two additional commits have been made since. I’ll try to take a look next week.\r\n\r\nThe line break suggestion was meant mostly as a way to make diffs more readable and make it easier to make suggestions in the review. It’s not a fixed rule, so if it breaks stuff, feel free to e.g. leave table rows or links in a single line even if it’s longer than other stuff.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2485453691",
      "submitted_at": "2024-12-06T18:12:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGNjNDdmOWUzNzBiM2RmNmViNmFkMjA1OTJiNWQzZjczOGM1M2Q1MzI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cc47f9e370b3df6eb6ad20592b5d3f738c53d532",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/cc47f9e370b3df6eb6ad20592b5d3f738c53d532",
      "tree": {
        "sha": "1b072ab494d4df9378c6c58996bb152be6475308",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1b072ab494d4df9378c6c58996bb152be6475308"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1b072ab494d4df9378c6c58996bb152be6475308\nparent 9935005efb814b674b3146ea7fb1bb36982c9fb8\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733508809 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733508809 -0700\n\nMore formatting fixes.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1M+yQAKCRBn2nwXlg36\nz+eVAP430ox2eJr379G3bHYQ5MFDkJA66nyB50Kgb/pdflqeXQD+OQzh8S77J0iE\nKahVkt6a0l/oAO9uNbZkROqMwmUYLQI=\n=4ZEn\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9935005efb814b674b3146ea7fb1bb36982c9fb8",
          "sha": "9935005efb814b674b3146ea7fb1bb36982c9fb8",
          "html_url": "https://github.com/bitcoin/bips/commit/9935005efb814b674b3146ea7fb1bb36982c9fb8"
        }
      ],
      "message": "More formatting fixes.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:13:29Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:13:29Z"
      },
      "sha": "cc47f9e370b3df6eb6ad20592b5d3f738c53d532"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGZmNGQyYzI4MTk4ZmIzNjNhOTFjZmNhOTFmNDU2YWY2ZjgxYWYwNDk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ff4d2c28198fb363a91cfca91f456af6f81af049",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ff4d2c28198fb363a91cfca91f456af6f81af049",
      "tree": {
        "sha": "72c84606401e46e450e6d2a81748577d8ac4408a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/72c84606401e46e450e6d2a81748577d8ac4408a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 72c84606401e46e450e6d2a81748577d8ac4408a\nparent cc47f9e370b3df6eb6ad20592b5d3f738c53d532\nauthor Hunter Beast <hunter@cryptoquick.com> 1733509628 -0700\ncommitter GitHub <noreply@github.com> 1733509628 -0700\n\nApply suggestions from code review\n\nCo-authored-by: Mark \"Murch\" Erhardt <murch@murch.one>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnU0H9CRC1aQ7uu5UhlAAA+kAQAGT8btAt4UKL5vS6pBiJm3cV\nQp60RqTPKUN7vI9zSNVNajVQFy54J77EdokEu6+gD+nsxLA2QEoxe1lGgtCjvzH1\nc/6mR7VHDK3hA4E0Y9or55MU/nn2IJDj9D2mpD6XJbAxWP2IqaDnYDPb27S18bCj\n5DNVnodBltSKLn0pGn0VUt1mcV1Nv2vt5wr/hOO+2Z2KkEZFOE3Fv/o1uFTVLcX1\nqCjov79L2VsyNYW7MR8+348Qy9LcuLN0mDysYs8kFFMJM1crh8XOOsduULZwVcxQ\njCrJLauOL83U4bB+iKaQypJFktoDdG2M/HnT8/hwQmb9THQf7F1c/1tnKZmG2DFL\npECThIkmNe4Lfh7GMFfgg5AhEbasaSosFy/5eIrhUb72AvmBN5SRG8lcTA3sutqc\nTlR4Yero9pNVOr6r+0wtxh3M5HAtj2XcuA3zN2UOHrBzKRqJh7jSQ6n4Mt+gBSHo\nQQweooycv0QfxD3eGnS+jl2tyLhEPeKeBDbI0+UaWqKteFx2AirLXzDQwYq/0ueW\nWY8p3zOzWKWHhlbdp8/5RjvKPHIKwD5V54FO3SJl++3VAVigkAvnW4QajpNjzLC/\n0H2F87KixpAqOeK6oknkQE0WLpiQPTzy4sNRPrG65+EXvIch7MMK7izTbY9H66T6\nOnQT7whabSYfAd8U4me9\n=p20X\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cc47f9e370b3df6eb6ad20592b5d3f738c53d532",
          "sha": "cc47f9e370b3df6eb6ad20592b5d3f738c53d532",
          "html_url": "https://github.com/bitcoin/bips/commit/cc47f9e370b3df6eb6ad20592b5d3f738c53d532"
        }
      ],
      "message": "Apply suggestions from code review\n\nCo-authored-by: Mark \"Murch\" Erhardt <murch@murch.one>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-12-06T18:27:08Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2024-12-06T18:27:08Z"
      },
      "sha": "ff4d2c28198fb363a91cfca91f456af6f81af049"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGYyMDZiOTc0NWFmNTgyZjlkNjQ5Nzg3ZmY4NzJjYTQxYTA2ODNjNzE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f206b9745af582f9d649787ff872ca41a0683c71",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f206b9745af582f9d649787ff872ca41a0683c71",
      "tree": {
        "sha": "daea5a39057e99ac826171aa070b556a5b64e311",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/daea5a39057e99ac826171aa070b556a5b64e311"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree daea5a39057e99ac826171aa070b556a5b64e311\nparent cc47f9e370b3df6eb6ad20592b5d3f738c53d532\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733509685 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733509685 -0700\n\nAddress Murch feedback.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1NCNQAKCRBn2nwXlg36\nz61bAPwIrkpomsdyBiMhhdCYGvUQ/NC0+dLYALmIoF0qZTcnhAEAxD8p4aFuzaUm\n+llYKQ4lxIy+KIig6tVq+StMfCLaDQ0=\n=Kv77\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cc47f9e370b3df6eb6ad20592b5d3f738c53d532",
          "sha": "cc47f9e370b3df6eb6ad20592b5d3f738c53d532",
          "html_url": "https://github.com/bitcoin/bips/commit/cc47f9e370b3df6eb6ad20592b5d3f738c53d532"
        }
      ],
      "message": "Address Murch feedback.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:28:05Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:28:05Z"
      },
      "sha": "f206b9745af582f9d649787ff872ca41a0683c71"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDcwNjQ5ZWFlY2VhMGE2MmI2OTk3OGY2ZTI4NjdlNGY1YzAwMzM1NTQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/70649eaecea0a62b69978f6e2867e4f5c0033554",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/70649eaecea0a62b69978f6e2867e4f5c0033554",
      "tree": {
        "sha": "1b8fda6702b9bcd4bc99f2da37d220bb1eb001ae",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1b8fda6702b9bcd4bc99f2da37d220bb1eb001ae"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1b8fda6702b9bcd4bc99f2da37d220bb1eb001ae\nparent f206b9745af582f9d649787ff872ca41a0683c71\nparent ff4d2c28198fb363a91cfca91f456af6f81af049\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733509687 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733509687 -0700\n\nMerge branch 'p2qrh' of github.com:cryptoquick/bips into p2qrh\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1NCOQAKCRBn2nwXlg36\nz6GiAQC53q4KSL9oTCFzWSCnDf1gQFMnz317QIRPy0gqFTwgUwEAgT82fSir2FbT\nK6x+PVkrKUyR77QLfGn5rMzFcWUt1Q8=\n=tHrN\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f206b9745af582f9d649787ff872ca41a0683c71",
          "sha": "f206b9745af582f9d649787ff872ca41a0683c71",
          "html_url": "https://github.com/bitcoin/bips/commit/f206b9745af582f9d649787ff872ca41a0683c71"
        },
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ff4d2c28198fb363a91cfca91f456af6f81af049",
          "sha": "ff4d2c28198fb363a91cfca91f456af6f81af049",
          "html_url": "https://github.com/bitcoin/bips/commit/ff4d2c28198fb363a91cfca91f456af6f81af049"
        }
      ],
      "message": "Merge branch 'p2qrh' of github.com:cryptoquick/bips into p2qrh",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:28:07Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:28:07Z"
      },
      "sha": "70649eaecea0a62b69978f6e2867e4f5c0033554"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGZlZmY4NDc3YzBlMTAxNjM3MGFkZmE5M2QzYWVjZWUwZTUzYTJmMzM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/feff8477c0e1016370adfa93d3aecee0e53a2f33",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/feff8477c0e1016370adfa93d3aecee0e53a2f33",
      "tree": {
        "sha": "565f158512237e1219315dd30fec21b2249d587f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/565f158512237e1219315dd30fec21b2249d587f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 565f158512237e1219315dd30fec21b2249d587f\nparent 70649eaecea0a62b69978f6e2867e4f5c0033554\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733509830 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733509908 -0700\n\nMediaWiki formatting.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1NDFAAKCRBn2nwXlg36\nz/ykAP9gFjeVBxOb3wJsWoRsc+/OkmsMoNIFFYQOQvngLPoXiwEAkU4C8SaVlBb2\n/EUByxwTt2Bx0UjQja0uEeYC/Gb9dg4=\n=4yH4\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/70649eaecea0a62b69978f6e2867e4f5c0033554",
          "sha": "70649eaecea0a62b69978f6e2867e4f5c0033554",
          "html_url": "https://github.com/bitcoin/bips/commit/70649eaecea0a62b69978f6e2867e4f5c0033554"
        }
      ],
      "message": "MediaWiki formatting.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:31:48Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-06T18:30:30Z"
      },
      "sha": "feff8477c0e1016370adfa93d3aecee0e53a2f33"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15564327753,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOftMtJ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15564327753",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "feff8477c0e1016370adfa93d3aecee0e53a2f33",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/feff8477c0e1016370adfa93d3aecee0e53a2f33",
      "created_at": "2024-12-06T18:31:53Z"
    },
    {
      "event": "review_requested",
      "id": 15564332984,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAAOftN-4",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15564332984",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T18:32:27Z",
      "requested_reviewer": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 15564335568,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAAOftOnQ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15564335568",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-06T18:32:44Z",
      "requested_reviewer": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "renamed",
      "id": 15586926882,
      "node_id": "RTE_lADOAN28mc6YMAnczwAAAAOhDaEi",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15586926882",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-09T16:47:09Z",
      "rename": {
        "from": "Draft: QuBit - P2QRH spending rules",
        "to": "QuBit - P2QRH spending rules"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGUxODZiNTJjZmY1MzQ0Yzc4OWJjNTk5NmRlODY2OTdlNjIyNDQzMjM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e186b52cff5344c789bc5996de86697e62244323",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e186b52cff5344c789bc5996de86697e62244323",
      "tree": {
        "sha": "b283844dd02afa7bda50bbb2d267a3d91ed3b6b4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b283844dd02afa7bda50bbb2d267a3d91ed3b6b4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b283844dd02afa7bda50bbb2d267a3d91ed3b6b4\nparent feff8477c0e1016370adfa93d3aecee0e53a2f33\nauthor Hunter Trujillo <cryptoquick@pm.me> 1733763426 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1733763426 -0700\n\nSwap layer and title.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1chYgAKCRBn2nwXlg36\nz/PkAQCWln5DhO6zErGqlaLWr34XPew2iUpRUK24HQmzmxEPfAEArV2anSVgruQU\nncAOT8lJ52AfMCNKbTEgKAwh7C8PLQQ=\n=sNhz\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/feff8477c0e1016370adfa93d3aecee0e53a2f33",
          "sha": "feff8477c0e1016370adfa93d3aecee0e53a2f33",
          "html_url": "https://github.com/bitcoin/bips/commit/feff8477c0e1016370adfa93d3aecee0e53a2f33"
        }
      ],
      "message": "Swap layer and title.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-09T16:57:06Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-09T16:57:06Z"
      },
      "sha": "e186b52cff5344c789bc5996de86697e62244323"
    },
    {
      "event": "commented",
      "id": 2537420293,
      "node_id": "IC_kwDOAN28mc6XPfYF",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2537420293",
      "actor": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-11T23:37:37Z",
      "updated_at": "2024-12-11T23:37:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "I want to propose an alternative design. Instead of supporting multiple different signature algorithms in the same output and then inferring algorithm based on public key length. Flag signature algorithm based on address prefix, e.g. addresses that start with `bc1f` only accept FALCON-1024 public keys and signatures. \r\n\r\n- This makes it straightforward to add new post-quantum signature algorithms and lets you streamline this design by only needing to support one post-quantum signature algorithm.\r\n- This avoids using length as a signaling mechanism. Currently length works, but what if two algorithms have the same length public key? Do we lengthen one?\r\n- Supporting multiple signature algorithms in the same output is likely to increase complexity for other protocols. Say a payment channel where the two parties are using different signature algorithms. I don't see this as a strong reason not to do this, but I think the BIP needs a justification for this additional complexity.\r\n\r\nIs the reason you are doing multisig outside of script, because of the stack element limitations of some these bigger signatures? Are there any issues with the values on the attestation stack being larger than 520?\r\n",
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2537420293",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "reviewed",
      "id": 2494122656,
      "node_id": "PRR_kwDOAN28mc6UqUqg",
      "url": null,
      "actor": null,
      "commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2494122656",
      "submitted_at": "2024-12-12T00:50:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "commented",
      "id": 2541212231,
      "node_id": "IC_kwDOAN28mc6Xd9JH",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2541212231",
      "actor": {
        "login": "QbitsCode",
        "id": 99557903,
        "node_id": "U_kgDOBe8iDw",
        "avatar_url": "https://avatars.githubusercontent.com/u/99557903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/QbitsCode",
        "html_url": "https://github.com/QbitsCode",
        "followers_url": "https://api.github.com/users/QbitsCode/followers",
        "following_url": "https://api.github.com/users/QbitsCode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/QbitsCode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/QbitsCode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/QbitsCode/subscriptions",
        "organizations_url": "https://api.github.com/users/QbitsCode/orgs",
        "repos_url": "https://api.github.com/users/QbitsCode/repos",
        "events_url": "https://api.github.com/users/QbitsCode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/QbitsCode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-13T11:11:26Z",
      "updated_at": "2024-12-13T11:11:26Z",
      "author_association": "NONE",
      "body": "Sorry for coming late with this important PR, we have just shared 3 proposed pqc algorithms that guarantee elimination of quantum computer risk.  \r\n\r\nhttps://delvingbitcoin.org/t/implemented-post-quantum-cryptography-pqc-feature-into-bitcoin-core/1320",
      "user": {
        "login": "QbitsCode",
        "id": 99557903,
        "node_id": "U_kgDOBe8iDw",
        "avatar_url": "https://avatars.githubusercontent.com/u/99557903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/QbitsCode",
        "html_url": "https://github.com/QbitsCode",
        "followers_url": "https://api.github.com/users/QbitsCode/followers",
        "following_url": "https://api.github.com/users/QbitsCode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/QbitsCode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/QbitsCode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/QbitsCode/subscriptions",
        "organizations_url": "https://api.github.com/users/QbitsCode/orgs",
        "repos_url": "https://api.github.com/users/QbitsCode/repos",
        "events_url": "https://api.github.com/users/QbitsCode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/QbitsCode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2541212231",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2541698148,
      "node_id": "IC_kwDOAN28mc6Xfzxk",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2541698148",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-13T15:26:42Z",
      "updated_at": "2024-12-13T15:26:42Z",
      "author_association": "NONE",
      "body": "> Sorry for coming late with this important PR, we have just shared 3 proposed pqc algorithms that guarantee elimination of quantum computer risk.\r\n> \r\n> https://delvingbitcoin.org/t/implemented-post-quantum-cryptography-pqc-feature-into-bitcoin-core/1320\r\n\r\nThat's a great start! I see from [your documentation here](https://github.com/QBlockQ/pqc-bitcoin/blob/main/doc/pqc.md#digital-signatures-coming-soon) you're intending to use the same PQC signature algorithms we've selected, which is validating of the approach recommended for this BIP.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2541698148",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQ1MDAxMjQxYmEwNDllMThhOTFjZDI3MjJiNWU2MTRlYzkzOTkxNGY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d5001241ba049e18a91cd2722b5e614ec939914f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d5001241ba049e18a91cd2722b5e614ec939914f",
      "tree": {
        "sha": "e3d7397a0e1549bb4f8f119a0ed2bed964f6b45c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e3d7397a0e1549bb4f8f119a0ed2bed964f6b45c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e3d7397a0e1549bb4f8f119a0ed2bed964f6b45c\nparent e186b52cff5344c789bc5996de86697e62244323\nauthor Hunter Beast <hunter@cryptoquick.com> 1734104130 -0700\ncommitter GitHub <noreply@github.com> 1734104130 -0700\n\nApply suggestions from code review\n\nCo-authored-by: Ethan Heilman <ethan.r.heilman@gmail.com>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnXFRCCRC1aQ7uu5UhlAAAyhIQAGxMmFmmlE2QCHj9yKfc5u6F\nv++aCuki7YF/vw/F0J0Q+540xvig6abjhDlzCZt28DZo2qL3QvsKsBc9+Lmm3HtQ\nrHBTIzMlBAk2SMldCUuK2zAz0TbpUKkv8i4sqZolDQ7OHRygGtYXhbmGvt2P5fen\n1k46WIzpHJJ4cf8CyeXOF9dDOBdxxjBMgB6u9YPXNYDw769W8Ns5yFxwwpPtblLS\nMkYhkh4KBqhADjS60JbwLVhb7hcgIPX0ZJpha6PZWEgzvxOaqDUA+TV9PeGwHCGK\n8YTV6uUExVqJp6ROubWXJ4tZhGIXQ+Na5U/rOIfP/0EpVQurk3YE+Se4W96IFk26\ngWQIomg+y0QQJm/8hpWNAHos5zpdVVF00eDDjjVx2QxkG2swvBhR1ifnHAam0WEc\n05rJlFbCHObUuQwD6MKuFiqllknOTbpsfPyVPx4JoDxETqyQ58/J2vocyEB3tjcx\nuvdO8BMQPRz0jnrYzryQpK+xgLzpbNdS6NvXCOQRS3BSN10mympecdxxGeG8KjZ8\ncKau7oyMe7Qida/XueMovkAXPPuEirpeIEtM13ix7ubdZ/1gFe43SPiC5Alwm/VV\neeMNp/YT+PW5akb8abQ/SX7+veEK6Je6d7YQwGnBA3f0ogWc3AMyXPuJcUu8HXdg\nmpdU4fHCRkAIoAtvOqNM\n=0Ffw\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e186b52cff5344c789bc5996de86697e62244323",
          "sha": "e186b52cff5344c789bc5996de86697e62244323",
          "html_url": "https://github.com/bitcoin/bips/commit/e186b52cff5344c789bc5996de86697e62244323"
        }
      ],
      "message": "Apply suggestions from code review\n\nCo-authored-by: Ethan Heilman <ethan.r.heilman@gmail.com>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-12-13T15:35:30Z"
      },
      "author": {
        "name": "Hunter Beast",
        "email": "hunter@cryptoquick.com",
        "date": "2024-12-13T15:35:30Z"
      },
      "sha": "d5001241ba049e18a91cd2722b5e614ec939914f"
    },
    {
      "event": "commented",
      "id": 2541736709,
      "node_id": "IC_kwDOAN28mc6Xf9MF",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2541736709",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-13T15:46:25Z",
      "updated_at": "2024-12-13T15:46:25Z",
      "author_association": "NONE",
      "body": "> I want to propose an alternative design. Instead of supporting multiple different signature algorithms in the same output and then inferring algorithm based on public key length. Flag signature algorithm based on address prefix, e.g. addresses that start with `bc1f` only accept FALCON-1024 public keys and signatures.\r\n\r\nThe problem with that approach is that there's only so many OP_NUMs to prefix the address type with for each signature type. If new signature algorithms were added, I would imagine they would be added in batches, so that bc1f would indicate a superset of multiple algorithms.\r\n\r\n> * This makes it straightforward to add new post-quantum signature algorithms and lets you streamline this design by only needing to support one post-quantum signature algorithm.\r\n> * This avoids using length as a signaling mechanism. Currently length works, but what if two algorithms have the same length public key? Do we lengthen one?\r\n\r\nYes, we would lengthen one.\r\n\r\n> * Supporting multiple signature algorithms in the same output is likely to increase complexity for other protocols. Say a payment channel where the two parties are using different signature algorithms. I don't see this as a strong reason not to do this, but I think the BIP needs a justification for this additional complexity.\r\n\r\nIn the case of a payment channel, it's a 2-of-2 multisig agreed to by both parties. If either party finds the signature algorithms proposed unacceptable, the channel simply won't be funded.\r\n\r\n> Is the reason you are doing multisig outside of script, because of the stack element limitations of some these bigger signatures? Are there any issues with the values on the attestation stack being larger than 520?\r\n\r\nPartly for that reason, and also, because I want this to use stricter validation rules than all that script expresses.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2541736709",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDg1YTM0N2I1YTIzNmVmZGU3NmRkNzZmOTE3NjhkNzgyMGIzMWU5ZTA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/85a347b5a236efde76dd76f91768d7820b31e9e0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/85a347b5a236efde76dd76f91768d7820b31e9e0",
      "tree": {
        "sha": "074ab6ee388d6c474d7b43429c255ee7178f961b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/074ab6ee388d6c474d7b43429c255ee7178f961b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 074ab6ee388d6c474d7b43429c255ee7178f961b\nparent d5001241ba049e18a91cd2722b5e614ec939914f\nauthor Hunter Trujillo <cryptoquick@pm.me> 1734107511 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1734107511 -0700\n\nUpdate to use merkle tree for attestation commitment. Update LR & SR quantum attack scenarios.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ1xhdwAKCRBn2nwXlg36\nz8EJAP9O7uCSk6WFvARo8Jeg2de05kHe2eaCes7sLeVRKrr+KgEA5D7fl6ZvWl3K\nli6zFsAKI4k3H9kDKi0is5qqrjK2cQE=\n=qGqf\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d5001241ba049e18a91cd2722b5e614ec939914f",
          "sha": "d5001241ba049e18a91cd2722b5e614ec939914f",
          "html_url": "https://github.com/bitcoin/bips/commit/d5001241ba049e18a91cd2722b5e614ec939914f"
        }
      ],
      "message": "Update to use merkle tree for attestation commitment. Update LR & SR quantum attack scenarios.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-13T16:31:51Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-13T16:31:51Z"
      },
      "sha": "85a347b5a236efde76dd76f91768d7820b31e9e0"
    },
    {
      "event": "review_requested",
      "id": 15650997152,
      "node_id": "RRE_lADOAN28mc6YMAnczwAAAAOk30Og",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15650997152",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-13T16:34:51Z",
      "requested_reviewer": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2544834722,
      "node_id": "IC_kwDOAN28mc6Xrxii",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2544834722",
      "actor": {
        "login": "junaga",
        "id": 35770913,
        "node_id": "MDQ6VXNlcjM1NzcwOTEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/35770913?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/junaga",
        "html_url": "https://github.com/junaga",
        "followers_url": "https://api.github.com/users/junaga/followers",
        "following_url": "https://api.github.com/users/junaga/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/junaga/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/junaga/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/junaga/subscriptions",
        "organizations_url": "https://api.github.com/users/junaga/orgs",
        "repos_url": "https://api.github.com/users/junaga/repos",
        "events_url": "https://api.github.com/users/junaga/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/junaga/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-16T07:50:28Z",
      "updated_at": "2024-12-16T07:50:28Z",
      "author_association": "NONE",
      "body": "Hi, Sorry for the ping, This is too complicated for me. Is there no way to simplify or generalize this?",
      "user": {
        "login": "junaga",
        "id": 35770913,
        "node_id": "MDQ6VXNlcjM1NzcwOTEz",
        "avatar_url": "https://avatars.githubusercontent.com/u/35770913?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/junaga",
        "html_url": "https://github.com/junaga",
        "followers_url": "https://api.github.com/users/junaga/followers",
        "following_url": "https://api.github.com/users/junaga/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/junaga/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/junaga/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/junaga/subscriptions",
        "organizations_url": "https://api.github.com/users/junaga/orgs",
        "repos_url": "https://api.github.com/users/junaga/repos",
        "events_url": "https://api.github.com/users/junaga/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/junaga/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2544834722",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2546412114,
      "node_id": "IC_kwDOAN28mc6XxypS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2546412114",
      "actor": {
        "login": "QbitsCode",
        "id": 99557903,
        "node_id": "U_kgDOBe8iDw",
        "avatar_url": "https://avatars.githubusercontent.com/u/99557903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/QbitsCode",
        "html_url": "https://github.com/QbitsCode",
        "followers_url": "https://api.github.com/users/QbitsCode/followers",
        "following_url": "https://api.github.com/users/QbitsCode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/QbitsCode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/QbitsCode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/QbitsCode/subscriptions",
        "organizations_url": "https://api.github.com/users/QbitsCode/orgs",
        "repos_url": "https://api.github.com/users/QbitsCode/repos",
        "events_url": "https://api.github.com/users/QbitsCode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/QbitsCode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-16T19:03:01Z",
      "updated_at": "2024-12-16T19:03:18Z",
      "author_association": "NONE",
      "body": "Yesterday, we pushed it with a simplified and holistic version.",
      "user": {
        "login": "QbitsCode",
        "id": 99557903,
        "node_id": "U_kgDOBe8iDw",
        "avatar_url": "https://avatars.githubusercontent.com/u/99557903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/QbitsCode",
        "html_url": "https://github.com/QbitsCode",
        "followers_url": "https://api.github.com/users/QbitsCode/followers",
        "following_url": "https://api.github.com/users/QbitsCode/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/QbitsCode/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/QbitsCode/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/QbitsCode/subscriptions",
        "organizations_url": "https://api.github.com/users/QbitsCode/orgs",
        "repos_url": "https://api.github.com/users/QbitsCode/repos",
        "events_url": "https://api.github.com/users/QbitsCode/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/QbitsCode/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2546412114",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2546503597,
      "node_id": "IC_kwDOAN28mc6XyI-t",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2546503597",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-16T19:34:23Z",
      "updated_at": "2024-12-16T19:34:23Z",
      "author_association": "NONE",
      "body": "> Hi, Sorry for the ping, This is too complicated for me. Is there no way to simplify or generalize this?\r\n\r\nPerhaps a good summary is this:\r\n\r\nIn this BIP we suggest a new address format beginning with bc1r that introduces the capability for users to generate addresses that can receive payments signed using quantum-resistant keys and signatures.\r\n\r\nIt really is that simple, but there are the details for why this needs to happen and how it should happen and this tries to cover those in a comprehensive enough manner, or at least, as comprehensive as we can be without test vectors.",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2546503597",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "renamed",
      "id": 15693894736,
      "node_id": "RTE_lADOAN28mc6YMAnczwAAAAOnbdRQ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15693894736",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T22:11:40Z",
      "rename": {
        "from": "QuBit - P2QRH spending rules",
        "to": "BIP draft: QuBit - P2QRH spending rules"
      }
    },
    {
      "event": "commented",
      "id": 2551706449,
      "node_id": "IC_kwDOAN28mc6YF_NR",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2551706449",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:00:18Z",
      "updated_at": "2024-12-18T16:00:18Z",
      "author_association": "NONE",
      "body": "@jonatack Why did you re-add the draft designation? From what I understand, @murchandamus recommended that be changed:\r\nhttps://github.com/bitcoin/bips/pull/1670#issuecomment-2523737288",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2551706449",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 15705634067,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOoIPUT",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705634067",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:00:19Z"
    },
    {
      "event": "subscribed",
      "id": 15705634089,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOoIPUp",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705634089",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:00:20Z"
    },
    {
      "event": "mentioned",
      "id": 15705634124,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOoIPVM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705634124",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:00:20Z"
    },
    {
      "event": "subscribed",
      "id": 15705634147,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOoIPVj",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705634147",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:00:20Z"
    },
    {
      "event": "commented",
      "id": 2551722843,
      "node_id": "IC_kwDOAN28mc6YGDNb",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2551722843",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:07:26Z",
      "updated_at": "2024-12-18T16:09:07Z",
      "author_association": "MEMBER",
      "body": "> @jonatack Why did you re-add the draft designation? From what I understand, @murchandamus recommended that be changed: [#1670 (comment)](https://github.com/bitcoin/bips/pull/1670#issuecomment-2523737288)\r\n\r\nI see. The PR title doesn't refer to the GitHub status of \"draft, not ready for review\", only that it is a BIP draft as yet without a number -- once there is a number, then the title becomes \"BIP \\<number\\>: ...\" instead. I unified a few titles yesterday to make it easier for me to follow the various PRs.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2551722843",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "mentioned",
      "id": 15705745561,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOoIqiZ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705745561",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:07:28Z"
    },
    {
      "event": "subscribed",
      "id": 15705745588,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOoIqi0",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705745588",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:07:28Z"
    },
    {
      "event": "mentioned",
      "id": 15705745609,
      "node_id": "MEE_lADOAN28mc6YMAnczwAAAAOoIqjJ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705745609",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:07:29Z"
    },
    {
      "event": "subscribed",
      "id": 15705745628,
      "node_id": "SE_lADOAN28mc6YMAnczwAAAAOoIqjc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15705745628",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:07:29Z"
    },
    {
      "event": "commented",
      "id": 2551730090,
      "node_id": "IC_kwDOAN28mc6YGE-q",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2551730090",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:10:33Z",
      "updated_at": "2024-12-18T16:10:33Z",
      "author_association": "NONE",
      "body": "Are there any remaining obstacles keeping this from getting a BIP number?",
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2551730090",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "commented",
      "id": 2551739630,
      "node_id": "IC_kwDOAN28mc6YGHTu",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2551739630",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T16:14:52Z",
      "updated_at": "2024-12-18T16:14:52Z",
      "author_association": "MEMBER",
      "body": "I have a range of numbers in mind for QC resistance BIPs to run by the other editors and am re-reviewing here.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#issuecomment-2551739630",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1670"
    },
    {
      "event": "reviewed",
      "id": 2512659485,
      "node_id": "PRR_kwDOAN28mc6VxCQd",
      "url": null,
      "actor": null,
      "commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Assigned BIP number 360.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1670#pullrequestreview-2512659485",
      "submitted_at": "2024-12-18T19:27:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
    },
    {
      "event": "renamed",
      "id": 15707988502,
      "node_id": "RTE_lADOAN28mc6YMAnczwAAAAOoROIW",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15707988502",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T19:28:25Z",
      "rename": {
        "from": "BIP draft: QuBit - P2QRH spending rules",
        "to": "BIP-360: QuBit - P2QRH spending rules"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15709227784,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOoV8sI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15709227784",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9d12258e4f98e62eed9c429ab763be5afd17b997",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/9d12258e4f98e62eed9c429ab763be5afd17b997",
      "created_at": "2024-12-18T21:46:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15709242248,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOoWAOI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15709242248",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "60a3cdc1cf2005c22a3015592d15350dc65f22b0",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/60a3cdc1cf2005c22a3015592d15350dc65f22b0",
      "created_at": "2024-12-18T21:48:34Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDg1MzQ4YzAxZmY4NDBkNzczMDIwMTNkYjA1NDA4OTdmYWZiZDhlNmQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/85348c01ff840d77302013db0540897fafbd8e6d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/85348c01ff840d77302013db0540897fafbd8e6d",
      "tree": {
        "sha": "6a549b74cf74ec72d4d093e2109067ea9deb8772",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6a549b74cf74ec72d4d093e2109067ea9deb8772"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6a549b74cf74ec72d4d093e2109067ea9deb8772\nparent 85a347b5a236efde76dd76f91768d7820b31e9e0\nauthor Hunter Trujillo <cryptoquick@pm.me> 1734558204 -0700\ncommitter Hunter Trujillo <cryptoquick@pm.me> 1734558557 -0700\n\nP2QRH assigned BIP number 360.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRkQQe4PNsaHdVkx/5n2nwXlg36zwUCZ2NDXQAKCRBn2nwXlg36\nzy3GAP0S0p+joWhseeKqKKV3fzmQH6e/TOcqskR2ubvVOVmDXQD8DVYBpAthixPm\nP/BEuO2HnPVzYzkJl+jpFHLe5JZROQ4=\n=IjGX\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/85a347b5a236efde76dd76f91768d7820b31e9e0",
          "sha": "85a347b5a236efde76dd76f91768d7820b31e9e0",
          "html_url": "https://github.com/bitcoin/bips/commit/85a347b5a236efde76dd76f91768d7820b31e9e0"
        }
      ],
      "message": "P2QRH assigned BIP number 360.",
      "committer": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-18T21:49:17Z"
      },
      "author": {
        "name": "Hunter Trujillo",
        "email": "cryptoquick@pm.me",
        "date": "2024-12-18T21:43:24Z"
      },
      "sha": "85348c01ff840d77302013db0540897fafbd8e6d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15709248614,
      "node_id": "HRFPE_lADOAN28mc6YMAnczwAAAAOoWBxm",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15709248614",
      "actor": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "commit_url": "https://api.github.com/repos/cryptoquick/bips/commits/85348c01ff840d77302013db0540897fafbd8e6d",
      "created_at": "2024-12-18T21:49:21Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779153889",
      "pull_request_review_id": 2334631534,
      "id": 1779153889,
      "node_id": "PRRC_kwDOAN28mc5qC7vh",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a post-quantum cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive, but meant to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 46,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It might be worth discussing the conditions under which P2PKH is vulnerable in more detail. While the Deloitte report covers this, this table leaves the impression that P2PKH is safe.\r\n\r\n```suggestion\r\n| P2PKH || No (trusted miner) || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\r\n| P2PKH (reused) || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\r\n```\r\n\r\n",
      "created_at": "2024-09-27T20:55:55Z",
      "updated_at": "2024-09-27T20:55:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779153889",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779153889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779156396",
      "pull_request_review_id": 2334635312,
      "id": 1779156396,
      "node_id": "PRRC_kwDOAN28mc5qC8Ws",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What about public keys that are derived via BIP-32 non-hardened child keys? While the public key is not reused, one might be able to guess and check child keys from revealed public keys and learn the public key for a p2pkh address prior to seeing a signature for that public key. Is there a reason this is not a concern?",
      "created_at": "2024-09-27T20:59:16Z",
      "updated_at": "2024-09-27T20:59:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779156396",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779156396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779190521",
      "pull_request_review_id": 2334683627,
      "id": 1779190521,
      "node_id": "PRRC_kwDOAN28mc5qDEr5",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Reading \"Benchmarking the quantum cryptanalysis of symmetric, public-key and hash-based cryptographic schemes\" it is unclear to me how the number 10^40 for applying Grover to Bitcoin's POW was arrived at in this BIP. It might be worth creating a footnote that details the derivation of this result from that paper.",
      "created_at": "2024-09-27T21:41:32Z",
      "updated_at": "2024-09-27T21:41:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779190521",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779190521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779282281",
      "pull_request_review_id": 2334779205,
      "id": 1779282281,
      "node_id": "PRRC_kwDOAN28mc5qDbFp",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a post-quantum cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive, but meant to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase output in Block 1 back to itself. It is proposed to call this the [https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee Canary address]. The reasoning behind this is that this can only be done by Satoshi, and given his absence, this can only be spent by others if there is a significant vulnerability in secp256k1. Should the Canary coins move, that will signal that bitcoin is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined.\n+\n+It's for this reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more than 50 bitcoin are kept under a single distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is assuming that the attacker is financially-motivated instead of, for example, a nation state looking to break confidence in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their cryptography already.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be upgraded by 2030, with browsers and operating systems fully upgraded by 2033.\n+\n+Lastly, it is worth noting by way of comparison that [https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32 seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for bitcoin.\n+\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and the capital B represents its connection to bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to remember that these are [r]esistant addresses, similar to how bc1q corresponds to Se[q]Wit and bc1p corresponds to Ta[p]root. This is referencing the lookup table under [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with post-quantum cryptography. This is a form of \"hybrid cryptography\" such that no regression in security is presented should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR however is that P2QRH will encode a hash of the public key. This is a significant change in how Taproot works, but is necessary to avoid exposing public keys on-chain in advance of attackers.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in [https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the witness discount.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one done on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user adoption and general user-friendliness, the most secure variant (NIST V, 256 bit) is proposed, despite the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly.  It must be resistant to applications that might take advantage of this discount (e.g. storage of arbitrary data as seen with \"inscriptions\") without a corresponding increase in economic activity. Such an increase would not only impact node runners but those with inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent this while also increasing the discount is to have a completely separate witness, a quantum witness, or \"quitness,\" that is solely responsible for providing post-quantum signatures.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the quitness stack. Multiple signatures can be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 quitness, arbitrary data cannot be added by miners, as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a Taproot witness. Doing the work to meet the requirement for it to be consensus-valid data would prove cost-prohibitive.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for bitcoin ecosystem devs to go from a single cryptosystem implementation to two distinct cryptosystems-- and it most certainly is-- the ramifications of a chain broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere signatures are used should be seen as an acceptable compromise for maintained integrity of bitcoin transfers during a regime of quantum advantage.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing, while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+\n+== Description ==\n+\n+We first build up a definition of the signature scheme by going through the design choices. Afterwards, we specify the exact encodings and operations.\n+\n+\n+=== Design ===\n+\n+For P2QRH descriptors, <code>qrh()</code> should be used.\n+\n+> Further specific details to be completed later in the draft process as outlined in [https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki BIP-2]\n+\n+\n+== Security ==\n+\n+{|\n+|+ Proposed quantum resistant signature algorithms ordered by largest to smallest signature size, NIST I\n+|-\n+! Signature algorithm !! Year first introduced !! Signature size, NIST I !! Public key size, NIST I\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 7856 bytes || 32 bytes\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 2420 bytes || 1312 bytes\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 702 bytes || 752 bytes\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 666 bytes || 897 bytes\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 652 bytes || 1006 bytes\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 177 bytes || 64 bytes\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 148 bytes || 66 bytes\n+|-\n+| [https://link.springer.com/content/pdf/10.1007/978-3-031-58716-0_1.pdf SQIsignHD] || 2024 || 109 bytes || not provided\n+|}\n+\n+{|\n+|+ Proposed quantum resistant signature algorithms ordered by largest to smallest signature size, NIST V\n+|-\n+! Signature algorithm !! Year first introduced !! Signature size, NIST V !! Public key size, NIST V\n+|-\n+| Lamport signature || 1977 || 8192 bytes || 16384 bytes\n+|-\n+| SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA) || 2015 || 29792 bytes || 64 bytes\n+|-\n+| CRYSTALS-Dilithium (FIPS 204 - ML-DSA) || 2017 || 4595 bytes || 2592 bytes\n+|-\n+| pqNTRUsign || 2016 || 1814 bytes || 1927 bytes\n+|-\n+| FALCON (FIPS 206 - FN-DSA) || 2017 || 1280 bytes || 1793 bytes\n+|-\n+| HAWK || 2022 || 1261 bytes || 2329 bytes\n+|-\n+| SQIsign || 2023 || 335 bytes || 128 bytes\n+|-\n+| SQIsign2D-West || 2024 || 294 bytes || 130 bytes\n+|-\n+| SQIsignHD || 2023 || not provided || not provided\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is approved for production use. Meanwhile, FALCON signatures are already approved and have achieved broader community consensus.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA - 70-72 bytes\n+* Schnorr - 64 bytes\n+\n+In comparison to year, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was chosen as bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support [https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR addresses. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it might be possible to implement Isogeny Schnorr signatures.\n+\n+Signature verification speed as it compares to Schnorr or ECDSA isn't seen as high a consideration as signature size due to block space being the primary fee constraint. As a P2QRH implementation materializes, a benchmark will be added for performance comparison. Fortunately, SQIsign signatures are substantially faster to verify than it is to generate keys or to sign, which is a major consideration when a transaction need only be signed once, or a handful of times with PSBT, compared to being verified simultaneously on tens of thousands of nodes. Key generation may need to cached in [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32 HD wallets].\n+\n+An additional consideration is security levels. Longer signature sizes provide more security. NIST has standardized five security levels for post-quantum cryptography. NIST security level I provides security equivalent to 128-bit keys, and security level V provides 256-bit security.\n+\n+\n+== Specification ==\n+\n+How the quitness is differentiated from the witness can be accomplished similar to how [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Transaction_ID BIP-141] introduced the marker and flag, with the QuBit flag being set to 0x02. This means all QuBit transactions are also SegWit transactions. The additional data would be included as a second array of byte arrays following the witness stack.\n+\n+The new transaction serialization format would be as follows:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][quitness][nLockTime]\n+\n+WIP\n+\n+=== Public Key Generation ===\n+\n+TBD, pending test vectors\n+\n+=== Public Key Conversion ===\n+\n+TBD\n+\n+=== Default Signing ===\n+\n+TBD\n+\n+=== Alternative Signing ===\n+\n+TBD\n+\n+=== Verification ===\n+\n+TBD\n+\n+=== Batch Verification ===\n+\n+TBD\n+\n+=== Usage Considerations ===\n+\n+TBD\n+\n+== Test Vectors and Reference Code ==\n+\n+TBD\n+\n+\n+== References ==\n+\n+* [https://groups.google.com/g/bitcoindev/c/Aee8xKuIC2s/m/cu6xej1mBQAJ Mailing list discussion]\n+* [https://delvingbitcoin.org/t/proposing-a-p2qrh-bip-towards-a-quantum-resistant-soft-fork/956?u=cryptoquick Delving Bitcoin discussion]\n+* [https://bitcoinops.org/en/newsletters/2024/06/14/ Bitcoin OpTech newsletter]\n+* [https://bitcoinops.org/en/podcast/2024/06/18/#draft-bip-for-quantum-safe-address-format Bitcoin OpTech discussion transcript]\n+\n+<references />\n+\n+\n+== Changelog ==\n+\n+To help implementors understand updates to this BIP, we keep a list of substantial changes.\n+\n+* 2024-06: High level rough draft\n+* 2024-07: Additional algorithms in PQC table\n+* 2024-08: Add FALCON signatures, update to use NIST standard terminology, add public key sizes.\n+* 2024-09: Additional detail on P2QS. Deprecate P2QR. Postpone SQIsign. Add details on quitness.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 235,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A few non-urgent nits regarding the changelog:\r\n\r\n- latest version first\r\n- use [semvar](https://semver.org/); for the final draft, maybe these should be collapsed to one initial version entry\r\n- YYYY-MM-DD date format\r\n\r\n(See https://keepachangelog.com and https://www.gnu.org/prep/standards/html_node/Style-of-Change-Logs)",
      "created_at": "2024-09-27T22:54:52Z",
      "updated_at": "2024-09-27T22:57:59Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779282281",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779282281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779592875",
      "pull_request_review_id": 2335182157,
      "id": 1779592875,
      "node_id": "PRRC_kwDOAN28mc5qEm6r",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779156396,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That is a concern I haven't considered. I'll be sure to add that.",
      "created_at": "2024-09-28T15:09:20Z",
      "updated_at": "2024-09-28T15:09:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779592875",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779592875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779606859",
      "pull_request_review_id": 2335204810,
      "id": 1779606859,
      "node_id": "PRRC_kwDOAN28mc5qEqVL",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a post-quantum cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive, but meant to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 46,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779153889,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I'd like to structure that information differently, similar to how I did so on this slide:\r\n![Screenshot from 2024-09-28 09-10-37](https://github.com/user-attachments/assets/b83fac54-d811-4c99-8430-31a822c2a957)\r\nI'll also need to add a 5th case: Unhardened BIP-32 HD wallet keys",
      "created_at": "2024-09-28T15:11:50Z",
      "updated_at": "2024-09-28T15:11:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779606859",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779606859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779726567",
      "pull_request_review_id": 2335386298,
      "id": 1779726567,
      "node_id": "PRRC_kwDOAN28mc5qFHjn",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a post-quantum cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive, but meant to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 46,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779153889,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This should be resolved now. Let me know if it's not.",
      "created_at": "2024-09-28T18:02:39Z",
      "updated_at": "2024-09-28T18:02:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779726567",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779726567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779726638",
      "pull_request_review_id": 2335386383,
      "id": 1779726638,
      "node_id": "PRRC_kwDOAN28mc5qFHku",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a post-quantum cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive, but meant to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase output in Block 1 back to itself. It is proposed to call this the [https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee Canary address]. The reasoning behind this is that this can only be done by Satoshi, and given his absence, this can only be spent by others if there is a significant vulnerability in secp256k1. Should the Canary coins move, that will signal that bitcoin is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined.\n+\n+It's for this reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more than 50 bitcoin are kept under a single distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is assuming that the attacker is financially-motivated instead of, for example, a nation state looking to break confidence in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their cryptography already.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be upgraded by 2030, with browsers and operating systems fully upgraded by 2033.\n+\n+Lastly, it is worth noting by way of comparison that [https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32 seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for bitcoin.\n+\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and the capital B represents its connection to bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to remember that these are [r]esistant addresses, similar to how bc1q corresponds to Se[q]Wit and bc1p corresponds to Ta[p]root. This is referencing the lookup table under [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with post-quantum cryptography. This is a form of \"hybrid cryptography\" such that no regression in security is presented should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR however is that P2QRH will encode a hash of the public key. This is a significant change in how Taproot works, but is necessary to avoid exposing public keys on-chain in advance of attackers.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in [https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the witness discount.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one done on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user adoption and general user-friendliness, the most secure variant (NIST V, 256 bit) is proposed, despite the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly.  It must be resistant to applications that might take advantage of this discount (e.g. storage of arbitrary data as seen with \"inscriptions\") without a corresponding increase in economic activity. Such an increase would not only impact node runners but those with inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent this while also increasing the discount is to have a completely separate witness, a quantum witness, or \"quitness,\" that is solely responsible for providing post-quantum signatures.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the quitness stack. Multiple signatures can be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 quitness, arbitrary data cannot be added by miners, as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a Taproot witness. Doing the work to meet the requirement for it to be consensus-valid data would prove cost-prohibitive.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for bitcoin ecosystem devs to go from a single cryptosystem implementation to two distinct cryptosystems-- and it most certainly is-- the ramifications of a chain broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere signatures are used should be seen as an acceptable compromise for maintained integrity of bitcoin transfers during a regime of quantum advantage.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing, while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+\n+== Description ==\n+\n+We first build up a definition of the signature scheme by going through the design choices. Afterwards, we specify the exact encodings and operations.\n+\n+\n+=== Design ===\n+\n+For P2QRH descriptors, <code>qrh()</code> should be used.\n+\n+> Further specific details to be completed later in the draft process as outlined in [https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki BIP-2]\n+\n+\n+== Security ==\n+\n+{|\n+|+ Proposed quantum resistant signature algorithms ordered by largest to smallest signature size, NIST I\n+|-\n+! Signature algorithm !! Year first introduced !! Signature size, NIST I !! Public key size, NIST I\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 7856 bytes || 32 bytes\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 2420 bytes || 1312 bytes\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 702 bytes || 752 bytes\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 666 bytes || 897 bytes\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 652 bytes || 1006 bytes\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 177 bytes || 64 bytes\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 148 bytes || 66 bytes\n+|-\n+| [https://link.springer.com/content/pdf/10.1007/978-3-031-58716-0_1.pdf SQIsignHD] || 2024 || 109 bytes || not provided\n+|}\n+\n+{|\n+|+ Proposed quantum resistant signature algorithms ordered by largest to smallest signature size, NIST V\n+|-\n+! Signature algorithm !! Year first introduced !! Signature size, NIST V !! Public key size, NIST V\n+|-\n+| Lamport signature || 1977 || 8192 bytes || 16384 bytes\n+|-\n+| SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA) || 2015 || 29792 bytes || 64 bytes\n+|-\n+| CRYSTALS-Dilithium (FIPS 204 - ML-DSA) || 2017 || 4595 bytes || 2592 bytes\n+|-\n+| pqNTRUsign || 2016 || 1814 bytes || 1927 bytes\n+|-\n+| FALCON (FIPS 206 - FN-DSA) || 2017 || 1280 bytes || 1793 bytes\n+|-\n+| HAWK || 2022 || 1261 bytes || 2329 bytes\n+|-\n+| SQIsign || 2023 || 335 bytes || 128 bytes\n+|-\n+| SQIsign2D-West || 2024 || 294 bytes || 130 bytes\n+|-\n+| SQIsignHD || 2023 || not provided || not provided\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is approved for production use. Meanwhile, FALCON signatures are already approved and have achieved broader community consensus.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA - 70-72 bytes\n+* Schnorr - 64 bytes\n+\n+In comparison to year, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was chosen as bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support [https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR addresses. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it might be possible to implement Isogeny Schnorr signatures.\n+\n+Signature verification speed as it compares to Schnorr or ECDSA isn't seen as high a consideration as signature size due to block space being the primary fee constraint. As a P2QRH implementation materializes, a benchmark will be added for performance comparison. Fortunately, SQIsign signatures are substantially faster to verify than it is to generate keys or to sign, which is a major consideration when a transaction need only be signed once, or a handful of times with PSBT, compared to being verified simultaneously on tens of thousands of nodes. Key generation may need to cached in [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32 HD wallets].\n+\n+An additional consideration is security levels. Longer signature sizes provide more security. NIST has standardized five security levels for post-quantum cryptography. NIST security level I provides security equivalent to 128-bit keys, and security level V provides 256-bit security.\n+\n+\n+== Specification ==\n+\n+How the quitness is differentiated from the witness can be accomplished similar to how [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Transaction_ID BIP-141] introduced the marker and flag, with the QuBit flag being set to 0x02. This means all QuBit transactions are also SegWit transactions. The additional data would be included as a second array of byte arrays following the witness stack.\n+\n+The new transaction serialization format would be as follows:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][quitness][nLockTime]\n+\n+WIP\n+\n+=== Public Key Generation ===\n+\n+TBD, pending test vectors\n+\n+=== Public Key Conversion ===\n+\n+TBD\n+\n+=== Default Signing ===\n+\n+TBD\n+\n+=== Alternative Signing ===\n+\n+TBD\n+\n+=== Verification ===\n+\n+TBD\n+\n+=== Batch Verification ===\n+\n+TBD\n+\n+=== Usage Considerations ===\n+\n+TBD\n+\n+== Test Vectors and Reference Code ==\n+\n+TBD\n+\n+\n+== References ==\n+\n+* [https://groups.google.com/g/bitcoindev/c/Aee8xKuIC2s/m/cu6xej1mBQAJ Mailing list discussion]\n+* [https://delvingbitcoin.org/t/proposing-a-p2qrh-bip-towards-a-quantum-resistant-soft-fork/956?u=cryptoquick Delving Bitcoin discussion]\n+* [https://bitcoinops.org/en/newsletters/2024/06/14/ Bitcoin OpTech newsletter]\n+* [https://bitcoinops.org/en/podcast/2024/06/18/#draft-bip-for-quantum-safe-address-format Bitcoin OpTech discussion transcript]\n+\n+<references />\n+\n+\n+== Changelog ==\n+\n+To help implementors understand updates to this BIP, we keep a list of substantial changes.\n+\n+* 2024-06: High level rough draft\n+* 2024-07: Additional algorithms in PQC table\n+* 2024-08: Add FALCON signatures, update to use NIST standard terminology, add public key sizes.\n+* 2024-09: Additional detail on P2QS. Deprecate P2QR. Postpone SQIsign. Add details on quitness.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 235,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779282281,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sounds good. Let me know if my latest changes have resolved this.",
      "created_at": "2024-09-28T18:03:11Z",
      "updated_at": "2024-09-28T18:03:11Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779726638",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779726638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779728051",
      "pull_request_review_id": 2335387619,
      "id": 1779728051,
      "node_id": "PRRC_kwDOAN28mc5qFH6z",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Those figures were provided by Pierre-Luc, along with the relevant paper. I've included a footnote with his comments.\r\n\r\n",
      "created_at": "2024-09-28T18:10:58Z",
      "updated_at": "2024-09-28T18:10:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779728051",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779728051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779807924",
      "pull_request_review_id": 2335484424,
      "id": 1779807924,
      "node_id": "PRRC_kwDOAN28mc5qFba0",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I completely agree with your claim that: \r\n> It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\r\n\r\nThe math in the footnote is for finding SHA256 preimages, but the text and cited article discusses Bitcoin mining/POW which is only a partial preimage, e.g. find SHA256 output with 75 zeros in front. These partial preimages should be not as hard as finding a full SHA256 preimage.\r\n\r\nThe quantum safety of Bitcoin POW is a an open question. Is a quantum computer than can do the POW significantly faster than a classic miner an attack or simply better mining technology? Are there other quantum attacks on Bitcoin mining?\r\n\r\nI would frame this as symmetric cryptography in Bitcoin, such as preimages in the transactions Merkle tree, rather than mining.",
      "created_at": "2024-09-28T22:09:45Z",
      "updated_at": "2024-09-28T22:09:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779807924",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779807924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779918823",
      "pull_request_review_id": 2335705303,
      "id": 1779918823,
      "node_id": "PRRC_kwDOAN28mc5qF2fn",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Very interesting. I'll be sure to include that nuance.",
      "created_at": "2024-09-29T06:15:28Z",
      "updated_at": "2024-09-29T06:15:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779918823",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779918823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779947292",
      "pull_request_review_id": 2335742734,
      "id": 1779947292,
      "node_id": "PRRC_kwDOAN28mc5qF9cc",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've reworked the paragraph. Let me know if that works. The 95 zeros figure came from the `log2_work` message from Bitcoin Core in the latest block... Let me know if that's not right.",
      "created_at": "2024-09-29T07:23:38Z",
      "updated_at": "2024-09-29T07:23:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1779947292",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1779947292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1780170002",
      "pull_request_review_id": 2335996978,
      "id": 1780170002,
      "node_id": "PRRC_kwDOAN28mc5qGz0S",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Log2 work is [the total work from the genesis block all the way to that current block](https://bitcoin.stackexchange.com/a/116486 ) not a measure of work of that block alone.\r\n\r\nBitcoin PoW per hash is ~700 Exahash/second. That roughly $log2(700 * 10^{18} )=2^{68.2}$ per second and $2^{74.5}$ per block. 75 zero bits would more the accurate current number.\r\n\r\nThere is a big difference between the cost of preimages on SHA256 and HASH160 with a quadratic reduction: \r\nSHA256 as you point out is $2^{128} \\approx 10^{40}$ but HASH160 used in P2PKH is  $2^{80} \\approx 10^{24}$. Still much larger than ECC, but I wanted to call this out because it is unlikely we will ever build a computer classical or quantum that can do $2^{128}$ within the next 100 years whereas Bitcoin currently does $2^{80}$ every 30 minutes. \r\n\r\nIf I didn't misunderstand [\"Applying Grover's Algorithm to Hash Functions\"](https://arxiv.org/pdf/2202.10982) the cost of a groover preimage attack on a n-bit hash function where you are trying to want to find 1 preimage out of a set of k preimages is $\\sqrt{2^{n-\\log2{(k)}}}$. Let's say we are looking for any preimage of a P2PKH output. [As of Sept 29 2024](https://bitaps.com/statistic/outputs) there are 53,102,992 P2PKH in Bitcoin's UTXO set. This gets us an attack cost of $\\sqrt{2^{160-25.66}}=2^{67.17} \\approx 10^{20}$.\r\n\r\nAll of this still supports your argument that the current pressing need in Bitcoin is ECC. It worth having tighter bounds, so we know when we are in danger for the symmetric side of Bitcoin.\r\n\r\n\r\n\r\n",
      "created_at": "2024-09-29T20:56:55Z",
      "updated_at": "2024-09-29T20:56:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1780170002",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1780170002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1780193350",
      "pull_request_review_id": 2336030169,
      "id": 1780193350,
      "node_id": "PRRC_kwDOAN28mc5qG5hG",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "All very good points. I'll make sure those are reflected in the BIP.",
      "created_at": "2024-09-29T22:31:33Z",
      "updated_at": "2024-09-29T22:31:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1780193350",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1780193350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1780957226",
      "pull_request_review_id": 2337254602,
      "id": 1780957226,
      "node_id": "PRRC_kwDOAN28mc5qJ0Aq",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've published some more updates you can see here: \r\n\r\nhttps://github.com/bitcoin/bips/compare/eae4707e74805435e3e57d0bb1902d9313955ef3..19d45929a2229b03d26503b6530eeed1524ff31f\r\n\r\nAlso, is P2WPKH not also as vulnerable as P2PKH? I think they both use HASH160, do they not?",
      "created_at": "2024-09-30T11:38:16Z",
      "updated_at": "2024-09-30T11:38:17Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1780957226",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1780957226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781089592",
      "pull_request_review_id": 2337478700,
      "id": 1781089592,
      "node_id": "PRRC_kwDOAN28mc5qKUU4",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes P2WPKH, P2PKH, P2SH all use HASH160 (20 Byte) whereas P2WSH uses SHA256 (32 Byte).\r\n\r\nThanks for the updates and making the changes. My main concern is that if precise numbers are going to be used for Bitcoin and Groovers I want to avoid a situation where the numbers are not representative of the threat. I suspect many people in Bitcoin will use this BIP to educate themselves on quantum attacks. I'll write up a longer comment during my lunch break today.",
      "created_at": "2024-09-30T13:01:44Z",
      "updated_at": "2024-09-30T13:01:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1781089592",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781089592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781133437",
      "pull_request_review_id": 2337556440,
      "id": 1781133437,
      "node_id": "PRRC_kwDOAN28mc5qKfB9",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779156396,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Let me know if this is sufficient:\r\nhttps://github.com/bitcoin/bips/pull/1670/files?short_path=917a32a#diff-917a32a71b69bf62d7c85dfb13d520a0340a30a2889b015b82d36411ed45e754:~:text=If%20a%20key%20is%20recovered%20by%20a%20CRQC%2C%20it%20can%20also%20be%20trivially%20checked%20to%20see%20if%20any%20child%20keys%20were%20produced%20using%20an%20unhardened%20BIP%2D32%20derivation%20path.\r\n\r\nIt's also been added to the new table for scenarios for revealed public keys on bitcoin.",
      "created_at": "2024-09-30T13:29:23Z",
      "updated_at": "2024-09-30T13:29:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1781133437",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781133437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781509175",
      "pull_request_review_id": 2338191441,
      "id": 1781509175,
      "node_id": "PRRC_kwDOAN28mc5qL6w3",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I realize by pointing out the nuances I've accidentally caused this section to grow into two large paragraphs, when really all you are trying to do make is the reasonable point that quantum attacks on ECC signatures should be the most immediate concern.\r\n\r\nHere is my attempt to get the same point across but without having to get into the details:\r\n\r\n\r\n> The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its uses of ECC (Ecliptic Curve Cryptography) used in Bitcoin's signatures and Taproot commitments]. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 ≈ 2^26) quantum operations. While a QRQC could use Grover's algorithm to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more power quantum computer is needed for these attacks to meaningfully impact Bitcoin. For instance a preimage attack on HASH160 using Grover's algorithm would require at least 10^24 ≈ 2^80 quantum operations.\r\n\r\n\r\nIt does make sense to discuss Grover's algorithm w.r.t. multi-target preimage attacks against P2SH and P2PKH when discussing the security of address types against a QRQC.",
      "created_at": "2024-09-30T17:24:37Z",
      "updated_at": "2024-09-30T17:24:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1781509175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781509175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781873035",
      "pull_request_review_id": 2338756440,
      "id": 1781873035,
      "node_id": "PRRC_kwDOAN28mc5qNTmL",
      "diff_hunk": "@@ -0,0 +1,274 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's. Grover's potentially requires roughly 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC, should no optimization for partial preimages be needed. Partial preimage optimization may lower the difficulty to find a block than the full 256-bit preimage (say, for a number with 75 zero bits in front).<ref>See [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques on Bitcoin mining].</ref> Regardless of such optimizations, the primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its signature algorithm] and not necessarily Proof of Work, hence the focus on a new address format. Additionally, should quantum mining demonstrate quantum advantage over ASIC miners, miners will transition to operating CRQCs instead.<ref>Grover's algorithm is a quadratic speedup, so instead of 2^256 tries it takes about 2^128 calls to the oracle (which is about 10^38 operations) to get a 256 bit preimage. The number of gates would be some multiple of that number. That's roughly how we get the correct order of magnitude, Mosca did a more finegrained calculation and land ballpark in similar large numbers. The number is so large, it's unclear the exact calculation with all the prefactors so far, contrary to ECC, which is roughly 10^8 operations, including the constant factors. A talk by [https://sam-jaques.appspot.com/papers Sam Jaques] gave some estimate of the size of the machine that would be necessary for Grover to attack hashes and it was a small astronomical body.</ref>\n+\n+It is worth mentioning that any addresses using RIPEMD160 / HASH160 could also be vulnerable to Grover's algorithm.<ref>There is a big difference between the cost of preimages on SHA256 and HASH160 with a quadratic reduction:\n+SHA256 is 2^128 ≈ 10^40 but HASH160 used in P2PKH and P2WPKH is 2^80 ≈ 10^24 quantum operations. This is much larger than ECC, and while it is unlikely a classical or quantum computer that can perform 2^128 within the next 100 years, Bitcoin currently does 2^80 classical operations every 30 minutes. Additionally, with Grover's, [https://bitcoin.stackexchange.com/a/115849/139611 a black box function could sidestep Shor's entirely, and SHA-256, providing the private key itself to a P2PKH or P2SH address.]</ref>\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 34,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "7f4456de30db2528bcfc1dddbbc3c7533169646a",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Another vulnerability estimation in early 2019: 5M-10M bitcoin\r\n\r\nhttps://x.com/pwuille/status/1108097835365339136",
      "created_at": "2024-09-30T23:02:34Z",
      "updated_at": "2024-09-30T23:02:34Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1781873035",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781873035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781979561",
      "pull_request_review_id": 2338917603,
      "id": 1781979561,
      "node_id": "PRRC_kwDOAN28mc5qNtmp",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a post-quantum cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive, but meant to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase output in Block 1 back to itself. It is proposed to call this the [https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee Canary address]. The reasoning behind this is that this can only be done by Satoshi, and given his absence, this can only be spent by others if there is a significant vulnerability in secp256k1. Should the Canary coins move, that will signal that bitcoin is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined.\n+\n+It's for this reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more than 50 bitcoin are kept under a single distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is assuming that the attacker is financially-motivated instead of, for example, a nation state looking to break confidence in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their cryptography already.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be upgraded by 2030, with browsers and operating systems fully upgraded by 2033.\n+\n+Lastly, it is worth noting by way of comparison that [https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32 seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for bitcoin.\n+\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and the capital B represents its connection to bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to remember that these are [r]esistant addresses, similar to how bc1q corresponds to Se[q]Wit and bc1p corresponds to Ta[p]root. This is referencing the lookup table under [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with post-quantum cryptography. This is a form of \"hybrid cryptography\" such that no regression in security is presented should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR however is that P2QRH will encode a hash of the public key. This is a significant change in how Taproot works, but is necessary to avoid exposing public keys on-chain in advance of attackers.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in [https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the witness discount.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one done on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user adoption and general user-friendliness, the most secure variant (NIST V, 256 bit) is proposed, despite the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly.  It must be resistant to applications that might take advantage of this discount (e.g. storage of arbitrary data as seen with \"inscriptions\") without a corresponding increase in economic activity. Such an increase would not only impact node runners but those with inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent this while also increasing the discount is to have a completely separate witness, a quantum witness, or \"quitness,\" that is solely responsible for providing post-quantum signatures.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through byte length. The public key and signature will be pushed separately to the quitness stack. Multiple signatures can be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 quitness, arbitrary data cannot be added by miners, as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a Taproot witness. Doing the work to meet the requirement for it to be consensus-valid data would prove cost-prohibitive.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for bitcoin ecosystem devs to go from a single cryptosystem implementation to two distinct cryptosystems-- and it most certainly is-- the ramifications of a chain broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere signatures are used should be seen as an acceptable compromise for maintained integrity of bitcoin transfers during a regime of quantum advantage.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing, while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+\n+== Description ==\n+\n+We first build up a definition of the signature scheme by going through the design choices. Afterwards, we specify the exact encodings and operations.\n+\n+\n+=== Design ===\n+\n+For P2QRH descriptors, <code>qrh()</code> should be used.\n+\n+> Further specific details to be completed later in the draft process as outlined in [https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki BIP-2]\n+\n+\n+== Security ==\n+\n+{|\n+|+ Proposed quantum resistant signature algorithms ordered by largest to smallest signature size, NIST I\n+|-\n+! Signature algorithm !! Year first introduced !! Signature size, NIST I !! Public key size, NIST I\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 7856 bytes || 32 bytes\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 2420 bytes || 1312 bytes\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 702 bytes || 752 bytes\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 666 bytes || 897 bytes\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 652 bytes || 1006 bytes\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 177 bytes || 64 bytes\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 148 bytes || 66 bytes\n+|-\n+| [https://link.springer.com/content/pdf/10.1007/978-3-031-58716-0_1.pdf SQIsignHD] || 2024 || 109 bytes || not provided\n+|}\n+\n+{|\n+|+ Proposed quantum resistant signature algorithms ordered by largest to smallest signature size, NIST V\n+|-\n+! Signature algorithm !! Year first introduced !! Signature size, NIST V !! Public key size, NIST V\n+|-\n+| Lamport signature || 1977 || 8192 bytes || 16384 bytes\n+|-\n+| SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA) || 2015 || 29792 bytes || 64 bytes\n+|-\n+| CRYSTALS-Dilithium (FIPS 204 - ML-DSA) || 2017 || 4595 bytes || 2592 bytes\n+|-\n+| pqNTRUsign || 2016 || 1814 bytes || 1927 bytes\n+|-\n+| FALCON (FIPS 206 - FN-DSA) || 2017 || 1280 bytes || 1793 bytes\n+|-\n+| HAWK || 2022 || 1261 bytes || 2329 bytes\n+|-\n+| SQIsign || 2023 || 335 bytes || 128 bytes\n+|-\n+| SQIsign2D-West || 2024 || 294 bytes || 130 bytes\n+|-\n+| SQIsignHD || 2023 || not provided || not provided\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is approved for production use. Meanwhile, FALCON signatures are already approved and have achieved broader community consensus.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA - 70-72 bytes\n+* Schnorr - 64 bytes\n+\n+In comparison to year, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was chosen as bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support [https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR addresses. Additionally, isogeny-based post-quantum cryptography is based on higher-order elliptic curves, and so it might be possible to implement Isogeny Schnorr signatures.\n+\n+Signature verification speed as it compares to Schnorr or ECDSA isn't seen as high a consideration as signature size due to block space being the primary fee constraint. As a P2QRH implementation materializes, a benchmark will be added for performance comparison. Fortunately, SQIsign signatures are substantially faster to verify than it is to generate keys or to sign, which is a major consideration when a transaction need only be signed once, or a handful of times with PSBT, compared to being verified simultaneously on tens of thousands of nodes. Key generation may need to cached in [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32 HD wallets].\n+\n+An additional consideration is security levels. Longer signature sizes provide more security. NIST has standardized five security levels for post-quantum cryptography. NIST security level I provides security equivalent to 128-bit keys, and security level V provides 256-bit security.\n+\n+\n+== Specification ==\n+\n+How the quitness is differentiated from the witness can be accomplished similar to how [https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Transaction_ID BIP-141] introduced the marker and flag, with the QuBit flag being set to 0x02. This means all QuBit transactions are also SegWit transactions. The additional data would be included as a second array of byte arrays following the witness stack.\n+\n+The new transaction serialization format would be as follows:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][quitness][nLockTime]\n+\n+WIP\n+\n+=== Public Key Generation ===\n+\n+TBD, pending test vectors\n+\n+=== Public Key Conversion ===\n+\n+TBD\n+\n+=== Default Signing ===\n+\n+TBD\n+\n+=== Alternative Signing ===\n+\n+TBD\n+\n+=== Verification ===\n+\n+TBD\n+\n+=== Batch Verification ===\n+\n+TBD\n+\n+=== Usage Considerations ===\n+\n+TBD\n+\n+== Test Vectors and Reference Code ==\n+\n+TBD\n+\n+\n+== References ==\n+\n+* [https://groups.google.com/g/bitcoindev/c/Aee8xKuIC2s/m/cu6xej1mBQAJ Mailing list discussion]\n+* [https://delvingbitcoin.org/t/proposing-a-p2qrh-bip-towards-a-quantum-resistant-soft-fork/956?u=cryptoquick Delving Bitcoin discussion]\n+* [https://bitcoinops.org/en/newsletters/2024/06/14/ Bitcoin OpTech newsletter]\n+* [https://bitcoinops.org/en/podcast/2024/06/18/#draft-bip-for-quantum-safe-address-format Bitcoin OpTech discussion transcript]\n+\n+<references />\n+\n+\n+== Changelog ==\n+\n+To help implementors understand updates to this BIP, we keep a list of substantial changes.\n+\n+* 2024-06: High level rough draft\n+* 2024-07: Additional algorithms in PQC table\n+* 2024-08: Add FALCON signatures, update to use NIST standard terminology, add public key sizes.\n+* 2024-09: Additional detail on P2QS. Deprecate P2QR. Postpone SQIsign. Add details on quitness.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 235,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779282281,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Looks good for now, thank you.",
      "created_at": "2024-10-01T00:29:55Z",
      "updated_at": "2024-10-01T00:29:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1781979561",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781979561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781994737",
      "pull_request_review_id": 2338939886,
      "id": 1781994737,
      "node_id": "PRRC_kwDOAN28mc5qNxTx",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779190521,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thank you for that. I've made some edits and replaced the other sections with that. Here's the diff:\r\nhttps://github.com/bitcoin/bips/compare/7f4456de30db2528bcfc1dddbbc3c7533169646a..d83c29d59b78443e20a040395ca23777bfc332f1",
      "created_at": "2024-10-01T01:04:12Z",
      "updated_at": "2024-10-01T01:04:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1781994737",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781994737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781995162",
      "pull_request_review_id": 2338940555,
      "id": 1781995162,
      "node_id": "PRRC_kwDOAN28mc5qNxaa",
      "diff_hunk": "@@ -0,0 +1,274 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm]. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's. Grover's potentially requires roughly 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC, should no optimization for partial preimages be needed. Partial preimage optimization may lower the difficulty to find a block than the full 256-bit preimage (say, for a number with 75 zero bits in front).<ref>See [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques on Bitcoin mining].</ref> Regardless of such optimizations, the primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its signature algorithm] and not necessarily Proof of Work, hence the focus on a new address format. Additionally, should quantum mining demonstrate quantum advantage over ASIC miners, miners will transition to operating CRQCs instead.<ref>Grover's algorithm is a quadratic speedup, so instead of 2^256 tries it takes about 2^128 calls to the oracle (which is about 10^38 operations) to get a 256 bit preimage. The number of gates would be some multiple of that number. That's roughly how we get the correct order of magnitude, Mosca did a more finegrained calculation and land ballpark in similar large numbers. The number is so large, it's unclear the exact calculation with all the prefactors so far, contrary to ECC, which is roughly 10^8 operations, including the constant factors. A talk by [https://sam-jaques.appspot.com/papers Sam Jaques] gave some estimate of the size of the machine that would be necessary for Grover to attack hashes and it was a small astronomical body.</ref>\n+\n+It is worth mentioning that any addresses using RIPEMD160 / HASH160 could also be vulnerable to Grover's algorithm.<ref>There is a big difference between the cost of preimages on SHA256 and HASH160 with a quadratic reduction:\n+SHA256 is 2^128 ≈ 10^40 but HASH160 used in P2PKH and P2WPKH is 2^80 ≈ 10^24 quantum operations. This is much larger than ECC, and while it is unlikely a classical or quantum computer that can perform 2^128 within the next 100 years, Bitcoin currently does 2^80 classical operations every 30 minutes. Additionally, with Grover's, [https://bitcoin.stackexchange.com/a/115849/139611 a black box function could sidestep Shor's entirely, and SHA-256, providing the private key itself to a P2PKH or P2SH address.]</ref>\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 34,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "7f4456de30db2528bcfc1dddbbc3c7533169646a",
      "in_reply_to_id": 1781873035,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thank you for that, I've added that link as a reference.",
      "created_at": "2024-10-01T01:05:06Z",
      "updated_at": "2024-10-01T01:05:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1781995162",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1781995162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838800695",
      "pull_request_review_id": 2430740303,
      "id": 1838800695,
      "node_id": "PRRC_kwDOAN28mc5tmd83",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 17,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Some of this might fit better in later parts of this document.\r\n\r\nHow about something like this:\r\n\r\n```suggestion\r\nThis document proposes the introduction of a new output type based on FALCON signatures. This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\r\n```\r\n\r\nThe inspiration by BIP 341 could be mentioned in the acknowledgments, and Rationale and Security being the relevant sections to understand the \"Why\" seem natural.",
      "created_at": "2024-11-12T21:32:35Z",
      "updated_at": "2024-11-12T22:09:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838800695",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838800695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838804349",
      "pull_request_review_id": 2430740303,
      "id": 1838804349,
      "node_id": "PRRC_kwDOAN28mc5tme19",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\r\n```",
      "created_at": "2024-11-12T21:36:27Z",
      "updated_at": "2024-11-12T22:09:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838804349",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838804349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838805486",
      "pull_request_review_id": 2430740303,
      "id": 1838805486,
      "node_id": "PRRC_kwDOAN28mc5tmfHu",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 31,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons] even more might be vulnerable.\r\n```",
      "created_at": "2024-11-12T21:37:40Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838805486",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838805486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838807880",
      "pull_request_review_id": 2430740303,
      "id": 1838807880,
      "node_id": "PRRC_kwDOAN28mc5tmftI",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 35,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is this not just a question of time? If the security of the DLP is broken, eventually it could be broken in the time between submission of a transaction and its confirmation. Anyway, an attacker could simply outspend the victim’s transaction to buy more time.",
      "created_at": "2024-11-12T21:39:59Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838807880",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838807880"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838810043",
      "pull_request_review_id": 2430740303,
      "id": 1838810043,
      "node_id": "PRRC_kwDOAN28mc5tmgO7",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Relying on mining pools to keep transactions private does not feel like a viable security assumption.",
      "created_at": "2024-11-12T21:41:44Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838810043",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838810043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838810917",
      "pull_request_review_id": 2430740303,
      "id": 1838810917,
      "node_id": "PRRC_kwDOAN28mc5tmgcl",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a Post-Quantum Cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 37,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Rather, this new output type would be expected not be vulnerable at all?",
      "created_at": "2024-11-12T21:42:35Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838810917",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838810917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838813896",
      "pull_request_review_id": 2430740303,
      "id": 1838813896,
      "node_id": "PRRC_kwDOAN28mc5tmhLI",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a Post-Quantum Cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 39,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This feels like it is oversimplifying a bit. This seems to show output types that are generally vulnerable to _long-range_ attacks. Additionally, any reused hash-based addresses are also vulnerable to long-range attacks, and all of the output types below are vulnerable to short-range attacks.\r\n\r\nEdit: I see, it is clarified briefly later. Perhaps it would make sense to reorder a bit here.\r\n\r\n```suggestion\r\nThe following table is non-exhaustive but intended to inform the average bitcoin user whether their bitcoin is vulnerable to a long-range quantum attack.\r\n```",
      "created_at": "2024-11-12T21:45:45Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838813896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838813896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838815771",
      "pull_request_review_id": 2430740303,
      "id": 1838815771,
      "node_id": "PRRC_kwDOAN28mc5tmhob",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a Post-Quantum Cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of attack the underlying addresses are vulnerable to:\n+\n+{|\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except bc1r) || Long-range",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What is \"bc1r\"? It has not been introduced at this point.",
      "created_at": "2024-11-12T21:47:37Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838815771",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838815771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838819872",
      "pull_request_review_id": 2430740303,
      "id": 1838819872,
      "node_id": "PRRC_kwDOAN28mc5tmiog",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a Post-Quantum Cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of attack the underlying addresses are vulnerable to:\n+\n+{|\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except bc1r) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for bc1r) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase output in Block 1 back to itself. It is proposed to call the address in Block 1 the [https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 81,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As of earlier this month, ₿1,723,848 were held in P2PK outputs.",
      "created_at": "2024-11-12T21:51:55Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838819872",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838819872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838822897",
      "pull_request_review_id": 2430740303,
      "id": 1838822897,
      "node_id": "PRRC_kwDOAN28mc5tmjXx",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a Post-Quantum Cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of attack the underlying addresses are vulnerable to:\n+\n+{|\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except bc1r) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for bc1r) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase output in Block 1 back to itself. It is proposed to call the address in Block 1 the [https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more than 50 bitcoin are kept under a single distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is assuming that the attacker is financially-motivated instead of, for example, a nation state looking to break confidence in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their cryptography already.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be upgraded by 2030, with browsers and operating systems fully upgraded by 2033.\n+\n+Lastly, it is worth noting by way of comparison that [https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32 seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for bitcoin.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 87,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Some of this Motivation section could appear in \"Related Work\" or \"backward compatibility\".",
      "created_at": "2024-11-12T21:55:04Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838822897",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838822897"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838825430",
      "pull_request_review_id": 2430740303,
      "id": 1838825430,
      "node_id": "PRRC_kwDOAN28mc5tmj_W",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a Post-Quantum Cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of attack the underlying addresses are vulnerable to:\n+\n+{|\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except bc1r) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for bc1r) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase output in Block 1 back to itself. It is proposed to call the address in Block 1 the [https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more than 50 bitcoin are kept under a single distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is assuming that the attacker is financially-motivated instead of, for example, a nation state looking to break confidence in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their cryptography already.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be upgraded by 2030, with browsers and operating systems fully upgraded by 2033.\n+\n+Lastly, it is worth noting by way of comparison that [https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32 seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for bitcoin.\n+\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and the capital B refers to bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to remember that these are quantum [r]esistant addresses (similar to how bc1q corresponds to Se[q]Wit and bc1p corresponds to Ta[p]root). This is referencing the lookup table under [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with post-quantum cryptography. This is a form of \"hybrid cryptography\" such that no regression in security is presented should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 98,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does it then even make sense to base the new output type on Taproot rather than e.g. P2WPKH?",
      "created_at": "2024-11-12T21:57:37Z",
      "updated_at": "2024-11-12T22:09:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1838825430",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1838825430"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1851167052",
      "pull_request_review_id": 2449999639,
      "id": 1851167052,
      "node_id": "PRRC_kwDOAN28mc5uVpFM",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise funds would need to be spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering the key behind high value addresses. A long-range quantum attack can be considered one performed with chain data, such as that from a used address or one encoded in a spend script. A \"short-range quantum attack\" would be one performed on keys in the mempool, which is seen as impractical given transaction throughput and block time. As the value being sent increases, so too should the fee in order to commit the transaction to the chain as soon as possible.  This makes useless the public key revealed by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a Post-Quantum Cryptographic (PQC) signature algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by reducing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average bitcoin user whether their bitcoin is vulnerable to quantum attack.\n+\n+{|\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 || 0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of attack the underlying addresses are vulnerable to:\n+\n+{|\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except bc1r) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for bc1r) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase output in Block 1 back to itself. It is proposed to call the address in Block 1 the [https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so it's possible there are between 1-2 million coins that are vulnerable from the first epoch. These coins can be considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be considered incentive incompatible to capture until all of these are mined.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more than 50 bitcoin are kept under a single distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is assuming that the attacker is financially-motivated instead of, for example, a nation state looking to break confidence in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their cryptography already.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be upgraded by 2030, with browsers and operating systems fully upgraded by 2033.\n+\n+Lastly, it is worth noting by way of comparison that [https://ethresear.ch/t/how-to-hard-fork-to-save-most-users-funds-in-a-quantum-emergency/18901 Vitalik Buterin's proposed solution] in an Ethereum quantum emergency is quite different from the approach in this BIP. His plan involves a hard fork of the chain, reverting all blocks after a sufficient amount of theft, and using STARKs based on BIP-32 seeds to act as the authoritative secret when signing. These measures are deemed far too heavy-handed for bitcoin.\n+\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and the capital B refers to bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to remember that these are quantum [r]esistant addresses (similar to how bc1q corresponds to Se[q]Wit and bc1p corresponds to Ta[p]root). This is referencing the lookup table under [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with post-quantum cryptography. This is a form of \"hybrid cryptography\" such that no regression in security is presented should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 98,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": 1838825430,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There's already things that use taptrees where this kind of cryptographic commitment scheme would be adequate, such as for RGB. It would be nice to also be able to rely on Schnorr signature aggregation even in cases where its security has to be augmented by PQC. Do you know of anything that could be broken if the public key isn't known in advance? Like MuSig2 or FROST?",
      "created_at": "2024-11-21T00:47:15Z",
      "updated_at": "2024-11-21T00:47:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1851167052",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1851167052"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1851177983",
      "pull_request_review_id": 2450015091,
      "id": 1851177983,
      "node_id": "PRRC_kwDOAN28mc5uVrv_",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size is necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks generally considered to be to its breaking of ECC used in signatures and Taproot commitments], hence the focus on a new address format. This is because Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in roughly 10^8 quantum operations. While a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a quadratic speed up on brute force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160<ref>used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes</ref> using Grover's algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see [https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques post on this].\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now closer to 20%. Additionally, cryptographer Peter Wuille estimates even more might be vulnerable, for the reasons provided [https://x.com/pwuille/status/1108085284862713856 here].\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the transaction public key to attackers.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "53d497e376f499c210bce4980e28d8f503b9a2b9",
      "in_reply_to_id": 1838810043,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agreed, which is why P2QRH is preferable. It's still worth mentioning, but I'll be sure to explain this is the entire purpose of P2QRH, to essentially keep the mempool trustless.",
      "created_at": "2024-11-21T01:05:31Z",
      "updated_at": "2024-11-21T01:05:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1851177983",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1851177983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873731137",
      "pull_request_review_id": 2485453691,
      "id": 1873731137,
      "node_id": "PRRC_kwDOAN28mc5vrt5B",
      "diff_hunk": "@@ -0,0 +1,592 @@\n+<pre>\n+  BIP: TBD",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 2,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "f2426c66569a93b393da0f9a9d535184306640d1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit:\r\n```suggestion\r\n  BIP: ?\r\n```",
      "created_at": "2024-12-06T17:19:10Z",
      "updated_at": "2024-12-06T18:12:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1873731137",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873731137"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873731390",
      "pull_request_review_id": 2485453691,
      "id": 1873731390,
      "node_id": "PRRC_kwDOAN28mc5vrt8-",
      "diff_hunk": "@@ -0,0 +1,592 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 3,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "f2426c66569a93b393da0f9a9d535184306640d1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should mention that it’s a soft fork:\r\n\r\n```suggestion\r\n  Layer: <Consensus (soft fork)\r\n  Title: QuBit: SegWit version 3 spending rules (P2QRH)\r\n```",
      "created_at": "2024-12-06T17:19:27Z",
      "updated_at": "2024-12-06T18:12:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1873731390",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873731390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873733035",
      "pull_request_review_id": 2485453691,
      "id": 1873733035,
      "node_id": "PRRC_kwDOAN28mc5vruWr",
      "diff_hunk": "@@ -0,0 +1,592 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 10,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "f2426c66569a93b393da0f9a9d535184306640d1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The preamble is order sensitive:\r\n\r\n```suggestion\r\n  Created: 2024-06-08\r\n  License: BSD-3-Clause\r\n```",
      "created_at": "2024-12-06T17:20:55Z",
      "updated_at": "2024-12-06T18:12:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1873733035",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873733035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 9,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873737346",
      "pull_request_review_id": 2485453691,
      "id": 1873737346,
      "node_id": "PRRC_kwDOAN28mc5vrvaC",
      "diff_hunk": "@@ -0,0 +1,592 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of Bitcoin's signature security should the Discrete Logarithm\n+Problem (DLP), which secures Elliptic Curve Cryptography (ECC), no longer prove to be computationally hard, likely\n+through quantum advantage by Cryptoanalytically-Relevant Quantum Computers (CRQCs).\n+[https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the\n+private key from a public key exponentially faster than classical means. The application of this variant of Shor's\n+algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a\n+hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of\n+this is investigated further in the paper,\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks\n+generally considered to be their potential to break ECC, which is used in signatures and Taproot commitments], hence",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 38,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "f2426c66569a93b393da0f9a9d535184306640d1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This feels like a partial repetition of lines 29–31. Perhaps the prior lines should be folded into this introduction of the issue.",
      "created_at": "2024-12-06T17:24:45Z",
      "updated_at": "2024-12-06T18:12:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1873737346",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873737346"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 37,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873738896",
      "pull_request_review_id": 2485453691,
      "id": 1873738896,
      "node_id": "PRRC_kwDOAN28mc5vrvyQ",
      "diff_hunk": "@@ -0,0 +1,592 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of Bitcoin's signature security should the Discrete Logarithm\n+Problem (DLP), which secures Elliptic Curve Cryptography (ECC), no longer prove to be computationally hard, likely\n+through quantum advantage by Cryptoanalytically-Relevant Quantum Computers (CRQCs).\n+[https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the\n+private key from a public key exponentially faster than classical means. The application of this variant of Shor's\n+algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a\n+hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of\n+this is investigated further in the paper,\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+The primary threat to Bitcoin by CRQCs is [https://en.bitcoin.it/wiki/Quantum_computing_and_Bitcoin#QC_attacks\n+generally considered to be their potential to break ECC, which is used in signatures and Taproot commitments], hence\n+the focus on a new address format. Shor's algorithm enables a CRQC to break the cryptographic assumptions of ECC in\n+roughly 10^8 quantum operations.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 49,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "f2426c66569a93b393da0f9a9d535184306640d1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Most output types require the public key is explicitly stated in the input script and it doesn’t even have to be recovered from the signature.",
      "created_at": "2024-12-06T17:26:14Z",
      "updated_at": "2024-12-06T18:12:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1873738896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873738896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873799105",
      "pull_request_review_id": 2485453691,
      "id": 1873799105,
      "node_id": "PRRC_kwDOAN28mc5vr-fB",
      "diff_hunk": "@@ -0,0 +1,609 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+__TOC__",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 13,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "2e4ad811cfb048d8399730fde15f3f701969b4e1",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n```\r\nThe TOC is generated automatically in the richtext view:\r\n\r\n![image](https://github.com/user-attachments/assets/466e33a6-64e1-4b5d-b857-8681d4d3565e)",
      "created_at": "2024-12-06T18:06:20Z",
      "updated_at": "2024-12-06T18:12:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1873799105",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1873799105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879211380",
      "pull_request_review_id": 2494122656,
      "id": 1879211380,
      "node_id": "PRRC_kwDOAN28mc5wAn10",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nnot to reveal the transaction public key to attackers.\r\n```\r\nSuggest removing unnecessary sentence. If you disagree, resolve this comment.",
      "created_at": "2024-12-11T02:05:27Z",
      "updated_at": "2024-12-12T00:50:37Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1879211380",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879211380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 54,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879248187",
      "pull_request_review_id": 2494122656,
      "id": 1879248187,
      "node_id": "PRRC_kwDOAN28mc5wAw07",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Did you mean `fee market` rather than `free market`?",
      "created_at": "2024-12-11T02:49:45Z",
      "updated_at": "2024-12-12T00:50:37Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1879248187",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879248187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879250821",
      "pull_request_review_id": 2494122656,
      "id": 1879250821,
      "node_id": "PRRC_kwDOAN28mc5wAxeF",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 72,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nvulnerable to a long-range quantum attack:\r\n```",
      "created_at": "2024-12-11T02:54:21Z",
      "updated_at": "2024-12-12T00:50:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1879250821",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879250821"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879255239",
      "pull_request_review_id": 2494122656,
      "id": 1879255239,
      "node_id": "PRRC_kwDOAN28mc5wAyjH",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 115,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'd suggest that readability would be improved by having a subsection titled something like \"Long Range and Short Range Quantum Attacks\" that defines this terminology and consequences are introduced upfront.\r\n\r\nSomething like:\r\n\r\n## Long Range and Short Range Quantum Attacks\r\n- **Long Range Quantum Attack** is an attack in which ...\r\n- **Short  Range Quantum Attack** is an attack in which ...\r\n\r\nIf you disagree with this suggestion, just mark this comment as resolved.",
      "created_at": "2024-12-11T03:00:10Z",
      "updated_at": "2024-12-12T00:50:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1879255239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1879255239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881140873",
      "pull_request_review_id": 2494122656,
      "id": 1881140873,
      "node_id": "PRRC_kwDOAN28mc5wH-6J",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 319,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe specific quantum-resistant signature algorithm used is inferred from the length of the public key.\r\n```\r\n\r\nIf we infer the signature algorithm from the public key alone, then we will reject a signature which has the wrong length for that algorithm. This makes error handling easier and the output commits to the signature algorithm.\r\n\r\nWhereas if we infer the signature algorithm from the public key and the signature then if one of them is wrong, we don't know the intended signature algorithm.",
      "created_at": "2024-12-11T23:09:28Z",
      "updated_at": "2024-12-12T00:50:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1881140873",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881140873"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881141857",
      "pull_request_review_id": 2494122656,
      "id": 1881141857,
      "node_id": "PRRC_kwDOAN28mc5wH_Jh",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported algorithms and their NIST Level V parameters:",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 322,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Below you discuss supporting `secp256k1` as an algorithm for this output. It should probably be included in this list.",
      "created_at": "2024-12-11T23:10:52Z",
      "updated_at": "2024-12-12T00:50:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1881141857",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881141857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 322,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881206909",
      "pull_request_review_id": 2494122656,
      "id": 1881206909,
      "node_id": "PRRC_kwDOAN28mc5wIPB9",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. This includes classical Schnorr signatures.\n+\n+==== Public Key Hashing ====\n+\n+All public keys included in the attestation are hashed using HASH256 (double SHA-256). The concatenation of these\n+hashes is then hashed again using HASH256 before being included in the <code>scriptPubKey</code>. This ensures a\n+fixed-size commitment to potentially multiple public keys of varying lengths.\n+\n+==== Hash Computation ====\n+\n+hash = HASH256(HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN))\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> by concatenating the <code>HASH256</code> of each provided public key:\n+\n+  hashed_pubkeys = HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN)\n+\n+* Compute <code>computed_hash</code>:\n+\n+  computed_hash = HASH256(hashed_pubkeys)\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security and is supported.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 29,792\n+bytes || 64 bytes || Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/484.pdf XMSS]<ref name=\"xmss\">XMSS, which is based on Winternitz, uses a value of 108\n+for its most compact signature size, with only a 4.6x (2.34/0.51) increase in verification time. Signing and key\n+generation are not considered a significant factor because they are not distributed throughout the entire Bitcoin\n+network, which take place only inside of wallets one time.</ref> || 2011 || 15,384 bytes || 13,568 bytes ||\n+Hash-based cryptography (Winternitz OTS)\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 4,595 bytes || 2,592 bytes ||\n+Lattice cryptography\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 1,814 bytes || 1,927 bytes || Lattice cryptography (NTRU)\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 1,280 bytes || 1,793 bytes || Lattice cryptography\n+(NTRU)\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 1,261 bytes || 2,329 bytes || Lattice cryptography\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 335 bytes || 128 bytes || Supersingular Elliptic Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 294 bytes || 130 bytes || Supersingular Elliptic\n+Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2023/436.pdf SQIsignHD] || 2023 || 109 bytes (NIST Level I) || Not provided ||\n+Supersingular Elliptic Curve Isogeny\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in\n+post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major\n+constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is\n+approved for production use. Meanwhile, SPHINCS+ and CRYSTALS-Dilithium signatures are already approved and have\n+achieved broader community consensus. FALCON signatures are also NIST approved.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA: 70-72 bytes\n+* Schnorr: 64 bytes\n+\n+In comparison to inception date, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was\n+chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support\n+[https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to\n+replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 524,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What about just using a merklized structure for tapscript so we don't need to depend on signature specifies? The output could be `HASH256(HASH256(pubkey),scriptroot)` where `scriptroot = HASH256(merkletree of scripts)`. You'd get the taproot privacy benefits of not revealing that a script spend path exists when doing a key spend. If no script spend path exists simply choosing scriptroot to be a random number, if a script spend path exists, include a random number as one of the branches of your merkle tree.\r\n\r\nThe main downside of this merklized approach is that each spend has to push an additional 32 bytes. However given the size of post-quantum signatures and public keys, this additional 32 bytes shouldn't matter much.\r\n\r\nhttps://github.com/bitcoin/bips/blob/master/bip-0114.mediawiki",
      "created_at": "2024-12-12T00:44:09Z",
      "updated_at": "2024-12-12T00:50:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1881206909",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881206909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881209471",
      "pull_request_review_id": 2494122656,
      "id": 1881209471,
      "node_id": "PRRC_kwDOAN28mc5wIPp_",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. This includes classical Schnorr signatures.\n+\n+==== Public Key Hashing ====\n+\n+All public keys included in the attestation are hashed using HASH256 (double SHA-256). The concatenation of these\n+hashes is then hashed again using HASH256 before being included in the <code>scriptPubKey</code>. This ensures a\n+fixed-size commitment to potentially multiple public keys of varying lengths.\n+\n+==== Hash Computation ====\n+\n+hash = HASH256(HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN))\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> by concatenating the <code>HASH256</code> of each provided public key:\n+\n+  hashed_pubkeys = HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN)\n+\n+* Compute <code>computed_hash</code>:\n+\n+  computed_hash = HASH256(hashed_pubkeys)\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security and is supported.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 447,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": null,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What about using a STARK over all the post-quantum signatures included in a block by the miner to accelerate verification? Is there anything about this design that would prevent adding such a feature?",
      "created_at": "2024-12-12T00:47:53Z",
      "updated_at": "2024-12-12T00:51:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1881209471",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1881209471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 447,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1882547707",
      "pull_request_review_id": 2500275746,
      "id": 1882547707,
      "node_id": "PRRC_kwDOAN28mc5wNWX7",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1879211380,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Actually, I think it provides important context and insight as to what P2QRH specifically addresses given the alternative (private miner mempools), but that's just my opinion.",
      "created_at": "2024-12-12T17:02:59Z",
      "updated_at": "2024-12-12T17:03:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1882547707",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1882547707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": 54,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1882574533",
      "pull_request_review_id": 2500315352,
      "id": 1882574533,
      "node_id": "PRRC_kwDOAN28mc5wNc7F",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 68,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1879248187,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not really, but maybe that might make more sense? The fee market is supposed to be a free market.",
      "created_at": "2024-12-12T17:18:10Z",
      "updated_at": "2024-12-12T17:18:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1882574533",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1882574533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884105335",
      "pull_request_review_id": 2502560966,
      "id": 1884105335,
      "node_id": "PRRC_kwDOAN28mc5wTSp3",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 319,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1881140873,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's a good point.",
      "created_at": "2024-12-13T15:29:09Z",
      "updated_at": "2024-12-13T15:29:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1884105335",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884105335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884106684",
      "pull_request_review_id": 2502563043,
      "id": 1884106684,
      "node_id": "PRRC_kwDOAN28mc5wTS-8",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported algorithms and their NIST Level V parameters:",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 322,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1881141857,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I'll just clarify this section is for PQC algorithms.",
      "created_at": "2024-12-13T15:30:08Z",
      "updated_at": "2024-12-13T15:30:08Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1884106684",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884106684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 322,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884111321",
      "pull_request_review_id": 2502570004,
      "id": 1884111321,
      "node_id": "PRRC_kwDOAN28mc5wTUHZ",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. This includes classical Schnorr signatures.\n+\n+==== Public Key Hashing ====\n+\n+All public keys included in the attestation are hashed using HASH256 (double SHA-256). The concatenation of these\n+hashes is then hashed again using HASH256 before being included in the <code>scriptPubKey</code>. This ensures a\n+fixed-size commitment to potentially multiple public keys of varying lengths.\n+\n+==== Hash Computation ====\n+\n+hash = HASH256(HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN))\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> by concatenating the <code>HASH256</code> of each provided public key:\n+\n+  hashed_pubkeys = HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN)\n+\n+* Compute <code>computed_hash</code>:\n+\n+  computed_hash = HASH256(hashed_pubkeys)\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security and is supported.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 29,792\n+bytes || 64 bytes || Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/484.pdf XMSS]<ref name=\"xmss\">XMSS, which is based on Winternitz, uses a value of 108\n+for its most compact signature size, with only a 4.6x (2.34/0.51) increase in verification time. Signing and key\n+generation are not considered a significant factor because they are not distributed throughout the entire Bitcoin\n+network, which take place only inside of wallets one time.</ref> || 2011 || 15,384 bytes || 13,568 bytes ||\n+Hash-based cryptography (Winternitz OTS)\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 4,595 bytes || 2,592 bytes ||\n+Lattice cryptography\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 1,814 bytes || 1,927 bytes || Lattice cryptography (NTRU)\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 1,280 bytes || 1,793 bytes || Lattice cryptography\n+(NTRU)\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 1,261 bytes || 2,329 bytes || Lattice cryptography\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 335 bytes || 128 bytes || Supersingular Elliptic Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 294 bytes || 130 bytes || Supersingular Elliptic\n+Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2023/436.pdf SQIsignHD] || 2023 || 109 bytes (NIST Level I) || Not provided ||\n+Supersingular Elliptic Curve Isogeny\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in\n+post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major\n+constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is\n+approved for production use. Meanwhile, SPHINCS+ and CRYSTALS-Dilithium signatures are already approved and have\n+achieved broader community consensus. FALCON signatures are also NIST approved.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA: 70-72 bytes\n+* Schnorr: 64 bytes\n+\n+In comparison to inception date, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was\n+chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support\n+[https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to\n+replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 524,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1881206909,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's a great point. You're right, we should use a merkle tree to allow branch exclusions. We can distinguish between hashes and x-only public keys because x-only public keys will be accompanied by a signature, whereas a hash would not, and so it would be considered and excluded branch.",
      "created_at": "2024-12-13T15:33:18Z",
      "updated_at": "2024-12-13T15:33:18Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1884111321",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884111321"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884112556",
      "pull_request_review_id": 2502571967,
      "id": 1884112556,
      "node_id": "PRRC_kwDOAN28mc5wTUas",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. This includes classical Schnorr signatures.\n+\n+==== Public Key Hashing ====\n+\n+All public keys included in the attestation are hashed using HASH256 (double SHA-256). The concatenation of these\n+hashes is then hashed again using HASH256 before being included in the <code>scriptPubKey</code>. This ensures a\n+fixed-size commitment to potentially multiple public keys of varying lengths.\n+\n+==== Hash Computation ====\n+\n+hash = HASH256(HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN))\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> by concatenating the <code>HASH256</code> of each provided public key:\n+\n+  hashed_pubkeys = HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN)\n+\n+* Compute <code>computed_hash</code>:\n+\n+  computed_hash = HASH256(hashed_pubkeys)\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security and is supported.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 447,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1881209471,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As we discussed privately, a STARKS-based approach would be out of scope for this BIP, but alternative approaches specified in separate BIPs are certainly welcome.",
      "created_at": "2024-12-13T15:34:16Z",
      "updated_at": "2024-12-13T15:34:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1884112556",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884112556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 447,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884192887",
      "pull_request_review_id": 2502693465,
      "id": 1884192887,
      "node_id": "PRRC_kwDOAN28mc5wToB3",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 115,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1879255239,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done!",
      "created_at": "2024-12-13T16:35:15Z",
      "updated_at": "2024-12-13T16:35:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1884192887",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1884192887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889460220",
      "pull_request_review_id": 2510546176,
      "id": 1889460220,
      "node_id": "PRRC_kwDOAN28mc5wnt_8",
      "diff_hunk": "@@ -0,0 +1,240 @@\n+<pre>\n+  BIP: TBD\n+  Title: QuBit - P2QRH spending rules\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  License: BSD-3-Clause\n+  Created: 2024-06-08\n+</pre>\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes a new SegWit output type, with spending rules based initially-- but not solely-- upon FALCON signatures. (For more on why, see the Rationale and Security sections.) A constraint is that no hard fork or increase in block size are necessary. This document is inspired by [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki BIP-341], which introduced the design of the P2TR (Taproot) address type using Schnorr signatures.\n+\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+\n+=== Motivation ===\n+\n+This proposal aims to improve the quantum resistance of bitcoin's signature security should the Discrete Logarithm Problem (DLP) which secures Elliptic Curve Cryptography (ECC) no longer prove to be computationally hard, likely through quantum advantage by Cryptographically-Relevant Quantum Computers (CRQCs). [https://arxiv.org/pdf/quant-ph/0301141 A variant of Shor's algorithm] is believed to be capable of deriving the private key from a public key exponentially faster than classical means. The application of this variant of Shor's algorithm is herein referred to as quantum key decryption. Note that doubling the public key length, such as with a hypothetical secp512k1 curve, would only make deriving the private key twice as hard. The computational complexity of this is investigated further in the paper, [https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact of hardware specifications on reaching quantum advantage in the fault tolerant regime''].\n+\n+Mining may one day be vulnerable to disruption by very advanced quantum computers making use of Grover's algorithm. However, Grover's [https://arxiv.org/pdf/1902.02332 scales very poorly] compared to Shor's, requiring 10^40 quantum operations in comparison to 10^8 for running Shor's over ECC. It's for this reason that the primary threat to Bitcoin by quantum computers is to its signature algorithm and not Proof of Work, hence the focus on a new address format.\n+\n+The vulnerability of existing bitcoin addresses is investigated in [https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the bitcoin supply is held within addresses vulnerable to quantum attack.\n+\n+Ordinarily, when a transaction is signed, the public key can be recovered from the signature. This makes a transaction submitted to the mempool vulnerable to quantum attack until it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, which bypasses the mempool. This process is known as an out-of-band transaction. The mining pool must be trusted not to reveal the key to attackers.",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "6f67a3d6860921bf869404e14239581c139ff69d",
      "in_reply_to_id": 1779156396,
      "user": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Looks good to me",
      "created_at": "2024-12-18T01:19:48Z",
      "updated_at": "2024-12-18T01:19:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1889460220",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1889460220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1890477463",
      "pull_request_review_id": 2512248782,
      "id": 1890477463,
      "node_id": "PRRC_kwDOAN28mc5wrmWX",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08\n+  License: BSD-3-Clause\n+</pre>\n+\n+\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This document proposes the introduction of a new output type using signatures based on Post-Quantum Cryptography (PQC).\n+This approach for adding a post-quantum secure output type does not require a hard fork or block size increase.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+The primary threat to Bitcoin from Cryptoanalytically-Relevant Quantum Computers (CRQCs) is their potential to break\n+the cryptographic assumptions of Elliptic Curve Cryptography (ECC), which secures Bitcoin's signatures and Taproot\n+commitments. Specifically, [https://arxiv.org/pdf/quant-ph/0301141 Shor's algorithm] enables a CRQC to solve the\n+Discrete Logarithm Problem (DLP) exponentially faster than classical methods<ref name=\"shor\">Shor's algorithm is\n+believed to need 10^8 operations to break a 256-bit elliptic curve public key.</ref>, allowing the derivation of private\n+keys from public keys—a process referred to as quantum key decryption. Importantly, simply increasing the public key\n+length (e.g., using a hypothetical secp512k1 curve) would only make deriving the private key twice as hard, offering\n+insufficient protection. The computational complexity of this attack is further explored in\n+[https://pubs.aip.org/avs/aqs/article/4/1/013801/2835275/The-impact-of-hardware-specifications-on-reaching ''The impact\n+of hardware specifications on reaching quantum advantage in the fault-tolerant regime''].\n+\n+This proposal aims to mitigate these risks by introducing a Pay to Quantum Resistant Hash (P2QRH) address type that\n+relies on post-quantum cryptographic (PQC) signature algorithms. By adopting PQC, Bitcoin can enhance its quantum\n+resistance without requiring a hard fork or block size increase.\n+\n+The vulnerability of existing Bitcoin addresses is investigated in\n+[https://web.archive.org/web/20240715101040/https://www2.deloitte.com/nl/nl/pages/innovatie/artikelen/quantum-computers-\n+and-the-bitcoin-blockchain.html this Deloitte report]. The report estimates that in 2020 approximately 25% of the\n+Bitcoin supply is held within addresses vulnerable to quantum attack. As of the time of writing, that number is now\n+closer to 20%. Additionally, cryptographer Pieter Wuille [https://x.com/pwuille/status/1108085284862713856 reasons]\n+even more might be vulnerable.\n+\n+Ordinarily, when a transaction is signed, the public key is explicitly stated in the input script. This means that the\n+public key is exposed on the blockchain when the transaction is spent, making it vulnerable to quantum attack until\n+it's mined. One way to mitigate this is to submit the transaction directly to a mining pool, bypassing the mempool.\n+This process is known as an out-of-band transaction or a private mempool. In this case, the mining pool must be trusted\n+not to reveal the transaction public key to attackers. The problem with this approach is that it requires a trusted\n+third party, which the P2QRH proposal aims to avoid.\n+\n+Not having public keys exposed on-chain is an important step for quantum security. Otherwise, funds would need to be\n+spent to new addresses on a regular basis in order to prevent the possibility of a \"long-range CRQC attack\" recovering\n+the key behind high-value addresses. A long-range quantum attack can be considered one performed with chain data, such\n+as that from a used address or one encoded in a spend script. This is likely to be more common early on, as early\n+quantum computers must be run for longer in order to overcome errors caused by noise. A \"short-range quantum attack\"\n+would be one performed on keys in the mempool, which is seen as much more difficult given the block time, and so it\n+requires more sophisticated CRQCs. As the value being sent increases, so too should the fee in order to commit the\n+transaction to the chain as soon as possible. Once the transaction is mined, it makes useless the public key revealed\n+by spending a UTXO, so long as it is never reused.\n+\n+It is proposed to implement a Pay to Quantum Resistant Hash (P2QRH) address type that relies on a PQC signature\n+algorithm. This new address type protects transactions submitted to the mempool and helps preserve the free market by\n+preventing the need for private, out-of-band mempool transactions.\n+\n+The following table is non-exhaustive but intended to inform the average Bitcoin user whether their bitcoin is\n+vulnerable to a long-range quantum attack.\n+\n+{| class=\"wikitable\"\n+|+ Vulnerable address types\n+|-\n+! Address type !! Vulnerable !! Prefix !! Example\n+|-\n+| P2PK || Yes || 04 ||\n+0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf\n+2342c858ee\n+|-\n+| P2PKH || No || 1 || 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\n+|-\n+| P2WPKH || No || bc1q || bc1qsnh5ktku9ztqeqfr89yrqjd05eh58nah884mku\n+|-\n+| P2TR || Yes || bc1p || bc1p92aslsnseq786wxfk3ekra90ds9ku47qttupfjsqmmj4z82xdq4q3rr58u\n+|}\n+\n+It should be noted that Taproot addresses are vulnerable in that they encode a 32-byte x-only public key, from which a\n+full public key can be reconstructed.\n+\n+If a key is recovered by a CRQC it can also be trivially checked to see if any child keys were produced using an\n+unhardened [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-32] derivation path.\n+\n+The following table summarizes the scenarios in which public keys are revealed when using Bitcoin and what type of\n+attack the underlying addresses are vulnerable to:\n+\n+{| class=\"wikitable\"\n+|+ Scenarios for revealed public keys on Bitcoin\n+|-\n+! Scenario !! Type of attack\n+|-\n+| Early addresses (Satoshi's coins, CPU miners, starts with 04) || Long-range\n+|-\n+| Reused addresses (any type, except P2QRH) || Long-range\n+|-\n+| Taproot addresses (starts with bc1p) || Long-range\n+|-\n+| Any transaction in the mempool (except for P2QRH) || Short-range\n+|-\n+| Unhardened BIP-32 HD wallet keys || Both Long-range or Short-range\n+|}\n+\n+The only time a short-range attack can occur is when the transaction is in the mempool, whereas a long-range attack\n+occurs when the public key is known well in advance. Short-range attacks require much larger, more expensive CRQCs.\n+\n+Should quantum advantage manifest, a convention is proposed in spending the full 65-byte P2PK key used by the coinbase\n+output in Block 1 back to itself. It is proposed to call the address in Block 1 the\n+[https://mempool.space/address/0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f81\n+41781e62294721166bf621e73a82cbf2342c858ee\n+Canary address] since it can only be spent from by others (assuming Satoshi's continued absence) if secp256k1 is\n+broken. Should the Canary coins move, that will signal that reliance on secp256k1 is presently vulnerable. Without the\n+Canary, or an address like it, there may be some doubt as to whether the coins were moved with keys belonging to the\n+original owner.\n+\n+As an interesting aside, coinbase outputs to P2PK keys go as far as block 200,000, so there are 1,723,848 coins that\n+are vulnerable from the first epoch at the time of writing in P2PK outputs alone. Since the majority of these have a\n+block reward of 50 coins each, there are roughly 34,000 distinct P2PK addresses that are vulnerable. These coins can be\n+considered \"Satoshi's Shield.\" Any addresses with a balance of less than the original block subsidy of 50 coins can be\n+considered incentive incompatible to capture until all of these are mined, and these addresses serve to provide time to\n+transition Bitcoin to implement post-quantum security.\n+\n+It's for the above reason that, for those who wish to be prepared for quantum emergency, it is recommended that no more\n+than 50 bitcoin are kept under a single, distinct, unused Native SegWit (P2WPKH, \"bc1q\") address at a time. This is\n+assuming that the attacker is financially motivated instead of, for example, a nation state looking to break confidence\n+in Bitcoin. Additionally, this assumes that other vulnerable targets such as central banks have upgraded their\n+cryptography by this time.\n+\n+The Commercial National Security Algorithm Suite (CNSA) 2.0 has a timeline for software and networking equipment to be\n+upgraded by 2030, with browsers and operating systems fully upgraded by 2033. According to NIST IR 8547, Elliptic Curve\n+Cryptography is planned to be disallowed within the US Federal government after 2035. An exception is made for hybrid\n+cryptography, which is the use of ECC and post-quantum algorithms together.\n+\n+Although CRQCs could pose a threat to the signatures used in Bitcoin, a smaller threat is to Bitcoin's hash algorithms.\n+In particular, while a CRQC could use [https://en.wikipedia.org/wiki/Grover's_algorithm Grover's algorithm] to gain a\n+quadratic speedup on brute-force attacks on the hash functions used in Bitcoin, a significantly more powerful CRQC is\n+needed for these attacks to meaningfully impact Bitcoin. For instance, a preimage attack on HASH160 <ref name=\"hash160\">\n+Used by P2PKH, P2SH, and P2WPKH addresses, though not P2WSH because it uses 256-bit hashes.</ref> using Grover's\n+algorithm would require at least 10^24 quantum operations. As for Grover's application to mining, see\n+[https://quantumcomputing.stackexchange.com/a/12847 Sam Jaques’ post on this].\n+\n+=== Rationale ===\n+\n+This is the first in a series of BIPs under a QuBit soft fork. A qubit is a fundamental unit of quantum computing, and\n+the capital B refers to Bitcoin. The name QuBit also rhymes to some extent with SegWit.\n+\n+It is proposed to use SegWit version 3. This results in addresses that start with bc1r, which could be a useful way to\n+remember that these are quantum (r)esistant addresses (similar to how bc1q corresponds to Se(q)Wit and bc1p corresponds\n+to Ta(p)root). This is referencing the lookup table under\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173].\n+\n+The proposal above also leaves a gap in case it makes sense to use version 2, or bc1z, for implementation of other\n+address formats such as those that employ Cross Input Signature Aggregation (CISA).\n+\n+P2QRH is meant to be implemented on top of P2TR, combining the security of classical Schnorr signatures along with\n+post-quantum cryptography. This is a form of hybrid cryptography such that no regression in security is presented\n+should a vulnerability exist in one of the signature algorithms used. One key distinction between P2QRH and P2TR\n+however is that P2QRH will encode a hash of the public key. This is a significant deviation from how Taproot works by\n+itself, but it is necessary to avoid exposing public keys on-chain where they are vulnerable to attack.\n+\n+P2QRH uses a 32-byte HASH256 (specifically SHA-256 twice-over, which is similar to that used in\n+[https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki#specification BIP-16]) of the public key to reduce the\n+size of new outputs and also to increase security by not having the public key available on-chain. This hash serves as\n+a minimal cryptographic commitment to a public key. It goes into the output spend script, which does not receive the\n+witness discount.\n+\n+Post-quantum public keys are generally larger than those used by ECC, depending on the security level. To promote user\n+adoption and general user-friendliness, the most secure variant (NIST Level V, 256-bit security) is proposed, despite\n+the increase in key length and verification time.\n+\n+Support for FALCON signatures will be introduced first, with the intention of adding SQIsign and other post-quantum\n+algorithms as they are approved. By way of comparison, FALCON signatures are roughly 4x larger than SQIsign signatures\n+and 20x larger than Schnorr signatures. FALCON is a more conservative approach to applied lattice cryptography than\n+SQIsign, and its use has recently been approved by NIST. NIST approval streamlines implementations through establishing\n+consensus in the scientific and developer community. However, even SQIsign signatures are roughly 5x larger than\n+Schnorr signatures. This means, to maintain present transaction throughput, an increase in the witness discount will\n+likely be desired in a QuBit soft fork. That will be specified in a future QuBit BIP.\n+\n+An increase in the witness discount must not be taken lightly. It must be resistant to applications that might take\n+advantage of this discount (e.g., storage of arbitrary data as seen with \"inscriptions\") without a corresponding\n+increase in economic activity. An increase in the witness discount would not only impact node runners but those with\n+inscriptions would also have the scarcity of their non-monetary assets affected. The only way to prevent these effects\n+while also increasing the discount is to have a completely separate witness—a \"quantum witness.\" Because it is meant\n+only for public keys and signatures, we call this section of the transaction the attestation.\n+\n+To address the risk of arbitrary data being stored using P2QRH (QuBit) addresses, very specific rules will be applied\n+to spending from the witness stack in SegWit v3 outputs. A fixed signature size will be necessary for spending the\n+output, and the output must be spendable to be considered valid within node consensus. A fixed signature size will also\n+be helpful to disambiguate between signature types without an additional version byte, as SQIsign signatures are\n+substantially smaller than FALCON signatures. Consequently, the correct signature algorithm can be inferred through\n+byte length. The public key and signature will be pushed separately to the attestation stack. Multiple signatures can\n+be included in order to support multisig applications, and also for spending multiple inputs.\n+\n+Since only valid signatures can be committed to in a SegWit v3 attestation, arbitrary data cannot be added by miners,\n+as that would affect the consensus of their block. A CRQC operator is economically disincentivized from computing a\n+spendable public key that matched arbitrary signature data due to the cost of that computation. That is because the\n+cost of such a computation could prove quite substantial, rather than simply putting the arbitrary data within a\n+Taproot witness.\n+\n+Additionally, it should be noted, whether an output with a P2QRH spend script corresponds to a FALCON or SQIsign\n+signature is not known until the output is spent.\n+\n+While it might be seen as a maintenance burden for Bitcoin ecosystem devs to go from a single cryptosystem\n+implementation to four additional distinct PQC cryptosystems—and it most certainly is—the ramifications of a chain\n+broken through extrinsic factors should provide sufficient motivation. An increase in software maintenance everywhere\n+signatures are used should be seen as an acceptable compromise for maintained integrity of Bitcoin transfers during a\n+regime of quantum advantage.\n+\n+The inclusion of these four cryptosystems: SPHINCS+, CRYSTALS-Dilithium, FALCON, and SQIsign have various advocates\n+within the community due to their varying security assumptions. Hash-based cryptosystems are more conservative,\n+time-tested, and well-reviewed. Lattice cryptography is relatively new and introduces novel security assumptions to\n+Bitcoin, but their signatures are smaller and might be considered by some to be an adequate alternative to hash-based\n+signatures. SQIsign is much smaller; however, it is based on a very novel form of cryptography known as supersingular\n+elliptic curve quaternion isogeny, and at the time of writing, is not yet approved by NIST or the broader PQC community.\n+\n+In the distant future, following the implementation of the P2QRH address format in a QuBit soft fork, there will likely\n+be a need for Pay to Quantum Secure (P2QS) addresses. These will require specialized quantum hardware for signing,\n+while still [https://quantum-journal.org/papers/q-2023-01-19-901/ using public keys that are verifiable via classical\n+means]. Additional follow-on BIPs will be needed to implement P2QS. However, until specialized quantum cryptography\n+hardware is widespread, quantum resistant addresses should be an adequate intermediate solution.\n+\n+== Specification ==\n+\n+We define the signature scheme and transaction structure as follows.\n+\n+=== Descriptor Format ===\n+\n+To integrate P2QRH into existing wallet software and scripts, we introduce a new output descriptor function\n+<code>qrh()</code>. This function represents a P2QRH output, similar to how <code>wpkh()</code> and <code>tr()</code>\n+are used for P2WPKH and P2TR outputs, respectively.\n+\n+The <code>qrh()</code> function takes the HASH256 of the concatenated HASH256 of the quantum-resistant public keys as\n+its argument. For example:\n+\n+  qrh(HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ...))\n+\n+This function allows wallets to manage P2QRH addresses and outputs while accommodating multiple public keys of varying\n+lengths, such as in multisig schemes, while keeping the public keys hidden until the time of spending.\n+\n+=== Address Format ===\n+\n+P2QRH uses SegWit version 3 outputs, resulting in addresses that start with <code>bc1r</code>, following\n+[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32 BIP-173]. Bech32 encoding maps version 3 to the\n+prefix <code>r</code>.\n+\n+Example P2QRH address:\n+\n+<code>bc1r...</code> (32-byte Bech32m-encoded HASH256 of the HASH256 of the public keys)\n+\n+=== ScriptPubKey ===\n+\n+The <code>scriptPubKey</code> for a P2QRH output is:\n+\n+  OP_PUSHNUM_3 OP_PUSHBYTES_32 <nowiki><hash></nowiki>\n+\n+Where:\n+\n+* <code>OP_PUSHNUM_3</code> (<code>0x03</code>) indicates SegWit version 3.\n+* <nowiki><hash></nowiki> is the 32-byte HASH256 of the concatenated HASH256 of each public key.\n+\n+==== Hash Computation ====\n+\n+  hash = HASH256(HASH256(pubkey1) <nowiki>||</nowiki> HASH256(pubkey2) <nowiki>||</nowiki> ... <nowiki>||</nowiki>\n+  HASH256(pubkeyN))\n+\n+This construction creates a cryptographic commitment to multiple public keys.\n+\n+=== Transaction Serialization ===\n+\n+Following BIP-141, the transaction serialization is modified to include a new attestation field after the witness field:\n+\n+  [nVersion][marker][flag][txins][txouts][witness][attestation][nLockTime]\n+\n+* <code>marker</code>: <code>0x00</code> (same as SegWit)\n+\n+* <code>flag</code>: <code>0x02</code> (indicates the presence of both witness and attestation data)\n+\n+* <code>attestation</code>: Contains the quantum-resistant public keys and signatures.\n+\n+=== Attestation Structure ===\n+\n+The attestation field consists of:\n+\n+* <code>num_pubkeys</code>: The number of public keys (VarInt encoded).\n+\n+For each public key:\n+\n+* <code>pubkey_length</code>: VarInt encoded length of the public key.\n+* <code>pubkey</code>: The public key bytes.\n+\n+Then:\n+\n+* <code>num_signatures</code>: The number of signatures (VarInt encoded).\n+\n+For each signature:\n+\n+* <code>signature_length</code>: VarInt encoded length of the signature.\n+* <code>signature</code>: The signature bytes.\n+\n+This structure repeats for each input, in order, for flexibility in supporting multisig schemes and various\n+quantum-resistant algorithms.\n+\n+For each input, a separate attestation field is used. To know how many attestation fields are present, implementations\n+must count the number of inputs present in the transaction.\n+\n+=== Signature Algorithm Identification ===\n+\n+The specific quantum-resistant signature algorithm used is inferred from the length of the public key and signature.\n+Implementations must recognize the supported algorithms and validate accordingly.\n+\n+Supported algorithms and their NIST Level V parameters:\n+\n+* '''SPHINCS+-256f:'''\n+  * Public Key Length: 64 bytes\n+  * Signature Length: 49,856 bytes\n+* '''CRYSTALS-Dilithium Level 5:'''\n+  * Public Key Length: 2,592 bytes\n+  * Signature Length: 4,595 bytes\n+* '''FALCON-1024:'''\n+  * Public Key Length: 1,793 bytes\n+  * Signature Length: 1,280 bytes\n+* '''SQIsign NIST-V:'''\n+  * Public Key Length: 128 bytes\n+  * Signature Length: 335 bytes\n+\n+Implementations must reject public keys and signatures that do not match expected lengths for supported algorithms.\n+\n+=== Script Validation ===\n+\n+To spend a P2QRH output, the following conditions must be met:\n+\n+1. The <code>scriptPubKey</code> must be of the form:\n+\n+OP_PUSHNUM_3 <32-byte hash>\n+\n+2. The attestation must include:\n+\n+* The quantum-resistant public key(s) whose HASH256 concatenated and hashed again matches the <nowiki><hash></nowiki> in\n+the <code>scriptPubKey</code>.\n+\n+* Valid signatures corresponding to the public key(s) and the transaction data.\n+\n+3. For multi-signature schemes, all required public keys and signatures must be provided for that input within the\n+attestation. This includes classical Schnorr signatures.\n+\n+==== Public Key Hashing ====\n+\n+All public keys included in the attestation are hashed using HASH256 (double SHA-256). The concatenation of these\n+hashes is then hashed again using HASH256 before being included in the <code>scriptPubKey</code>. This ensures a\n+fixed-size commitment to potentially multiple public keys of varying lengths.\n+\n+==== Hash Computation ====\n+\n+hash = HASH256(HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN))\n+\n+==== Sighash Calculation ====\n+\n+The sighash for P2QRH outputs follows the same procedure as defined in BIP-0143 for SegWit transactions:\n+\n+* '''Hash Prevouts:''' Computed over the previous outputs being spent.\n+* '''Hash Sequence:''' Computed over the sequence fields.\n+* '''Hash Outputs:''' Computed over the outputs of the transaction.\n+\n+The message to be signed includes these hashes, ensuring transaction malleability is prevented.\n+\n+==== Signature Verification ====\n+\n+Signature verification is as follows:\n+\n+1. Extract the <nowiki><hash></nowiki> from the <code>scriptPubKey</code>.\n+\n+2. For each input:\n+\n+* Compute <code>hashed_pubkeys</code> by concatenating the <code>HASH256</code> of each provided public key:\n+\n+  hashed_pubkeys = HASH256(pubkey1) || HASH256(pubkey2) || ... || HASH256(pubkeyN)\n+\n+* Compute <code>computed_hash</code>:\n+\n+  computed_hash = HASH256(hashed_pubkeys)\n+\n+* Compare the resulting hash to <nowiki><hash></nowiki>. If they do not match, the script fails.\n+\n+3. Verify each signature against the corresponding public key and the sighash.\n+\n+4. Ensure that the signature algorithm used matches the expected lengths for NIST Level V security and is supported.\n+\n+==== Attestation Parsing Example ====\n+\n+Signing for a single input using both FALCON-1024 and secp256k1 Schnorr:\n+\n+Number of public keys:\n+\n+  [num_pubkeys]: 0x02\n+\n+Pubkey 1:\n+  [pubkey_length]: 0x0701 (1793 bytes)\n+  [pubkey]: public_key_falcon_1024\n+\n+Pubkey 2:\n+  [pubkey_length]: 0x20 (32 bytes)\n+  [pubkey]: public_key_secp256k1\n+\n+Number of signatures:\n+\n+  [num_signatures]: 0x02\n+\n+Signature 1:\n+  [signature_length]: 0x0500 (1280 bytes)\n+  [signature]: signature_falcon_1024\n+\n+Signature 2:\n+  [signature_length]: 0x40 (64 bytes)\n+  [signature]: signature_secp256k1\n+\n+Note: This contrasts with multisig inputs, where the attestation structure repeats for each public key and signature.\n+\n+=== Compatibility with BIP-141 ===\n+\n+By adhering to the SegWit transaction structure and versioning, P2QRH outputs are compatible with existing transaction\n+processing rules. Nodes that do not recognize SegWit version 3 will treat these outputs as anyone-can-spend but, per\n+BIP-141, will not relay or mine such transactions.\n+\n+=== Usage Considerations ===\n+\n+==== Transaction Size and Fees ====\n+\n+Quantum-resistant signatures are significantly larger than traditional signatures, increasing transaction size and the\n+fees required. Users and wallet developers should be aware of this and plan accordingly.\n+\n+For example, for CRYSTALS-Dilithium Level V, a single signature is 4,595 bytes, a substantial increase over current\n+ECDSA or Schnorr signatures.\n+\n+==== Performance Impact ====\n+\n+Verification of quantum-resistant signatures will be computationally more intensive, and any attestation discount will\n+also increase storage requirements. Node operators should consider the potential impact on resource usage in the long\n+term. Developers may need to optimize signature verification implementations, especially by implementing caching for\n+key generation.\n+\n+==== Algorithm Selection ====\n+\n+Introducing four quantum-resistant algorithms to the Bitcoin ecosystem provides users with the option to select an\n+appropriate algorithm for their use case, generally based on the amount of value they wish to secure. Developers can\n+choose to implement support for multiple algorithms in wallets and on nodes to offer quantum-resistant options.\n+\n+==== Backward Compatibility ====\n+\n+Older wallets and nodes that have not been made compatible with SegWit version 3 and P2QRH will not recognize these\n+outputs. Users should ensure they are using updated wallets and nodes to use P2QRH addresses and validate transactions\n+using P2QRH outputs.\n+\n+== Security ==\n+\n+{| class=\"wikitable\"\n+|+ Candidate quantum-resistant signature algorithms ordered by largest to smallest NIST Level V signature size\n+|-\n+! Signature Algorithm !! Year First Introduced !! Signature Size !! Public Key Size !! Cryptographic Assumptions\n+|-\n+| [https://en.wikipedia.org/wiki/Lamport_signature Lamport signature] || 1977 || 8,192 bytes || 16,384 bytes ||\n+Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/191.pdf Winternitz signature] || 1982 || 2,368 bytes<ref name=\"winternitz\">Winternitz\n+signatures are much smaller than Lamport signatures due to efficient chunking, but computation is much higher,\n+especially with high values for w. Winternitz values are for w of 4.</ref> || 2,368 bytes || Hash-based cryptography\n+|-\n+| [https://sphincs.org/data/sphincs+-r3.1-specification.pdf SPHINCS+ Rd. 3.1 (FIPS 205 - SLH-DSA)] || 2015 || 29,792\n+bytes || 64 bytes || Hash-based cryptography\n+|-\n+| [https://eprint.iacr.org/2011/484.pdf XMSS]<ref name=\"xmss\">XMSS, which is based on Winternitz, uses a value of 108\n+for its most compact signature size, with only a 4.6x (2.34/0.51) increase in verification time. Signing and key\n+generation are not considered a significant factor because they are not distributed throughout the entire Bitcoin\n+network, which take place only inside of wallets one time.</ref> || 2011 || 15,384 bytes || 13,568 bytes ||\n+Hash-based cryptography (Winternitz OTS)\n+|-\n+| [https://pq-crystals.org/dilithium/ CRYSTALS-Dilithium (FIPS 204 - ML-DSA)] || 2017 || 4,595 bytes || 2,592 bytes ||\n+Lattice cryptography\n+|-\n+| [https://eprint.iacr.org/2014/457.pdf pqNTRUsign] || 2016 || 1,814 bytes || 1,927 bytes || Lattice cryptography (NTRU)\n+|-\n+| [https://falcon-sign.info FALCON (FIPS 206 - FN-DSA)] || 2017 || 1,280 bytes || 1,793 bytes || Lattice cryptography\n+(NTRU)\n+|-\n+| [https://eprint.iacr.org/2022/1155.pdf HAWK] || 2022 || 1,261 bytes || 2,329 bytes || Lattice cryptography\n+|-\n+| [https://sqisign.org SQIsign] || 2023 || 335 bytes || 128 bytes || Supersingular Elliptic Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2024/760.pdf SQIsign2D-West] || 2024 || 294 bytes || 130 bytes || Supersingular Elliptic\n+Curve Isogeny\n+|-\n+| [https://eprint.iacr.org/2023/436.pdf SQIsignHD] || 2023 || 109 bytes (NIST Level I) || Not provided ||\n+Supersingular Elliptic Curve Isogeny\n+|}\n+\n+As shown, supersingular elliptic curve quaternion isogeny signature algorithms represent the state of the art in\n+post-quantum cryptography, beyond lattice cryptography alone, especially when key and signature length are major\n+constraints. This makes inclusion of SQIsign attractive, and support is planned, but it will be some time until it is\n+approved for production use. Meanwhile, SPHINCS+ and CRYSTALS-Dilithium signatures are already approved and have\n+achieved broader community consensus. FALCON signatures are also NIST approved.\n+\n+In comparison, the size of currently used signature algorithms are:\n+\n+* ECDSA: 70-72 bytes\n+* Schnorr: 64 bytes\n+\n+In comparison to inception date, secp256k1 [https://www.secg.org/SEC1-Ver-1.0.pdf was originally specified in 2000].\n+\n+One consideration for choosing an algorithm is its maturity. secp256k1 was already 8 years old by the time it was\n+chosen as Bitcoin's curve. Isogeny cryptography when it was first introduced was broken over a weekend.\n+\n+Ideally SQIsign also proves to be flexible enough to support\n+[https://www.pierrickdartois.fr/homepage/wp-content/uploads/2022/04/Report_OSIDH_DARTOIS.pdf Isogeny Diffie-Hellman] to\n+replace ECDH applications, and also provide methods for the key tweaking necessary to support TapScript for P2QR",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 524,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "e186b52cff5344c789bc5996de86697e62244323",
      "in_reply_to_id": 1881206909,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That work is done here, btw:\r\nhttps://github.com/bitcoin/bips/pull/1670/files#diff-917a32a71b69bf62d7c85dfb13d520a0340a30a2889b015b82d36411ed45e754R272-R301",
      "created_at": "2024-12-18T15:58:20Z",
      "updated_at": "2024-12-18T15:58:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1890477463",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1890477463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1890719482",
      "pull_request_review_id": 2512659485,
      "id": 1890719482,
      "node_id": "PRRC_kwDOAN28mc5wshb6",
      "diff_hunk": "@@ -0,0 +1,598 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 10,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Please update the BIP number (on line 2), filename, and the created date to 2024-12-18 (date of BIP number assignment) and add a corresponding BIP draft entry to the repo root README file.",
      "created_at": "2024-12-18T19:14:13Z",
      "updated_at": "2024-12-18T19:29:30Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1890719482",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1890719482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1890878149",
      "pull_request_review_id": 2512929513,
      "id": 1890878149,
      "node_id": "PRRC_kwDOAN28mc5wtILF",
      "diff_hunk": "@@ -0,0 +1,598 @@\n+<pre>\n+  BIP: ?\n+  Title: QuBit: SegWit version 3 spending rules (P2QRH)\n+  Layer: <Consensus (soft fork)\n+  Author: Hunter Beast <hunter@surmount.systems>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-TBD\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-06-08",
      "path": "bip-p2qrh.mediawiki",
      "position": null,
      "original_position": 10,
      "commit_id": "85348c01ff840d77302013db0540897fafbd8e6d",
      "original_commit_id": "85a347b5a236efde76dd76f91768d7820b31e9e0",
      "in_reply_to_id": 1890719482,
      "user": {
        "login": "cryptoquick",
        "id": 285690,
        "node_id": "MDQ6VXNlcjI4NTY5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/285690?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cryptoquick",
        "html_url": "https://github.com/cryptoquick",
        "followers_url": "https://api.github.com/users/cryptoquick/followers",
        "following_url": "https://api.github.com/users/cryptoquick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cryptoquick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cryptoquick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cryptoquick/subscriptions",
        "organizations_url": "https://api.github.com/users/cryptoquick/orgs",
        "repos_url": "https://api.github.com/users/cryptoquick/repos",
        "events_url": "https://api.github.com/users/cryptoquick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cryptoquick/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done!",
      "created_at": "2024-12-18T21:49:51Z",
      "updated_at": "2024-12-18T21:49:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1670#discussion_r1890878149",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1890878149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1670"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    }
  ]
}